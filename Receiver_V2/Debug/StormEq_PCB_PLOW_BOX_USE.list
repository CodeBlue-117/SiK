
StormEq_PCB_PLOW_BOX_USE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ef0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014e8  08011030  08011030  00012030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012518  08012518  00014254  2**0
                  CONTENTS
  4 .ARM          00000008  08012518  08012518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012520  08012520  00014254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012520  08012520  00013520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012524  08012524  00013524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08012528  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e6c  20000254  0801277c  00014254  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200010c0  0801277c  000150c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00014254  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006685d  00000000  00000000  0001427e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009985  00000000  00000000  0007aadb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00020cad  00000000  00000000  00084460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003600  00000000  00000000  000a5110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000029d0  00000000  00000000  000a8710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ea81  00000000  00000000  000ab0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005a391  00000000  00000000  000d9b61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3798  00000000  00000000  00133ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0021768a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b994  00000000  00000000  002176d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00223064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000254 	.word	0x20000254
 800015c:	00000000 	.word	0x00000000
 8000160:	08011018 	.word	0x08011018

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000258 	.word	0x20000258
 800017c:	08011018 	.word	0x08011018

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__gesf2>:
 80010b4:	f04f 3cff 	mov.w	ip, #4294967295
 80010b8:	e006      	b.n	80010c8 <__cmpsf2+0x4>
 80010ba:	bf00      	nop

080010bc <__lesf2>:
 80010bc:	f04f 0c01 	mov.w	ip, #1
 80010c0:	e002      	b.n	80010c8 <__cmpsf2+0x4>
 80010c2:	bf00      	nop

080010c4 <__cmpsf2>:
 80010c4:	f04f 0c01 	mov.w	ip, #1
 80010c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d8:	bf18      	it	ne
 80010da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010de:	d011      	beq.n	8001104 <__cmpsf2+0x40>
 80010e0:	b001      	add	sp, #4
 80010e2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010e6:	bf18      	it	ne
 80010e8:	ea90 0f01 	teqne	r0, r1
 80010ec:	bf58      	it	pl
 80010ee:	ebb2 0003 	subspl.w	r0, r2, r3
 80010f2:	bf88      	it	hi
 80010f4:	17c8      	asrhi	r0, r1, #31
 80010f6:	bf38      	it	cc
 80010f8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010fc:	bf18      	it	ne
 80010fe:	f040 0001 	orrne.w	r0, r0, #1
 8001102:	4770      	bx	lr
 8001104:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001108:	d102      	bne.n	8001110 <__cmpsf2+0x4c>
 800110a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800110e:	d105      	bne.n	800111c <__cmpsf2+0x58>
 8001110:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001114:	d1e4      	bne.n	80010e0 <__cmpsf2+0x1c>
 8001116:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800111a:	d0e1      	beq.n	80010e0 <__cmpsf2+0x1c>
 800111c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	4608      	mov	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b50f      	push	{r0, r1, r2, r3, lr}
 800112e:	f7ff ffc9 	bl	80010c4 <__cmpsf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	bf48      	it	mi
 8001136:	f110 0f00 	cmnmi.w	r0, #0
 800113a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001140:	f7ff fff4 	bl	800112c <__aeabi_cfcmpeq>
 8001144:	bf0c      	ite	eq
 8001146:	2001      	moveq	r0, #1
 8001148:	2000      	movne	r0, #0
 800114a:	f85d fb08 	ldr.w	pc, [sp], #8
 800114e:	bf00      	nop

08001150 <__aeabi_fcmplt>:
 8001150:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001154:	f7ff ffea 	bl	800112c <__aeabi_cfcmpeq>
 8001158:	bf34      	ite	cc
 800115a:	2001      	movcc	r0, #1
 800115c:	2000      	movcs	r0, #0
 800115e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001162:	bf00      	nop

08001164 <__aeabi_fcmple>:
 8001164:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001168:	f7ff ffe0 	bl	800112c <__aeabi_cfcmpeq>
 800116c:	bf94      	ite	ls
 800116e:	2001      	movls	r0, #1
 8001170:	2000      	movhi	r0, #0
 8001172:	f85d fb08 	ldr.w	pc, [sp], #8
 8001176:	bf00      	nop

08001178 <__aeabi_fcmpge>:
 8001178:	f84d ed08 	str.w	lr, [sp, #-8]!
 800117c:	f7ff ffd2 	bl	8001124 <__aeabi_cfrcmple>
 8001180:	bf94      	ite	ls
 8001182:	2001      	movls	r0, #1
 8001184:	2000      	movhi	r0, #0
 8001186:	f85d fb08 	ldr.w	pc, [sp], #8
 800118a:	bf00      	nop

0800118c <__aeabi_fcmpgt>:
 800118c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001190:	f7ff ffc8 	bl	8001124 <__aeabi_cfrcmple>
 8001194:	bf34      	ite	cc
 8001196:	2001      	movcc	r0, #1
 8001198:	2000      	movcs	r0, #0
 800119a:	f85d fb08 	ldr.w	pc, [sp], #8
 800119e:	bf00      	nop

080011a0 <__aeabi_f2iz>:
 80011a0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011a4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011a8:	d30f      	bcc.n	80011ca <__aeabi_f2iz+0x2a>
 80011aa:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011ae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011b2:	d90d      	bls.n	80011d0 <__aeabi_f2iz+0x30>
 80011b4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011b8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011bc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80011c0:	fa23 f002 	lsr.w	r0, r3, r2
 80011c4:	bf18      	it	ne
 80011c6:	4240      	negne	r0, r0
 80011c8:	4770      	bx	lr
 80011ca:	f04f 0000 	mov.w	r0, #0
 80011ce:	4770      	bx	lr
 80011d0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80011d4:	d101      	bne.n	80011da <__aeabi_f2iz+0x3a>
 80011d6:	0242      	lsls	r2, r0, #9
 80011d8:	d105      	bne.n	80011e6 <__aeabi_f2iz+0x46>
 80011da:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80011de:	bf08      	it	eq
 80011e0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80011e4:	4770      	bx	lr
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	4770      	bx	lr

080011ec <__aeabi_f2uiz>:
 80011ec:	0042      	lsls	r2, r0, #1
 80011ee:	d20e      	bcs.n	800120e <__aeabi_f2uiz+0x22>
 80011f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80011f4:	d30b      	bcc.n	800120e <__aeabi_f2uiz+0x22>
 80011f6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80011fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fe:	d409      	bmi.n	8001214 <__aeabi_f2uiz+0x28>
 8001200:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001204:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	4770      	bx	lr
 800120e:	f04f 0000 	mov.w	r0, #0
 8001212:	4770      	bx	lr
 8001214:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001218:	d101      	bne.n	800121e <__aeabi_f2uiz+0x32>
 800121a:	0242      	lsls	r2, r0, #9
 800121c:	d102      	bne.n	8001224 <__aeabi_f2uiz+0x38>
 800121e:	f04f 30ff 	mov.w	r0, #4294967295
 8001222:	4770      	bx	lr
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <__aeabi_uldivmod>:
 800122c:	b953      	cbnz	r3, 8001244 <__aeabi_uldivmod+0x18>
 800122e:	b94a      	cbnz	r2, 8001244 <__aeabi_uldivmod+0x18>
 8001230:	2900      	cmp	r1, #0
 8001232:	bf08      	it	eq
 8001234:	2800      	cmpeq	r0, #0
 8001236:	bf1c      	itt	ne
 8001238:	f04f 31ff 	movne.w	r1, #4294967295
 800123c:	f04f 30ff 	movne.w	r0, #4294967295
 8001240:	f000 b96a 	b.w	8001518 <__aeabi_idiv0>
 8001244:	f1ad 0c08 	sub.w	ip, sp, #8
 8001248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800124c:	f000 f806 	bl	800125c <__udivmoddi4>
 8001250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001258:	b004      	add	sp, #16
 800125a:	4770      	bx	lr

0800125c <__udivmoddi4>:
 800125c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001260:	9d08      	ldr	r5, [sp, #32]
 8001262:	460c      	mov	r4, r1
 8001264:	2b00      	cmp	r3, #0
 8001266:	d14e      	bne.n	8001306 <__udivmoddi4+0xaa>
 8001268:	4694      	mov	ip, r2
 800126a:	458c      	cmp	ip, r1
 800126c:	4686      	mov	lr, r0
 800126e:	fab2 f282 	clz	r2, r2
 8001272:	d962      	bls.n	800133a <__udivmoddi4+0xde>
 8001274:	b14a      	cbz	r2, 800128a <__udivmoddi4+0x2e>
 8001276:	f1c2 0320 	rsb	r3, r2, #32
 800127a:	4091      	lsls	r1, r2
 800127c:	fa20 f303 	lsr.w	r3, r0, r3
 8001280:	fa0c fc02 	lsl.w	ip, ip, r2
 8001284:	4319      	orrs	r1, r3
 8001286:	fa00 fe02 	lsl.w	lr, r0, r2
 800128a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800128e:	fa1f f68c 	uxth.w	r6, ip
 8001292:	fbb1 f4f7 	udiv	r4, r1, r7
 8001296:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800129a:	fb07 1114 	mls	r1, r7, r4, r1
 800129e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012a2:	fb04 f106 	mul.w	r1, r4, r6
 80012a6:	4299      	cmp	r1, r3
 80012a8:	d90a      	bls.n	80012c0 <__udivmoddi4+0x64>
 80012aa:	eb1c 0303 	adds.w	r3, ip, r3
 80012ae:	f104 30ff 	add.w	r0, r4, #4294967295
 80012b2:	f080 8112 	bcs.w	80014da <__udivmoddi4+0x27e>
 80012b6:	4299      	cmp	r1, r3
 80012b8:	f240 810f 	bls.w	80014da <__udivmoddi4+0x27e>
 80012bc:	3c02      	subs	r4, #2
 80012be:	4463      	add	r3, ip
 80012c0:	1a59      	subs	r1, r3, r1
 80012c2:	fa1f f38e 	uxth.w	r3, lr
 80012c6:	fbb1 f0f7 	udiv	r0, r1, r7
 80012ca:	fb07 1110 	mls	r1, r7, r0, r1
 80012ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80012d2:	fb00 f606 	mul.w	r6, r0, r6
 80012d6:	429e      	cmp	r6, r3
 80012d8:	d90a      	bls.n	80012f0 <__udivmoddi4+0x94>
 80012da:	eb1c 0303 	adds.w	r3, ip, r3
 80012de:	f100 31ff 	add.w	r1, r0, #4294967295
 80012e2:	f080 80fc 	bcs.w	80014de <__udivmoddi4+0x282>
 80012e6:	429e      	cmp	r6, r3
 80012e8:	f240 80f9 	bls.w	80014de <__udivmoddi4+0x282>
 80012ec:	4463      	add	r3, ip
 80012ee:	3802      	subs	r0, #2
 80012f0:	1b9b      	subs	r3, r3, r6
 80012f2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80012f6:	2100      	movs	r1, #0
 80012f8:	b11d      	cbz	r5, 8001302 <__udivmoddi4+0xa6>
 80012fa:	40d3      	lsrs	r3, r2
 80012fc:	2200      	movs	r2, #0
 80012fe:	e9c5 3200 	strd	r3, r2, [r5]
 8001302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001306:	428b      	cmp	r3, r1
 8001308:	d905      	bls.n	8001316 <__udivmoddi4+0xba>
 800130a:	b10d      	cbz	r5, 8001310 <__udivmoddi4+0xb4>
 800130c:	e9c5 0100 	strd	r0, r1, [r5]
 8001310:	2100      	movs	r1, #0
 8001312:	4608      	mov	r0, r1
 8001314:	e7f5      	b.n	8001302 <__udivmoddi4+0xa6>
 8001316:	fab3 f183 	clz	r1, r3
 800131a:	2900      	cmp	r1, #0
 800131c:	d146      	bne.n	80013ac <__udivmoddi4+0x150>
 800131e:	42a3      	cmp	r3, r4
 8001320:	d302      	bcc.n	8001328 <__udivmoddi4+0xcc>
 8001322:	4290      	cmp	r0, r2
 8001324:	f0c0 80f0 	bcc.w	8001508 <__udivmoddi4+0x2ac>
 8001328:	1a86      	subs	r6, r0, r2
 800132a:	eb64 0303 	sbc.w	r3, r4, r3
 800132e:	2001      	movs	r0, #1
 8001330:	2d00      	cmp	r5, #0
 8001332:	d0e6      	beq.n	8001302 <__udivmoddi4+0xa6>
 8001334:	e9c5 6300 	strd	r6, r3, [r5]
 8001338:	e7e3      	b.n	8001302 <__udivmoddi4+0xa6>
 800133a:	2a00      	cmp	r2, #0
 800133c:	f040 8090 	bne.w	8001460 <__udivmoddi4+0x204>
 8001340:	eba1 040c 	sub.w	r4, r1, ip
 8001344:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001348:	fa1f f78c 	uxth.w	r7, ip
 800134c:	2101      	movs	r1, #1
 800134e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001352:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8001356:	fb08 4416 	mls	r4, r8, r6, r4
 800135a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800135e:	fb07 f006 	mul.w	r0, r7, r6
 8001362:	4298      	cmp	r0, r3
 8001364:	d908      	bls.n	8001378 <__udivmoddi4+0x11c>
 8001366:	eb1c 0303 	adds.w	r3, ip, r3
 800136a:	f106 34ff 	add.w	r4, r6, #4294967295
 800136e:	d202      	bcs.n	8001376 <__udivmoddi4+0x11a>
 8001370:	4298      	cmp	r0, r3
 8001372:	f200 80cd 	bhi.w	8001510 <__udivmoddi4+0x2b4>
 8001376:	4626      	mov	r6, r4
 8001378:	1a1c      	subs	r4, r3, r0
 800137a:	fa1f f38e 	uxth.w	r3, lr
 800137e:	fbb4 f0f8 	udiv	r0, r4, r8
 8001382:	fb08 4410 	mls	r4, r8, r0, r4
 8001386:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800138a:	fb00 f707 	mul.w	r7, r0, r7
 800138e:	429f      	cmp	r7, r3
 8001390:	d908      	bls.n	80013a4 <__udivmoddi4+0x148>
 8001392:	eb1c 0303 	adds.w	r3, ip, r3
 8001396:	f100 34ff 	add.w	r4, r0, #4294967295
 800139a:	d202      	bcs.n	80013a2 <__udivmoddi4+0x146>
 800139c:	429f      	cmp	r7, r3
 800139e:	f200 80b0 	bhi.w	8001502 <__udivmoddi4+0x2a6>
 80013a2:	4620      	mov	r0, r4
 80013a4:	1bdb      	subs	r3, r3, r7
 80013a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80013aa:	e7a5      	b.n	80012f8 <__udivmoddi4+0x9c>
 80013ac:	f1c1 0620 	rsb	r6, r1, #32
 80013b0:	408b      	lsls	r3, r1
 80013b2:	fa22 f706 	lsr.w	r7, r2, r6
 80013b6:	431f      	orrs	r7, r3
 80013b8:	fa20 fc06 	lsr.w	ip, r0, r6
 80013bc:	fa04 f301 	lsl.w	r3, r4, r1
 80013c0:	ea43 030c 	orr.w	r3, r3, ip
 80013c4:	40f4      	lsrs	r4, r6
 80013c6:	fa00 f801 	lsl.w	r8, r0, r1
 80013ca:	0c38      	lsrs	r0, r7, #16
 80013cc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80013d0:	fbb4 fef0 	udiv	lr, r4, r0
 80013d4:	fa1f fc87 	uxth.w	ip, r7
 80013d8:	fb00 441e 	mls	r4, r0, lr, r4
 80013dc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80013e0:	fb0e f90c 	mul.w	r9, lr, ip
 80013e4:	45a1      	cmp	r9, r4
 80013e6:	fa02 f201 	lsl.w	r2, r2, r1
 80013ea:	d90a      	bls.n	8001402 <__udivmoddi4+0x1a6>
 80013ec:	193c      	adds	r4, r7, r4
 80013ee:	f10e 3aff 	add.w	sl, lr, #4294967295
 80013f2:	f080 8084 	bcs.w	80014fe <__udivmoddi4+0x2a2>
 80013f6:	45a1      	cmp	r9, r4
 80013f8:	f240 8081 	bls.w	80014fe <__udivmoddi4+0x2a2>
 80013fc:	f1ae 0e02 	sub.w	lr, lr, #2
 8001400:	443c      	add	r4, r7
 8001402:	eba4 0409 	sub.w	r4, r4, r9
 8001406:	fa1f f983 	uxth.w	r9, r3
 800140a:	fbb4 f3f0 	udiv	r3, r4, r0
 800140e:	fb00 4413 	mls	r4, r0, r3, r4
 8001412:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001416:	fb03 fc0c 	mul.w	ip, r3, ip
 800141a:	45a4      	cmp	ip, r4
 800141c:	d907      	bls.n	800142e <__udivmoddi4+0x1d2>
 800141e:	193c      	adds	r4, r7, r4
 8001420:	f103 30ff 	add.w	r0, r3, #4294967295
 8001424:	d267      	bcs.n	80014f6 <__udivmoddi4+0x29a>
 8001426:	45a4      	cmp	ip, r4
 8001428:	d965      	bls.n	80014f6 <__udivmoddi4+0x29a>
 800142a:	3b02      	subs	r3, #2
 800142c:	443c      	add	r4, r7
 800142e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001432:	fba0 9302 	umull	r9, r3, r0, r2
 8001436:	eba4 040c 	sub.w	r4, r4, ip
 800143a:	429c      	cmp	r4, r3
 800143c:	46ce      	mov	lr, r9
 800143e:	469c      	mov	ip, r3
 8001440:	d351      	bcc.n	80014e6 <__udivmoddi4+0x28a>
 8001442:	d04e      	beq.n	80014e2 <__udivmoddi4+0x286>
 8001444:	b155      	cbz	r5, 800145c <__udivmoddi4+0x200>
 8001446:	ebb8 030e 	subs.w	r3, r8, lr
 800144a:	eb64 040c 	sbc.w	r4, r4, ip
 800144e:	fa04 f606 	lsl.w	r6, r4, r6
 8001452:	40cb      	lsrs	r3, r1
 8001454:	431e      	orrs	r6, r3
 8001456:	40cc      	lsrs	r4, r1
 8001458:	e9c5 6400 	strd	r6, r4, [r5]
 800145c:	2100      	movs	r1, #0
 800145e:	e750      	b.n	8001302 <__udivmoddi4+0xa6>
 8001460:	f1c2 0320 	rsb	r3, r2, #32
 8001464:	fa20 f103 	lsr.w	r1, r0, r3
 8001468:	fa0c fc02 	lsl.w	ip, ip, r2
 800146c:	fa24 f303 	lsr.w	r3, r4, r3
 8001470:	4094      	lsls	r4, r2
 8001472:	430c      	orrs	r4, r1
 8001474:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001478:	fa00 fe02 	lsl.w	lr, r0, r2
 800147c:	fa1f f78c 	uxth.w	r7, ip
 8001480:	fbb3 f0f8 	udiv	r0, r3, r8
 8001484:	fb08 3110 	mls	r1, r8, r0, r3
 8001488:	0c23      	lsrs	r3, r4, #16
 800148a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800148e:	fb00 f107 	mul.w	r1, r0, r7
 8001492:	4299      	cmp	r1, r3
 8001494:	d908      	bls.n	80014a8 <__udivmoddi4+0x24c>
 8001496:	eb1c 0303 	adds.w	r3, ip, r3
 800149a:	f100 36ff 	add.w	r6, r0, #4294967295
 800149e:	d22c      	bcs.n	80014fa <__udivmoddi4+0x29e>
 80014a0:	4299      	cmp	r1, r3
 80014a2:	d92a      	bls.n	80014fa <__udivmoddi4+0x29e>
 80014a4:	3802      	subs	r0, #2
 80014a6:	4463      	add	r3, ip
 80014a8:	1a5b      	subs	r3, r3, r1
 80014aa:	b2a4      	uxth	r4, r4
 80014ac:	fbb3 f1f8 	udiv	r1, r3, r8
 80014b0:	fb08 3311 	mls	r3, r8, r1, r3
 80014b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80014b8:	fb01 f307 	mul.w	r3, r1, r7
 80014bc:	42a3      	cmp	r3, r4
 80014be:	d908      	bls.n	80014d2 <__udivmoddi4+0x276>
 80014c0:	eb1c 0404 	adds.w	r4, ip, r4
 80014c4:	f101 36ff 	add.w	r6, r1, #4294967295
 80014c8:	d213      	bcs.n	80014f2 <__udivmoddi4+0x296>
 80014ca:	42a3      	cmp	r3, r4
 80014cc:	d911      	bls.n	80014f2 <__udivmoddi4+0x296>
 80014ce:	3902      	subs	r1, #2
 80014d0:	4464      	add	r4, ip
 80014d2:	1ae4      	subs	r4, r4, r3
 80014d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014d8:	e739      	b.n	800134e <__udivmoddi4+0xf2>
 80014da:	4604      	mov	r4, r0
 80014dc:	e6f0      	b.n	80012c0 <__udivmoddi4+0x64>
 80014de:	4608      	mov	r0, r1
 80014e0:	e706      	b.n	80012f0 <__udivmoddi4+0x94>
 80014e2:	45c8      	cmp	r8, r9
 80014e4:	d2ae      	bcs.n	8001444 <__udivmoddi4+0x1e8>
 80014e6:	ebb9 0e02 	subs.w	lr, r9, r2
 80014ea:	eb63 0c07 	sbc.w	ip, r3, r7
 80014ee:	3801      	subs	r0, #1
 80014f0:	e7a8      	b.n	8001444 <__udivmoddi4+0x1e8>
 80014f2:	4631      	mov	r1, r6
 80014f4:	e7ed      	b.n	80014d2 <__udivmoddi4+0x276>
 80014f6:	4603      	mov	r3, r0
 80014f8:	e799      	b.n	800142e <__udivmoddi4+0x1d2>
 80014fa:	4630      	mov	r0, r6
 80014fc:	e7d4      	b.n	80014a8 <__udivmoddi4+0x24c>
 80014fe:	46d6      	mov	lr, sl
 8001500:	e77f      	b.n	8001402 <__udivmoddi4+0x1a6>
 8001502:	4463      	add	r3, ip
 8001504:	3802      	subs	r0, #2
 8001506:	e74d      	b.n	80013a4 <__udivmoddi4+0x148>
 8001508:	4606      	mov	r6, r0
 800150a:	4623      	mov	r3, r4
 800150c:	4608      	mov	r0, r1
 800150e:	e70f      	b.n	8001330 <__udivmoddi4+0xd4>
 8001510:	3e02      	subs	r6, #2
 8001512:	4463      	add	r3, ip
 8001514:	e730      	b.n	8001378 <__udivmoddi4+0x11c>
 8001516:	bf00      	nop

08001518 <__aeabi_idiv0>:
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop

0800151c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800151c:	b500      	push	{lr}
 800151e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001524:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001526:	f042 0204 	orr.w	r2, r2, #4
 800152a:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800152c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800152e:	f002 0204 	and.w	r2, r2, #4
 8001532:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001534:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001536:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800153e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001546:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	4611      	mov	r1, r2
 800154c:	200b      	movs	r0, #11
 800154e:	f003 fb71 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001552:	200b      	movs	r0, #11
 8001554:	f003 fb7e 	bl	8004c54 <HAL_NVIC_EnableIRQ>

}
 8001558:	b003      	add	sp, #12
 800155a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001560 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001562:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	2400      	movs	r4, #0
 8001566:	9405      	str	r4, [sp, #20]
 8001568:	9406      	str	r4, [sp, #24]
 800156a:	9407      	str	r4, [sp, #28]
 800156c:	9408      	str	r4, [sp, #32]
 800156e:	9409      	str	r4, [sp, #36]	@ 0x24
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001574:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001576:	f042 0202 	orr.w	r2, r2, #2
 800157a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800157c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800157e:	f002 0202 	and.w	r2, r2, #2
 8001582:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8001584:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001586:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800158e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001590:	f002 0201 	and.w	r2, r2, #1
 8001594:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8001596:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001598:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800159a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800159e:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015a2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80015a6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80015a8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015ac:	f042 0204 	orr.w	r2, r2, #4
 80015b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015ba:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|Tx_Rx_Ctl_Pin, GPIO_PIN_RESET);
 80015bc:	4e32      	ldr	r6, [pc, #200]	@ (8001688 <MX_GPIO_Init+0x128>)
 80015be:	4622      	mov	r2, r4
 80015c0:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80015c4:	4630      	mov	r0, r6
 80015c6:	f003 ff42 	bl	800544e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|SD_CS_Pin, GPIO_PIN_RESET);
 80015ca:	4622      	mov	r2, r4
 80015cc:	f240 2143 	movw	r1, #579	@ 0x243
 80015d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015d4:	f003 ff3b 	bl	800544e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80015d8:	4f2c      	ldr	r7, [pc, #176]	@ (800168c <MX_GPIO_Init+0x12c>)
 80015da:	4622      	mov	r2, r4
 80015dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015e0:	4638      	mov	r0, r7
 80015e2:	f003 ff34 	bl	800544e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|Tx_Rx_Ctl_Pin;
 80015e6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80015ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2501      	movs	r5, #1
 80015ee:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f4:	a905      	add	r1, sp, #20
 80015f6:	4630      	mov	r0, r6
 80015f8:	f003 fdd2 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_2|GPIO_PIN_12;
 80015fc:	f241 0324 	movw	r3, #4132	@ 0x1024
 8001600:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001606:	a905      	add	r1, sp, #20
 8001608:	4630      	mov	r0, r6
 800160a:	f003 fdc9 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA6 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6|SD_CS_Pin;
 800160e:	f240 2343 	movw	r3, #579	@ 0x243
 8001612:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161a:	a905      	add	r1, sp, #20
 800161c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001620:	f003 fdbe 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_15;
 8001624:	f248 0310 	movw	r3, #32784	@ 0x8010
 8001628:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	a905      	add	r1, sp, #20
 8001630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001634:	f003 fdb4 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001638:	2380      	movs	r3, #128	@ 0x80
 800163a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001640:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	a905      	add	r1, sp, #20
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f003 fda9 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800164e:	2308      	movs	r3, #8
 8001650:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001652:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001656:	a905      	add	r1, sp, #20
 8001658:	480d      	ldr	r0, [pc, #52]	@ (8001690 <MX_GPIO_Init+0x130>)
 800165a:	f003 fda1 	bl	80051a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800165e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001662:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001664:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	a905      	add	r1, sp, #20
 800166c:	4638      	mov	r0, r7
 800166e:	f003 fd97 	bl	80051a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001672:	4622      	mov	r2, r4
 8001674:	4621      	mov	r1, r4
 8001676:	2016      	movs	r0, #22
 8001678:	f003 fadc 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800167c:	2016      	movs	r0, #22
 800167e:	f003 fae9 	bl	8004c54 <HAL_NVIC_EnableIRQ>

}
 8001682:	b00b      	add	sp, #44	@ 0x2c
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001686:	bf00      	nop
 8001688:	48000400 	.word	0x48000400
 800168c:	48000800 	.word	0x48000800
 8001690:	48001c00 	.word	0x48001c00

08001694 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001694:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001696:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <MX_I2C1_Init+0x4c>)
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <MX_I2C1_Init+0x50>)
 800169a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800169c:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <MX_I2C1_Init+0x54>)
 800169e:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a4:	2201      	movs	r2, #1
 80016a6:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a8:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016aa:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016ac:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ae:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b2:	f004 f89b 	bl	80057ec <HAL_I2C_Init>
 80016b6:	b950      	cbnz	r0, 80016ce <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016b8:	2100      	movs	r1, #0
 80016ba:	4809      	ldr	r0, [pc, #36]	@ (80016e0 <MX_I2C1_Init+0x4c>)
 80016bc:	f004 fafc 	bl	8005cb8 <HAL_I2CEx_ConfigAnalogFilter>
 80016c0:	b940      	cbnz	r0, 80016d4 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016c2:	2100      	movs	r1, #0
 80016c4:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <MX_I2C1_Init+0x4c>)
 80016c6:	f004 fb25 	bl	8005d14 <HAL_I2CEx_ConfigDigitalFilter>
 80016ca:	b930      	cbnz	r0, 80016da <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016cc:	bd08      	pop	{r3, pc}
    Error_Handler();
 80016ce:	f000 fdad 	bl	800222c <Error_Handler>
 80016d2:	e7f1      	b.n	80016b8 <MX_I2C1_Init+0x24>
    Error_Handler();
 80016d4:	f000 fdaa 	bl	800222c <Error_Handler>
 80016d8:	e7f3      	b.n	80016c2 <MX_I2C1_Init+0x2e>
    Error_Handler();
 80016da:	f000 fda7 	bl	800222c <Error_Handler>
}
 80016de:	e7f5      	b.n	80016cc <MX_I2C1_Init+0x38>
 80016e0:	200002f4 	.word	0x200002f4
 80016e4:	40005400 	.word	0x40005400
 80016e8:	20303e5d 	.word	0x20303e5d

080016ec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80016ec:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016ee:	4813      	ldr	r0, [pc, #76]	@ (800173c <MX_I2C2_Init+0x50>)
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <MX_I2C2_Init+0x54>)
 80016f2:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <MX_I2C2_Init+0x58>)
 80016f6:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 216;
 80016f8:	23d8      	movs	r3, #216	@ 0xd8
 80016fa:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fc:	2301      	movs	r3, #1
 80016fe:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001704:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001706:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001708:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800170c:	f004 f86e 	bl	80057ec <HAL_I2C_Init>
 8001710:	b950      	cbnz	r0, 8001728 <MX_I2C2_Init+0x3c>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001712:	2100      	movs	r1, #0
 8001714:	4809      	ldr	r0, [pc, #36]	@ (800173c <MX_I2C2_Init+0x50>)
 8001716:	f004 facf 	bl	8005cb8 <HAL_I2CEx_ConfigAnalogFilter>
 800171a:	b940      	cbnz	r0, 800172e <MX_I2C2_Init+0x42>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800171c:	2100      	movs	r1, #0
 800171e:	4807      	ldr	r0, [pc, #28]	@ (800173c <MX_I2C2_Init+0x50>)
 8001720:	f004 faf8 	bl	8005d14 <HAL_I2CEx_ConfigDigitalFilter>
 8001724:	b930      	cbnz	r0, 8001734 <MX_I2C2_Init+0x48>
  /* USER CODE BEGIN I2C2_Init 2 */

  //return HAL_OK;
  /* USER CODE END I2C2_Init 2 */

}
 8001726:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001728:	f000 fd80 	bl	800222c <Error_Handler>
 800172c:	e7f1      	b.n	8001712 <MX_I2C2_Init+0x26>
    Error_Handler();
 800172e:	f000 fd7d 	bl	800222c <Error_Handler>
 8001732:	e7f3      	b.n	800171c <MX_I2C2_Init+0x30>
    Error_Handler();
 8001734:	f000 fd7a 	bl	800222c <Error_Handler>
}
 8001738:	e7f5      	b.n	8001726 <MX_I2C2_Init+0x3a>
 800173a:	bf00      	nop
 800173c:	20000270 	.word	0x20000270
 8001740:	40005800 	.word	0x40005800
 8001744:	20303e5d 	.word	0x20303e5d

08001748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001748:	b530      	push	{r4, r5, lr}
 800174a:	b099      	sub	sp, #100	@ 0x64
 800174c:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	2100      	movs	r1, #0
 8001750:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001752:	9114      	str	r1, [sp, #80]	@ 0x50
 8001754:	9115      	str	r1, [sp, #84]	@ 0x54
 8001756:	9116      	str	r1, [sp, #88]	@ 0x58
 8001758:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800175a:	2238      	movs	r2, #56	@ 0x38
 800175c:	a805      	add	r0, sp, #20
 800175e:	f00d f9de 	bl	800eb1e <memset>
  if(i2cHandle->Instance==I2C1)
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	4a3b      	ldr	r2, [pc, #236]	@ (8001854 <HAL_I2C_MspInit+0x10c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d004      	beq.n	8001774 <HAL_I2C_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800176a:	4a3b      	ldr	r2, [pc, #236]	@ (8001858 <HAL_I2C_MspInit+0x110>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d038      	beq.n	80017e2 <HAL_I2C_MspInit+0x9a>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001770:	b019      	add	sp, #100	@ 0x64
 8001772:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001774:	2340      	movs	r3, #64	@ 0x40
 8001776:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001778:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800177c:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177e:	a805      	add	r0, sp, #20
 8001780:	f005 f924 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 8001784:	bb50      	cbnz	r0, 80017dc <HAL_I2C_MspInit+0x94>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001786:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 800178a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001792:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800179a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800179c:	23c0      	movs	r3, #192	@ 0xc0
 800179e:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	9315      	str	r3, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2500      	movs	r5, #0
 80017aa:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ac:	2304      	movs	r3, #4
 80017ae:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b0:	a913      	add	r1, sp, #76	@ 0x4c
 80017b2:	482a      	ldr	r0, [pc, #168]	@ (800185c <HAL_I2C_MspInit+0x114>)
 80017b4:	f003 fcf4 	bl	80051a0 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80017ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017be:	65a3      	str	r3, [r4, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017c6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80017c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017ca:	462a      	mov	r2, r5
 80017cc:	4629      	mov	r1, r5
 80017ce:	201e      	movs	r0, #30
 80017d0:	f003 fa30 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017d4:	201e      	movs	r0, #30
 80017d6:	f003 fa3d 	bl	8004c54 <HAL_NVIC_EnableIRQ>
 80017da:	e7c9      	b.n	8001770 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 80017dc:	f000 fd26 	bl	800222c <Error_Handler>
 80017e0:	e7d1      	b.n	8001786 <HAL_I2C_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80017e2:	2380      	movs	r3, #128	@ 0x80
 80017e4:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80017e6:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80017ea:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ec:	a805      	add	r0, sp, #20
 80017ee:	f005 f8ed 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	bb60      	cbnz	r0, 800184e <HAL_I2C_MspInit+0x106>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017f4:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80017f8:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001800:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001808:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800180a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800180e:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001810:	2312      	movs	r3, #18
 8001812:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001814:	2301      	movs	r3, #1
 8001816:	9315      	str	r3, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2500      	movs	r5, #0
 800181a:	9516      	str	r5, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800181c:	2304      	movs	r3, #4
 800181e:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	a913      	add	r1, sp, #76	@ 0x4c
 8001822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001826:	f003 fcbb 	bl	80051a0 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800182a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800182c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001830:	65a3      	str	r3, [r4, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001832:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001834:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001838:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800183a:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800183c:	462a      	mov	r2, r5
 800183e:	4629      	mov	r1, r5
 8001840:	2020      	movs	r0, #32
 8001842:	f003 f9f7 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001846:	2020      	movs	r0, #32
 8001848:	f003 fa04 	bl	8004c54 <HAL_NVIC_EnableIRQ>
}
 800184c:	e790      	b.n	8001770 <HAL_I2C_MspInit+0x28>
      Error_Handler();
 800184e:	f000 fced 	bl	800222c <Error_Handler>
 8001852:	e7cf      	b.n	80017f4 <HAL_I2C_MspInit+0xac>
 8001854:	40005400 	.word	0x40005400
 8001858:	40005800 	.word	0x40005800
 800185c:	48000400 	.word	0x48000400

08001860 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001860:	b510      	push	{r4, lr}

  if(i2cHandle->Instance==I2C1)
 8001862:	6803      	ldr	r3, [r0, #0]
 8001864:	4a17      	ldr	r2, [pc, #92]	@ (80018c4 <HAL_I2C_MspDeInit+0x64>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d003      	beq.n	8001872 <HAL_I2C_MspDeInit+0x12>
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(i2cHandle->Instance==I2C2)
 800186a:	4a17      	ldr	r2, [pc, #92]	@ (80018c8 <HAL_I2C_MspDeInit+0x68>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d013      	beq.n	8001898 <HAL_I2C_MspDeInit+0x38>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001870:	bd10      	pop	{r4, pc}

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001872:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001876:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001878:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800187c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800187e:	4c13      	ldr	r4, [pc, #76]	@ (80018cc <HAL_I2C_MspDeInit+0x6c>)
 8001880:	2140      	movs	r1, #64	@ 0x40
 8001882:	4620      	mov	r0, r4
 8001884:	f003 fd5e 	bl	8005344 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001888:	2180      	movs	r1, #128	@ 0x80
 800188a:	4620      	mov	r0, r4
 800188c:	f003 fd5a 	bl	8005344 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8001890:	201e      	movs	r0, #30
 8001892:	f003 f9e3 	bl	8004c5c <HAL_NVIC_DisableIRQ>
 8001896:	e7eb      	b.n	8001870 <HAL_I2C_MspDeInit+0x10>
 8001898:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800189c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800189e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11);
 80018a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018ac:	f003 fd4a 	bl	8005344 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 80018b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b8:	f003 fd44 	bl	8005344 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 80018bc:	2020      	movs	r0, #32
 80018be:	f003 f9cd 	bl	8004c5c <HAL_NVIC_DisableIRQ>
}
 80018c2:	e7d5      	b.n	8001870 <HAL_I2C_MspDeInit+0x10>
 80018c4:	40005400 	.word	0x40005400
 80018c8:	40005800 	.word	0x40005800
 80018cc:	48000400 	.word	0x48000400

080018d0 <setStateTime>:
}

void setStateTime()
{

	if(currentState == STATE_UP)
 80018d0:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <setStateTime+0x2c>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d007      	beq.n	80018e8 <setStateTime+0x18>
	{
		stateTimeElapsedUP += 1;  // each time counter expires we check the state were in and increment one of the counters
	}

	if(currentState == STATE_DOWN)
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d00a      	beq.n	80018f2 <setStateTime+0x22>
	{
		stateTimeElapsedDOWN += 1; // Each increment represents one second
	}

	if(currentState == STATE_UNKNOWN)
 80018dc:	b91b      	cbnz	r3, 80018e6 <setStateTime+0x16>
	{
		stateTimeElapsedUNKNOWN += 1;
 80018de:	4a08      	ldr	r2, [pc, #32]	@ (8001900 <setStateTime+0x30>)
 80018e0:	6813      	ldr	r3, [r2, #0]
 80018e2:	3301      	adds	r3, #1
 80018e4:	6013      	str	r3, [r2, #0]
	}
}
 80018e6:	4770      	bx	lr
		stateTimeElapsedUP += 1;  // each time counter expires we check the state were in and increment one of the counters
 80018e8:	4906      	ldr	r1, [pc, #24]	@ (8001904 <setStateTime+0x34>)
 80018ea:	680a      	ldr	r2, [r1, #0]
 80018ec:	3201      	adds	r2, #1
 80018ee:	600a      	str	r2, [r1, #0]
 80018f0:	e7f2      	b.n	80018d8 <setStateTime+0x8>
		stateTimeElapsedDOWN += 1; // Each increment represents one second
 80018f2:	4905      	ldr	r1, [pc, #20]	@ (8001908 <setStateTime+0x38>)
 80018f4:	680a      	ldr	r2, [r1, #0]
 80018f6:	3201      	adds	r2, #1
 80018f8:	600a      	str	r2, [r1, #0]
 80018fa:	e7ef      	b.n	80018dc <setStateTime+0xc>
 80018fc:	20000378 	.word	0x20000378
 8001900:	2000037c 	.word	0x2000037c
 8001904:	20000384 	.word	0x20000384
 8001908:	20000380 	.word	0x20000380

0800190c <__io_putchar>:
{
 800190c:	b500      	push	{lr}
 800190e:	b083      	sub	sp, #12
 8001910:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	2201      	movs	r2, #1
 8001918:	a901      	add	r1, sp, #4
 800191a:	4803      	ldr	r0, [pc, #12]	@ (8001928 <__io_putchar+0x1c>)
 800191c:	f007 ff93 	bl	8009846 <HAL_UART_Transmit>
}
 8001920:	9801      	ldr	r0, [sp, #4]
 8001922:	b003      	add	sp, #12
 8001924:	f85d fb04 	ldr.w	pc, [sp], #4
 8001928:	200006dc 	.word	0x200006dc

0800192c <INIT_IMU>:
{
 800192c:	b530      	push	{r4, r5, lr}
 800192e:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M,"Init IMU...\r\n");
 8001930:	4b4a      	ldr	r3, [pc, #296]	@ (8001a5c <INIT_IMU+0x130>)
 8001932:	2200      	movs	r2, #0
 8001934:	4611      	mov	r1, r2
 8001936:	2002      	movs	r0, #2
 8001938:	f00c f964 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  if(LSM6DSO_Init(&lsm6dso) != LSM6DSO_OK)
 800193c:	4848      	ldr	r0, [pc, #288]	@ (8001a60 <INIT_IMU+0x134>)
 800193e:	f002 f845 	bl	80039cc <LSM6DSO_Init>
 8001942:	b368      	cbz	r0, 80019a0 <INIT_IMU+0x74>
	  APP_LOG(TS_OFF, VLEVEL_M,"Error!! LSM6DSO did not initialize correctly!\r\n");
 8001944:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <INIT_IMU+0x138>)
 8001946:	2200      	movs	r2, #0
 8001948:	4611      	mov	r1, r2
 800194a:	2002      	movs	r0, #2
 800194c:	f00c f95a 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  HAL_Delay(500);
 8001950:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001954:	f001 f8b8 	bl	8002ac8 <HAL_Delay>
  retVal = lsm6dso_device_id_get(&dev_ctx, &whoamI);
 8001958:	4d43      	ldr	r5, [pc, #268]	@ (8001a68 <INIT_IMU+0x13c>)
 800195a:	4629      	mov	r1, r5
 800195c:	4843      	ldr	r0, [pc, #268]	@ (8001a6c <INIT_IMU+0x140>)
 800195e:	f002 fe3e 	bl	80045de <lsm6dso_device_id_get>
 8001962:	4604      	mov	r4, r0
  APP_LOG(TS_OFF, VLEVEL_M,"WhoamI hexadecimal is: 0x%X\r\n", whoamI);
 8001964:	782b      	ldrb	r3, [r5, #0]
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	4b41      	ldr	r3, [pc, #260]	@ (8001a70 <INIT_IMU+0x144>)
 800196a:	2200      	movs	r2, #0
 800196c:	4611      	mov	r1, r2
 800196e:	2002      	movs	r0, #2
 8001970:	f00c f948 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  if (whoamI != LSM6DSO_ID || retVal != 0)
 8001974:	782b      	ldrb	r3, [r5, #0]
 8001976:	2b6c      	cmp	r3, #108	@ 0x6c
 8001978:	d100      	bne.n	800197c <INIT_IMU+0x50>
 800197a:	b1c4      	cbz	r4, 80019ae <INIT_IMU+0x82>
	  APP_LOG(TS_OFF, VLEVEL_M,"Error!! WHOAMI != LSM6DSO_ID OR retVal != 0!\r\n");
 800197c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a74 <INIT_IMU+0x148>)
 800197e:	2200      	movs	r2, #0
 8001980:	4611      	mov	r1, r2
 8001982:	2002      	movs	r0, #2
 8001984:	f00c f93e 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M,"whoamI:%d, retVal= %d\r\n", whoamI, retVal);
 8001988:	9401      	str	r4, [sp, #4]
 800198a:	4b37      	ldr	r3, [pc, #220]	@ (8001a68 <INIT_IMU+0x13c>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <INIT_IMU+0x14c>)
 8001992:	2200      	movs	r2, #0
 8001994:	4611      	mov	r1, r2
 8001996:	2002      	movs	r0, #2
 8001998:	f00c f934 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
}
 800199c:	b003      	add	sp, #12
 800199e:	bd30      	pop	{r4, r5, pc}
	  APP_LOG(TS_OFF, VLEVEL_M,"LSM6DSO initialized correctly!\r\n");
 80019a0:	4b36      	ldr	r3, [pc, #216]	@ (8001a7c <INIT_IMU+0x150>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	4611      	mov	r1, r2
 80019a6:	2002      	movs	r0, #2
 80019a8:	f00c f92c 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 80019ac:	e7d0      	b.n	8001950 <INIT_IMU+0x24>
	  IMU_initialized = true;
 80019ae:	2101      	movs	r1, #1
 80019b0:	4b33      	ldr	r3, [pc, #204]	@ (8001a80 <INIT_IMU+0x154>)
 80019b2:	7019      	strb	r1, [r3, #0]
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80019b4:	482d      	ldr	r0, [pc, #180]	@ (8001a6c <INIT_IMU+0x140>)
 80019b6:	f002 fe1a 	bl	80045ee <lsm6dso_reset_set>
	  lsm6dso_reset_get(&dev_ctx, &rst);
 80019ba:	4c32      	ldr	r4, [pc, #200]	@ (8001a84 <INIT_IMU+0x158>)
 80019bc:	4621      	mov	r1, r4
 80019be:	482b      	ldr	r0, [pc, #172]	@ (8001a6c <INIT_IMU+0x140>)
 80019c0:	f002 fe2e 	bl	8004620 <lsm6dso_reset_get>
	  APP_LOG(TS_OFF, VLEVEL_M,"Waiting On IMU Reset!\r\n");
 80019c4:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <INIT_IMU+0x15c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	4611      	mov	r1, r2
 80019ca:	2002      	movs	r0, #2
 80019cc:	f00c f91a 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  	} while (rst);
 80019d0:	7823      	ldrb	r3, [r4, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f1      	bne.n	80019ba <INIT_IMU+0x8e>
  retVal = lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80019d6:	2101      	movs	r1, #1
 80019d8:	4824      	ldr	r0, [pc, #144]	@ (8001a6c <INIT_IMU+0x140>)
 80019da:	f002 fd7b 	bl	80044d4 <lsm6dso_block_data_update_set>
  if(retVal != 0)
 80019de:	b9d0      	cbnz	r0, 8001a16 <INIT_IMU+0xea>
  retVal = lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_1667Hz);
 80019e0:	2108      	movs	r1, #8
 80019e2:	4822      	ldr	r0, [pc, #136]	@ (8001a6c <INIT_IMU+0x140>)
 80019e4:	f002 ff27 	bl	8004836 <lsm6dso_xl_data_rate_set>
  if(retVal != 0)
 80019e8:	b9e0      	cbnz	r0, 8001a24 <INIT_IMU+0xf8>
  retVal = lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_1667Hz);
 80019ea:	2108      	movs	r1, #8
 80019ec:	481f      	ldr	r0, [pc, #124]	@ (8001a6c <INIT_IMU+0x140>)
 80019ee:	f002 ffad 	bl	800494c <lsm6dso_gy_data_rate_set>
  if(retVal != 0)
 80019f2:	b9f0      	cbnz	r0, 8001a32 <INIT_IMU+0x106>
  retVal = lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_4g);
 80019f4:	2102      	movs	r1, #2
 80019f6:	481d      	ldr	r0, [pc, #116]	@ (8001a6c <INIT_IMU+0x140>)
 80019f8:	f002 fc7a 	bl	80042f0 <lsm6dso_xl_full_scale_set>
  if(retVal != 0)
 80019fc:	bb00      	cbnz	r0, 8001a40 <INIT_IMU+0x114>
  retVal = lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_500dps);
 80019fe:	2102      	movs	r1, #2
 8001a00:	481a      	ldr	r0, [pc, #104]	@ (8001a6c <INIT_IMU+0x140>)
 8001a02:	f002 fced 	bl	80043e0 <lsm6dso_gy_full_scale_set>
  if(retVal != 0)
 8001a06:	bb10      	cbnz	r0, 8001a4e <INIT_IMU+0x122>
  APP_LOG(TS_OFF, VLEVEL_M,"...IMU Ready\r\n");
 8001a08:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <INIT_IMU+0x160>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	2002      	movs	r0, #2
 8001a10:	f00c f8f8 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 8001a14:	e7c2      	b.n	800199c <INIT_IMU+0x70>
	  APP_LOG(TS_OFF, VLEVEL_M,"Error setting lsm6dso block data update set");
 8001a16:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <INIT_IMU+0x164>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	2002      	movs	r0, #2
 8001a1e:	f00c f8f1 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 8001a22:	e7dd      	b.n	80019e0 <INIT_IMU+0xb4>
	  APP_LOG(TS_OFF, VLEVEL_M,"Error setting lsm6dso xl_data_rate set");
 8001a24:	4b1b      	ldr	r3, [pc, #108]	@ (8001a94 <INIT_IMU+0x168>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	4611      	mov	r1, r2
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f00c f8ea 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 8001a30:	e7db      	b.n	80019ea <INIT_IMU+0xbe>
	  APP_LOG(TS_OFF, VLEVEL_M,"Error setting lsm6dso gy_data_rate set");
 8001a32:	4b19      	ldr	r3, [pc, #100]	@ (8001a98 <INIT_IMU+0x16c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	4611      	mov	r1, r2
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f00c f8e3 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 8001a3e:	e7d9      	b.n	80019f4 <INIT_IMU+0xc8>
	  APP_LOG(TS_OFF, VLEVEL_M,"Error setting lsm6dso xl_full_scale set");
 8001a40:	4b16      	ldr	r3, [pc, #88]	@ (8001a9c <INIT_IMU+0x170>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	4611      	mov	r1, r2
 8001a46:	2002      	movs	r0, #2
 8001a48:	f00c f8dc 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 8001a4c:	e7d7      	b.n	80019fe <INIT_IMU+0xd2>
	  APP_LOG(TS_OFF, VLEVEL_M,"Error setting lsm6dso gy_full_scale set");
 8001a4e:	4b14      	ldr	r3, [pc, #80]	@ (8001aa0 <INIT_IMU+0x174>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	4611      	mov	r1, r2
 8001a54:	2002      	movs	r0, #2
 8001a56:	f00c f8d5 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 8001a5a:	e7d5      	b.n	8001a08 <INIT_IMU+0xdc>
 8001a5c:	08011070 	.word	0x08011070
 8001a60:	200003f0 	.word	0x200003f0
 8001a64:	08011080 	.word	0x08011080
 8001a68:	2000043a 	.word	0x2000043a
 8001a6c:	200003e0 	.word	0x200003e0
 8001a70:	080110d4 	.word	0x080110d4
 8001a74:	080110f4 	.word	0x080110f4
 8001a78:	08011124 	.word	0x08011124
 8001a7c:	080110b0 	.word	0x080110b0
 8001a80:	20000438 	.word	0x20000438
 8001a84:	20000439 	.word	0x20000439
 8001a88:	0801113c 	.word	0x0801113c
 8001a8c:	08011220 	.word	0x08011220
 8001a90:	08011154 	.word	0x08011154
 8001a94:	08011180 	.word	0x08011180
 8001a98:	080111a8 	.word	0x080111a8
 8001a9c:	080111d0 	.word	0x080111d0
 8001aa0:	080111f8 	.word	0x080111f8
 8001aa4:	00000000 	.word	0x00000000

08001aa8 <READ_IMU_DATA>:
{
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	lsm6dso_xl_flag_data_ready_get(&dev_ctx, &AccelReg);
 8001aaa:	4c31      	ldr	r4, [pc, #196]	@ (8001b70 <READ_IMU_DATA+0xc8>)
 8001aac:	4621      	mov	r1, r4
 8001aae:	4831      	ldr	r0, [pc, #196]	@ (8001b74 <READ_IMU_DATA+0xcc>)
 8001ab0:	f002 fd29 	bl	8004506 <lsm6dso_xl_flag_data_ready_get>
	if (AccelReg)
 8001ab4:	7823      	ldrb	r3, [r4, #0]
 8001ab6:	b90b      	cbnz	r3, 8001abc <READ_IMU_DATA+0x14>
	return 0.0;
 8001ab8:	2000      	movs	r0, #0
}
 8001aba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001abc:	4c2e      	ldr	r4, [pc, #184]	@ (8001b78 <READ_IMU_DATA+0xd0>)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	80a3      	strh	r3, [r4, #4]
	  lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	482b      	ldr	r0, [pc, #172]	@ (8001b74 <READ_IMU_DATA+0xcc>)
 8001ac8:	f002 fd4e 	bl	8004568 <lsm6dso_acceleration_raw_get>
	  acceleration_mg[0] = lsm6dso_from_fs4_to_mg(data_raw_acceleration[0]);
 8001acc:	f9b4 0000 	ldrsh.w	r0, [r4]
 8001ad0:	f002 fc04 	bl	80042dc <lsm6dso_from_fs4_to_mg>
 8001ad4:	4d29      	ldr	r5, [pc, #164]	@ (8001b7c <READ_IMU_DATA+0xd4>)
 8001ad6:	f7ff fb63 	bl	80011a0 <__aeabi_f2iz>
 8001ada:	8028      	strh	r0, [r5, #0]
	  acceleration_mg[1] = lsm6dso_from_fs4_to_mg(data_raw_acceleration[1]);
 8001adc:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8001ae0:	f002 fbfc 	bl	80042dc <lsm6dso_from_fs4_to_mg>
 8001ae4:	f7ff fb5c 	bl	80011a0 <__aeabi_f2iz>
 8001ae8:	8068      	strh	r0, [r5, #2]
	  acceleration_mg[2] = lsm6dso_from_fs4_to_mg(data_raw_acceleration[2]); // Offset first by just subtracting, may need to use offset registers to calibrate later though
 8001aea:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8001aee:	f002 fbf5 	bl	80042dc <lsm6dso_from_fs4_to_mg>
 8001af2:	f7ff fb55 	bl	80011a0 <__aeabi_f2iz>
 8001af6:	b206      	sxth	r6, r0
 8001af8:	80ae      	strh	r6, [r5, #4]
	  x = acceleration_mg[0] / 1000.0f;
 8001afa:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001afe:	f7ff f935 	bl	8000d6c <__aeabi_i2f>
 8001b02:	491f      	ldr	r1, [pc, #124]	@ (8001b80 <READ_IMU_DATA+0xd8>)
 8001b04:	f7ff fa3a 	bl	8000f7c <__aeabi_fdiv>
 8001b08:	4b1e      	ldr	r3, [pc, #120]	@ (8001b84 <READ_IMU_DATA+0xdc>)
 8001b0a:	6018      	str	r0, [r3, #0]
	  y = acceleration_mg[1] / 1000.0f;
 8001b0c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8001b10:	f7ff f92c 	bl	8000d6c <__aeabi_i2f>
 8001b14:	491a      	ldr	r1, [pc, #104]	@ (8001b80 <READ_IMU_DATA+0xd8>)
 8001b16:	f7ff fa31 	bl	8000f7c <__aeabi_fdiv>
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <READ_IMU_DATA+0xe0>)
 8001b1e:	6018      	str	r0, [r3, #0]
	  z = acceleration_mg[2] / 1000.0f;
 8001b20:	4630      	mov	r0, r6
 8001b22:	f7ff f923 	bl	8000d6c <__aeabi_i2f>
 8001b26:	4916      	ldr	r1, [pc, #88]	@ (8001b80 <READ_IMU_DATA+0xd8>)
 8001b28:	f7ff fa28 	bl	8000f7c <__aeabi_fdiv>
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <READ_IMU_DATA+0xe4>)
 8001b2e:	6018      	str	r0, [r3, #0]
	  theta = atan2(y, z);
 8001b30:	f7fe fce2 	bl	80004f8 <__aeabi_f2d>
 8001b34:	4606      	mov	r6, r0
 8001b36:	460f      	mov	r7, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7fe fcdd 	bl	80004f8 <__aeabi_f2d>
 8001b3e:	4632      	mov	r2, r6
 8001b40:	463b      	mov	r3, r7
 8001b42:	f00e ffff 	bl	8010b44 <atan2>
 8001b46:	f7ff f807 	bl	8000b58 <__aeabi_d2f>
 8001b4a:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <READ_IMU_DATA+0xe8>)
 8001b4c:	6018      	str	r0, [r3, #0]
	  theta_degrees = theta * (180.0 / M_PI);
 8001b4e:	f7fe fcd3 	bl	80004f8 <__aeabi_f2d>
 8001b52:	a305      	add	r3, pc, #20	@ (adr r3, 8001b68 <READ_IMU_DATA+0xc0>)
 8001b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b58:	f7fe fd26 	bl	80005a8 <__aeabi_dmul>
 8001b5c:	f7fe fffc 	bl	8000b58 <__aeabi_d2f>
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <READ_IMU_DATA+0xec>)
 8001b62:	6018      	str	r0, [r3, #0]
	  return theta_degrees;
 8001b64:	e7a9      	b.n	8001aba <READ_IMU_DATA+0x12>
 8001b66:	bf00      	nop
 8001b68:	1a63c1f8 	.word	0x1a63c1f8
 8001b6c:	404ca5dc 	.word	0x404ca5dc
 8001b70:	2000044a 	.word	0x2000044a
 8001b74:	200003e0 	.word	0x200003e0
 8001b78:	20000444 	.word	0x20000444
 8001b7c:	2000043c 	.word	0x2000043c
 8001b80:	447a0000 	.word	0x447a0000
 8001b84:	20000434 	.word	0x20000434
 8001b88:	20000430 	.word	0x20000430
 8001b8c:	2000042c 	.word	0x2000042c
 8001b90:	200003d4 	.word	0x200003d4
 8001b94:	200003d0 	.word	0x200003d0

08001b98 <Init_Timer>:
	return stateTimeElapsedUNKNOWN;
}

// Timer function to determine how long plow is in UP, DOWN or UNKNOWN states
void Init_Timer(void)
{
 8001b98:	b570      	push	{r4, r5, r6, lr}
 8001b9a:	b082      	sub	sp, #8
	UTIL_TIMER_Create(&timeSpentUP, State_Time, UTIL_TIMER_PERIODIC, setStateTime, NULL);
 8001b9c:	4d0c      	ldr	r5, [pc, #48]	@ (8001bd0 <Init_Timer+0x38>)
 8001b9e:	4c0d      	ldr	r4, [pc, #52]	@ (8001bd4 <Init_Timer+0x3c>)
 8001ba0:	2600      	movs	r6, #0
 8001ba2:	9600      	str	r6, [sp, #0]
 8001ba4:	462b      	mov	r3, r5
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	6821      	ldr	r1, [r4, #0]
 8001baa:	480b      	ldr	r0, [pc, #44]	@ (8001bd8 <Init_Timer+0x40>)
 8001bac:	f00b fdf4 	bl	800d798 <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&timeSpentDOWN, State_Time, UTIL_TIMER_PERIODIC, setStateTime, NULL);
 8001bb0:	9600      	str	r6, [sp, #0]
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	6821      	ldr	r1, [r4, #0]
 8001bb8:	4808      	ldr	r0, [pc, #32]	@ (8001bdc <Init_Timer+0x44>)
 8001bba:	f00b fded 	bl	800d798 <UTIL_TIMER_Create>
	UTIL_TIMER_Create(&timeSpentUNKNOWN, State_Time, UTIL_TIMER_PERIODIC, setStateTime, NULL);
 8001bbe:	9600      	str	r6, [sp, #0]
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	6821      	ldr	r1, [r4, #0]
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <Init_Timer+0x48>)
 8001bc8:	f00b fde6 	bl	800d798 <UTIL_TIMER_Create>
}
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	080018d1 	.word	0x080018d1
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	200003b8 	.word	0x200003b8
 8001bdc:	200003a0 	.word	0x200003a0
 8001be0:	20000388 	.word	0x20000388

08001be4 <MX_I2C2_DeInit>:

int32_t MX_I2C2_DeInit(void)  // Optional DeInit function
{
 8001be4:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&hi2c2);
 8001be6:	4802      	ldr	r0, [pc, #8]	@ (8001bf0 <MX_I2C2_DeInit+0xc>)
 8001be8:	f003 fe8e 	bl	8005908 <HAL_I2C_DeInit>
  return HAL_OK;
}
 8001bec:	2000      	movs	r0, #0
 8001bee:	bd08      	pop	{r3, pc}
 8001bf0:	20000270 	.word	0x20000270

08001bf4 <platform_write>:

/* I2C Write Function for the IMU */
int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 8001bf4:	b500      	push	{lr}
 8001bf6:	b085      	sub	sp, #20
	//printf("handle = 0x%p, hi2c2 content: 0x%p\n", (void*)handle, (void*)&hi2c2);
	if (handle == NULL)
 8001bf8:	b170      	cbz	r0, 8001c18 <platform_write+0x24>
 8001bfa:	4684      	mov	ip, r0
	}

	// APP_LOG(TS_OFF, VLEVEL_M, "handle = %p, hi2c2 content: %p\n\r", (void*)lsm6dso.Ctx.handle, (void*)&hi2c2);
	//printf("handle = 0x%p, hi2c2 content: 0x%p\n\r", (void*)lsm6dso.Ctx.handle, (void*)hi2c2);

	if (handle == (void*)lsm6dso.Ctx.handle)
 8001bfc:	481a      	ldr	r0, [pc, #104]	@ (8001c68 <platform_write+0x74>)
 8001bfe:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001c00:	4560      	cmp	r0, ip
 8001c02:	d012      	beq.n	8001c2a <platform_write+0x36>
			HAL_NVIC_SystemReset();
			return 1; // Return non-zero for read error
		}
	}

  APP_LOG(TS_OFF, VLEVEL_M,"platform_write FAILED!\r\n");
 8001c04:	4b19      	ldr	r3, [pc, #100]	@ (8001c6c <platform_write+0x78>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	4611      	mov	r1, r2
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f00b fffa 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  return 1;
 8001c10:	2001      	movs	r0, #1
}
 8001c12:	b005      	add	sp, #20
 8001c14:	f85d fb04 	ldr.w	pc, [sp], #4
		APP_LOG(TS_OFF, VLEVEL_M, "Error: Invalid handle pointer!\n\r");
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <platform_write+0x7c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	2002      	movs	r0, #2
 8001c20:	f00b fff0 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
		return -1; // Return an error code indicating invalid handle
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	e7f3      	b.n	8001c12 <platform_write+0x1e>
		HAL_StatusTypeDef status = HAL_I2C_Mem_Write(handle, dev_addr, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 500);
 8001c2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c2e:	9002      	str	r0, [sp, #8]
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	9200      	str	r2, [sp, #0]
 8001c34:	2301      	movs	r3, #1
 8001c36:	460a      	mov	r2, r1
 8001c38:	21d4      	movs	r1, #212	@ 0xd4
 8001c3a:	4660      	mov	r0, ip
 8001c3c:	f003 fe88 	bl	8005950 <HAL_I2C_Mem_Write>
		if (status == HAL_OK)
 8001c40:	b938      	cbnz	r0, 8001c52 <platform_write+0x5e>
			APP_LOG(TS_OFF, VLEVEL_M, "I2C Write Operation Successful!\n\r");
 8001c42:	4b0c      	ldr	r3, [pc, #48]	@ (8001c74 <platform_write+0x80>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	4611      	mov	r1, r2
 8001c48:	2002      	movs	r0, #2
 8001c4a:	f00b ffdb 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
			return 0; // Return 0 for successful read
 8001c4e:	2000      	movs	r0, #0
 8001c50:	e7df      	b.n	8001c12 <platform_write+0x1e>
			APP_LOG(TS_OFF, VLEVEL_M, "I2C Write Operation Failed!!\n\r");
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <platform_write+0x84>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	4611      	mov	r1, r2
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f00b ffd3 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
			HAL_NVIC_SystemReset();
 8001c5e:	f003 f801 	bl	8004c64 <HAL_NVIC_SystemReset>
			return 1; // Return non-zero for read error
 8001c62:	2001      	movs	r0, #1
 8001c64:	e7d5      	b.n	8001c12 <platform_write+0x1e>
 8001c66:	bf00      	nop
 8001c68:	200003f0 	.word	0x200003f0
 8001c6c:	08011298 	.word	0x08011298
 8001c70:	08011230 	.word	0x08011230
 8001c74:	08011254 	.word	0x08011254
 8001c78:	08011278 	.word	0x08011278

08001c7c <my_write_reg>:
    }
}

// Define the wrapper function my_write_reg
int32_t my_write_reg(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001c7c:	b508      	push	{r3, lr}
    // Cast handle to the correct type (e.g., I2C_HandleTypeDef*) and call platform_write
    return platform_write(handle, reg, bufp, len);
 8001c7e:	f7ff ffb9 	bl	8001bf4 <platform_write>
}
 8001c82:	bd08      	pop	{r3, pc}

08001c84 <platform_read>:
{
 8001c84:	b500      	push	{lr}
 8001c86:	b085      	sub	sp, #20
	if (handle == NULL)
 8001c88:	b170      	cbz	r0, 8001ca8 <platform_read+0x24>
 8001c8a:	4684      	mov	ip, r0
	if (handle == lsm6dso.Ctx.handle)
 8001c8c:	4817      	ldr	r0, [pc, #92]	@ (8001cec <platform_read+0x68>)
 8001c8e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001c90:	4560      	cmp	r0, ip
 8001c92:	d012      	beq.n	8001cba <platform_read+0x36>
  APP_LOG(TS_OFF, VLEVEL_M,"platform_read FAILED!\r\n");
 8001c94:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <platform_read+0x6c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	4611      	mov	r1, r2
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f00b ffb2 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  return 1;
 8001ca0:	2001      	movs	r0, #1
}
 8001ca2:	b005      	add	sp, #20
 8001ca4:	f85d fb04 	ldr.w	pc, [sp], #4
		APP_LOG(TS_OFF, VLEVEL_M, "Error: Invalid handle pointer!\n\r");
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <platform_read+0x70>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	4611      	mov	r1, r2
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f00b ffa8 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
		return -1; // Return an error code indicating invalid handle
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	e7f3      	b.n	8001ca2 <platform_read+0x1e>
		HAL_StatusTypeDef status = HAL_I2C_Mem_Read(handle, dev_addr, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 500);
 8001cba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001cbe:	9002      	str	r0, [sp, #8]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	9200      	str	r2, [sp, #0]
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	460a      	mov	r2, r1
 8001cc8:	21d5      	movs	r1, #213	@ 0xd5
 8001cca:	4660      	mov	r0, ip
 8001ccc:	f003 ff14 	bl	8005af8 <HAL_I2C_Mem_Read>
		if (status == HAL_OK)
 8001cd0:	b908      	cbnz	r0, 8001cd6 <platform_read+0x52>
			return 0; // Return 0 for successful read
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	e7e5      	b.n	8001ca2 <platform_read+0x1e>
			APP_LOG(TS_OFF, VLEVEL_M, "I2C Read Operation Failed!!\n\r");
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <platform_read+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4611      	mov	r1, r2
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f00b ff91 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
			HAL_NVIC_SystemReset();
 8001ce2:	f002 ffbf 	bl	8004c64 <HAL_NVIC_SystemReset>
			return 1; // Return non-zero for read error
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e7db      	b.n	8001ca2 <platform_read+0x1e>
 8001cea:	bf00      	nop
 8001cec:	200003f0 	.word	0x200003f0
 8001cf0:	080112d4 	.word	0x080112d4
 8001cf4:	08011230 	.word	0x08011230
 8001cf8:	080112b4 	.word	0x080112b4

08001cfc <my_read_reg>:

// Define the wrapper function my_read_reg
int32_t my_read_reg(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8001cfc:	b508      	push	{r3, lr}
    // Cast handle to the correct type (e.g., I2C_HandleTypeDef*) and call platform_read
    return platform_read(handle, reg, bufp, len);
 8001cfe:	f7ff ffc1 	bl	8001c84 <platform_read>
}
 8001d02:	bd08      	pop	{r3, pc}

08001d04 <BSP_GetTick>:
{
 8001d04:	b508      	push	{r3, lr}
    return HAL_GetTick();
 8001d06:	f000 fed3 	bl	8002ab0 <HAL_GetTick>
}
 8001d0a:	bd08      	pop	{r3, pc}

08001d0c <saveIDsToEEPROM>:

void saveIDsToEEPROM(I2C_HandleTypeDef *hi2c1, uint16_t id1, uint16_t id2, uint16_t startAddress)
{
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	4605      	mov	r5, r0
 8001d12:	460e      	mov	r6, r1
 8001d14:	4617      	mov	r7, r2
 8001d16:	461c      	mov	r4, r3

	printf("Save device IDS to EEPROM\n\r");
 8001d18:	483d      	ldr	r0, [pc, #244]	@ (8001e10 <saveIDsToEEPROM+0x104>)
 8001d1a:	f00c fe8b 	bl	800ea34 <iprintf>

	// Construct the high and low bytes of the pairingID 1
	uint8_t data_high_byte_1  = (id1 >> 8) & 0xFF;
 8001d1e:	0a33      	lsrs	r3, r6, #8
 8001d20:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t data_low_byte_1   = id1 & 0xFF;
 8001d24:	f88d 6016 	strb.w	r6, [sp, #22]

	// Construct the high and low bytes of pairing ID 2
	uint8_t data_high_byte_2  = (id2 >> 8) & 0xFF;
 8001d28:	0a3b      	lsrs	r3, r7, #8
 8001d2a:	f88d 3015 	strb.w	r3, [sp, #21]
	uint8_t data_low_byte_2   = id2 & 0xFF;
 8001d2e:	f88d 7014 	strb.w	r7, [sp, #20]

	// Perform the I2C write operations
    printf("Writing to address: 0x%02X, id1 Value: 0x%02X, id2 Value: 0x%02X\n\r", startAddress, id1, id2);
 8001d32:	463b      	mov	r3, r7
 8001d34:	4632      	mov	r2, r6
 8001d36:	4621      	mov	r1, r4
 8001d38:	4836      	ldr	r0, [pc, #216]	@ (8001e14 <saveIDsToEEPROM+0x108>)
 8001d3a:	f00c fe7b 	bl	800ea34 <iprintf>
    printf("data_high_byte_1: 0x%02X, data_low_byte_1: 0x%02X\n\r", data_high_byte_1, data_low_byte_1);
 8001d3e:	f89d 2016 	ldrb.w	r2, [sp, #22]
 8001d42:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8001d46:	4834      	ldr	r0, [pc, #208]	@ (8001e18 <saveIDsToEEPROM+0x10c>)
 8001d48:	f00c fe74 	bl	800ea34 <iprintf>
    printf("data_high_byte_2: 0x%02X, data_low_byte_2: 0x%02X\n\r", data_high_byte_2, data_low_byte_2);
 8001d4c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001d50:	f89d 1015 	ldrb.w	r1, [sp, #21]
 8001d54:	4831      	ldr	r0, [pc, #196]	@ (8001e1c <saveIDsToEEPROM+0x110>)
 8001d56:	f00c fe6d 	bl	800ea34 <iprintf>

	// Send high and low bytes of pairingId1
    HAL_StatusTypeDef receiveStatus = HAL_I2C_Mem_Write(hi2c1, EEPROM_ADDR, startAddress + 1, 1, &data_high_byte_1, 1, HAL_MAX_DELAY);
 8001d5a:	1c62      	adds	r2, r4, #1
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	2301      	movs	r3, #1
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	f10d 0117 	add.w	r1, sp, #23
 8001d6a:	9100      	str	r1, [sp, #0]
 8001d6c:	b292      	uxth	r2, r2
 8001d6e:	21a0      	movs	r1, #160	@ 0xa0
 8001d70:	4628      	mov	r0, r5
 8001d72:	f003 fded 	bl	8005950 <HAL_I2C_Mem_Write>

	if (receiveStatus == HAL_OK)
 8001d76:	2800      	cmp	r0, #0
 8001d78:	d139      	bne.n	8001dee <saveIDsToEEPROM+0xe2>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Successful!\n\r");
 8001d7a:	4829      	ldr	r0, [pc, #164]	@ (8001e20 <saveIDsToEEPROM+0x114>)
 8001d7c:	f00c fe5a 	bl	800ea34 <iprintf>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
	}

	// Send high and low bytes of pairingId2
	receiveStatus = HAL_I2C_Mem_Write(hi2c1, EEPROM_ADDR, startAddress + 2, 1, &data_low_byte_1, 1, HAL_MAX_DELAY);
 8001d80:	1ca2      	adds	r2, r4, #2
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	2301      	movs	r3, #1
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	f10d 0116 	add.w	r1, sp, #22
 8001d90:	9100      	str	r1, [sp, #0]
 8001d92:	b292      	uxth	r2, r2
 8001d94:	21a0      	movs	r1, #160	@ 0xa0
 8001d96:	4628      	mov	r0, r5
 8001d98:	f003 fdda 	bl	8005950 <HAL_I2C_Mem_Write>

	if (receiveStatus == HAL_OK)
 8001d9c:	bb58      	cbnz	r0, 8001df6 <saveIDsToEEPROM+0xea>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Successful!\n\r");
 8001d9e:	4820      	ldr	r0, [pc, #128]	@ (8001e20 <saveIDsToEEPROM+0x114>)
 8001da0:	f00c fe48 	bl	800ea34 <iprintf>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
	}

	// Send high and low bytes of pairingId2
	receiveStatus = HAL_I2C_Mem_Write(hi2c1, EEPROM_ADDR, startAddress + 3, 1, &data_high_byte_2, 1, HAL_MAX_DELAY);
 8001da4:	1ce2      	adds	r2, r4, #3
 8001da6:	f04f 33ff 	mov.w	r3, #4294967295
 8001daa:	9302      	str	r3, [sp, #8]
 8001dac:	2301      	movs	r3, #1
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	f10d 0115 	add.w	r1, sp, #21
 8001db4:	9100      	str	r1, [sp, #0]
 8001db6:	b292      	uxth	r2, r2
 8001db8:	21a0      	movs	r1, #160	@ 0xa0
 8001dba:	4628      	mov	r0, r5
 8001dbc:	f003 fdc8 	bl	8005950 <HAL_I2C_Mem_Write>

	if (receiveStatus == HAL_OK)
 8001dc0:	b9e8      	cbnz	r0, 8001dfe <saveIDsToEEPROM+0xf2>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Successful!\n\r");
 8001dc2:	4817      	ldr	r0, [pc, #92]	@ (8001e20 <saveIDsToEEPROM+0x114>)
 8001dc4:	f00c fe36 	bl	800ea34 <iprintf>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
	}

	// Send high and low bytes of pairingId2
	receiveStatus = HAL_I2C_Mem_Write(hi2c1, EEPROM_ADDR, startAddress + 4, 1, &data_low_byte_2, 1, HAL_MAX_DELAY);
 8001dc8:	1d22      	adds	r2, r4, #4
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	9302      	str	r3, [sp, #8]
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	9301      	str	r3, [sp, #4]
 8001dd4:	a905      	add	r1, sp, #20
 8001dd6:	9100      	str	r1, [sp, #0]
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	21a0      	movs	r1, #160	@ 0xa0
 8001ddc:	4628      	mov	r0, r5
 8001dde:	f003 fdb7 	bl	8005950 <HAL_I2C_Mem_Write>

	if (receiveStatus == HAL_OK)
 8001de2:	b980      	cbnz	r0, 8001e06 <saveIDsToEEPROM+0xfa>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Successful!\n\r");
 8001de4:	480e      	ldr	r0, [pc, #56]	@ (8001e20 <saveIDsToEEPROM+0x114>)
 8001de6:	f00c fe25 	bl	800ea34 <iprintf>
	}
	else
	{
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
	}
}
 8001dea:	b007      	add	sp, #28
 8001dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
 8001dee:	480d      	ldr	r0, [pc, #52]	@ (8001e24 <saveIDsToEEPROM+0x118>)
 8001df0:	f00c fe20 	bl	800ea34 <iprintf>
 8001df4:	e7c4      	b.n	8001d80 <saveIDsToEEPROM+0x74>
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
 8001df6:	480b      	ldr	r0, [pc, #44]	@ (8001e24 <saveIDsToEEPROM+0x118>)
 8001df8:	f00c fe1c 	bl	800ea34 <iprintf>
 8001dfc:	e7d2      	b.n	8001da4 <saveIDsToEEPROM+0x98>
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
 8001dfe:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <saveIDsToEEPROM+0x118>)
 8001e00:	f00c fe18 	bl	800ea34 <iprintf>
 8001e04:	e7e0      	b.n	8001dc8 <saveIDsToEEPROM+0xbc>
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
 8001e06:	4807      	ldr	r0, [pc, #28]	@ (8001e24 <saveIDsToEEPROM+0x118>)
 8001e08:	f00c fe14 	bl	800ea34 <iprintf>
}
 8001e0c:	e7ed      	b.n	8001dea <saveIDsToEEPROM+0xde>
 8001e0e:	bf00      	nop
 8001e10:	080112ec 	.word	0x080112ec
 8001e14:	08011308 	.word	0x08011308
 8001e18:	0801134c 	.word	0x0801134c
 8001e1c:	08011380 	.word	0x08011380
 8001e20:	080113b4 	.word	0x080113b4
 8001e24:	080113e0 	.word	0x080113e0

08001e28 <readIDsFromEEPROM>:

bool readIDsFromEEPROM(I2C_HandleTypeDef *hi2c1, uint16_t *id1, uint16_t *id2, uint16_t startAddress)
{
 8001e28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e2c:	b085      	sub	sp, #20
 8001e2e:	4606      	mov	r6, r0
 8001e30:	460f      	mov	r7, r1
 8001e32:	4690      	mov	r8, r2
 8001e34:	461d      	mov	r5, r3

	printf("Read Device IDS from EEPROM\n\r");
 8001e36:	4858      	ldr	r0, [pc, #352]	@ (8001f98 <readIDsFromEEPROM+0x170>)
 8001e38:	f00c fdfc 	bl	800ea34 <iprintf>
	// construct the read buffer and temp variables
	uint8_t * read_buffer 	= NULL;
	uint16_t temp1 			= 0;
	uint16_t temp2 			= 0;

	read_buffer = (uint8_t *)malloc(4 * sizeof(uint8_t));
 8001e3c:	2004      	movs	r0, #4
 8001e3e:	f00b ff9d 	bl	800dd7c <malloc>
 8001e42:	4604      	mov	r4, r0

    HAL_StatusTypeDef receiveStatus = HAL_I2C_Mem_Read(hi2c1, EEPROM_ADDR, startAddress + 1, 1, &read_buffer[0], 1, HAL_MAX_DELAY);
 8001e44:	1c6a      	adds	r2, r5, #1
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	9000      	str	r0, [sp, #0]
 8001e52:	b292      	uxth	r2, r2
 8001e54:	21a0      	movs	r1, #160	@ 0xa0
 8001e56:	4630      	mov	r0, r6
 8001e58:	f003 fe4e 	bl	8005af8 <HAL_I2C_Mem_Read>
	if (receiveStatus != HAL_OK)
 8001e5c:	2800      	cmp	r0, #0
 8001e5e:	d176      	bne.n	8001f4e <readIDsFromEEPROM+0x126>
		return false;
	}

	// printf("1. Read_Buffer[0] = 0x%02X\n\r", read_buffer[0]);

	receiveStatus = HAL_I2C_Mem_Read(hi2c1, EEPROM_ADDR, startAddress + 2, 1, &read_buffer[1], 1, HAL_MAX_DELAY);
 8001e60:	1caa      	adds	r2, r5, #2
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	18e1      	adds	r1, r4, r3
 8001e6e:	9100      	str	r1, [sp, #0]
 8001e70:	b292      	uxth	r2, r2
 8001e72:	21a0      	movs	r1, #160	@ 0xa0
 8001e74:	4630      	mov	r0, r6
 8001e76:	f003 fe3f 	bl	8005af8 <HAL_I2C_Mem_Read>
	if (receiveStatus != HAL_OK)
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	2800      	cmp	r0, #0
 8001e7e:	d16e      	bne.n	8001f5e <readIDsFromEEPROM+0x136>
		return false;
	}

	// printf("2. Read_Buffer[1] = 0x%02X\n\r", read_buffer[1]);

	*id1 = (uint16_t)(read_buffer[0] << 8) | read_buffer[1];
 8001e80:	7823      	ldrb	r3, [r4, #0]
 8001e82:	7861      	ldrb	r1, [r4, #1]
 8001e84:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8001e88:	8039      	strh	r1, [r7, #0]
	temp1 = *id1;

	// printf("3. Read Successful: id1: 0x%04X\n\r", *id1);
	// printf("3. Read Successful: temp1: 0x%04X\n\r", temp1);

	if((temp1 != 0x0000) && (temp1 != 0xFFFF))
 8001e8a:	1e4f      	subs	r7, r1, #1
 8001e8c:	b2bf      	uxth	r7, r7
 8001e8e:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8001e92:	429f      	cmp	r7, r3
 8001e94:	d868      	bhi.n	8001f68 <readIDsFromEEPROM+0x140>
	{
		deviceIds.deviceID = temp1;
 8001e96:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 8001f9c <readIDsFromEEPROM+0x174>
 8001e9a:	f8a9 1000 	strh.w	r1, [r9]
		printf("4. deviceIds.deviceID: 0x%04X\n\r", deviceIds.deviceID);
 8001e9e:	4840      	ldr	r0, [pc, #256]	@ (8001fa0 <readIDsFromEEPROM+0x178>)
 8001ea0:	f00c fdc8 	bl	800ea34 <iprintf>
		deviceIds.combinedDeviceID[0]        = deviceIds.deviceID;
 8001ea4:	f8b9 3000 	ldrh.w	r3, [r9]
 8001ea8:	f8a9 3004 	strh.w	r3, [r9, #4]
	else
	{
		printf("4. No deviceID saved to EEPROM, waiting for pairing...\n\r");
	}

    receiveStatus = HAL_I2C_Mem_Read(hi2c1, EEPROM_ADDR, startAddress + 3, 1, &read_buffer[2], 1, HAL_MAX_DELAY);
 8001eac:	1cea      	adds	r2, r5, #3
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb2:	9302      	str	r3, [sp, #8]
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	9301      	str	r3, [sp, #4]
 8001eb8:	1ca1      	adds	r1, r4, #2
 8001eba:	9100      	str	r1, [sp, #0]
 8001ebc:	b292      	uxth	r2, r2
 8001ebe:	21a0      	movs	r1, #160	@ 0xa0
 8001ec0:	4630      	mov	r0, r6
 8001ec2:	f003 fe19 	bl	8005af8 <HAL_I2C_Mem_Read>
	if (receiveStatus != HAL_OK)
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d151      	bne.n	8001f70 <readIDsFromEEPROM+0x148>
	{
		printf("Read Failed (ID1) - HAL Status: %u\n\r", receiveStatus);
		return false;
	}

	receiveStatus = HAL_I2C_Mem_Read(hi2c1, EEPROM_ADDR, startAddress + 4, 1, &read_buffer[3], 1, HAL_MAX_DELAY);
 8001ecc:	3504      	adds	r5, #4
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	9302      	str	r3, [sp, #8]
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	1ce2      	adds	r2, r4, #3
 8001eda:	9200      	str	r2, [sp, #0]
 8001edc:	b2aa      	uxth	r2, r5
 8001ede:	21a0      	movs	r1, #160	@ 0xa0
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f003 fe09 	bl	8005af8 <HAL_I2C_Mem_Read>
	if (receiveStatus != HAL_OK)
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	2800      	cmp	r0, #0
 8001eea:	d146      	bne.n	8001f7a <readIDsFromEEPROM+0x152>
	{
		printf("Read Failed (ID2) - HAL Status: %u\n\r", receiveStatus);
		return false;
	}

	*id2 = (uint16_t)(read_buffer[2] << 8) | read_buffer[3];
 8001eec:	78a3      	ldrb	r3, [r4, #2]
 8001eee:	78e5      	ldrb	r5, [r4, #3]
 8001ef0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8001ef4:	f8a8 5000 	strh.w	r5, [r8]
	temp2 = *id2;

	// printf("5. Read Successful: id1: 0x%04X, id2: 0x%04X\n\r", *id1, *id2);
	// printf("5. Read Successful: temp2: 0x%04X\n\r", temp2);

	if((temp2 != 0x0000) && (temp2 != 0xFFFF))
 8001ef8:	1e6b      	subs	r3, r5, #1
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d83f      	bhi.n	8001f84 <readIDsFromEEPROM+0x15c>
	{
		deviceIds.otherDeviceID = temp2;
 8001f04:	4e25      	ldr	r6, [pc, #148]	@ (8001f9c <readIDsFromEEPROM+0x174>)
 8001f06:	8075      	strh	r5, [r6, #2]
		printf("6. deviceIds.otherDeviceID: 0x%04X\n\r", deviceIds.otherDeviceID);
 8001f08:	4629      	mov	r1, r5
 8001f0a:	4826      	ldr	r0, [pc, #152]	@ (8001fa4 <readIDsFromEEPROM+0x17c>)
 8001f0c:	f00c fd92 	bl	800ea34 <iprintf>

		deviceIds.combinedDeviceID[1]        = deviceIds.otherDeviceID;
 8001f10:	8873      	ldrh	r3, [r6, #2]
 8001f12:	80f3      	strh	r3, [r6, #6]
		deviceIds.swappedCombinedDeviceID[0] = deviceIds.combinedDeviceID[1];
 8001f14:	8133      	strh	r3, [r6, #8]
		deviceIds.swappedCombinedDeviceID[1] = deviceIds.combinedDeviceID[0];
 8001f16:	88b1      	ldrh	r1, [r6, #4]
 8001f18:	8171      	strh	r1, [r6, #10]

		swappedCombinedDeviceID[0] 			 = deviceIds.swappedCombinedDeviceID[0];
 8001f1a:	4a23      	ldr	r2, [pc, #140]	@ (8001fa8 <readIDsFromEEPROM+0x180>)
 8001f1c:	8013      	strh	r3, [r2, #0]
	    swappedCombinedDeviceID[1] 			 = deviceIds.swappedCombinedDeviceID[1];
 8001f1e:	8051      	strh	r1, [r2, #2]
	else
	{
		printf("6. No deviceID saved to EEPROM, waiting for pairing...\n\r");
	}

	printf("7. deviceIds.deviceID = 0x%04X\n\r", deviceIds.deviceID);
 8001f20:	4e1e      	ldr	r6, [pc, #120]	@ (8001f9c <readIDsFromEEPROM+0x174>)
 8001f22:	8831      	ldrh	r1, [r6, #0]
 8001f24:	4821      	ldr	r0, [pc, #132]	@ (8001fac <readIDsFromEEPROM+0x184>)
 8001f26:	f00c fd85 	bl	800ea34 <iprintf>
	printf("8. deviceIds.otherDeviceID = 0x%04X\n\r", deviceIds.otherDeviceID);
 8001f2a:	8871      	ldrh	r1, [r6, #2]
 8001f2c:	4820      	ldr	r0, [pc, #128]	@ (8001fb0 <readIDsFromEEPROM+0x188>)
 8001f2e:	f00c fd81 	bl	800ea34 <iprintf>

	free(read_buffer);
 8001f32:	4620      	mov	r0, r4
 8001f34:	f00b ff2a 	bl	800dd8c <free>

	if((temp1 != 0) && (temp1 != 0xFFFF) && (temp2 != 0) && (temp2 != 0xFFFF))
 8001f38:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8001f3c:	429f      	cmp	r7, r3
 8001f3e:	d827      	bhi.n	8001f90 <readIDsFromEEPROM+0x168>
 8001f40:	b345      	cbz	r5, 8001f94 <readIDsFromEEPROM+0x16c>
 8001f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f46:	429d      	cmp	r5, r3
 8001f48:	d020      	beq.n	8001f8c <readIDsFromEEPROM+0x164>
	{
		return true;
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	e004      	b.n	8001f58 <readIDsFromEEPROM+0x130>
 8001f4e:	4601      	mov	r1, r0
		printf("Read Failed (ID1) - HAL Status: %u\n\r", receiveStatus);
 8001f50:	4818      	ldr	r0, [pc, #96]	@ (8001fb4 <readIDsFromEEPROM+0x18c>)
 8001f52:	f00c fd6f 	bl	800ea34 <iprintf>
		return false;
 8001f56:	2000      	movs	r0, #0

	else
	{
		return false;
	}
}
 8001f58:	b005      	add	sp, #20
 8001f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Read Failed (ID2) - HAL Status: %u\n\r", receiveStatus);
 8001f5e:	4816      	ldr	r0, [pc, #88]	@ (8001fb8 <readIDsFromEEPROM+0x190>)
 8001f60:	f00c fd68 	bl	800ea34 <iprintf>
		return false;
 8001f64:	2000      	movs	r0, #0
 8001f66:	e7f7      	b.n	8001f58 <readIDsFromEEPROM+0x130>
		printf("4. No deviceID saved to EEPROM, waiting for pairing...\n\r");
 8001f68:	4814      	ldr	r0, [pc, #80]	@ (8001fbc <readIDsFromEEPROM+0x194>)
 8001f6a:	f00c fd63 	bl	800ea34 <iprintf>
 8001f6e:	e79d      	b.n	8001eac <readIDsFromEEPROM+0x84>
		printf("Read Failed (ID1) - HAL Status: %u\n\r", receiveStatus);
 8001f70:	4810      	ldr	r0, [pc, #64]	@ (8001fb4 <readIDsFromEEPROM+0x18c>)
 8001f72:	f00c fd5f 	bl	800ea34 <iprintf>
		return false;
 8001f76:	2000      	movs	r0, #0
 8001f78:	e7ee      	b.n	8001f58 <readIDsFromEEPROM+0x130>
		printf("Read Failed (ID2) - HAL Status: %u\n\r", receiveStatus);
 8001f7a:	480f      	ldr	r0, [pc, #60]	@ (8001fb8 <readIDsFromEEPROM+0x190>)
 8001f7c:	f00c fd5a 	bl	800ea34 <iprintf>
		return false;
 8001f80:	2000      	movs	r0, #0
 8001f82:	e7e9      	b.n	8001f58 <readIDsFromEEPROM+0x130>
		printf("6. No deviceID saved to EEPROM, waiting for pairing...\n\r");
 8001f84:	480e      	ldr	r0, [pc, #56]	@ (8001fc0 <readIDsFromEEPROM+0x198>)
 8001f86:	f00c fd55 	bl	800ea34 <iprintf>
 8001f8a:	e7c9      	b.n	8001f20 <readIDsFromEEPROM+0xf8>
		return false;
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	e7e3      	b.n	8001f58 <readIDsFromEEPROM+0x130>
 8001f90:	2000      	movs	r0, #0
 8001f92:	e7e1      	b.n	8001f58 <readIDsFromEEPROM+0x130>
 8001f94:	2000      	movs	r0, #0
 8001f96:	e7df      	b.n	8001f58 <readIDsFromEEPROM+0x130>
 8001f98:	08011408 	.word	0x08011408
 8001f9c:	20000458 	.word	0x20000458
 8001fa0:	08011478 	.word	0x08011478
 8001fa4:	080114d4 	.word	0x080114d4
 8001fa8:	2000046c 	.word	0x2000046c
 8001fac:	08011538 	.word	0x08011538
 8001fb0:	0801155c 	.word	0x0801155c
 8001fb4:	08011428 	.word	0x08011428
 8001fb8:	08011450 	.word	0x08011450
 8001fbc:	08011498 	.word	0x08011498
 8001fc0:	080114fc 	.word	0x080114fc

08001fc4 <ReadRegister>:

// Function to read a 16-bit register
uint16_t ReadRegister(uint8_t regAddress)
{
 8001fc4:	b510      	push	{r4, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	4604      	mov	r4, r0
    uint8_t regData[2]; // Buffer to store the read data
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, MAX17261_WRITE_ADDR, regAddress, 1, regData, 2, HAL_MAX_DELAY);
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
 8001fce:	9302      	str	r3, [sp, #8]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	ab05      	add	r3, sp, #20
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	4602      	mov	r2, r0
 8001fdc:	216c      	movs	r1, #108	@ 0x6c
 8001fde:	480e      	ldr	r0, [pc, #56]	@ (8002018 <ReadRegister+0x54>)
 8001fe0:	f003 fd8a 	bl	8005af8 <HAL_I2C_Mem_Read>
    if (status == HAL_OK)
 8001fe4:	b978      	cbnz	r0, 8002006 <ReadRegister+0x42>
    {
    	printf("Value of register %02X: 0x%02X%02X\n\r", regAddress, regData[0], regData[1]);
 8001fe6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001fea:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8001fee:	4621      	mov	r1, r4
 8001ff0:	480a      	ldr	r0, [pc, #40]	@ (800201c <ReadRegister+0x58>)
 8001ff2:	f00c fd1f 	bl	800ea34 <iprintf>
        // Combine the two bytes into a 16-bit value
        return (regData[1] << 8) | regData[0];  //////////// swap 0 and 1 indexes!!!!!!
 8001ff6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8001ffa:	f89d 0014 	ldrb.w	r0, [sp, #20]
 8001ffe:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
    else
    {
    	printf("Failed to read value of register %02X, return value = %d\n\r", regAddress, status);
        return 0xFFFF; // Placeholder value to indicate error
    }
}
 8002002:	b006      	add	sp, #24
 8002004:	bd10      	pop	{r4, pc}
 8002006:	4602      	mov	r2, r0
    	printf("Failed to read value of register %02X, return value = %d\n\r", regAddress, status);
 8002008:	4621      	mov	r1, r4
 800200a:	4805      	ldr	r0, [pc, #20]	@ (8002020 <ReadRegister+0x5c>)
 800200c:	f00c fd12 	bl	800ea34 <iprintf>
        return 0xFFFF; // Placeholder value to indicate error
 8002010:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002014:	e7f5      	b.n	8002002 <ReadRegister+0x3e>
 8002016:	bf00      	nop
 8002018:	200002f4 	.word	0x200002f4
 800201c:	08011584 	.word	0x08011584
 8002020:	080115ac 	.word	0x080115ac

08002024 <WriteRegister>:

// Function to write a 16-bit value to a register
void WriteRegister(uint8_t regAddress, uint16_t data)
{
 8002024:	b530      	push	{r4, r5, lr}
 8002026:	b087      	sub	sp, #28
 8002028:	4605      	mov	r5, r0
 800202a:	460c      	mov	r4, r1
    uint8_t regData[2]; // Buffer to store the data to be written
    regData[0] = data & 0xFF; // Lower byte
 800202c:	f88d 1014 	strb.w	r1, [sp, #20]
    regData[1] = (data >> 8) & 0xFF; // Upper byte
 8002030:	0a0b      	lsrs	r3, r1, #8
 8002032:	f88d 3015 	strb.w	r3, [sp, #21]

    HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c1, MAX17261_WRITE_ADDR, regAddress, 1, regData, 2, HAL_MAX_DELAY);
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
 800203a:	9302      	str	r3, [sp, #8]
 800203c:	2302      	movs	r3, #2
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	ab05      	add	r3, sp, #20
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2301      	movs	r3, #1
 8002046:	4602      	mov	r2, r0
 8002048:	216c      	movs	r1, #108	@ 0x6c
 800204a:	4808      	ldr	r0, [pc, #32]	@ (800206c <WriteRegister+0x48>)
 800204c:	f003 fc80 	bl	8005950 <HAL_I2C_Mem_Write>
    if (status == HAL_OK)
 8002050:	b930      	cbnz	r0, 8002060 <WriteRegister+0x3c>
   {
	printf("Write data: %04X to register %02X Success!!!\n\r", data, regAddress);
 8002052:	462a      	mov	r2, r5
 8002054:	4621      	mov	r1, r4
 8002056:	4806      	ldr	r0, [pc, #24]	@ (8002070 <WriteRegister+0x4c>)
 8002058:	f00c fcec 	bl	800ea34 <iprintf>
   }
   else
   {
	   printf("Write data: %04X to register %02X FAILED\n\r", data, regAddress);
   }
}
 800205c:	b007      	add	sp, #28
 800205e:	bd30      	pop	{r4, r5, pc}
	   printf("Write data: %04X to register %02X FAILED\n\r", data, regAddress);
 8002060:	462a      	mov	r2, r5
 8002062:	4621      	mov	r1, r4
 8002064:	4803      	ldr	r0, [pc, #12]	@ (8002074 <WriteRegister+0x50>)
 8002066:	f00c fce5 	bl	800ea34 <iprintf>
}
 800206a:	e7f7      	b.n	800205c <WriteRegister+0x38>
 800206c:	200002f4 	.word	0x200002f4
 8002070:	080115e8 	.word	0x080115e8
 8002074:	08011618 	.word	0x08011618

08002078 <Wait>:

// Function to wait for a certain amount of time (example implementation)
void Wait(uint16_t milliseconds)
{
 8002078:	b508      	push	{r3, lr}
	HAL_Delay(milliseconds);
 800207a:	f000 fd25 	bl	8002ac8 <HAL_Delay>
}
 800207e:	bd08      	pop	{r3, pc}

08002080 <WriteAndVerifyRegister>:

// Function to write a 16-bit value to a register and verify
void WriteAndVerifyRegister(uint8_t regAddress, uint16_t data)
{
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4605      	mov	r5, r0
 8002084:	460c      	mov	r4, r1
    // Write the data to the register
    WriteRegister(regAddress, data);
 8002086:	f7ff ffcd 	bl	8002024 <WriteRegister>

    // Read back the data from the register
    uint16_t readData = ReadRegister(regAddress);
 800208a:	4628      	mov	r0, r5
 800208c:	f7ff ff9a 	bl	8001fc4 <ReadRegister>

    // Compare the written data with the read data
    if (readData == data)
 8002090:	4284      	cmp	r4, r0
 8002092:	d006      	beq.n	80020a2 <WriteAndVerifyRegister+0x22>
 8002094:	4603      	mov	r3, r0
    {
        printf("Write and verify data: %04X to register %02X successful!\n\r", data, regAddress);
    }
    else
    {
        printf("Write and verify data: %04X to register %02X failed! Read data: %04X\n\r", data, regAddress, readData);
 8002096:	462a      	mov	r2, r5
 8002098:	4621      	mov	r1, r4
 800209a:	4805      	ldr	r0, [pc, #20]	@ (80020b0 <WriteAndVerifyRegister+0x30>)
 800209c:	f00c fcca 	bl	800ea34 <iprintf>
    }
}
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
        printf("Write and verify data: %04X to register %02X successful!\n\r", data, regAddress);
 80020a2:	462a      	mov	r2, r5
 80020a4:	4621      	mov	r1, r4
 80020a6:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <WriteAndVerifyRegister+0x34>)
 80020a8:	f00c fcc4 	bl	800ea34 <iprintf>
 80020ac:	e7f8      	b.n	80020a0 <WriteAndVerifyRegister+0x20>
 80020ae:	bf00      	nop
 80020b0:	08011680 	.word	0x08011680
 80020b4:	08011644 	.word	0x08011644

080020b8 <MAX17261_Init>:

void MAX17261_Init(void)
{
 80020b8:	b530      	push	{r4, r5, lr}
 80020ba:	b085      	sub	sp, #20
    printf("Entered the MAX17261_Init function!\n\r");
 80020bc:	4840      	ldr	r0, [pc, #256]	@ (80021c0 <MAX17261_Init+0x108>)
 80020be:	f00c fcb9 	bl	800ea34 <iprintf>

    uint8_t reg3a_data[2] = {0x82, 0x4B}; // Data to be written to register 3ah for configuration
 80020c2:	f644 3382 	movw	r3, #19330	@ 0x4b82
 80020c6:	f8ad 300c 	strh.w	r3, [sp, #12]
	uint8_t reg18_data[2] = {0xC3, 0x50};
 80020ca:	f245 03c3 	movw	r3, #20675	@ 0x50c3
 80020ce:	f8ad 3008 	strh.w	r3, [sp, #8]
	uint8_t reg1E_data[2] = {0x06, 0x40};
 80020d2:	f244 0306 	movw	r3, #16390	@ 0x4006
 80020d6:	f8ad 3004 	strh.w	r3, [sp, #4]

	/////////////////////////////////////////////////////////////////////////////////

	// Step 0:
	uint16_t StatusPOR = ReadRegister(0x00) & 0x0002;
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff ff72 	bl	8001fc4 <ReadRegister>
	if(StatusPOR==0)
 80020e0:	f010 0f02 	tst.w	r0, #2
 80020e4:	d125      	bne.n	8002132 <MAX17261_Init+0x7a>

	goto Step3_2;


Step3_2:
		uint16_t RepCap = ReadRegister(0x05); // Read RepCap
 80020e6:	2005      	movs	r0, #5
 80020e8:	f7ff ff6c 	bl	8001fc4 <ReadRegister>
 80020ec:	4605      	mov	r5, r0
		uint16_t RepSOC = ReadRegister(0x06); // Read RepSOC
 80020ee:	2006      	movs	r0, #6
 80020f0:	f7ff ff68 	bl	8001fc4 <ReadRegister>

		// RepSOC has a LSB of 1/256%. Round the RepSOC to the nearest integer value
		float RepSOC_percentage = (float)RepSOC / 256.0; // Calculate RepSOC percentage
 80020f4:	f7fe fe36 	bl	8000d64 <__aeabi_ui2f>
 80020f8:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80020fc:	f7fe fe8a 	bl	8000e14 <__aeabi_fmul>
		int RepSOC_rounded = (int)(RepSOC_percentage + 0.5); // Round RepSOC to the nearest integer
 8002100:	f7fe f9fa 	bl	80004f8 <__aeabi_f2d>
 8002104:	2200      	movs	r2, #0
 8002106:	4b2f      	ldr	r3, [pc, #188]	@ (80021c4 <MAX17261_Init+0x10c>)
 8002108:	f7fe f898 	bl	800023c <__adddf3>
 800210c:	f7fe fcfc 	bl	8000b08 <__aeabi_d2iz>
 8002110:	4604      	mov	r4, r0

		printf("RepCap: %u mAh\n\r", RepCap);
 8002112:	4629      	mov	r1, r5
 8002114:	482c      	ldr	r0, [pc, #176]	@ (80021c8 <MAX17261_Init+0x110>)
 8002116:	f00c fc8d 	bl	800ea34 <iprintf>
		printf("RepSOC: %d%%\n\r", RepSOC_rounded);
 800211a:	4621      	mov	r1, r4
 800211c:	482b      	ldr	r0, [pc, #172]	@ (80021cc <MAX17261_Init+0x114>)
 800211e:	f00c fc89 	bl	800ea34 <iprintf>


	printf("MAX17261_Init COMPLETE!\n\r");
 8002122:	482b      	ldr	r0, [pc, #172]	@ (80021d0 <MAX17261_Init+0x118>)
 8002124:	f00c fc86 	bl	800ea34 <iprintf>


}
 8002128:	b005      	add	sp, #20
 800212a:	bd30      	pop	{r4, r5, pc}
		Wait(10);
 800212c:	200a      	movs	r0, #10
 800212e:	f7ff ffa3 	bl	8002078 <Wait>
	while (ReadRegister(0x3D) & 1)
 8002132:	203d      	movs	r0, #61	@ 0x3d
 8002134:	f7ff ff46 	bl	8001fc4 <ReadRegister>
 8002138:	f010 0f01 	tst.w	r0, #1
 800213c:	d1f6      	bne.n	800212c <MAX17261_Init+0x74>
	uint16_t HibCFG = ReadRegister(0xBA); // Store original value // Write this value back into register 0xBA after 2nd while loop
 800213e:	20ba      	movs	r0, #186	@ 0xba
 8002140:	f7ff ff40 	bl	8001fc4 <ReadRegister>
 8002144:	4604      	mov	r4, r0
	printf("Original HibCFG value: 0x%04X\n\r", HibCFG); // Print the original HibCFG value
 8002146:	4601      	mov	r1, r0
 8002148:	4822      	ldr	r0, [pc, #136]	@ (80021d4 <MAX17261_Init+0x11c>)
 800214a:	f00c fc73 	bl	800ea34 <iprintf>
	WriteRegister(0x60, 0x90); // Exit Hibernate Mode step 1
 800214e:	2190      	movs	r1, #144	@ 0x90
 8002150:	2060      	movs	r0, #96	@ 0x60
 8002152:	f7ff ff67 	bl	8002024 <WriteRegister>
	WriteRegister(0xBA, 0x00); // Exit Hibernate Mode step 2
 8002156:	2100      	movs	r1, #0
 8002158:	20ba      	movs	r0, #186	@ 0xba
 800215a:	f7ff ff63 	bl	8002024 <WriteRegister>
	WriteRegister(0x60, 0x00); // Exit Hibernate Mode step 3
 800215e:	2100      	movs	r1, #0
 8002160:	2060      	movs	r0, #96	@ 0x60
 8002162:	f7ff ff5f 	bl	8002024 <WriteRegister>
	WriteRegister(0x18, (reg18_data[1] << 8) | reg18_data[0]); // Write DesignCap
 8002166:	f245 01c3 	movw	r1, #20675	@ 0x50c3
 800216a:	2018      	movs	r0, #24
 800216c:	f7ff ff5a 	bl	8002024 <WriteRegister>
	WriteRegister(0x1E, (reg1E_data[1] << 8) | reg1E_data[0]); // Write IchgTerm
 8002170:	f244 0106 	movw	r1, #16390	@ 0x4006
 8002174:	201e      	movs	r0, #30
 8002176:	f7ff ff55 	bl	8002024 <WriteRegister>
	WriteRegister(0x3A, (reg3a_data[1] << 8) | reg3a_data[0]); // Write VEmpty
 800217a:	f644 3182 	movw	r1, #19330	@ 0x4b82
 800217e:	203a      	movs	r0, #58	@ 0x3a
 8002180:	f7ff ff50 	bl	8002024 <WriteRegister>
	WriteRegister(0xDB, 0x8064); // Write 0x8064 to register 0xDB -- Write ModelCFG
 8002184:	f248 0164 	movw	r1, #32868	@ 0x8064
 8002188:	20db      	movs	r0, #219	@ 0xdb
 800218a:	f7ff ff4b 	bl	8002024 <WriteRegister>
	while (ReadRegister(0xDB) & 0x8000)
 800218e:	e002      	b.n	8002196 <MAX17261_Init+0xde>
		Wait(10);
 8002190:	200a      	movs	r0, #10
 8002192:	f7ff ff71 	bl	8002078 <Wait>
	while (ReadRegister(0xDB) & 0x8000)
 8002196:	20db      	movs	r0, #219	@ 0xdb
 8002198:	f7ff ff14 	bl	8001fc4 <ReadRegister>
 800219c:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 80021a0:	d1f6      	bne.n	8002190 <MAX17261_Init+0xd8>
	WriteRegister(0xBA, HibCFG);
 80021a2:	4621      	mov	r1, r4
 80021a4:	20ba      	movs	r0, #186	@ 0xba
 80021a6:	f7ff ff3d 	bl	8002024 <WriteRegister>
	uint16_t status = ReadRegister(0x00);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff ff0a 	bl	8001fc4 <ReadRegister>
	status &= 0xFFFD;
 80021b0:	f020 0102 	bic.w	r1, r0, #2
 80021b4:	b289      	uxth	r1, r1
	WriteAndVerifyRegister(0x00, status);
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff ff62 	bl	8002080 <WriteAndVerifyRegister>
	goto Step3_2;
 80021bc:	e793      	b.n	80020e6 <MAX17261_Init+0x2e>
 80021be:	bf00      	nop
 80021c0:	080116c8 	.word	0x080116c8
 80021c4:	3fe00000 	.word	0x3fe00000
 80021c8:	08011710 	.word	0x08011710
 80021cc:	08011724 	.word	0x08011724
 80021d0:	08011734 	.word	0x08011734
 80021d4:	080116f0 	.word	0x080116f0

080021d8 <MAX17261_ReadCharge>:


uint16_t MAX17261_ReadCharge(void)
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	b086      	sub	sp, #24
	uint8_t charge_data[2]; // data buffer to store the read charge value

	// Read SOC data from register 0x06
	HAL_StatusTypeDef MAX17261_Status = HAL_I2C_Mem_Read(&hi2c1, MAX17261_READ_ADDR, 0x06, 1, charge_data, 2, HAL_MAX_DELAY);
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	2302      	movs	r3, #2
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	ab05      	add	r3, sp, #20
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2301      	movs	r3, #1
 80021ec:	2206      	movs	r2, #6
 80021ee:	216d      	movs	r1, #109	@ 0x6d
 80021f0:	480b      	ldr	r0, [pc, #44]	@ (8002220 <MAX17261_ReadCharge+0x48>)
 80021f2:	f003 fc81 	bl	8005af8 <HAL_I2C_Mem_Read>
	if(MAX17261_Status == HAL_OK)
 80021f6:	b960      	cbnz	r0, 8002212 <MAX17261_ReadCharge+0x3a>
	{
		// Combine the two bytes into a 16-bit unsigned integer
		uint16_t charge = (charge_data[1] << 8) | charge_data[0];
 80021f8:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80021fc:	f89d 4014 	ldrb.w	r4, [sp, #20]
 8002200:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
		printf("MAX17261_ReadCharge: %04X\n\r", charge);
 8002204:	4621      	mov	r1, r4
 8002206:	4807      	ldr	r0, [pc, #28]	@ (8002224 <MAX17261_ReadCharge+0x4c>)
 8002208:	f00c fc14 	bl	800ea34 <iprintf>
	//	printf("RepCap: %u mAh\n\r", RepCap);
	//	printf("RepSOC: %d%%\n\r", RepSOC_rounded);



}
 800220c:	4620      	mov	r0, r4
 800220e:	b006      	add	sp, #24
 8002210:	bd10      	pop	{r4, pc}
 8002212:	4601      	mov	r1, r0
		printf("MAX17261 Read SOC FAILED, return value = %d\n\r", MAX17261_Status);
 8002214:	4804      	ldr	r0, [pc, #16]	@ (8002228 <MAX17261_ReadCharge+0x50>)
 8002216:	f00c fc0d 	bl	800ea34 <iprintf>
		return 0; // Return 0 as a default value or for error indication
 800221a:	2400      	movs	r4, #0
 800221c:	e7f6      	b.n	800220c <MAX17261_ReadCharge+0x34>
 800221e:	bf00      	nop
 8002220:	200002f4 	.word	0x200002f4
 8002224:	08011750 	.word	0x08011750
 8002228:	0801176c 	.word	0x0801176c

0800222c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800222c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800222e:	e7fe      	b.n	800222e <Error_Handler+0x2>

08002230 <SystemClock_Config>:
{
 8002230:	b510      	push	{r4, lr}
 8002232:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002234:	2248      	movs	r2, #72	@ 0x48
 8002236:	2100      	movs	r1, #0
 8002238:	a808      	add	r0, sp, #32
 800223a:	f00c fc70 	bl	800eb1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800223e:	2400      	movs	r4, #0
 8002240:	9401      	str	r4, [sp, #4]
 8002242:	9402      	str	r4, [sp, #8]
 8002244:	9403      	str	r4, [sp, #12]
 8002246:	9404      	str	r4, [sp, #16]
 8002248:	9405      	str	r4, [sp, #20]
 800224a:	9406      	str	r4, [sp, #24]
 800224c:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 800224e:	f003 fd8d 	bl	8005d6c <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002252:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002256:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800225a:	f023 0318 	bic.w	r3, r3, #24
 800225e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002262:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800226c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800227c:	232c      	movs	r3, #44	@ 0x2c
 800227e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002280:	2381      	movs	r3, #129	@ 0x81
 8002282:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002284:	2301      	movs	r3, #1
 8002286:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002288:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800228a:	22b0      	movs	r2, #176	@ 0xb0
 800228c:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800228e:	940f      	str	r4, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002290:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002292:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002294:	a808      	add	r0, sp, #32
 8002296:	f003 ff03 	bl	80060a0 <HAL_RCC_OscConfig>
 800229a:	b970      	cbnz	r0, 80022ba <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800229c:	234f      	movs	r3, #79	@ 0x4f
 800229e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80022a0:	2300      	movs	r3, #0
 80022a2:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a6:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80022aa:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022ac:	2102      	movs	r1, #2
 80022ae:	a801      	add	r0, sp, #4
 80022b0:	f004 fa28 	bl	8006704 <HAL_RCC_ClockConfig>
 80022b4:	b918      	cbnz	r0, 80022be <SystemClock_Config+0x8e>
}
 80022b6:	b01a      	add	sp, #104	@ 0x68
 80022b8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80022ba:	f7ff ffb7 	bl	800222c <Error_Handler>
    Error_Handler();
 80022be:	f7ff ffb5 	bl	800222c <Error_Handler>
	...

080022c4 <main>:
{
 80022c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022c8:	b082      	sub	sp, #8
  HAL_Init();
 80022ca:	f002 fbf3 	bl	8004ab4 <HAL_Init>
   lsm6dso.IO.ReadReg 		= my_read_reg;
 80022ce:	4caf      	ldr	r4, [pc, #700]	@ (800258c <main+0x2c8>)
 80022d0:	4eaf      	ldr	r6, [pc, #700]	@ (8002590 <main+0x2cc>)
 80022d2:	6166      	str	r6, [r4, #20]
   lsm6dso.IO.WriteReg 		= my_write_reg;
 80022d4:	4faf      	ldr	r7, [pc, #700]	@ (8002594 <main+0x2d0>)
 80022d6:	6127      	str	r7, [r4, #16]
   lsm6dso.handle 			= &hi2c2;
 80022d8:	4daf      	ldr	r5, [pc, #700]	@ (8002598 <main+0x2d4>)
 80022da:	63a5      	str	r5, [r4, #56]	@ 0x38
   lsm6dso.Ctx.my_read_reg 	= my_read_reg;
 80022dc:	6266      	str	r6, [r4, #36]	@ 0x24
   lsm6dso.Ctx.my_write_reg = my_write_reg;
 80022de:	6227      	str	r7, [r4, #32]
   lsm6dso.Ctx.handle 		= &hi2c2;
 80022e0:	62e5      	str	r5, [r4, #44]	@ 0x2c
   lsm6dso.Ctx.mdelay 		= (stmdev_mdelay_ptr)HAL_Delay;
 80022e2:	f8df 82b8 	ldr.w	r8, [pc, #696]	@ 800259c <main+0x2d8>
 80022e6:	f8c4 8028 	str.w	r8, [r4, #40]	@ 0x28
   LSM6DSO_RegisterBusIO(&lsm6dso, &lsm6dso.IO);
 80022ea:	4621      	mov	r1, r4
 80022ec:	4620      	mov	r0, r4
 80022ee:	f001 ffaf 	bl	8004250 <LSM6DSO_RegisterBusIO>
   dev_ctx.my_write_reg 	= my_write_reg;					// Assign custom write function
 80022f2:	4bab      	ldr	r3, [pc, #684]	@ (80025a0 <main+0x2dc>)
 80022f4:	601f      	str	r7, [r3, #0]
   dev_ctx.my_read_reg 		= my_read_reg; 					// Assign custom read function
 80022f6:	605e      	str	r6, [r3, #4]
   dev_ctx.mdelay 			= (stmdev_mdelay_ptr)HAL_Delay; // Set mdelay to point to HAL_Delay
 80022f8:	f8c3 8008 	str.w	r8, [r3, #8]
   dev_ctx.handle 			= &hi2c2;
 80022fc:	60dd      	str	r5, [r3, #12]
   lsm6dso.Ctx 				= dev_ctx;
 80022fe:	3420      	adds	r4, #32
 8002300:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002302:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  SystemClock_Config();
 8002306:	f7ff ff93 	bl	8002230 <SystemClock_Config>
  MX_GPIO_Init();
 800230a:	f7ff f929 	bl	8001560 <MX_GPIO_Init>
  MX_DMA_Init();
 800230e:	f7ff f905 	bl	800151c <MX_DMA_Init>
  MX_I2C1_Init();
 8002312:	f7ff f9bf 	bl	8001694 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002316:	f7ff f9e9 	bl	80016ec <MX_I2C2_Init>
  MX_SPI2_Init();
 800231a:	f000 fa7d 	bl	8002818 <MX_SPI2_Init>
  MX_FATFS_Init();
 800231e:	f007 fd37 	bl	8009d90 <MX_FATFS_Init>
  MX_SubGHz_Phy_Init();
 8002322:	f00a fa91 	bl	800c848 <MX_SubGHz_Phy_Init>
  MX_TIM16_Init();
 8002326:	f000 fcb1 	bl	8002c8c <MX_TIM16_Init>
  HAL_Delay(2000); //a short delay is important to let the SD card settle
 800232a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800232e:	f000 fbcb 	bl	8002ac8 <HAL_Delay>
  INIT_IMU();
 8002332:	f7ff fafb 	bl	800192c <INIT_IMU>
  Init_Timer();
 8002336:	f7ff fc2f 	bl	8001b98 <Init_Timer>
  SUBGRF_SetPaConfig(0x2, 0x3, 0x0, 0x1);
 800233a:	2301      	movs	r3, #1
 800233c:	2200      	movs	r2, #0
 800233e:	2103      	movs	r1, #3
 8002340:	2002      	movs	r0, #2
 8002342:	f009 fe89 	bl	800c058 <SUBGRF_SetPaConfig>
  HAL_NVIC_SetPriority(TIM16_IRQn, 3, 0);  // Timer16 should be configured to trigger 2-20 ktimes per second to record READ_IMU datta to SD card (right now it is triggering in main while loop)
 8002346:	2200      	movs	r2, #0
 8002348:	2103      	movs	r1, #3
 800234a:	201c      	movs	r0, #28
 800234c:	f002 fc72 	bl	8004c34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002350:	201c      	movs	r0, #28
 8002352:	f002 fc7f 	bl	8004c54 <HAL_NVIC_EnableIRQ>
  if(HAL_TIM_Base_Start_IT(&htim16) != HAL_OK)
 8002356:	4893      	ldr	r0, [pc, #588]	@ (80025a4 <main+0x2e0>)
 8002358:	f006 f8ce 	bl	80084f8 <HAL_TIM_Base_Start_IT>
 800235c:	b138      	cbz	r0, 800236e <main+0xaa>
  	  APP_LOG(TS_OFF, VLEVEL_M, "Error Configuring TIM16 Interrupt!!!\n\r\n\r");/////////////////////////////////////////////////////////////////////////////////
 800235e:	4b92      	ldr	r3, [pc, #584]	@ (80025a8 <main+0x2e4>)
 8002360:	2200      	movs	r2, #0
 8002362:	4611      	mov	r1, r2
 8002364:	2002      	movs	r0, #2
 8002366:	f00b fc4d 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
	  Error_Handler();
 800236a:	f7ff ff5f 	bl	800222c <Error_Handler>
  if ((retVal = IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO)) != BSP_ERROR_NONE)
 800236e:	2103      	movs	r1, #3
 8002370:	2000      	movs	r0, #0
 8002372:	f001 f8bb 	bl	80034ec <IKS01A3_MOTION_SENSOR_Init>
 8002376:	4601      	mov	r1, r0
 8002378:	b150      	cbz	r0, 8002390 <main+0xcc>
	  printf("the error was: %lu \r\n",retVal);
 800237a:	488c      	ldr	r0, [pc, #560]	@ (80025ac <main+0x2e8>)
 800237c:	f00c fb5a 	bl	800ea34 <iprintf>
  	  APP_LOG(TS_OFF, VLEVEL_M, "Error: IKS01A3/LSM6DSO Initialization failed!\n");/////////////////////////////////////////////////////////////////////////////////
 8002380:	4b8b      	ldr	r3, [pc, #556]	@ (80025b0 <main+0x2ec>)
 8002382:	2200      	movs	r2, #0
 8002384:	4611      	mov	r1, r2
 8002386:	2002      	movs	r0, #2
 8002388:	f00b fc3c 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
      Error_Handler(); // Handle the error if sensor initialization fails
 800238c:	f7ff ff4e 	bl	800222c <Error_Handler>
  	  APP_LOG(TS_OFF, VLEVEL_M, "IKS01A3_MOTION_SENSOR_Init Successful!\n");
 8002390:	4b88      	ldr	r3, [pc, #544]	@ (80025b4 <main+0x2f0>)
 8002392:	2200      	movs	r2, #0
 8002394:	4611      	mov	r1, r2
 8002396:	2002      	movs	r0, #2
 8002398:	f00b fc34 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  if (IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO) != BSP_ERROR_NONE)
 800239c:	2103      	movs	r1, #3
 800239e:	2000      	movs	r0, #0
 80023a0:	f001 f906 	bl	80035b0 <IKS01A3_MOTION_SENSOR_Enable>
 80023a4:	b138      	cbz	r0, 80023b6 <main+0xf2>
  	  APP_LOG(TS_OFF, VLEVEL_M, "Error: LSM6DSO Enable failed!\n");
 80023a6:	4b84      	ldr	r3, [pc, #528]	@ (80025b8 <main+0x2f4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	4611      	mov	r1, r2
 80023ac:	2002      	movs	r0, #2
 80023ae:	f00b fc29 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
      Error_Handler(); // Handle the error if enabling the sensors fails
 80023b2:	f7ff ff3b 	bl	800222c <Error_Handler>
  if(readIDsFromEEPROM(&hi2c1, EEPROM_PairingID1, EEPROM_PairingID2, EEPROM_Start_Address))
 80023b6:	4b81      	ldr	r3, [pc, #516]	@ (80025bc <main+0x2f8>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	4a81      	ldr	r2, [pc, #516]	@ (80025c0 <main+0x2fc>)
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	4981      	ldr	r1, [pc, #516]	@ (80025c4 <main+0x300>)
 80023c0:	6809      	ldr	r1, [r1, #0]
 80023c2:	4881      	ldr	r0, [pc, #516]	@ (80025c8 <main+0x304>)
 80023c4:	f7ff fd30 	bl	8001e28 <readIDsFromEEPROM>
 80023c8:	b9c8      	cbnz	r0, 80023fe <main+0x13a>
  HAL_GPIO_WritePin(PAIR_LIGHT_PORT_2, GREEN_PIN, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023d0:	487e      	ldr	r0, [pc, #504]	@ (80025cc <main+0x308>)
 80023d2:	f003 f83c 	bl	800544e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PAIR_LIGHT_PORT_1, RED_PIN, GPIO_PIN_SET);
 80023d6:	2201      	movs	r2, #1
 80023d8:	2110      	movs	r1, #16
 80023da:	487d      	ldr	r0, [pc, #500]	@ (80025d0 <main+0x30c>)
 80023dc:	f003 f837 	bl	800544e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BUTTON_PORT, BLUE_PIN, GPIO_PIN_RESET);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2140      	movs	r1, #64	@ 0x40
 80023e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e8:	f003 f831 	bl	800544e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80023ec:	2064      	movs	r0, #100	@ 0x64
 80023ee:	f000 fb6b 	bl	8002ac8 <HAL_Delay>
  MAX17261_Init();
 80023f2:	f7ff fe61 	bl	80020b8 <MAX17261_Init>
  HAL_Delay(100);
 80023f6:	2064      	movs	r0, #100	@ 0x64
 80023f8:	f000 fb66 	bl	8002ac8 <HAL_Delay>
 80023fc:	e049      	b.n	8002492 <main+0x1ce>
	  printf("ReadIDSFromEEPROM() successful!\n\r");
 80023fe:	4875      	ldr	r0, [pc, #468]	@ (80025d4 <main+0x310>)
 8002400:	f00c fb18 	bl	800ea34 <iprintf>
	  isPairingButtonPressed = false;
 8002404:	4b74      	ldr	r3, [pc, #464]	@ (80025d8 <main+0x314>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
	  currentPairingState = Paired;
 800240a:	4b74      	ldr	r3, [pc, #464]	@ (80025dc <main+0x318>)
 800240c:	2206      	movs	r2, #6
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e7db      	b.n	80023ca <main+0x106>
		 HAL_GPIO_WritePin(PAIR_LIGHT_PORT_2, GREEN_PIN, GPIO_PIN_SET);
 8002412:	2201      	movs	r2, #1
 8002414:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002418:	486c      	ldr	r0, [pc, #432]	@ (80025cc <main+0x308>)
 800241a:	f003 f818 	bl	800544e <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(PAIR_LIGHT_PORT_1, RED_PIN, GPIO_PIN_RESET);
 800241e:	2200      	movs	r2, #0
 8002420:	2110      	movs	r1, #16
 8002422:	486b      	ldr	r0, [pc, #428]	@ (80025d0 <main+0x30c>)
 8002424:	f003 f813 	bl	800544e <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(BUTTON_PORT, BLUE_PIN, GPIO_PIN_RESET);
 8002428:	2200      	movs	r2, #0
 800242a:	2140      	movs	r1, #64	@ 0x40
 800242c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002430:	f003 f80d 	bl	800544e <HAL_GPIO_WritePin>
		 MX_SubGHz_Phy_Process();
 8002434:	f00a fa0e 	bl	800c854 <MX_SubGHz_Phy_Process>
 8002438:	e022      	b.n	8002480 <main+0x1bc>
		  HAL_GPIO_WritePin(PAIR_LIGHT_PORT_2, GREEN_PIN, GPIO_PIN_RESET);
 800243a:	2200      	movs	r2, #0
 800243c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002440:	4862      	ldr	r0, [pc, #392]	@ (80025cc <main+0x308>)
 8002442:	f003 f804 	bl	800544e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PAIR_LIGHT_PORT_1, RED_PIN, GPIO_PIN_RESET);
 8002446:	2200      	movs	r2, #0
 8002448:	2110      	movs	r1, #16
 800244a:	4861      	ldr	r0, [pc, #388]	@ (80025d0 <main+0x30c>)
 800244c:	f002 ffff 	bl	800544e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(BUTTON_PORT, BLUE_PIN, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	2140      	movs	r1, #64	@ 0x40
 8002454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002458:	f002 fff9 	bl	800544e <HAL_GPIO_WritePin>
 800245c:	e010      	b.n	8002480 <main+0x1bc>
		  HAL_GPIO_WritePin(PAIR_LIGHT_PORT_2, GREEN_PIN, GPIO_PIN_RESET);
 800245e:	2200      	movs	r2, #0
 8002460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002464:	4859      	ldr	r0, [pc, #356]	@ (80025cc <main+0x308>)
 8002466:	f002 fff2 	bl	800544e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PAIR_LIGHT_PORT_1, RED_PIN, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	2110      	movs	r1, #16
 800246e:	4858      	ldr	r0, [pc, #352]	@ (80025d0 <main+0x30c>)
 8002470:	f002 ffed 	bl	800544e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(BUTTON_PORT, BLUE_PIN, GPIO_PIN_RESET);
 8002474:	2200      	movs	r2, #0
 8002476:	2140      	movs	r1, #64	@ 0x40
 8002478:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247c:	f002 ffe7 	bl	800544e <HAL_GPIO_WritePin>
	  buttonState = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 8002480:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002488:	f002 ffda 	bl	8005440 <HAL_GPIO_ReadPin>
 800248c:	4b54      	ldr	r3, [pc, #336]	@ (80025e0 <main+0x31c>)
 800248e:	7018      	strb	r0, [r3, #0]
	  if(buttonState == GPIO_PIN_RESET) // button is pressed (low voltage)
 8002490:	b1d8      	cbz	r0, 80024ca <main+0x206>
	  if(currentPairingState == Paired)
 8002492:	4b52      	ldr	r3, [pc, #328]	@ (80025dc <main+0x318>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b06      	cmp	r3, #6
 8002498:	d0bb      	beq.n	8002412 <main+0x14e>
	  else if((currentPairingState == GenerateDeviceID) || (currentPairingState == EncodeDeviceID) ||(currentPairingState == BroadcastDeviceID))
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	2a02      	cmp	r2, #2
 80024a0:	d9cb      	bls.n	800243a <main+0x176>
	  else if(currentPairingState == Unknown)
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1db      	bne.n	800245e <main+0x19a>
		  HAL_GPIO_WritePin(PAIR_LIGHT_PORT_2, GREEN_PIN, GPIO_PIN_RESET);
 80024a6:	2200      	movs	r2, #0
 80024a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024ac:	4847      	ldr	r0, [pc, #284]	@ (80025cc <main+0x308>)
 80024ae:	f002 ffce 	bl	800544e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(PAIR_LIGHT_PORT_1, RED_PIN, GPIO_PIN_SET);
 80024b2:	2201      	movs	r2, #1
 80024b4:	2110      	movs	r1, #16
 80024b6:	4846      	ldr	r0, [pc, #280]	@ (80025d0 <main+0x30c>)
 80024b8:	f002 ffc9 	bl	800544e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(BUTTON_PORT, BLUE_PIN, GPIO_PIN_RESET);
 80024bc:	2200      	movs	r2, #0
 80024be:	2140      	movs	r1, #64	@ 0x40
 80024c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024c4:	f002 ffc3 	bl	800544e <HAL_GPIO_WritePin>
 80024c8:	e7da      	b.n	8002480 <main+0x1bc>
		  deviceIds.deviceID = 0;
 80024ca:	4a46      	ldr	r2, [pc, #280]	@ (80025e4 <main+0x320>)
 80024cc:	2300      	movs	r3, #0
 80024ce:	8013      	strh	r3, [r2, #0]
		  deviceIds.otherDeviceID = 0;
 80024d0:	8053      	strh	r3, [r2, #2]
		  deviceIds.combinedDeviceID[0] = 0;
 80024d2:	8093      	strh	r3, [r2, #4]
		  deviceIds.combinedDeviceID[1] = 0;
 80024d4:	80d3      	strh	r3, [r2, #6]
		  deviceIds.swappedCombinedDeviceID[0] = 0;
 80024d6:	8113      	strh	r3, [r2, #8]
		  deviceIds.swappedCombinedDeviceID[1] = 0;
 80024d8:	8153      	strh	r3, [r2, #10]
		  isOtherDeviceIDReceived = false;
 80024da:	4a43      	ldr	r2, [pc, #268]	@ (80025e8 <main+0x324>)
 80024dc:	7013      	strb	r3, [r2, #0]
		  isAck1Received = false;
 80024de:	4a43      	ldr	r2, [pc, #268]	@ (80025ec <main+0x328>)
 80024e0:	7013      	strb	r3, [r2, #0]
		  currentPairingState = Unknown;
 80024e2:	4a3e      	ldr	r2, [pc, #248]	@ (80025dc <main+0x318>)
 80024e4:	7013      	strb	r3, [r2, #0]
	  	  isPairingButtonPressed = true;
 80024e6:	4b3c      	ldr	r3, [pc, #240]	@ (80025d8 <main+0x314>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]
	  	  while(isPairingButtonPressed)
 80024ec:	4b3a      	ldr	r3, [pc, #232]	@ (80025d8 <main+0x314>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ce      	beq.n	8002492 <main+0x1ce>
			  switch(currentPairingState)
 80024f4:	4b39      	ldr	r3, [pc, #228]	@ (80025dc <main+0x318>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b06      	cmp	r3, #6
 80024fa:	f200 80c2 	bhi.w	8002682 <main+0x3be>
 80024fe:	e8df f003 	tbb	[pc, r3]
 8002502:	2d04      	.short	0x2d04
 8002504:	c0c09a7f 	.word	0xc0c09a7f
 8002508:	b6          	.byte	0xb6
 8002509:	00          	.byte	0x00
					 isOtherDeviceIDReceived = false;
 800250a:	2400      	movs	r4, #0
 800250c:	4b36      	ldr	r3, [pc, #216]	@ (80025e8 <main+0x324>)
 800250e:	701c      	strb	r4, [r3, #0]
					 isAck1Received = false;
 8002510:	4b36      	ldr	r3, [pc, #216]	@ (80025ec <main+0x328>)
 8002512:	701c      	strb	r4, [r3, #0]
					 deviceIds.deviceID = 0;
 8002514:	4b33      	ldr	r3, [pc, #204]	@ (80025e4 <main+0x320>)
 8002516:	801c      	strh	r4, [r3, #0]
					 deviceIds.otherDeviceID = 0;
 8002518:	805c      	strh	r4, [r3, #2]
					 deviceIds.combinedDeviceID[0] = 0;
 800251a:	809c      	strh	r4, [r3, #4]
					 deviceIds.combinedDeviceID[1] = 0;
 800251c:	80dc      	strh	r4, [r3, #6]
					 deviceIds.swappedCombinedDeviceID[0] = 0;
 800251e:	811c      	strh	r4, [r3, #8]
					 deviceIds.swappedCombinedDeviceID[1] = 0;
 8002520:	815c      	strh	r4, [r3, #10]
					 HAL_GPIO_WritePin(PAIR_LIGHT_PORT_2, GREEN_PIN, GPIO_PIN_RESET);
 8002522:	4622      	mov	r2, r4
 8002524:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002528:	4828      	ldr	r0, [pc, #160]	@ (80025cc <main+0x308>)
 800252a:	f002 ff90 	bl	800544e <HAL_GPIO_WritePin>
				     HAL_GPIO_WritePin(PAIR_LIGHT_PORT_1, RED_PIN, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2110      	movs	r1, #16
 8002532:	4827      	ldr	r0, [pc, #156]	@ (80025d0 <main+0x30c>)
 8002534:	f002 ff8b 	bl	800544e <HAL_GPIO_WritePin>
				     HAL_GPIO_WritePin(BUTTON_PORT, BLUE_PIN, GPIO_PIN_RESET);
 8002538:	4622      	mov	r2, r4
 800253a:	2140      	movs	r1, #64	@ 0x40
 800253c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002540:	f002 ff85 	bl	800544e <HAL_GPIO_WritePin>
					 APP_LOG(TS_OFF, VLEVEL_M, "Current state is: %d\n\r", currentPairingState);
 8002544:	4d25      	ldr	r5, [pc, #148]	@ (80025dc <main+0x318>)
 8002546:	782b      	ldrb	r3, [r5, #0]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <main+0x32c>)
 800254c:	4622      	mov	r2, r4
 800254e:	4621      	mov	r1, r4
 8002550:	2002      	movs	r0, #2
 8002552:	f00b fb57 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 currentPairingState = GenerateDeviceID;
 8002556:	2301      	movs	r3, #1
 8002558:	702b      	strb	r3, [r5, #0]
					 break;
 800255a:	e7c7      	b.n	80024ec <main+0x228>
					 APP_LOG(TS_OFF, VLEVEL_M, "Current state is: %d\n\r", currentPairingState);
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <main+0x32c>)
 8002560:	2200      	movs	r2, #0
 8002562:	4611      	mov	r1, r2
 8002564:	2002      	movs	r0, #2
 8002566:	f00b fb4d 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 deviceId = Radio.Random();
 800256a:	4b22      	ldr	r3, [pc, #136]	@ (80025f4 <main+0x330>)
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4798      	blx	r3
 8002570:	4b21      	ldr	r3, [pc, #132]	@ (80025f8 <main+0x334>)
 8002572:	8018      	strh	r0, [r3, #0]
					 APP_LOG(TS_OFF, VLEVEL_M, "Randomly generated device ID is: %u\n\r", deviceId);
 8002574:	b280      	uxth	r0, r0
 8002576:	9000      	str	r0, [sp, #0]
 8002578:	4b20      	ldr	r3, [pc, #128]	@ (80025fc <main+0x338>)
 800257a:	2200      	movs	r2, #0
 800257c:	4611      	mov	r1, r2
 800257e:	2002      	movs	r0, #2
 8002580:	f00b fb40 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 currentPairingState = EncodeDeviceID;
 8002584:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <main+0x318>)
 8002586:	2202      	movs	r2, #2
 8002588:	701a      	strb	r2, [r3, #0]
					 break;
 800258a:	e7af      	b.n	80024ec <main+0x228>
 800258c:	200003f0 	.word	0x200003f0
 8002590:	08001cfd 	.word	0x08001cfd
 8002594:	08001c7d 	.word	0x08001c7d
 8002598:	20000270 	.word	0x20000270
 800259c:	08002ac9 	.word	0x08002ac9
 80025a0:	200003e0 	.word	0x200003e0
 80025a4:	200005b8 	.word	0x200005b8
 80025a8:	0801179c 	.word	0x0801179c
 80025ac:	080117c8 	.word	0x080117c8
 80025b0:	080117e0 	.word	0x080117e0
 80025b4:	08011810 	.word	0x08011810
 80025b8:	08011838 	.word	0x08011838
 80025bc:	2000044c 	.word	0x2000044c
 80025c0:	20000450 	.word	0x20000450
 80025c4:	20000454 	.word	0x20000454
 80025c8:	200002f4 	.word	0x200002f4
 80025cc:	48000800 	.word	0x48000800
 80025d0:	48000400 	.word	0x48000400
 80025d4:	08011858 	.word	0x08011858
 80025d8:	20000465 	.word	0x20000465
 80025dc:	20000476 	.word	0x20000476
 80025e0:	20000464 	.word	0x20000464
 80025e4:	20000458 	.word	0x20000458
 80025e8:	20000c11 	.word	0x20000c11
 80025ec:	20000c16 	.word	0x20000c16
 80025f0:	0801187c 	.word	0x0801187c
 80025f4:	08011c44 	.word	0x08011c44
 80025f8:	20000472 	.word	0x20000472
 80025fc:	08011894 	.word	0x08011894
					 APP_LOG(TS_OFF, VLEVEL_M, "Current state is: %d\n\r", currentPairingState);
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4b23      	ldr	r3, [pc, #140]	@ (8002690 <main+0x3cc>)
 8002604:	2200      	movs	r2, #0
 8002606:	4611      	mov	r1, r2
 8002608:	2002      	movs	r0, #2
 800260a:	f00b fafb 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 encodeDeviceId(deviceId, pair_payload);
 800260e:	4c21      	ldr	r4, [pc, #132]	@ (8002694 <main+0x3d0>)
 8002610:	4621      	mov	r1, r4
 8002612:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <main+0x3d4>)
 8002614:	8818      	ldrh	r0, [r3, #0]
 8002616:	f00a fc43 	bl	800cea0 <encodeDeviceId>
					 APP_LOG(TS_OFF, VLEVEL_M, "Encoded Device ID is: 0x%02X%02X\n\r", pair_payload[1], pair_payload[0]);
 800261a:	7863      	ldrb	r3, [r4, #1]
 800261c:	7822      	ldrb	r2, [r4, #0]
 800261e:	9201      	str	r2, [sp, #4]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <main+0x3d8>)
 8002624:	2200      	movs	r2, #0
 8002626:	4611      	mov	r1, r2
 8002628:	2002      	movs	r0, #2
 800262a:	f00b faeb 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 currentPairingState = BroadcastDeviceID;
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <main+0x3dc>)
 8002630:	2203      	movs	r2, #3
 8002632:	701a      	strb	r2, [r3, #0]
					 break;
 8002634:	e75a      	b.n	80024ec <main+0x228>
					 APP_LOG(TS_OFF, VLEVEL_M, "Current state is: %d\n\r", currentPairingState);
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <main+0x3cc>)
 800263a:	2200      	movs	r2, #0
 800263c:	4611      	mov	r1, r2
 800263e:	2002      	movs	r0, #2
 8002640:	f00b fae0 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 APP_LOG(TS_OFF, VLEVEL_M,"This device ID is (struct): 0x%04X\n\r", deviceIds.deviceID);
 8002644:	4c17      	ldr	r4, [pc, #92]	@ (80026a4 <main+0x3e0>)
 8002646:	8823      	ldrh	r3, [r4, #0]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <main+0x3e4>)
 800264c:	2200      	movs	r2, #0
 800264e:	4611      	mov	r1, r2
 8002650:	2002      	movs	r0, #2
 8002652:	f00b fad7 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 APP_LOG(TS_OFF, VLEVEL_M,"Other Device ID is (Struct): 0x%04X\n\r", deviceIds.otherDeviceID);
 8002656:	8863      	ldrh	r3, [r4, #2]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <main+0x3e8>)
 800265c:	2200      	movs	r2, #0
 800265e:	4611      	mov	r1, r2
 8002660:	2002      	movs	r0, #2
 8002662:	f00b facf 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 broadcastDeviceId(pair_payload);
 8002666:	480b      	ldr	r0, [pc, #44]	@ (8002694 <main+0x3d0>)
 8002668:	f00a fc50 	bl	800cf0c <broadcastDeviceId>
					 break;
 800266c:	e73e      	b.n	80024ec <main+0x228>
					 APP_LOG(TS_OFF, VLEVEL_M, "Device is Paired\n\r");
 800266e:	4b10      	ldr	r3, [pc, #64]	@ (80026b0 <main+0x3ec>)
 8002670:	2200      	movs	r2, #0
 8002672:	4611      	mov	r1, r2
 8002674:	2002      	movs	r0, #2
 8002676:	f00b fac5 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					 isPairingButtonPressed = false;
 800267a:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <main+0x3f0>)
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
					 break;
 8002680:	e734      	b.n	80024ec <main+0x228>
					APP_LOG(TS_OFF, VLEVEL_M, "Entered the error state!\n\r");
 8002682:	4b0d      	ldr	r3, [pc, #52]	@ (80026b8 <main+0x3f4>)
 8002684:	2200      	movs	r2, #0
 8002686:	4611      	mov	r1, r2
 8002688:	2002      	movs	r0, #2
 800268a:	f00b fabb 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
					break;
 800268e:	e72d      	b.n	80024ec <main+0x228>
 8002690:	0801187c 	.word	0x0801187c
 8002694:	20000474 	.word	0x20000474
 8002698:	20000472 	.word	0x20000472
 800269c:	080118bc 	.word	0x080118bc
 80026a0:	20000476 	.word	0x20000476
 80026a4:	20000458 	.word	0x20000458
 80026a8:	080118e0 	.word	0x080118e0
 80026ac:	08011908 	.word	0x08011908
 80026b0:	08011930 	.word	0x08011930
 80026b4:	20000465 	.word	0x20000465
 80026b8:	08011944 	.word	0x08011944

080026bc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80026bc:	b510      	push	{r4, lr}
 80026be:	b092      	sub	sp, #72	@ 0x48

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80026c0:	2400      	movs	r4, #0
 80026c2:	940d      	str	r4, [sp, #52]	@ 0x34
 80026c4:	940e      	str	r4, [sp, #56]	@ 0x38
 80026c6:	940f      	str	r4, [sp, #60]	@ 0x3c
 80026c8:	9410      	str	r4, [sp, #64]	@ 0x40
 80026ca:	9411      	str	r4, [sp, #68]	@ 0x44
  RTC_DateTypeDef sDate = {0};
 80026cc:	940c      	str	r4, [sp, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80026ce:	222c      	movs	r2, #44	@ 0x2c
 80026d0:	4621      	mov	r1, r4
 80026d2:	a801      	add	r0, sp, #4
 80026d4:	f00c fa23 	bl	800eb1e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80026d8:	482b      	ldr	r0, [pc, #172]	@ (8002788 <MX_RTC_Init+0xcc>)
 80026da:	4b2c      	ldr	r3, [pc, #176]	@ (800278c <MX_RTC_Init+0xd0>)
 80026dc:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80026de:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80026e0:	237f      	movs	r3, #127	@ 0x7f
 80026e2:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80026e4:	23ff      	movs	r3, #255	@ 0xff
 80026e6:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80026e8:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80026ea:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80026ec:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80026ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80026f2:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80026f4:	6204      	str	r4, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80026f6:	6244      	str	r4, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80026f8:	f004 fb30 	bl	8006d5c <HAL_RTC_Init>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d137      	bne.n	8002770 <MX_RTC_Init+0xb4>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002700:	2300      	movs	r3, #0
 8002702:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8002706:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
  sTime.Seconds = 0x0;
 800270a:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800270e:	9310      	str	r3, [sp, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002710:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002712:	2201      	movs	r2, #1
 8002714:	a90d      	add	r1, sp, #52	@ 0x34
 8002716:	481c      	ldr	r0, [pc, #112]	@ (8002788 <MX_RTC_Init+0xcc>)
 8002718:	f004 fbc6 	bl	8006ea8 <HAL_RTC_SetTime>
 800271c:	bb58      	cbnz	r0, 8002776 <MX_RTC_Init+0xba>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800271e:	2201      	movs	r2, #1
 8002720:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8002724:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
  sDate.Date = 0x1;
 8002728:	f88d 2032 	strb.w	r2, [sp, #50]	@ 0x32
  sDate.Year = 0x0;
 800272c:	2300      	movs	r3, #0
 800272e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002732:	a90c      	add	r1, sp, #48	@ 0x30
 8002734:	4814      	ldr	r0, [pc, #80]	@ (8002788 <MX_RTC_Init+0xcc>)
 8002736:	f004 fc23 	bl	8006f80 <HAL_RTC_SetDate>
 800273a:	b9f8      	cbnz	r0, 800277c <MX_RTC_Init+0xc0>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800273c:	2300      	movs	r3, #0
 800273e:	f88d 3004 	strb.w	r3, [sp, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002742:	f88d 3005 	strb.w	r3, [sp, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8002746:	f88d 3006 	strb.w	r3, [sp, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800274a:	9302      	str	r3, [sp, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800274c:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800274e:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002750:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002752:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002754:	9309      	str	r3, [sp, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8002756:	2201      	movs	r2, #1
 8002758:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800275c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002760:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002762:	a901      	add	r1, sp, #4
 8002764:	4808      	ldr	r0, [pc, #32]	@ (8002788 <MX_RTC_Init+0xcc>)
 8002766:	f004 fc61 	bl	800702c <HAL_RTC_SetAlarm>
 800276a:	b950      	cbnz	r0, 8002782 <MX_RTC_Init+0xc6>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800276c:	b012      	add	sp, #72	@ 0x48
 800276e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002770:	f7ff fd5c 	bl	800222c <Error_Handler>
 8002774:	e7c4      	b.n	8002700 <MX_RTC_Init+0x44>
    Error_Handler();
 8002776:	f7ff fd59 	bl	800222c <Error_Handler>
 800277a:	e7d0      	b.n	800271e <MX_RTC_Init+0x62>
    Error_Handler();
 800277c:	f7ff fd56 	bl	800222c <Error_Handler>
 8002780:	e7dc      	b.n	800273c <MX_RTC_Init+0x80>
    Error_Handler();
 8002782:	f7ff fd53 	bl	800222c <Error_Handler>
}
 8002786:	e7f1      	b.n	800276c <MX_RTC_Init+0xb0>
 8002788:	20000478 	.word	0x20000478
 800278c:	40002800 	.word	0x40002800

08002790 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002790:	b510      	push	{r4, lr}
 8002792:	b090      	sub	sp, #64	@ 0x40
 8002794:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002796:	2238      	movs	r2, #56	@ 0x38
 8002798:	2100      	movs	r1, #0
 800279a:	a802      	add	r0, sp, #8
 800279c:	f00c f9bf 	bl	800eb1e <memset>
  if(rtcHandle->Instance==RTC)
 80027a0:	6822      	ldr	r2, [r4, #0]
 80027a2:	4b12      	ldr	r3, [pc, #72]	@ (80027ec <HAL_RTC_MspInit+0x5c>)
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80027a8:	b010      	add	sp, #64	@ 0x40
 80027aa:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027b0:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027b6:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027b8:	a802      	add	r0, sp, #8
 80027ba:	f004 f907 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 80027be:	b988      	cbnz	r0, 80027e4 <HAL_RTC_MspInit+0x54>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80027c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80027d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80027d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027d6:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80027d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027de:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80027e0:	9b01      	ldr	r3, [sp, #4]
}
 80027e2:	e7e1      	b.n	80027a8 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80027e4:	f7ff fd22 	bl	800222c <Error_Handler>
 80027e8:	e7ea      	b.n	80027c0 <HAL_RTC_MspInit+0x30>
 80027ea:	bf00      	nop
 80027ec:	40002800 	.word	0x40002800

080027f0 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 80027f0:	6802      	ldr	r2, [r0, #0]
 80027f2:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <HAL_RTC_MspDeInit+0x24>)
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d000      	beq.n	80027fa <HAL_RTC_MspDeInit+0xa>
    __HAL_RCC_RTCAPB_CLK_DISABLE();
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 80027f8:	4770      	bx	lr
  * @rmtoll BDCR         RTCEN         LL_RCC_DisableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DisableRTC(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80027fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80027fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8002802:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800280a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800280c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002810:	659a      	str	r2, [r3, #88]	@ 0x58
 8002812:	e7f1      	b.n	80027f8 <HAL_RTC_MspDeInit+0x8>
 8002814:	40002800 	.word	0x40002800

08002818 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002818:	b508      	push	{r3, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800281a:	4810      	ldr	r0, [pc, #64]	@ (800285c <MX_SPI2_Init+0x44>)
 800281c:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <MX_SPI2_Init+0x48>)
 800281e:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002820:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8002824:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002826:	2300      	movs	r3, #0
 8002828:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800282a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800282e:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002830:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002832:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002838:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800283a:	2230      	movs	r2, #48	@ 0x30
 800283c:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800283e:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002840:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002842:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002844:	2207      	movs	r2, #7
 8002846:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002848:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800284a:	2308      	movs	r3, #8
 800284c:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800284e:	f004 fea9 	bl	80075a4 <HAL_SPI_Init>
 8002852:	b900      	cbnz	r0, 8002856 <MX_SPI2_Init+0x3e>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002854:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002856:	f7ff fce9 	bl	800222c <Error_Handler>
}
 800285a:	e7fb      	b.n	8002854 <MX_SPI2_Init+0x3c>
 800285c:	200004e8 	.word	0x200004e8
 8002860:	40003800 	.word	0x40003800

08002864 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002864:	b510      	push	{r4, lr}
 8002866:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	2300      	movs	r3, #0
 800286a:	9303      	str	r3, [sp, #12]
 800286c:	9304      	str	r3, [sp, #16]
 800286e:	9305      	str	r3, [sp, #20]
 8002870:	9306      	str	r3, [sp, #24]
 8002872:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI2)
 8002874:	6802      	ldr	r2, [r0, #0]
 8002876:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <HAL_SPI_MspInit+0x78>)
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800287c:	b008      	add	sp, #32
 800287e:	bd10      	pop	{r4, pc}
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002884:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002886:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800288a:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800288c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800288e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002892:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002894:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800289e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80028a6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028a8:	2320      	movs	r3, #32
 80028aa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2402      	movs	r4, #2
 80028ae:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 80028b0:	2303      	movs	r3, #3
 80028b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b4:	a903      	add	r1, sp, #12
 80028b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028ba:	f002 fc71 	bl	80051a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 80028be:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80028c2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028cc:	2305      	movs	r3, #5
 80028ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	a903      	add	r1, sp, #12
 80028d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028d6:	f002 fc63 	bl	80051a0 <HAL_GPIO_Init>
}
 80028da:	e7cf      	b.n	800287c <HAL_SPI_MspInit+0x18>
 80028dc:	40003800 	.word	0x40003800

080028e0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80028e0:	4770      	bx	lr

080028e2 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80028e2:	4770      	bx	lr

080028e4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80028e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80028e6:	f002 f907 	bl	8004af8 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80028ea:	2001      	movs	r0, #1
 80028ec:	4b02      	ldr	r3, [pc, #8]	@ (80028f8 <PWR_EnterStopMode+0x14>)
 80028ee:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80028f2:	f003 fa9f 	bl	8005e34 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80028f6:	bd08      	pop	{r3, pc}
 80028f8:	58000400 	.word	0x58000400

080028fc <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80028fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80028fe:	f002 f902 	bl	8004b06 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002902:	bd08      	pop	{r3, pc}

08002904 <PWR_ExitStopMode>:
{
 8002904:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8002906:	f002 f8fe 	bl	8004b06 <HAL_ResumeTick>
  vcom_Resume();
 800290a:	f000 fc57 	bl	80031bc <vcom_Resume>
}
 800290e:	bd08      	pop	{r3, pc}

08002910 <PWR_EnterSleepMode>:
{
 8002910:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8002912:	f002 f8f1 	bl	8004af8 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002916:	2101      	movs	r1, #1
 8002918:	2000      	movs	r0, #0
 800291a:	f003 fa2f 	bl	8005d7c <HAL_PWR_EnterSLEEPMode>
}
 800291e:	bd08      	pop	{r3, pc}

08002920 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002920:	4770      	bx	lr

08002922 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002922:	e7fe      	b.n	8002922 <NMI_Handler>

08002924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002924:	b508      	push	{r3, lr}

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  HAL_NVIC_SystemReset();
 8002926:	f002 f99d 	bl	8004c64 <HAL_NVIC_SystemReset>
  while (1)
 800292a:	e7fc      	b.n	8002926 <HardFault_Handler+0x2>

0800292c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800292c:	e7fe      	b.n	800292c <MemManage_Handler>

0800292e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800292e:	e7fe      	b.n	800292e <BusFault_Handler>

08002930 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <UsageFault_Handler>

08002932 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002932:	4770      	bx	lr

08002934 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002934:	4770      	bx	lr

08002936 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002936:	4770      	bx	lr

08002938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002938:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293a:	f002 f8d1 	bl	8004ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293e:	bd08      	pop	{r3, pc}

08002940 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002940:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002942:	4802      	ldr	r0, [pc, #8]	@ (800294c <DMA1_Channel1_IRQHandler+0xc>)
 8002944:	f002 fba4 	bl	8005090 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002948:	bd08      	pop	{r3, pc}
 800294a:	bf00      	nop
 800294c:	2000067c 	.word	0x2000067c

08002950 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8002950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002952:	2080      	movs	r0, #128	@ 0x80
 8002954:	f002 fd82 	bl	800545c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002958:	bd08      	pop	{r3, pc}
	...

0800295c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 Global Interrupt.
  */
void TIM16_IRQHandler(void)
{
 800295c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800295e:	4802      	ldr	r0, [pc, #8]	@ (8002968 <TIM16_IRQHandler+0xc>)
 8002960:	f005 fdfc 	bl	800855c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8002964:	bd08      	pop	{r3, pc}
 8002966:	bf00      	nop
 8002968:	200005b8 	.word	0x200005b8

0800296c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800296c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800296e:	4802      	ldr	r0, [pc, #8]	@ (8002978 <I2C1_EV_IRQHandler+0xc>)
 8002970:	f003 f99a 	bl	8005ca8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002974:	bd08      	pop	{r3, pc}
 8002976:	bf00      	nop
 8002978:	200002f4 	.word	0x200002f4

0800297c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800297c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800297e:	4802      	ldr	r0, [pc, #8]	@ (8002988 <I2C2_EV_IRQHandler+0xc>)
 8002980:	f003 f992 	bl	8005ca8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002984:	bd08      	pop	{r3, pc}
 8002986:	bf00      	nop
 8002988:	20000270 	.word	0x20000270

0800298c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800298c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800298e:	4802      	ldr	r0, [pc, #8]	@ (8002998 <USART2_IRQHandler+0xc>)
 8002990:	f006 fb3a 	bl	8009008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002994:	bd08      	pop	{r3, pc}
 8002996:	bf00      	nop
 8002998:	200006dc 	.word	0x200006dc

0800299c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800299c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 800299e:	4802      	ldr	r0, [pc, #8]	@ (80029a8 <SUBGHZ_Radio_IRQHandler+0xc>)
 80029a0:	f005 fca6 	bl	80082f0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80029a4:	bd08      	pop	{r3, pc}
 80029a6:	bf00      	nop
 80029a8:	20000574 	.word	0x20000574

080029ac <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80029ac:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80029ae:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <MX_SUBGHZ_Init+0x18>)
 80029b0:	2308      	movs	r3, #8
 80029b2:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80029b4:	f005 f9ea 	bl	8007d8c <HAL_SUBGHZ_Init>
 80029b8:	b900      	cbnz	r0, 80029bc <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80029ba:	bd08      	pop	{r3, pc}
    Error_Handler();
 80029bc:	f7ff fc36 	bl	800222c <Error_Handler>
}
 80029c0:	e7fb      	b.n	80029ba <MX_SUBGHZ_Init+0xe>
 80029c2:	bf00      	nop
 80029c4:	20000574 	.word	0x20000574

080029c8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80029c8:	b500      	push	{lr}
 80029ca:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80029d2:	f042 0201 	orr.w	r2, r2, #1
 80029d6:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80029d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80029e0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80029e2:	2200      	movs	r2, #0
 80029e4:	4611      	mov	r1, r2
 80029e6:	2032      	movs	r0, #50	@ 0x32
 80029e8:	f002 f924 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80029ec:	2032      	movs	r0, #50	@ 0x32
 80029ee:	f002 f931 	bl	8004c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80029f2:	b003      	add	sp, #12
 80029f4:	f85d fb04 	ldr.w	pc, [sp], #4

080029f8 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80029f8:	b40c      	push	{r2, r3}
 80029fa:	b500      	push	{lr}
 80029fc:	b083      	sub	sp, #12
 80029fe:	ab04      	add	r3, sp, #16
 8002a00:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002a04:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002a06:	f00a fd21 	bl	800d44c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002a0a:	b003      	add	sp, #12
 8002a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a10:	b002      	add	sp, #8
 8002a12:	4770      	bx	lr

08002a14 <TimestampNow>:
{
 8002a14:	b530      	push	{r4, r5, lr}
 8002a16:	b085      	sub	sp, #20
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8002a1c:	a802      	add	r0, sp, #8
 8002a1e:	f00a fc55 	bl	800d2cc <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002a22:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	9b02      	ldr	r3, [sp, #8]
 8002a2a:	4a05      	ldr	r2, [pc, #20]	@ (8002a40 <TimestampNow+0x2c>)
 8002a2c:	2110      	movs	r1, #16
 8002a2e:	4620      	mov	r0, r4
 8002a30:	f7ff ffe2 	bl	80029f8 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7fd fbf3 	bl	8000220 <strlen>
 8002a3a:	8028      	strh	r0, [r5, #0]
}
 8002a3c:	b005      	add	sp, #20
 8002a3e:	bd30      	pop	{r4, r5, pc}
 8002a40:	08011978 	.word	0x08011978

08002a44 <SystemApp_Init>:
{
 8002a44:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002a46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a4a:	6893      	ldr	r3, [r2, #8]
 8002a4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002a50:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8002a52:	f00a fe95 	bl	800d780 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002a56:	2401      	movs	r4, #1
 8002a58:	4b0b      	ldr	r3, [pc, #44]	@ (8002a88 <SystemApp_Init+0x44>)
 8002a5a:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8002a5c:	f000 f83e 	bl	8002adc <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8002a60:	f00b f85c 	bl	800db1c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002a64:	4809      	ldr	r0, [pc, #36]	@ (8002a8c <SystemApp_Init+0x48>)
 8002a66:	f00b f873 	bl	800db50 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002a6a:	2002      	movs	r0, #2
 8002a6c:	f00b f876 	bl	800db5c <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 8002a70:	f00a fb9e 	bl	800d1b0 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002a74:	4621      	mov	r1, r4
 8002a76:	4620      	mov	r0, r4
 8002a78:	f00a fbba 	bl	800d1f0 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f00a fba0 	bl	800d1c4 <UTIL_LPM_SetStopMode>
}
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	bf00      	nop
 8002a88:	200005b0 	.word	0x200005b0
 8002a8c:	08002a15 	.word	0x08002a15

08002a90 <UTIL_SEQ_Idle>:
{
 8002a90:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8002a92:	f00a fbc3 	bl	800d21c <UTIL_LPM_EnterLowPower>
}
 8002a96:	bd08      	pop	{r3, pc}

08002a98 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002a98:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f00a fb91 	bl	800d1c4 <UTIL_LPM_SetStopMode>
}
 8002aa2:	bd08      	pop	{r3, pc}

08002aa4 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002aa4:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	f00a fb8b 	bl	800d1c4 <UTIL_LPM_SetStopMode>
}
 8002aae:	bd08      	pop	{r3, pc}

08002ab0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002ab0:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002ab2:	4b04      	ldr	r3, [pc, #16]	@ (8002ac4 <HAL_GetTick+0x14>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b90b      	cbnz	r3, 8002abc <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8002ab8:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8002aba:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8002abc:	f000 f948 	bl	8002d50 <TIMER_IF_GetTimerValue>
 8002ac0:	e7fb      	b.n	8002aba <HAL_GetTick+0xa>
 8002ac2:	bf00      	nop
 8002ac4:	200005b0 	.word	0x200005b0

08002ac8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002ac8:	b500      	push	{lr}
 8002aca:	b083      	sub	sp, #12
 8002acc:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002ace:	9801      	ldr	r0, [sp, #4]
 8002ad0:	f000 fa24 	bl	8002f1c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ad4:	b003      	add	sp, #12
 8002ad6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08002adc <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002adc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ae0:	b08b      	sub	sp, #44	@ 0x2c
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002ae2:	4a38      	ldr	r2, [pc, #224]	@ (8002bc4 <DBG_Init+0xe8>)
 8002ae4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002af0:	f002 f810 	bl	8004b14 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002af4:	f002 f816 	bl	8004b24 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002af8:	f002 f81c 	bl	8004b34 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002afc:	2400      	movs	r4, #0
 8002afe:	9405      	str	r4, [sp, #20]
 8002b00:	9406      	str	r4, [sp, #24]
 8002b02:	9407      	str	r4, [sp, #28]
 8002b04:	9408      	str	r4, [sp, #32]
 8002b06:	9409      	str	r4, [sp, #36]	@ 0x24

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002b08:	2501      	movs	r5, #1
 8002b0a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	9308      	str	r3, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b16:	432a      	orrs	r2, r5
 8002b18:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b1c:	402a      	ands	r2, r5
 8002b1e:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8002b20:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b24:	432a      	orrs	r2, r5
 8002b26:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b2a:	402a      	ands	r2, r5
 8002b2c:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8002b2e:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b32:	432a      	orrs	r2, r5
 8002b34:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b38:	402a      	ands	r2, r5
 8002b3a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002b3c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002b40:	f042 0202 	orr.w	r2, r2, #2
 8002b44:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002b4e:	9b01      	ldr	r3, [sp, #4]
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();
  PROBE_LINE3_CLK_ENABLE();
  PROBE_LINE4_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8002b50:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002b52:	a905      	add	r1, sp, #20
 8002b54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b58:	f002 fb22 	bl	80051a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8002b5c:	f04f 0902 	mov.w	r9, #2
 8002b60:	f8cd 9014 	str.w	r9, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002b64:	a905      	add	r1, sp, #20
 8002b66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b6a:	f002 fb19 	bl	80051a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8002b6e:	f04f 0840 	mov.w	r8, #64	@ 0x40
 8002b72:	f8cd 8014 	str.w	r8, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8002b76:	a905      	add	r1, sp, #20
 8002b78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b7c:	f002 fb10 	bl	80051a0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8002b80:	2710      	movs	r7, #16
 8002b82:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8002b84:	4e10      	ldr	r6, [pc, #64]	@ (8002bc8 <DBG_Init+0xec>)
 8002b86:	a905      	add	r1, sp, #20
 8002b88:	4630      	mov	r0, r6
 8002b8a:	f002 fb09 	bl	80051a0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8002b8e:	4622      	mov	r2, r4
 8002b90:	4629      	mov	r1, r5
 8002b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b96:	f002 fc5a 	bl	800544e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002b9a:	4622      	mov	r2, r4
 8002b9c:	4649      	mov	r1, r9
 8002b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ba2:	f002 fc54 	bl	800544e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	4641      	mov	r1, r8
 8002baa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bae:	f002 fc4e 	bl	800544e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8002bb2:	4622      	mov	r2, r4
 8002bb4:	4639      	mov	r1, r7
 8002bb6:	4630      	mov	r0, r6
 8002bb8:	f002 fc49 	bl	800544e <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002bbc:	b00b      	add	sp, #44	@ 0x2c
 8002bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bc2:	bf00      	nop
 8002bc4:	58000800 	.word	0x58000800
 8002bc8:	48000400 	.word	0x48000400

08002bcc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8002bcc:	2001      	movs	r0, #1
 8002bce:	4770      	bx	lr

08002bd0 <_kill>:

int _kill(int pid, int sig)
{
 8002bd0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bd2:	f00c f807 	bl	800ebe4 <__errno>
 8002bd6:	2316      	movs	r3, #22
 8002bd8:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002bda:	f04f 30ff 	mov.w	r0, #4294967295
 8002bde:	bd08      	pop	{r3, pc}

08002be0 <_exit>:

void _exit (int status)
{
 8002be0:	b508      	push	{r3, lr}
  _kill(status, -1);
 8002be2:	f04f 31ff 	mov.w	r1, #4294967295
 8002be6:	f7ff fff3 	bl	8002bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bea:	e7fe      	b.n	8002bea <_exit+0xa>

08002bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bec:	b570      	push	{r4, r5, r6, lr}
 8002bee:	460c      	mov	r4, r1
 8002bf0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	2500      	movs	r5, #0
 8002bf4:	e006      	b.n	8002c04 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8002bf6:	f3af 8000 	nop.w
 8002bfa:	4621      	mov	r1, r4
 8002bfc:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c00:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8002c02:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c04:	42b5      	cmp	r5, r6
 8002c06:	dbf6      	blt.n	8002bf6 <_read+0xa>
  }

  return len;
}
 8002c08:	4630      	mov	r0, r6
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}

08002c0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	460c      	mov	r4, r1
 8002c10:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c12:	2500      	movs	r5, #0
 8002c14:	e004      	b.n	8002c20 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002c16:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002c1a:	f7fe fe77 	bl	800190c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	3501      	adds	r5, #1
 8002c20:	42b5      	cmp	r5, r6
 8002c22:	dbf8      	blt.n	8002c16 <_write+0xa>
  }
  return len;
}
 8002c24:	4630      	mov	r0, r6
 8002c26:	bd70      	pop	{r4, r5, r6, pc}

08002c28 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	4770      	bx	lr

08002c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c32:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002c34:	2000      	movs	r0, #0
 8002c36:	4770      	bx	lr

08002c38 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002c38:	2001      	movs	r0, #1
 8002c3a:	4770      	bx	lr

08002c3c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	4770      	bx	lr

08002c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c40:	b510      	push	{r4, lr}
 8002c42:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c44:	4a0c      	ldr	r2, [pc, #48]	@ (8002c78 <_sbrk+0x38>)
 8002c46:	490d      	ldr	r1, [pc, #52]	@ (8002c7c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c48:	480d      	ldr	r0, [pc, #52]	@ (8002c80 <_sbrk+0x40>)
 8002c4a:	6800      	ldr	r0, [r0, #0]
 8002c4c:	b140      	cbz	r0, 8002c60 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c4e:	480c      	ldr	r0, [pc, #48]	@ (8002c80 <_sbrk+0x40>)
 8002c50:	6800      	ldr	r0, [r0, #0]
 8002c52:	4403      	add	r3, r0
 8002c54:	1a52      	subs	r2, r2, r1
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d806      	bhi.n	8002c68 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002c5a:	4a09      	ldr	r2, [pc, #36]	@ (8002c80 <_sbrk+0x40>)
 8002c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002c5e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002c60:	4807      	ldr	r0, [pc, #28]	@ (8002c80 <_sbrk+0x40>)
 8002c62:	4c08      	ldr	r4, [pc, #32]	@ (8002c84 <_sbrk+0x44>)
 8002c64:	6004      	str	r4, [r0, #0]
 8002c66:	e7f2      	b.n	8002c4e <_sbrk+0xe>
    errno = ENOMEM;
 8002c68:	f00b ffbc 	bl	800ebe4 <__errno>
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295
 8002c74:	e7f3      	b.n	8002c5e <_sbrk+0x1e>
 8002c76:	bf00      	nop
 8002c78:	20010000 	.word	0x20010000
 8002c7c:	00000800 	.word	0x00000800
 8002c80:	200005b4 	.word	0x200005b4
 8002c84:	200010c0 	.word	0x200010c0

08002c88 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002c88:	4770      	bx	lr
	...

08002c8c <MX_TIM16_Init>:

TIM_HandleTypeDef htim16;

/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002c8c:	b508      	push	{r3, lr}
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c8e:	4809      	ldr	r0, [pc, #36]	@ (8002cb4 <MX_TIM16_Init+0x28>)
 8002c90:	4b09      	ldr	r3, [pc, #36]	@ (8002cb8 <MX_TIM16_Init+0x2c>)
 8002c92:	6003      	str	r3, [r0, #0]
  htim16.Init.Prescaler = 48;
 8002c94:	2330      	movs	r3, #48	@ 0x30
 8002c96:	6043      	str	r3, [r0, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	6083      	str	r3, [r0, #8]
  htim16.Init.Period = 4;
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	60c2      	str	r2, [r0, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ca0:	6103      	str	r3, [r0, #16]
  htim16.Init.RepetitionCounter = 0;
 8002ca2:	6143      	str	r3, [r0, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca4:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002ca6:	f005 fdb5 	bl	8008814 <HAL_TIM_Base_Init>
 8002caa:	b900      	cbnz	r0, 8002cae <MX_TIM16_Init+0x22>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002cac:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002cae:	f7ff fabd 	bl	800222c <Error_Handler>
}
 8002cb2:	e7fb      	b.n	8002cac <MX_TIM16_Init+0x20>
 8002cb4:	200005b8 	.word	0x200005b8
 8002cb8:	40014400 	.word	0x40014400

08002cbc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM16)
 8002cbc:	6802      	ldr	r2, [r0, #0]
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <HAL_TIM_Base_MspInit+0x3c>)
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d000      	beq.n	8002cc6 <HAL_TIM_Base_MspInit+0xa>
 8002cc4:	4770      	bx	lr
{
 8002cc6:	b500      	push	{lr}
 8002cc8:	b083      	sub	sp, #12
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cce:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002cd0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002cd4:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cdc:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002cde:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END TIM16_MspInit 0 */
    /* TIM16 clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();

    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	201c      	movs	r0, #28
 8002ce6:	f001 ffa5 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002cea:	201c      	movs	r0, #28
 8002cec:	f001 ffb2 	bl	8004c54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002cf0:	b003      	add	sp, #12
 8002cf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8002cf6:	bf00      	nop
 8002cf8:	40014400 	.word	0x40014400

08002cfc <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <TIMER_IF_SetTimerContext+0x1c>)
 8002cfe:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002d00:	e001      	b.n	8002d06 <TIMER_IF_SetTimerContext+0xa>
 8002d02:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <TIMER_IF_SetTimerContext+0x1c>)
 8002d04:	6898      	ldr	r0, [r3, #8]
 8002d06:	4b04      	ldr	r3, [pc, #16]	@ (8002d18 <TIMER_IF_SetTimerContext+0x1c>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4283      	cmp	r3, r0
 8002d0c:	d1f9      	bne.n	8002d02 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8002d0e:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8002d10:	4b02      	ldr	r3, [pc, #8]	@ (8002d1c <TIMER_IF_SetTimerContext+0x20>)
 8002d12:	6018      	str	r0, [r3, #0]
}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40002800 	.word	0x40002800
 8002d1c:	20000674 	.word	0x20000674

08002d20 <TIMER_IF_GetTimerContext>:
}
 8002d20:	4b01      	ldr	r3, [pc, #4]	@ (8002d28 <TIMER_IF_GetTimerContext+0x8>)
 8002d22:	6818      	ldr	r0, [r3, #0]
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000674 	.word	0x20000674

08002d2c <TIMER_IF_GetTimerElapsedTime>:
 8002d2c:	4b06      	ldr	r3, [pc, #24]	@ (8002d48 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002d2e:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002d30:	e001      	b.n	8002d36 <TIMER_IF_GetTimerElapsedTime+0xa>
 8002d32:	4b05      	ldr	r3, [pc, #20]	@ (8002d48 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002d34:	6898      	ldr	r0, [r3, #8]
 8002d36:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4283      	cmp	r3, r0
 8002d3c:	d1f9      	bne.n	8002d32 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8002d3e:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002d40:	4b02      	ldr	r3, [pc, #8]	@ (8002d4c <TIMER_IF_GetTimerElapsedTime+0x20>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	1ac0      	subs	r0, r0, r3
 8002d46:	4770      	bx	lr
 8002d48:	40002800 	.word	0x40002800
 8002d4c:	20000674 	.word	0x20000674

08002d50 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8002d50:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <TIMER_IF_GetTimerValue+0x20>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	b153      	cbz	r3, 8002d6c <TIMER_IF_GetTimerValue+0x1c>
 8002d56:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <TIMER_IF_GetTimerValue+0x24>)
 8002d58:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002d5a:	e001      	b.n	8002d60 <TIMER_IF_GetTimerValue+0x10>
 8002d5c:	4b05      	ldr	r3, [pc, #20]	@ (8002d74 <TIMER_IF_GetTimerValue+0x24>)
 8002d5e:	6898      	ldr	r0, [r3, #8]
 8002d60:	4b04      	ldr	r3, [pc, #16]	@ (8002d74 <TIMER_IF_GetTimerValue+0x24>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4283      	cmp	r3, r0
 8002d66:	d1f9      	bne.n	8002d5c <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8002d68:	43c0      	mvns	r0, r0
 8002d6a:	4770      	bx	lr
  uint32_t ret = 0;
 8002d6c:	2000      	movs	r0, #0
}
 8002d6e:	4770      	bx	lr
 8002d70:	20000678 	.word	0x20000678
 8002d74:	40002800 	.word	0x40002800

08002d78 <TIMER_IF_GetMinimumTimeout>:
}
 8002d78:	2003      	movs	r0, #3
 8002d7a:	4770      	bx	lr

08002d7c <TIMER_IF_Convert_ms2Tick>:
{
 8002d7c:	b508      	push	{r3, lr}
 8002d7e:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002d80:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d84:	2300      	movs	r3, #0
 8002d86:	0280      	lsls	r0, r0, #10
 8002d88:	0d89      	lsrs	r1, r1, #22
 8002d8a:	f7fe fa4f 	bl	800122c <__aeabi_uldivmod>
}
 8002d8e:	bd08      	pop	{r3, pc}

08002d90 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002d90:	0ec2      	lsrs	r2, r0, #27
 8002d92:	0143      	lsls	r3, r0, #5
 8002d94:	1a1b      	subs	r3, r3, r0
 8002d96:	f162 0200 	sbc.w	r2, r2, #0
 8002d9a:	0092      	lsls	r2, r2, #2
 8002d9c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	181b      	adds	r3, r3, r0
 8002da4:	f142 0000 	adc.w	r0, r2, #0
 8002da8:	00c0      	lsls	r0, r0, #3
 8002daa:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002dae:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002db2:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8002db6:	4770      	bx	lr

08002db8 <TIMER_IF_StopTimer>:
{
 8002db8:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002dba:	4b07      	ldr	r3, [pc, #28]	@ (8002dd8 <TIMER_IF_StopTimer+0x20>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002dc0:	4c06      	ldr	r4, [pc, #24]	@ (8002ddc <TIMER_IF_StopTimer+0x24>)
 8002dc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f003 ff22 	bl	8006c10 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd0:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	bd10      	pop	{r4, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40002800 	.word	0x40002800
 8002ddc:	20000478 	.word	0x20000478

08002de0 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002de0:	b508      	push	{r3, lr}
 8002de2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002de4:	2102      	movs	r1, #2
 8002de6:	4802      	ldr	r0, [pc, #8]	@ (8002df0 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002de8:	f004 fab8 	bl	800735c <HAL_RTCEx_BKUPWrite>
}
 8002dec:	bd08      	pop	{r3, pc}
 8002dee:	bf00      	nop
 8002df0:	20000478 	.word	0x20000478

08002df4 <TIMER_IF_Init>:
{
 8002df4:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002df6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <TIMER_IF_Init+0x40>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b10b      	cbz	r3, 8002e00 <TIMER_IF_Init+0xc>
}
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002e00:	4c0d      	ldr	r4, [pc, #52]	@ (8002e38 <TIMER_IF_Init+0x44>)
 8002e02:	f04f 35ff 	mov.w	r5, #4294967295
 8002e06:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8002e08:	f7ff fc58 	bl	80026bc <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002e0c:	f7ff ffd4 	bl	8002db8 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002e10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e14:	4620      	mov	r0, r4
 8002e16:	f003 fefb 	bl	8006c10 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002e1a:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	f004 fa75 	bl	800730c <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7ff ffdc 	bl	8002de0 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8002e28:	f7ff ff68 	bl	8002cfc <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8002e2c:	4b01      	ldr	r3, [pc, #4]	@ (8002e34 <TIMER_IF_Init+0x40>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e7e3      	b.n	8002dfc <TIMER_IF_Init+0x8>
 8002e34:	20000678 	.word	0x20000678
 8002e38:	20000478 	.word	0x20000478

08002e3c <TIMER_IF_BkUp_Write_Seconds>:
{
 8002e3c:	b508      	push	{r3, lr}
 8002e3e:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002e40:	2100      	movs	r1, #0
 8002e42:	4802      	ldr	r0, [pc, #8]	@ (8002e4c <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002e44:	f004 fa8a 	bl	800735c <HAL_RTCEx_BKUPWrite>
}
 8002e48:	bd08      	pop	{r3, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000478 	.word	0x20000478

08002e50 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002e50:	b508      	push	{r3, lr}
 8002e52:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002e54:	2101      	movs	r1, #1
 8002e56:	4802      	ldr	r0, [pc, #8]	@ (8002e60 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002e58:	f004 fa80 	bl	800735c <HAL_RTCEx_BKUPWrite>
}
 8002e5c:	bd08      	pop	{r3, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000478 	.word	0x20000478

08002e64 <TIMER_IF_StartTimer>:
{
 8002e64:	b510      	push	{r4, lr}
 8002e66:	b08c      	sub	sp, #48	@ 0x30
 8002e68:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8002e6a:	222c      	movs	r2, #44	@ 0x2c
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	a801      	add	r0, sp, #4
 8002e70:	f00b fe55 	bl	800eb1e <memset>
  TIMER_IF_StopTimer();
 8002e74:	f7ff ffa0 	bl	8002db8 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002e78:	4b0c      	ldr	r3, [pc, #48]	@ (8002eac <TIMER_IF_StartTimer+0x48>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002e82:	43e4      	mvns	r4, r4
 8002e84:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002e86:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002e88:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002e8c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e92:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002e94:	2201      	movs	r2, #1
 8002e96:	a901      	add	r1, sp, #4
 8002e98:	4805      	ldr	r0, [pc, #20]	@ (8002eb0 <TIMER_IF_StartTimer+0x4c>)
 8002e9a:	f004 f979 	bl	8007190 <HAL_RTC_SetAlarm_IT>
 8002e9e:	b910      	cbnz	r0, 8002ea6 <TIMER_IF_StartTimer+0x42>
}
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	b00c      	add	sp, #48	@ 0x30
 8002ea4:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002ea6:	f7ff f9c1 	bl	800222c <Error_Handler>
 8002eaa:	e7f9      	b.n	8002ea0 <TIMER_IF_StartTimer+0x3c>
 8002eac:	20000674 	.word	0x20000674
 8002eb0:	20000478 	.word	0x20000478

08002eb4 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002eb4:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002eb6:	2102      	movs	r1, #2
 8002eb8:	4801      	ldr	r0, [pc, #4]	@ (8002ec0 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8002eba:	f004 fa56 	bl	800736a <HAL_RTCEx_BKUPRead>
}
 8002ebe:	bd08      	pop	{r3, pc}
 8002ec0:	20000478 	.word	0x20000478

08002ec4 <TIMER_IF_GetTime>:
{
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4605      	mov	r5, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <TIMER_IF_GetTime+0x34>)
 8002eca:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ecc:	e001      	b.n	8002ed2 <TIMER_IF_GetTime+0xe>
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <TIMER_IF_GetTime+0x34>)
 8002ed0:	689c      	ldr	r4, [r3, #8]
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <TIMER_IF_GetTime+0x34>)
 8002ed4:	6892      	ldr	r2, [r2, #8]
 8002ed6:	42a2      	cmp	r2, r4
 8002ed8:	d1f9      	bne.n	8002ece <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8002eda:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002edc:	f7ff ffea 	bl	8002eb4 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002ee0:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002ee2:	0aa4      	lsrs	r4, r4, #10
 8002ee4:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002ee8:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002eec:	f7ff ff50 	bl	8002d90 <TIMER_IF_Convert_Tick2ms>
 8002ef0:	8028      	strh	r0, [r5, #0]
}
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	bd38      	pop	{r3, r4, r5, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40002800 	.word	0x40002800

08002efc <TIMER_IF_BkUp_Read_Seconds>:
{
 8002efc:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002efe:	2100      	movs	r1, #0
 8002f00:	4801      	ldr	r0, [pc, #4]	@ (8002f08 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002f02:	f004 fa32 	bl	800736a <HAL_RTCEx_BKUPRead>
}
 8002f06:	bd08      	pop	{r3, pc}
 8002f08:	20000478 	.word	0x20000478

08002f0c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002f0c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002f0e:	2101      	movs	r1, #1
 8002f10:	4801      	ldr	r0, [pc, #4]	@ (8002f18 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002f12:	f004 fa2a 	bl	800736a <HAL_RTCEx_BKUPRead>
}
 8002f16:	bd08      	pop	{r3, pc}
 8002f18:	20000478 	.word	0x20000478

08002f1c <TIMER_IF_DelayMs>:
{
 8002f1c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002f1e:	f7ff ff2d 	bl	8002d7c <TIMER_IF_Convert_ms2Tick>
 8002f22:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <TIMER_IF_DelayMs+0x3c>)
 8002f24:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002f26:	e001      	b.n	8002f2c <TIMER_IF_DelayMs+0x10>
 8002f28:	4b0b      	ldr	r3, [pc, #44]	@ (8002f58 <TIMER_IF_DelayMs+0x3c>)
 8002f2a:	6899      	ldr	r1, [r3, #8]
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <TIMER_IF_DelayMs+0x3c>)
 8002f2e:	6892      	ldr	r2, [r2, #8]
 8002f30:	428a      	cmp	r2, r1
 8002f32:	d1f9      	bne.n	8002f28 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002f34:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002f36:	e00a      	b.n	8002f4e <TIMER_IF_DelayMs+0x32>
 8002f38:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <TIMER_IF_DelayMs+0x3c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a06      	ldr	r2, [pc, #24]	@ (8002f58 <TIMER_IF_DelayMs+0x3c>)
 8002f3e:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1f9      	bne.n	8002f38 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8002f44:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002f46:	1a5b      	subs	r3, r3, r1
 8002f48:	4283      	cmp	r3, r0
 8002f4a:	d203      	bcs.n	8002f54 <TIMER_IF_DelayMs+0x38>
    __NOP();
 8002f4c:	bf00      	nop
 8002f4e:	4b02      	ldr	r3, [pc, #8]	@ (8002f58 <TIMER_IF_DelayMs+0x3c>)
 8002f50:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002f52:	e7f3      	b.n	8002f3c <TIMER_IF_DelayMs+0x20>
}
 8002f54:	bd08      	pop	{r3, pc}
 8002f56:	bf00      	nop
 8002f58:	40002800 	.word	0x40002800

08002f5c <HAL_RTC_AlarmAEventCallback>:
{
 8002f5c:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002f5e:	f00a fd33 	bl	800d9c8 <UTIL_TIMER_IRQ_Handler>
}
 8002f62:	bd08      	pop	{r3, pc}

08002f64 <HAL_RTCEx_SSRUEventCallback>:
{
 8002f64:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002f66:	f7ff ffa5 	bl	8002eb4 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	f7ff ff38 	bl	8002de0 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002f70:	bd08      	pop	{r3, pc}
	...

08002f74 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f74:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f76:	4817      	ldr	r0, [pc, #92]	@ (8002fd4 <MX_USART2_UART_Init+0x60>)
 8002f78:	4b17      	ldr	r3, [pc, #92]	@ (8002fd8 <MX_USART2_UART_Init+0x64>)
 8002f7a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002f7c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002f80:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f82:	2300      	movs	r3, #0
 8002f84:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f86:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f88:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f8a:	220c      	movs	r2, #12
 8002f8c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f8e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f90:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f92:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f94:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f96:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f98:	f006 fcf2 	bl	8009980 <HAL_UART_Init>
 8002f9c:	b970      	cbnz	r0, 8002fbc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	480c      	ldr	r0, [pc, #48]	@ (8002fd4 <MX_USART2_UART_Init+0x60>)
 8002fa2:	f006 feab 	bl	8009cfc <HAL_UARTEx_SetTxFifoThreshold>
 8002fa6:	b960      	cbnz	r0, 8002fc2 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002fa8:	2100      	movs	r1, #0
 8002faa:	480a      	ldr	r0, [pc, #40]	@ (8002fd4 <MX_USART2_UART_Init+0x60>)
 8002fac:	f006 fecb 	bl	8009d46 <HAL_UARTEx_SetRxFifoThreshold>
 8002fb0:	b950      	cbnz	r0, 8002fc8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002fb2:	4808      	ldr	r0, [pc, #32]	@ (8002fd4 <MX_USART2_UART_Init+0x60>)
 8002fb4:	f006 fe83 	bl	8009cbe <HAL_UARTEx_DisableFifoMode>
 8002fb8:	b948      	cbnz	r0, 8002fce <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fba:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002fbc:	f7ff f936 	bl	800222c <Error_Handler>
 8002fc0:	e7ed      	b.n	8002f9e <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002fc2:	f7ff f933 	bl	800222c <Error_Handler>
 8002fc6:	e7ef      	b.n	8002fa8 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002fc8:	f7ff f930 	bl	800222c <Error_Handler>
 8002fcc:	e7f1      	b.n	8002fb2 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002fce:	f7ff f92d 	bl	800222c <Error_Handler>
}
 8002fd2:	e7f2      	b.n	8002fba <MX_USART2_UART_Init+0x46>
 8002fd4:	200006dc 	.word	0x200006dc
 8002fd8:	40004400 	.word	0x40004400

08002fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fdc:	b530      	push	{r4, r5, lr}
 8002fde:	b097      	sub	sp, #92	@ 0x5c
 8002fe0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	9111      	str	r1, [sp, #68]	@ 0x44
 8002fe6:	9112      	str	r1, [sp, #72]	@ 0x48
 8002fe8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8002fea:	9114      	str	r1, [sp, #80]	@ 0x50
 8002fec:	9115      	str	r1, [sp, #84]	@ 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fee:	2238      	movs	r2, #56	@ 0x38
 8002ff0:	a803      	add	r0, sp, #12
 8002ff2:	f00b fd94 	bl	800eb1e <memset>
  if(uartHandle->Instance==USART2)
 8002ff6:	6822      	ldr	r2, [r4, #0]
 8002ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80030b4 <HAL_UART_MspInit+0xd8>)
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002ffe:	b017      	add	sp, #92	@ 0x5c
 8003000:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003002:	2302      	movs	r3, #2
 8003004:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003006:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800300a:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800300c:	a803      	add	r0, sp, #12
 800300e:	f003 fcdd 	bl	80069cc <HAL_RCCEx_PeriphCLKConfig>
 8003012:	2800      	cmp	r0, #0
 8003014:	d144      	bne.n	80030a0 <HAL_UART_MspInit+0xc4>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800301a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800301c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003020:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003022:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003024:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8003028:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800302a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800302c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800302e:	f042 0201 	orr.w	r2, r2, #1
 8003032:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800303c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800303e:	230c      	movs	r3, #12
 8003040:	9311      	str	r3, [sp, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003042:	2302      	movs	r3, #2
 8003044:	9312      	str	r3, [sp, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003046:	2500      	movs	r5, #0
 8003048:	9513      	str	r5, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800304a:	2303      	movs	r3, #3
 800304c:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800304e:	2307      	movs	r3, #7
 8003050:	9315      	str	r3, [sp, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003052:	a911      	add	r1, sp, #68	@ 0x44
 8003054:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003058:	f002 f8a2 	bl	80051a0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800305c:	4816      	ldr	r0, [pc, #88]	@ (80030b8 <HAL_UART_MspInit+0xdc>)
 800305e:	4b17      	ldr	r3, [pc, #92]	@ (80030bc <HAL_UART_MspInit+0xe0>)
 8003060:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003062:	2314      	movs	r3, #20
 8003064:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003066:	2310      	movs	r3, #16
 8003068:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800306a:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003070:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003072:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003074:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003076:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003078:	f001 fe7c 	bl	8004d74 <HAL_DMA_Init>
 800307c:	b998      	cbnz	r0, 80030a6 <HAL_UART_MspInit+0xca>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 800307e:	2110      	movs	r1, #16
 8003080:	480d      	ldr	r0, [pc, #52]	@ (80030b8 <HAL_UART_MspInit+0xdc>)
 8003082:	f002 f879 	bl	8005178 <HAL_DMA_ConfigChannelAttributes>
 8003086:	b988      	cbnz	r0, 80030ac <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003088:	4b0b      	ldr	r3, [pc, #44]	@ (80030b8 <HAL_UART_MspInit+0xdc>)
 800308a:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800308c:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800308e:	2200      	movs	r2, #0
 8003090:	4611      	mov	r1, r2
 8003092:	2025      	movs	r0, #37	@ 0x25
 8003094:	f001 fdce 	bl	8004c34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003098:	2025      	movs	r0, #37	@ 0x25
 800309a:	f001 fddb 	bl	8004c54 <HAL_NVIC_EnableIRQ>
}
 800309e:	e7ae      	b.n	8002ffe <HAL_UART_MspInit+0x22>
      Error_Handler();
 80030a0:	f7ff f8c4 	bl	800222c <Error_Handler>
 80030a4:	e7b7      	b.n	8003016 <HAL_UART_MspInit+0x3a>
      Error_Handler();
 80030a6:	f7ff f8c1 	bl	800222c <Error_Handler>
 80030aa:	e7e8      	b.n	800307e <HAL_UART_MspInit+0xa2>
      Error_Handler();
 80030ac:	f7ff f8be 	bl	800222c <Error_Handler>
 80030b0:	e7ea      	b.n	8003088 <HAL_UART_MspInit+0xac>
 80030b2:	bf00      	nop
 80030b4:	40004400 	.word	0x40004400
 80030b8:	2000067c 	.word	0x2000067c
 80030bc:	40020008 	.word	0x40020008

080030c0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 80030c0:	6802      	ldr	r2, [r0, #0]
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_UART_MspDeInit+0x34>)
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d000      	beq.n	80030ca <HAL_UART_MspDeInit+0xa>
 80030c8:	4770      	bx	lr
{
 80030ca:	b510      	push	{r4, lr}
 80030cc:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80030ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030d2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80030d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80030d8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80030da:	210c      	movs	r1, #12
 80030dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030e0:	f002 f930 	bl	8005344 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80030e4:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80030e6:	f001 feb7 	bl	8004e58 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80030ea:	2025      	movs	r0, #37	@ 0x25
 80030ec:	f001 fdb6 	bl	8004c5c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80030f0:	bd10      	pop	{r4, pc}
 80030f2:	bf00      	nop
 80030f4:	40004400 	.word	0x40004400

080030f8 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80030f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <vcom_Init+0x20>)
 80030fc:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 80030fe:	f7fe fa0d 	bl	800151c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003102:	f7ff ff37 	bl	8002f74 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003106:	4a05      	ldr	r2, [pc, #20]	@ (800311c <vcom_Init+0x24>)
 8003108:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 800310c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003114:	2000      	movs	r0, #0
 8003116:	bd08      	pop	{r3, pc}
 8003118:	200007ac 	.word	0x200007ac
 800311c:	58000800 	.word	0x58000800

08003120 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003120:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8003122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003126:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003128:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800312c:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800312e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003130:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003134:	639a      	str	r2, [r3, #56]	@ 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8003136:	4804      	ldr	r0, [pc, #16]	@ (8003148 <vcom_DeInit+0x28>)
 8003138:	f7ff ffc2 	bl	80030c0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800313c:	200f      	movs	r0, #15
 800313e:	f001 fd8d 	bl	8004c5c <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003142:	2000      	movs	r0, #0
 8003144:	bd08      	pop	{r3, pc}
 8003146:	bf00      	nop
 8003148:	200006dc 	.word	0x200006dc

0800314c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800314c:	b508      	push	{r3, lr}
 800314e:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8003150:	4601      	mov	r1, r0
 8003152:	4802      	ldr	r0, [pc, #8]	@ (800315c <vcom_Trace_DMA+0x10>)
 8003154:	f005 ff08 	bl	8008f68 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8003158:	2000      	movs	r0, #0
 800315a:	bd08      	pop	{r3, pc}
 800315c:	200006dc 	.word	0x200006dc

08003160 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003160:	b510      	push	{r4, lr}
 8003162:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8003164:	4b12      	ldr	r3, [pc, #72]	@ (80031b0 <vcom_ReceiveInit+0x50>)
 8003166:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003168:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800316c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800316e:	ab02      	add	r3, sp, #8
 8003170:	e913 0006 	ldmdb	r3, {r1, r2}
 8003174:	480f      	ldr	r0, [pc, #60]	@ (80031b4 <vcom_ReceiveInit+0x54>)
 8003176:	f006 fd4a 	bl	8009c0e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800317a:	4b0e      	ldr	r3, [pc, #56]	@ (80031b4 <vcom_ReceiveInit+0x54>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8003184:	d1f9      	bne.n	800317a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8003186:	69da      	ldr	r2, [r3, #28]
 8003188:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800318c:	d0fb      	beq.n	8003186 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003194:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8003196:	4c07      	ldr	r4, [pc, #28]	@ (80031b4 <vcom_ReceiveInit+0x54>)
 8003198:	4620      	mov	r0, r4
 800319a:	f006 fd79 	bl	8009c90 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800319e:	2201      	movs	r2, #1
 80031a0:	4905      	ldr	r1, [pc, #20]	@ (80031b8 <vcom_ReceiveInit+0x58>)
 80031a2:	4620      	mov	r0, r4
 80031a4:	f006 fccc 	bl	8009b40 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	b002      	add	sp, #8
 80031ac:	bd10      	pop	{r4, pc}
 80031ae:	bf00      	nop
 80031b0:	200007a8 	.word	0x200007a8
 80031b4:	200006dc 	.word	0x200006dc
 80031b8:	200007b0 	.word	0x200007b0

080031bc <vcom_Resume>:

void vcom_Resume(void)
{
 80031bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031be:	4807      	ldr	r0, [pc, #28]	@ (80031dc <vcom_Resume+0x20>)
 80031c0:	f006 fbde 	bl	8009980 <HAL_UART_Init>
 80031c4:	b920      	cbnz	r0, 80031d0 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80031c6:	4806      	ldr	r0, [pc, #24]	@ (80031e0 <vcom_Resume+0x24>)
 80031c8:	f001 fdd4 	bl	8004d74 <HAL_DMA_Init>
 80031cc:	b918      	cbnz	r0, 80031d6 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80031ce:	bd08      	pop	{r3, pc}
    Error_Handler();
 80031d0:	f7ff f82c 	bl	800222c <Error_Handler>
 80031d4:	e7f7      	b.n	80031c6 <vcom_Resume+0xa>
    Error_Handler();
 80031d6:	f7ff f829 	bl	800222c <Error_Handler>
}
 80031da:	e7f8      	b.n	80031ce <vcom_Resume+0x12>
 80031dc:	200006dc 	.word	0x200006dc
 80031e0:	2000067c 	.word	0x2000067c

080031e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80031e6:	6802      	ldr	r2, [r0, #0]
 80031e8:	4b04      	ldr	r3, [pc, #16]	@ (80031fc <HAL_UART_TxCpltCallback+0x18>)
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d000      	beq.n	80031f0 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80031ee:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 80031f0:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <HAL_UART_TxCpltCallback+0x1c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2000      	movs	r0, #0
 80031f6:	4798      	blx	r3
}
 80031f8:	e7f9      	b.n	80031ee <HAL_UART_TxCpltCallback+0xa>
 80031fa:	bf00      	nop
 80031fc:	40004400 	.word	0x40004400
 8003200:	200007ac 	.word	0x200007ac

08003204 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8003204:	6802      	ldr	r2, [r0, #0]
 8003206:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <HAL_UART_RxCpltCallback+0x2c>)
 8003208:	429a      	cmp	r2, r3
 800320a:	d000      	beq.n	800320e <HAL_UART_RxCpltCallback+0xa>
 800320c:	4770      	bx	lr
{
 800320e:	b510      	push	{r4, lr}
 8003210:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003212:	4b08      	ldr	r3, [pc, #32]	@ (8003234 <HAL_UART_RxCpltCallback+0x30>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b12b      	cbz	r3, 8003224 <HAL_UART_RxCpltCallback+0x20>
 8003218:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 800321c:	b912      	cbnz	r2, 8003224 <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 800321e:	2101      	movs	r1, #1
 8003220:	4805      	ldr	r0, [pc, #20]	@ (8003238 <HAL_UART_RxCpltCallback+0x34>)
 8003222:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8003224:	2201      	movs	r2, #1
 8003226:	4904      	ldr	r1, [pc, #16]	@ (8003238 <HAL_UART_RxCpltCallback+0x34>)
 8003228:	4620      	mov	r0, r4
 800322a:	f006 fc89 	bl	8009b40 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800322e:	bd10      	pop	{r4, pc}
 8003230:	40004400 	.word	0x40004400
 8003234:	200007a8 	.word	0x200007a8
 8003238:	200007b0 	.word	0x200007b0

0800323c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800323c:	480d      	ldr	r0, [pc, #52]	@ (8003274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800323e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003240:	f7ff fd22 	bl	8002c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003244:	480c      	ldr	r0, [pc, #48]	@ (8003278 <LoopForever+0x6>)
  ldr r1, =_edata
 8003246:	490d      	ldr	r1, [pc, #52]	@ (800327c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003248:	4a0d      	ldr	r2, [pc, #52]	@ (8003280 <LoopForever+0xe>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800324c:	e002      	b.n	8003254 <LoopCopyDataInit>

0800324e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800324e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003252:	3304      	adds	r3, #4

08003254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003258:	d3f9      	bcc.n	800324e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325a:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800325c:	4c0a      	ldr	r4, [pc, #40]	@ (8003288 <LoopForever+0x16>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003260:	e001      	b.n	8003266 <LoopFillZerobss>

08003262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003264:	3204      	adds	r2, #4

08003266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003268:	d3fb      	bcc.n	8003262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800326a:	f00b fcc1 	bl	800ebf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800326e:	f7ff f829 	bl	80022c4 <main>

08003272 <LoopForever>:

LoopForever:
    b LoopForever
 8003272:	e7fe      	b.n	8003272 <LoopForever>
  ldr   r0, =_estack
 8003274:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800327c:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8003280:	08012528 	.word	0x08012528
  ldr r2, =_sbss
 8003284:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8003288:	200010c0 	.word	0x200010c0

0800328c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800328c:	e7fe      	b.n	800328c <ADC_IRQHandler>
	...

08003290 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003294:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003296:	2400      	movs	r4, #0
 8003298:	9401      	str	r4, [sp, #4]
 800329a:	9402      	str	r4, [sp, #8]
 800329c:	9403      	str	r4, [sp, #12]
 800329e:	9404      	str	r4, [sp, #16]
 80032a0:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032a8:	f042 0204 	orr.w	r2, r2, #4
 80032ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80032ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80032b6:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80032b8:	2710      	movs	r7, #16
 80032ba:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80032bc:	2301      	movs	r3, #1
 80032be:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80032c4:	4d12      	ldr	r5, [pc, #72]	@ (8003310 <BSP_RADIO_Init+0x80>)
 80032c6:	a901      	add	r1, sp, #4
 80032c8:	4628      	mov	r0, r5
 80032ca:	f001 ff69 	bl	80051a0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80032ce:	f04f 0820 	mov.w	r8, #32
 80032d2:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80032d6:	a901      	add	r1, sp, #4
 80032d8:	4628      	mov	r0, r5
 80032da:	f001 ff61 	bl	80051a0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80032de:	2608      	movs	r6, #8
 80032e0:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80032e2:	a901      	add	r1, sp, #4
 80032e4:	4628      	mov	r0, r5
 80032e6:	f001 ff5b 	bl	80051a0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80032ea:	4622      	mov	r2, r4
 80032ec:	4641      	mov	r1, r8
 80032ee:	4628      	mov	r0, r5
 80032f0:	f002 f8ad 	bl	800544e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80032f4:	4622      	mov	r2, r4
 80032f6:	4639      	mov	r1, r7
 80032f8:	4628      	mov	r0, r5
 80032fa:	f002 f8a8 	bl	800544e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80032fe:	4622      	mov	r2, r4
 8003300:	4631      	mov	r1, r6
 8003302:	4628      	mov	r0, r5
 8003304:	f002 f8a3 	bl	800544e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003308:	4620      	mov	r0, r4
 800330a:	b006      	add	sp, #24
 800330c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003310:	48000800 	.word	0x48000800

08003314 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8003314:	b510      	push	{r4, lr}
  switch (Config)
 8003316:	2803      	cmp	r0, #3
 8003318:	d813      	bhi.n	8003342 <BSP_RADIO_ConfigRFSwitch+0x2e>
 800331a:	e8df f000 	tbb	[pc, r0]
 800331e:	1402      	.short	0x1402
 8003320:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8003322:	4c22      	ldr	r4, [pc, #136]	@ (80033ac <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003324:	2200      	movs	r2, #0
 8003326:	2108      	movs	r1, #8
 8003328:	4620      	mov	r0, r4
 800332a:	f002 f890 	bl	800544e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	2110      	movs	r1, #16
 8003332:	4620      	mov	r0, r4
 8003334:	f002 f88b 	bl	800544e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003338:	2200      	movs	r2, #0
 800333a:	2120      	movs	r1, #32
 800333c:	4620      	mov	r0, r4
 800333e:	f002 f886 	bl	800544e <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8003342:	2000      	movs	r0, #0
 8003344:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003346:	4c19      	ldr	r4, [pc, #100]	@ (80033ac <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003348:	2201      	movs	r2, #1
 800334a:	2108      	movs	r1, #8
 800334c:	4620      	mov	r0, r4
 800334e:	f002 f87e 	bl	800544e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003352:	2201      	movs	r2, #1
 8003354:	2110      	movs	r1, #16
 8003356:	4620      	mov	r0, r4
 8003358:	f002 f879 	bl	800544e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800335c:	2200      	movs	r2, #0
 800335e:	2120      	movs	r1, #32
 8003360:	4620      	mov	r0, r4
 8003362:	f002 f874 	bl	800544e <HAL_GPIO_WritePin>
      break;
 8003366:	e7ec      	b.n	8003342 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003368:	4c10      	ldr	r4, [pc, #64]	@ (80033ac <BSP_RADIO_ConfigRFSwitch+0x98>)
 800336a:	2201      	movs	r2, #1
 800336c:	2108      	movs	r1, #8
 800336e:	4620      	mov	r0, r4
 8003370:	f002 f86d 	bl	800544e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003374:	2201      	movs	r2, #1
 8003376:	2110      	movs	r1, #16
 8003378:	4620      	mov	r0, r4
 800337a:	f002 f868 	bl	800544e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800337e:	2201      	movs	r2, #1
 8003380:	2120      	movs	r1, #32
 8003382:	4620      	mov	r0, r4
 8003384:	f002 f863 	bl	800544e <HAL_GPIO_WritePin>
      break;
 8003388:	e7db      	b.n	8003342 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800338a:	4c08      	ldr	r4, [pc, #32]	@ (80033ac <BSP_RADIO_ConfigRFSwitch+0x98>)
 800338c:	2201      	movs	r2, #1
 800338e:	2108      	movs	r1, #8
 8003390:	4620      	mov	r0, r4
 8003392:	f002 f85c 	bl	800544e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003396:	2200      	movs	r2, #0
 8003398:	2110      	movs	r1, #16
 800339a:	4620      	mov	r0, r4
 800339c:	f002 f857 	bl	800544e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80033a0:	2201      	movs	r2, #1
 80033a2:	2120      	movs	r1, #32
 80033a4:	4620      	mov	r0, r4
 80033a6:	f002 f852 	bl	800544e <HAL_GPIO_WritePin>
      break;
 80033aa:	e7ca      	b.n	8003342 <BSP_RADIO_ConfigRFSwitch+0x2e>
 80033ac:	48000800 	.word	0x48000800

080033b0 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80033b0:	2000      	movs	r0, #0
 80033b2:	4770      	bx	lr

080033b4 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80033b4:	2001      	movs	r0, #1
 80033b6:	4770      	bx	lr

080033b8 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80033b8:	2001      	movs	r0, #1
 80033ba:	4770      	bx	lr

080033bc <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80033bc:	b908      	cbnz	r0, 80033c2 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80033be:	200f      	movs	r0, #15
 80033c0:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80033c2:	2016      	movs	r0, #22
  }

  return ret;
}
 80033c4:	4770      	bx	lr
	...

080033c8 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	b090      	sub	sp, #64	@ 0x40
 80033cc:	4604      	mov	r4, r0
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80033ce:	2300      	movs	r3, #0
 80033d0:	930a      	str	r3, [sp, #40]	@ 0x28
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80033d2:	23d7      	movs	r3, #215	@ 0xd7
 80033d4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
  io_ctx.Init        = IKS01A3_I2C_Init;
 80033d8:	4b32      	ldr	r3, [pc, #200]	@ (80034a4 <LSM6DSO_0_Probe+0xdc>)
 80033da:	9308      	str	r3, [sp, #32]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80033dc:	4b32      	ldr	r3, [pc, #200]	@ (80034a8 <LSM6DSO_0_Probe+0xe0>)
 80033de:	9309      	str	r3, [sp, #36]	@ 0x24
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80033e0:	4b32      	ldr	r3, [pc, #200]	@ (80034ac <LSM6DSO_0_Probe+0xe4>)
 80033e2:	930d      	str	r3, [sp, #52]	@ 0x34
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80033e4:	4b32      	ldr	r3, [pc, #200]	@ (80034b0 <LSM6DSO_0_Probe+0xe8>)
 80033e6:	930c      	str	r3, [sp, #48]	@ 0x30
  io_ctx.GetTick     = IKS01A3_GetTick;
 80033e8:	4b32      	ldr	r3, [pc, #200]	@ (80034b4 <LSM6DSO_0_Probe+0xec>)
 80033ea:	930e      	str	r3, [sp, #56]	@ 0x38
  io_ctx.Delay       = IKS01A3_Delay;
 80033ec:	4b32      	ldr	r3, [pc, #200]	@ (80034b8 <LSM6DSO_0_Probe+0xf0>)
 80033ee:	930f      	str	r3, [sp, #60]	@ 0x3c

  lsm6dso_obj_0.Ctx.handle = &hi2c2;
 80033f0:	4832      	ldr	r0, [pc, #200]	@ (80034bc <LSM6DSO_0_Probe+0xf4>)
 80033f2:	4b33      	ldr	r3, [pc, #204]	@ (80034c0 <LSM6DSO_0_Probe+0xf8>)
 80033f4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  lsm6dso_obj_0.handle = &hi2c2;
 80033f6:	6383      	str	r3, [r0, #56]	@ 0x38

  if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80033f8:	f10d 011f 	add.w	r1, sp, #31
 80033fc:	f000 fb50 	bl	8003aa0 <LSM6DSO_ReadID>
 8003400:	2800      	cmp	r0, #0
 8003402:	d145      	bne.n	8003490 <LSM6DSO_0_Probe+0xc8>
 8003404:	4606      	mov	r6, r0
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else if (id != LSM6DSO_ID)
 8003406:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800340a:	2b6c      	cmp	r3, #108	@ 0x6c
 800340c:	d143      	bne.n	8003496 <LSM6DSO_0_Probe+0xce>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 800340e:	4d2b      	ldr	r5, [pc, #172]	@ (80034bc <LSM6DSO_0_Probe+0xf4>)
 8003410:	4669      	mov	r1, sp
 8003412:	4628      	mov	r0, r5
 8003414:	f000 f8f6 	bl	8003604 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8003418:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800341c:	f89d 3000 	ldrb.w	r3, [sp]
 8003420:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8003424:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8003428:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 800342c:	4925      	ldr	r1, [pc, #148]	@ (80034c4 <LSM6DSO_0_Probe+0xfc>)
 800342e:	600b      	str	r3, [r1, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8003430:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <LSM6DSO_0_Probe+0x100>)
 8003432:	601d      	str	r5, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8003434:	4b25      	ldr	r3, [pc, #148]	@ (80034cc <LSM6DSO_0_Probe+0x104>)
 8003436:	4926      	ldr	r1, [pc, #152]	@ (80034d0 <LSM6DSO_0_Probe+0x108>)
 8003438:	6019      	str	r1, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800343a:	f014 0f01 	tst.w	r4, #1
 800343e:	d001      	beq.n	8003444 <LSM6DSO_0_Probe+0x7c>
 8003440:	2a01      	cmp	r2, #1
 8003442:	d00c      	beq.n	800345e <LSM6DSO_0_Probe+0x96>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8003444:	f014 0f02 	tst.w	r4, #2
 8003448:	d003      	beq.n	8003452 <LSM6DSO_0_Probe+0x8a>
 800344a:	f89d 3000 	ldrb.w	r3, [sp]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d010      	beq.n	8003474 <LSM6DSO_0_Probe+0xac>
      else
      {
        ret = BSP_ERROR_NONE;
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8003452:	f014 0f04 	tst.w	r4, #4
 8003456:	d121      	bne.n	800349c <LSM6DSO_0_Probe+0xd4>
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
  }
  return ret;
}
 8003458:	4630      	mov	r0, r6
 800345a:	b010      	add	sp, #64	@ 0x40
 800345c:	bd70      	pop	{r4, r5, r6, pc}
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800345e:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <LSM6DSO_0_Probe+0x10c>)
 8003460:	4a1d      	ldr	r2, [pc, #116]	@ (80034d8 <LSM6DSO_0_Probe+0x110>)
 8003462:	601a      	str	r2, [r3, #0]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8003464:	680b      	ldr	r3, [r1, #0]
 8003466:	4628      	mov	r0, r5
 8003468:	4798      	blx	r3
 800346a:	2800      	cmp	r0, #0
 800346c:	d0ea      	beq.n	8003444 <LSM6DSO_0_Probe+0x7c>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800346e:	f06f 0604 	mvn.w	r6, #4
 8003472:	e7f1      	b.n	8003458 <LSM6DSO_0_Probe+0x90>
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8003474:	4b17      	ldr	r3, [pc, #92]	@ (80034d4 <LSM6DSO_0_Probe+0x10c>)
 8003476:	4a19      	ldr	r2, [pc, #100]	@ (80034dc <LSM6DSO_0_Probe+0x114>)
 8003478:	605a      	str	r2, [r3, #4]
      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800347a:	4b14      	ldr	r3, [pc, #80]	@ (80034cc <LSM6DSO_0_Probe+0x104>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a11      	ldr	r2, [pc, #68]	@ (80034c8 <LSM6DSO_0_Probe+0x100>)
 8003482:	6810      	ldr	r0, [r2, #0]
 8003484:	4798      	blx	r3
 8003486:	2800      	cmp	r0, #0
 8003488:	d0e3      	beq.n	8003452 <LSM6DSO_0_Probe+0x8a>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800348a:	f06f 0604 	mvn.w	r6, #4
 800348e:	e7e3      	b.n	8003458 <LSM6DSO_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003490:	f06f 0606 	mvn.w	r6, #6
 8003494:	e7e0      	b.n	8003458 <LSM6DSO_0_Probe+0x90>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003496:	f06f 0606 	mvn.w	r6, #6
 800349a:	e7dd      	b.n	8003458 <LSM6DSO_0_Probe+0x90>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800349c:	f06f 0604 	mvn.w	r6, #4
  return ret;
 80034a0:	e7da      	b.n	8003458 <LSM6DSO_0_Probe+0x90>
 80034a2:	bf00      	nop
 80034a4:	080034e1 	.word	0x080034e1
 80034a8:	08001be5 	.word	0x08001be5
 80034ac:	08001cfd 	.word	0x08001cfd
 80034b0:	08001c7d 	.word	0x08001c7d
 80034b4:	08001d05 	.word	0x08001d05
 80034b8:	08002ac9 	.word	0x08002ac9
 80034bc:	200007b4 	.word	0x200007b4
 80034c0:	20000270 	.word	0x20000270
 80034c4:	200007f0 	.word	0x200007f0
 80034c8:	20000804 	.word	0x20000804
 80034cc:	200007f4 	.word	0x200007f4
 80034d0:	20000050 	.word	0x20000050
 80034d4:	200007f8 	.word	0x200007f8
 80034d8:	20000008 	.word	0x20000008
 80034dc:	2000002c 	.word	0x2000002c

080034e0 <Custom_I2C_Init>:
int32_t BSP_GetTick(void);
int32_t my_write_reg(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);
int32_t my_read_reg(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);

static int32_t Custom_I2C_Init(void)
{
 80034e0:	b508      	push	{r3, lr}
    MX_I2C2_Init(); // Call the generated initialization function
 80034e2:	f7fe f903 	bl	80016ec <MX_I2C2_Init>
    return 0;       // Return an appropriate status code
}
 80034e6:	2000      	movs	r0, #0
 80034e8:	bd08      	pop	{r3, pc}
	...

080034ec <IKS01A3_MOTION_SENSOR_Init>:
{
 80034ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034f0:	b089      	sub	sp, #36	@ 0x24
  switch (Instance)
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d148      	bne.n	8003588 <IKS01A3_MOTION_SENSOR_Init+0x9c>
 80034f6:	460e      	mov	r6, r1
 80034f8:	4607      	mov	r7, r0
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 80034fa:	4608      	mov	r0, r1
 80034fc:	f7ff ff64 	bl	80033c8 <LSM6DSO_0_Probe>
 8003500:	2800      	cmp	r0, #0
 8003502:	d147      	bne.n	8003594 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8003504:	4b26      	ldr	r3, [pc, #152]	@ (80035a0 <IKS01A3_MOTION_SENSOR_Init+0xb4>)
 8003506:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	a901      	add	r1, sp, #4
 800350e:	4a25      	ldr	r2, [pc, #148]	@ (80035a4 <IKS01A3_MOTION_SENSOR_Init+0xb8>)
 8003510:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 8003514:	4798      	blx	r3
 8003516:	4681      	mov	r9, r0
 8003518:	2800      	cmp	r0, #0
 800351a:	d13e      	bne.n	800359a <IKS01A3_MOTION_SENSOR_Init+0xae>
      if (cap.Acc == 1U)
 800351c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d00b      	beq.n	800353c <IKS01A3_MOTION_SENSOR_Init+0x50>
  uint32_t component_functions = 0;
 8003524:	46b8      	mov	r8, r7
      if (cap.Gyro == 1U)
 8003526:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d009      	beq.n	8003542 <IKS01A3_MOTION_SENSOR_Init+0x56>
      if (cap.Magneto == 1U)
 800352e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d008      	beq.n	8003548 <IKS01A3_MOTION_SENSOR_Init+0x5c>
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8003536:	463d      	mov	r5, r7
  uint32_t function = MOTION_GYRO;
 8003538:	2401      	movs	r4, #1
 800353a:	e00a      	b.n	8003552 <IKS01A3_MOTION_SENSOR_Init+0x66>
        component_functions |= MOTION_ACCELERO;
 800353c:	f04f 0802 	mov.w	r8, #2
 8003540:	e7f1      	b.n	8003526 <IKS01A3_MOTION_SENSOR_Init+0x3a>
        component_functions |= MOTION_GYRO;
 8003542:	f048 0801 	orr.w	r8, r8, #1
 8003546:	e7f2      	b.n	800352e <IKS01A3_MOTION_SENSOR_Init+0x42>
        component_functions |= MOTION_MAGNETO;
 8003548:	f048 0804 	orr.w	r8, r8, #4
 800354c:	e7f3      	b.n	8003536 <IKS01A3_MOTION_SENSOR_Init+0x4a>
    function = function << 1;
 800354e:	0064      	lsls	r4, r4, #1
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8003550:	3501      	adds	r5, #1
 8003552:	2d02      	cmp	r5, #2
 8003554:	d81a      	bhi.n	800358c <IKS01A3_MOTION_SENSOR_Init+0xa0>
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8003556:	ea34 0306 	bics.w	r3, r4, r6
 800355a:	d1f8      	bne.n	800354e <IKS01A3_MOTION_SENSOR_Init+0x62>
 800355c:	ea34 0308 	bics.w	r3, r4, r8
 8003560:	d1f5      	bne.n	800354e <IKS01A3_MOTION_SENSOR_Init+0x62>
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8003562:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <IKS01A3_MOTION_SENSOR_Init+0xbc>)
 8003564:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8003568:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800356c:	4413      	add	r3, r2
 800356e:	4a0f      	ldr	r2, [pc, #60]	@ (80035ac <IKS01A3_MOTION_SENSOR_Init+0xc0>)
 8003570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a0b      	ldr	r2, [pc, #44]	@ (80035a4 <IKS01A3_MOTION_SENSOR_Init+0xb8>)
 8003578:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 800357c:	4798      	blx	r3
 800357e:	2800      	cmp	r0, #0
 8003580:	d0e5      	beq.n	800354e <IKS01A3_MOTION_SENSOR_Init+0x62>
        return BSP_ERROR_COMPONENT_FAILURE;
 8003582:	f06f 0904 	mvn.w	r9, #4
 8003586:	e001      	b.n	800358c <IKS01A3_MOTION_SENSOR_Init+0xa0>
  switch (Instance)
 8003588:	f06f 0901 	mvn.w	r9, #1
}
 800358c:	4648      	mov	r0, r9
 800358e:	b009      	add	sp, #36	@ 0x24
 8003590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BSP_ERROR_NO_INIT;
 8003594:	f04f 39ff 	mov.w	r9, #4294967295
 8003598:	e7f8      	b.n	800358c <IKS01A3_MOTION_SENSOR_Init+0xa0>
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800359a:	f06f 0906 	mvn.w	r9, #6
 800359e:	e7f5      	b.n	800358c <IKS01A3_MOTION_SENSOR_Init+0xa0>
 80035a0:	200007f4 	.word	0x200007f4
 80035a4:	20000804 	.word	0x20000804
 80035a8:	08011a74 	.word	0x08011a74
 80035ac:	200007f8 	.word	0x200007f8

080035b0 <IKS01A3_MOTION_SENSOR_Enable>:
  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80035b0:	b9c8      	cbnz	r0, 80035e6 <IKS01A3_MOTION_SENSOR_Enable+0x36>
{
 80035b2:	b508      	push	{r3, lr}
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80035b4:	4a0f      	ldr	r2, [pc, #60]	@ (80035f4 <IKS01A3_MOTION_SENSOR_Enable+0x44>)
 80035b6:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 80035ba:	ea31 0202 	bics.w	r2, r1, r2
 80035be:	d115      	bne.n	80035ec <IKS01A3_MOTION_SENSOR_Enable+0x3c>
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80035c0:	4a0d      	ldr	r2, [pc, #52]	@ (80035f8 <IKS01A3_MOTION_SENSOR_Enable+0x48>)
 80035c2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80035c6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80035ca:	440a      	add	r2, r1
 80035cc:	490b      	ldr	r1, [pc, #44]	@ (80035fc <IKS01A3_MOTION_SENSOR_Enable+0x4c>)
 80035ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80035d2:	6812      	ldr	r2, [r2, #0]
 80035d4:	490a      	ldr	r1, [pc, #40]	@ (8003600 <IKS01A3_MOTION_SENSOR_Enable+0x50>)
 80035d6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80035da:	4790      	blx	r2
 80035dc:	b900      	cbnz	r0, 80035e0 <IKS01A3_MOTION_SENSOR_Enable+0x30>
}
 80035de:	bd08      	pop	{r3, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80035e0:	f06f 0004 	mvn.w	r0, #4
 80035e4:	e7fb      	b.n	80035de <IKS01A3_MOTION_SENSOR_Enable+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
 80035e6:	f06f 0001 	mvn.w	r0, #1
}
 80035ea:	4770      	bx	lr
      ret = BSP_ERROR_WRONG_PARAM;
 80035ec:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80035f0:	e7f5      	b.n	80035de <IKS01A3_MOTION_SENSOR_Enable+0x2e>
 80035f2:	bf00      	nop
 80035f4:	200007f0 	.word	0x200007f0
 80035f8:	08011a74 	.word	0x08011a74
 80035fc:	200007f8 	.word	0x200007f8
 8003600:	20000804 	.word	0x20000804

08003604 <LSM6DSO_GetCapabilities>:
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003604:	2301      	movs	r3, #1
 8003606:	700b      	strb	r3, [r1, #0]
  Capabilities->Gyro         = 1;
 8003608:	704b      	strb	r3, [r1, #1]
  Capabilities->Magneto      = 0;
 800360a:	2000      	movs	r0, #0
 800360c:	7088      	strb	r0, [r1, #2]
  Capabilities->LowPower     = 0;
 800360e:	70c8      	strb	r0, [r1, #3]
  Capabilities->GyroMaxFS    = 2000;
 8003610:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003614:	604b      	str	r3, [r1, #4]
  Capabilities->AccMaxFS     = 16;
 8003616:	2310      	movs	r3, #16
 8003618:	608b      	str	r3, [r1, #8]
  Capabilities->MagMaxFS     = 0;
 800361a:	60c8      	str	r0, [r1, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800361c:	4b02      	ldr	r3, [pc, #8]	@ (8003628 <LSM6DSO_GetCapabilities+0x24>)
 800361e:	610b      	str	r3, [r1, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8003620:	614b      	str	r3, [r1, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003622:	2300      	movs	r3, #0
 8003624:	618b      	str	r3, [r1, #24]
  return LSM6DSO_OK;
}
 8003626:	4770      	bx	lr
 8003628:	45d02000 	.word	0x45d02000

0800362c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4605      	mov	r5, r0
 8003630:	460c      	mov	r4, r1
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003632:	4926      	ldr	r1, [pc, #152]	@ (80036cc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa0>)
 8003634:	4620      	mov	r0, r4
 8003636:	f7fd fd95 	bl	8001164 <__aeabi_fcmple>
 800363a:	2800      	cmp	r0, #0
 800363c:	d12e      	bne.n	800369c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x70>
 800363e:	4924      	ldr	r1, [pc, #144]	@ (80036d0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa4>)
 8003640:	4620      	mov	r0, r4
 8003642:	f7fd fd8f 	bl	8001164 <__aeabi_fcmple>
 8003646:	bb70      	cbnz	r0, 80036a6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8003648:	4922      	ldr	r1, [pc, #136]	@ (80036d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa8>)
 800364a:	4620      	mov	r0, r4
 800364c:	f7fd fd8a 	bl	8001164 <__aeabi_fcmple>
 8003650:	bb58      	cbnz	r0, 80036aa <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7e>
 8003652:	4921      	ldr	r1, [pc, #132]	@ (80036d8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>)
 8003654:	4620      	mov	r0, r4
 8003656:	f7fd fd85 	bl	8001164 <__aeabi_fcmple>
 800365a:	bb40      	cbnz	r0, 80036ae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x82>
 800365c:	491f      	ldr	r1, [pc, #124]	@ (80036dc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xb0>)
 800365e:	4620      	mov	r0, r4
 8003660:	f7fd fd80 	bl	8001164 <__aeabi_fcmple>
 8003664:	bb28      	cbnz	r0, 80036b2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x86>
 8003666:	491e      	ldr	r1, [pc, #120]	@ (80036e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xb4>)
 8003668:	4620      	mov	r0, r4
 800366a:	f7fd fd7b 	bl	8001164 <__aeabi_fcmple>
 800366e:	bb10      	cbnz	r0, 80036b6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x8a>
 8003670:	491c      	ldr	r1, [pc, #112]	@ (80036e4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xb8>)
 8003672:	4620      	mov	r0, r4
 8003674:	f7fd fd76 	bl	8001164 <__aeabi_fcmple>
 8003678:	b9f8      	cbnz	r0, 80036ba <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x8e>
 800367a:	491b      	ldr	r1, [pc, #108]	@ (80036e8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 800367c:	4620      	mov	r0, r4
 800367e:	f7fd fd71 	bl	8001164 <__aeabi_fcmple>
 8003682:	b9e0      	cbnz	r0, 80036be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x92>
 8003684:	4919      	ldr	r1, [pc, #100]	@ (80036ec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 8003686:	4620      	mov	r0, r4
 8003688:	f7fd fd6c 	bl	8001164 <__aeabi_fcmple>
 800368c:	b9c8      	cbnz	r0, 80036c2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x96>
 800368e:	4918      	ldr	r1, [pc, #96]	@ (80036f0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 8003690:	4620      	mov	r0, r4
 8003692:	f7fd fd67 	bl	8001164 <__aeabi_fcmple>
 8003696:	b1b0      	cbz	r0, 80036c6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8003698:	2309      	movs	r3, #9
 800369a:	e000      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 800369c:	230b      	movs	r3, #11
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800369e:	f885 3033 	strb.w	r3, [r5, #51]	@ 0x33
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
}
 80036a2:	2000      	movs	r0, #0
 80036a4:	bd38      	pop	{r3, r4, r5, pc}
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80036a6:	2301      	movs	r3, #1
 80036a8:	e7f9      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e7f7      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036ae:	2303      	movs	r3, #3
 80036b0:	e7f5      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036b2:	2304      	movs	r3, #4
 80036b4:	e7f3      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036b6:	2305      	movs	r3, #5
 80036b8:	e7f1      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036ba:	2306      	movs	r3, #6
 80036bc:	e7ef      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036be:	2307      	movs	r3, #7
 80036c0:	e7ed      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036c2:	2308      	movs	r3, #8
 80036c4:	e7eb      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036c6:	230a      	movs	r3, #10
 80036c8:	e7e9      	b.n	800369e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x72>
 80036ca:	bf00      	nop
 80036cc:	3fcccccd 	.word	0x3fcccccd
 80036d0:	41480000 	.word	0x41480000
 80036d4:	41d00000 	.word	0x41d00000
 80036d8:	42500000 	.word	0x42500000
 80036dc:	42d00000 	.word	0x42d00000
 80036e0:	43500000 	.word	0x43500000
 80036e4:	43d08000 	.word	0x43d08000
 80036e8:	44504000 	.word	0x44504000
 80036ec:	44d06000 	.word	0x44d06000
 80036f0:	45505000 	.word	0x45505000

080036f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80036f4:	b538      	push	{r3, r4, r5, lr}
 80036f6:	4605      	mov	r5, r0
 80036f8:	460c      	mov	r4, r1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80036fa:	4922      	ldr	r1, [pc, #136]	@ (8003784 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>)
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7fd fd31 	bl	8001164 <__aeabi_fcmple>
 8003702:	bb48      	cbnz	r0, 8003758 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8003704:	4920      	ldr	r1, [pc, #128]	@ (8003788 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x94>)
 8003706:	4620      	mov	r0, r4
 8003708:	f7fd fd2c 	bl	8001164 <__aeabi_fcmple>
 800370c:	bb48      	cbnz	r0, 8003762 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x6e>
 800370e:	491f      	ldr	r1, [pc, #124]	@ (800378c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x98>)
 8003710:	4620      	mov	r0, r4
 8003712:	f7fd fd27 	bl	8001164 <__aeabi_fcmple>
 8003716:	bb30      	cbnz	r0, 8003766 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x72>
 8003718:	491d      	ldr	r1, [pc, #116]	@ (8003790 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>)
 800371a:	4620      	mov	r0, r4
 800371c:	f7fd fd22 	bl	8001164 <__aeabi_fcmple>
 8003720:	bb18      	cbnz	r0, 800376a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x76>
 8003722:	491c      	ldr	r1, [pc, #112]	@ (8003794 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa0>)
 8003724:	4620      	mov	r0, r4
 8003726:	f7fd fd1d 	bl	8001164 <__aeabi_fcmple>
 800372a:	bb00      	cbnz	r0, 800376e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 800372c:	491a      	ldr	r1, [pc, #104]	@ (8003798 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa4>)
 800372e:	4620      	mov	r0, r4
 8003730:	f7fd fd18 	bl	8001164 <__aeabi_fcmple>
 8003734:	b9e8      	cbnz	r0, 8003772 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7e>
 8003736:	4919      	ldr	r1, [pc, #100]	@ (800379c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa8>)
 8003738:	4620      	mov	r0, r4
 800373a:	f7fd fd13 	bl	8001164 <__aeabi_fcmple>
 800373e:	b9d0      	cbnz	r0, 8003776 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x82>
 8003740:	4917      	ldr	r1, [pc, #92]	@ (80037a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>)
 8003742:	4620      	mov	r0, r4
 8003744:	f7fd fd0e 	bl	8001164 <__aeabi_fcmple>
 8003748:	b9b8      	cbnz	r0, 800377a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x86>
 800374a:	4916      	ldr	r1, [pc, #88]	@ (80037a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb0>)
 800374c:	4620      	mov	r0, r4
 800374e:	f7fd fd09 	bl	8001164 <__aeabi_fcmple>
 8003752:	b1a0      	cbz	r0, 800377e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x8a>
 8003754:	2309      	movs	r3, #9
 8003756:	e000      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 8003758:	2301      	movs	r3, #1
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800375a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
}
 800375e:	2000      	movs	r0, #0
 8003760:	bd38      	pop	{r3, r4, r5, pc}
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003762:	2302      	movs	r3, #2
 8003764:	e7f9      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 8003766:	2303      	movs	r3, #3
 8003768:	e7f7      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 800376a:	2304      	movs	r3, #4
 800376c:	e7f5      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 800376e:	2305      	movs	r3, #5
 8003770:	e7f3      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 8003772:	2306      	movs	r3, #6
 8003774:	e7f1      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 8003776:	2307      	movs	r3, #7
 8003778:	e7ef      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 800377a:	2308      	movs	r3, #8
 800377c:	e7ed      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 800377e:	230a      	movs	r3, #10
 8003780:	e7eb      	b.n	800375a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x66>
 8003782:	bf00      	nop
 8003784:	41480000 	.word	0x41480000
 8003788:	41d00000 	.word	0x41d00000
 800378c:	42500000 	.word	0x42500000
 8003790:	42d00000 	.word	0x42d00000
 8003794:	43500000 	.word	0x43500000
 8003798:	43d08000 	.word	0x43d08000
 800379c:	44504000 	.word	0x44504000
 80037a0:	44d06000 	.word	0x44d06000
 80037a4:	45505000 	.word	0x45505000

080037a8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037a8:	b510      	push	{r4, lr}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj, Reg, pData, Length);
 80037aa:	6944      	ldr	r4, [r0, #20]
 80037ac:	47a0      	blx	r4
}
 80037ae:	bd10      	pop	{r4, pc}

080037b0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037b0:	b510      	push	{r4, lr}
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj, Reg, pData, Length);
 80037b2:	6904      	ldr	r4, [r0, #16]
 80037b4:	47a0      	blx	r4
}
 80037b6:	bd10      	pop	{r4, pc}

080037b8 <LSM6DSO_ACC_Enable>:
  if (pObj->acc_is_enabled == 1U)
 80037b8:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d00b      	beq.n	80037d8 <LSM6DSO_ACC_Enable+0x20>
{
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80037c4:	f890 1033 	ldrb.w	r1, [r0, #51]	@ 0x33
 80037c8:	3020      	adds	r0, #32
 80037ca:	f001 f834 	bl	8004836 <lsm6dso_xl_data_rate_set>
 80037ce:	b928      	cbnz	r0, 80037dc <LSM6DSO_ACC_Enable+0x24>
  pObj->acc_is_enabled = 1;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
}
 80037d6:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 80037d8:	2000      	movs	r0, #0
}
 80037da:	4770      	bx	lr
    return LSM6DSO_ERROR;
 80037dc:	f04f 30ff 	mov.w	r0, #4294967295
 80037e0:	e7f9      	b.n	80037d6 <LSM6DSO_ACC_Enable+0x1e>
	...

080037e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
{
 80037e4:	b538      	push	{r3, r4, r5, lr}
 80037e6:	4605      	mov	r5, r0
 80037e8:	460c      	mov	r4, r1
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 80037ea:	4929      	ldr	r1, [pc, #164]	@ (8003890 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>)
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7fd fcb9 	bl	8001164 <__aeabi_fcmple>
 80037f2:	2800      	cmp	r0, #0
 80037f4:	d12f      	bne.n	8003856 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x72>
 80037f6:	4927      	ldr	r1, [pc, #156]	@ (8003894 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xb0>)
 80037f8:	4620      	mov	r0, r4
 80037fa:	f7fd fcb3 	bl	8001164 <__aeabi_fcmple>
 80037fe:	2800      	cmp	r0, #0
 8003800:	d130      	bne.n	8003864 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x80>
 8003802:	4925      	ldr	r1, [pc, #148]	@ (8003898 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xb4>)
 8003804:	4620      	mov	r0, r4
 8003806:	f7fd fcad 	bl	8001164 <__aeabi_fcmple>
 800380a:	bb68      	cbnz	r0, 8003868 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x84>
 800380c:	4923      	ldr	r1, [pc, #140]	@ (800389c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xb8>)
 800380e:	4620      	mov	r0, r4
 8003810:	f7fd fca8 	bl	8001164 <__aeabi_fcmple>
 8003814:	bb50      	cbnz	r0, 800386c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x88>
 8003816:	4922      	ldr	r1, [pc, #136]	@ (80038a0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>)
 8003818:	4620      	mov	r0, r4
 800381a:	f7fd fca3 	bl	8001164 <__aeabi_fcmple>
 800381e:	bb38      	cbnz	r0, 8003870 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x8c>
 8003820:	4920      	ldr	r1, [pc, #128]	@ (80038a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc0>)
 8003822:	4620      	mov	r0, r4
 8003824:	f7fd fc9e 	bl	8001164 <__aeabi_fcmple>
 8003828:	bb20      	cbnz	r0, 8003874 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 800382a:	491f      	ldr	r1, [pc, #124]	@ (80038a8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc4>)
 800382c:	4620      	mov	r0, r4
 800382e:	f7fd fc99 	bl	8001164 <__aeabi_fcmple>
 8003832:	bb08      	cbnz	r0, 8003878 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x94>
 8003834:	491d      	ldr	r1, [pc, #116]	@ (80038ac <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xc8>)
 8003836:	4620      	mov	r0, r4
 8003838:	f7fd fc94 	bl	8001164 <__aeabi_fcmple>
 800383c:	b9f0      	cbnz	r0, 800387c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x98>
 800383e:	491c      	ldr	r1, [pc, #112]	@ (80038b0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xcc>)
 8003840:	4620      	mov	r0, r4
 8003842:	f7fd fc8f 	bl	8001164 <__aeabi_fcmple>
 8003846:	b9d8      	cbnz	r0, 8003880 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9c>
 8003848:	491a      	ldr	r1, [pc, #104]	@ (80038b4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd0>)
 800384a:	4620      	mov	r0, r4
 800384c:	f7fd fc8a 	bl	8001164 <__aeabi_fcmple>
 8003850:	b1c0      	cbz	r0, 8003884 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa0>
 8003852:	2109      	movs	r1, #9
 8003854:	e000      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 8003856:	210b      	movs	r1, #11
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8003858:	f105 0020 	add.w	r0, r5, #32
 800385c:	f000 ffeb 	bl	8004836 <lsm6dso_xl_data_rate_set>
 8003860:	b990      	cbnz	r0, 8003888 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa4>
}
 8003862:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8003864:	2101      	movs	r1, #1
 8003866:	e7f7      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 8003868:	2102      	movs	r1, #2
 800386a:	e7f5      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 800386c:	2103      	movs	r1, #3
 800386e:	e7f3      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 8003870:	2104      	movs	r1, #4
 8003872:	e7f1      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 8003874:	2105      	movs	r1, #5
 8003876:	e7ef      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 8003878:	2106      	movs	r1, #6
 800387a:	e7ed      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 800387c:	2107      	movs	r1, #7
 800387e:	e7eb      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 8003880:	2108      	movs	r1, #8
 8003882:	e7e9      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
 8003884:	210a      	movs	r1, #10
 8003886:	e7e7      	b.n	8003858 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x74>
    return LSM6DSO_ERROR;
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e7e9      	b.n	8003862 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7e>
 800388e:	bf00      	nop
 8003890:	3fcccccd 	.word	0x3fcccccd
 8003894:	41480000 	.word	0x41480000
 8003898:	41d00000 	.word	0x41d00000
 800389c:	42500000 	.word	0x42500000
 80038a0:	42d00000 	.word	0x42d00000
 80038a4:	43500000 	.word	0x43500000
 80038a8:	43d08000 	.word	0x43d08000
 80038ac:	44504000 	.word	0x44504000
 80038b0:	44d06000 	.word	0x44d06000
 80038b4:	45505000 	.word	0x45505000

080038b8 <LSM6DSO_ACC_SetFullScale>:
{
 80038b8:	b508      	push	{r3, lr}
           : (FullScale <= 4) ? LSM6DSO_4g
 80038ba:	2902      	cmp	r1, #2
 80038bc:	dd05      	ble.n	80038ca <LSM6DSO_ACC_SetFullScale+0x12>
 80038be:	2904      	cmp	r1, #4
 80038c0:	dd09      	ble.n	80038d6 <LSM6DSO_ACC_SetFullScale+0x1e>
 80038c2:	2908      	cmp	r1, #8
 80038c4:	dc09      	bgt.n	80038da <LSM6DSO_ACC_SetFullScale+0x22>
 80038c6:	2103      	movs	r1, #3
 80038c8:	e000      	b.n	80038cc <LSM6DSO_ACC_SetFullScale+0x14>
 80038ca:	2100      	movs	r1, #0
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80038cc:	3020      	adds	r0, #32
 80038ce:	f000 fd0f 	bl	80042f0 <lsm6dso_xl_full_scale_set>
 80038d2:	b920      	cbnz	r0, 80038de <LSM6DSO_ACC_SetFullScale+0x26>
}
 80038d4:	bd08      	pop	{r3, pc}
           : (FullScale <= 4) ? LSM6DSO_4g
 80038d6:	2102      	movs	r1, #2
 80038d8:	e7f8      	b.n	80038cc <LSM6DSO_ACC_SetFullScale+0x14>
 80038da:	2101      	movs	r1, #1
 80038dc:	e7f6      	b.n	80038cc <LSM6DSO_ACC_SetFullScale+0x14>
    return LSM6DSO_ERROR;
 80038de:	f04f 30ff 	mov.w	r0, #4294967295
 80038e2:	e7f7      	b.n	80038d4 <LSM6DSO_ACC_SetFullScale+0x1c>

080038e4 <LSM6DSO_GYRO_Enable>:
  if (pObj->gyro_is_enabled == 1U)
 80038e4:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d00b      	beq.n	8003904 <LSM6DSO_GYRO_Enable+0x20>
{
 80038ec:	b510      	push	{r4, lr}
 80038ee:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80038f0:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
 80038f4:	3020      	adds	r0, #32
 80038f6:	f001 f829 	bl	800494c <lsm6dso_gy_data_rate_set>
 80038fa:	b928      	cbnz	r0, 8003908 <LSM6DSO_GYRO_Enable+0x24>
  pObj->gyro_is_enabled = 1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f884 3032 	strb.w	r3, [r4, #50]	@ 0x32
}
 8003902:	bd10      	pop	{r4, pc}
    return LSM6DSO_OK;
 8003904:	2000      	movs	r0, #0
}
 8003906:	4770      	bx	lr
    return LSM6DSO_ERROR;
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
 800390c:	e7f9      	b.n	8003902 <LSM6DSO_GYRO_Enable+0x1e>
	...

08003910 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
{
 8003910:	b538      	push	{r3, r4, r5, lr}
 8003912:	4605      	mov	r5, r0
 8003914:	460c      	mov	r4, r1
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003916:	4924      	ldr	r1, [pc, #144]	@ (80039a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x98>)
 8003918:	4620      	mov	r0, r4
 800391a:	f7fd fc23 	bl	8001164 <__aeabi_fcmple>
 800391e:	bb48      	cbnz	r0, 8003974 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8003920:	4922      	ldr	r1, [pc, #136]	@ (80039ac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>)
 8003922:	4620      	mov	r0, r4
 8003924:	f7fd fc1e 	bl	8001164 <__aeabi_fcmple>
 8003928:	bb58      	cbnz	r0, 8003982 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x72>
 800392a:	4921      	ldr	r1, [pc, #132]	@ (80039b0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa0>)
 800392c:	4620      	mov	r0, r4
 800392e:	f7fd fc19 	bl	8001164 <__aeabi_fcmple>
 8003932:	bb40      	cbnz	r0, 8003986 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x76>
 8003934:	491f      	ldr	r1, [pc, #124]	@ (80039b4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa4>)
 8003936:	4620      	mov	r0, r4
 8003938:	f7fd fc14 	bl	8001164 <__aeabi_fcmple>
 800393c:	bb28      	cbnz	r0, 800398a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 800393e:	491e      	ldr	r1, [pc, #120]	@ (80039b8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa8>)
 8003940:	4620      	mov	r0, r4
 8003942:	f7fd fc0f 	bl	8001164 <__aeabi_fcmple>
 8003946:	bb10      	cbnz	r0, 800398e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7e>
 8003948:	491c      	ldr	r1, [pc, #112]	@ (80039bc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xac>)
 800394a:	4620      	mov	r0, r4
 800394c:	f7fd fc0a 	bl	8001164 <__aeabi_fcmple>
 8003950:	b9f8      	cbnz	r0, 8003992 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x82>
 8003952:	491b      	ldr	r1, [pc, #108]	@ (80039c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xb0>)
 8003954:	4620      	mov	r0, r4
 8003956:	f7fd fc05 	bl	8001164 <__aeabi_fcmple>
 800395a:	b9e0      	cbnz	r0, 8003996 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x86>
 800395c:	4919      	ldr	r1, [pc, #100]	@ (80039c4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xb4>)
 800395e:	4620      	mov	r0, r4
 8003960:	f7fd fc00 	bl	8001164 <__aeabi_fcmple>
 8003964:	b9c8      	cbnz	r0, 800399a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x8a>
 8003966:	4918      	ldr	r1, [pc, #96]	@ (80039c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xb8>)
 8003968:	4620      	mov	r0, r4
 800396a:	f7fd fbfb 	bl	8001164 <__aeabi_fcmple>
 800396e:	b1b0      	cbz	r0, 800399e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x8e>
 8003970:	2109      	movs	r1, #9
 8003972:	e000      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
 8003974:	2101      	movs	r1, #1
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8003976:	f105 0020 	add.w	r0, r5, #32
 800397a:	f000 ffe7 	bl	800494c <lsm6dso_gy_data_rate_set>
 800397e:	b980      	cbnz	r0, 80039a2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x92>
}
 8003980:	bd38      	pop	{r3, r4, r5, pc}
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8003982:	2102      	movs	r1, #2
 8003984:	e7f7      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
 8003986:	2103      	movs	r1, #3
 8003988:	e7f5      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
 800398a:	2104      	movs	r1, #4
 800398c:	e7f3      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
 800398e:	2105      	movs	r1, #5
 8003990:	e7f1      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
 8003992:	2106      	movs	r1, #6
 8003994:	e7ef      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
 8003996:	2107      	movs	r1, #7
 8003998:	e7ed      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
 800399a:	2108      	movs	r1, #8
 800399c:	e7eb      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
 800399e:	210a      	movs	r1, #10
 80039a0:	e7e9      	b.n	8003976 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x66>
    return LSM6DSO_ERROR;
 80039a2:	f04f 30ff 	mov.w	r0, #4294967295
 80039a6:	e7eb      	b.n	8003980 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x70>
 80039a8:	41480000 	.word	0x41480000
 80039ac:	41d00000 	.word	0x41d00000
 80039b0:	42500000 	.word	0x42500000
 80039b4:	42d00000 	.word	0x42d00000
 80039b8:	43500000 	.word	0x43500000
 80039bc:	43d08000 	.word	0x43d08000
 80039c0:	44504000 	.word	0x44504000
 80039c4:	44d06000 	.word	0x44d06000
 80039c8:	45505000 	.word	0x45505000

080039cc <LSM6DSO_Init>:
{
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	4605      	mov	r5, r0
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80039d0:	f100 0420 	add.w	r4, r0, #32
 80039d4:	2180      	movs	r1, #128	@ 0x80
 80039d6:	4620      	mov	r0, r4
 80039d8:	f000 fe4a 	bl	8004670 <lsm6dso_i3c_disable_set>
 80039dc:	bb60      	cbnz	r0, 8003a38 <LSM6DSO_Init+0x6c>
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80039de:	2101      	movs	r1, #1
 80039e0:	4620      	mov	r0, r4
 80039e2:	f000 fe2c 	bl	800463e <lsm6dso_auto_increment_set>
 80039e6:	bb50      	cbnz	r0, 8003a3e <LSM6DSO_Init+0x72>
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80039e8:	2101      	movs	r1, #1
 80039ea:	4620      	mov	r0, r4
 80039ec:	f000 fd72 	bl	80044d4 <lsm6dso_block_data_update_set>
 80039f0:	bb40      	cbnz	r0, 8003a44 <LSM6DSO_Init+0x78>
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80039f2:	2100      	movs	r1, #0
 80039f4:	4620      	mov	r0, r4
 80039f6:	f000 fec1 	bl	800477c <lsm6dso_fifo_mode_set>
 80039fa:	bb30      	cbnz	r0, 8003a4a <LSM6DSO_Init+0x7e>
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80039fc:	2304      	movs	r3, #4
 80039fe:	f885 3033 	strb.w	r3, [r5, #51]	@ 0x33
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003a02:	2100      	movs	r1, #0
 8003a04:	4620      	mov	r0, r4
 8003a06:	f000 ff16 	bl	8004836 <lsm6dso_xl_data_rate_set>
 8003a0a:	bb08      	cbnz	r0, 8003a50 <LSM6DSO_Init+0x84>
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f000 fc6e 	bl	80042f0 <lsm6dso_xl_full_scale_set>
 8003a14:	b9f8      	cbnz	r0, 8003a56 <LSM6DSO_Init+0x8a>
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8003a16:	2304      	movs	r3, #4
 8003a18:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	4620      	mov	r0, r4
 8003a20:	f000 ff94 	bl	800494c <lsm6dso_gy_data_rate_set>
 8003a24:	b9d0      	cbnz	r0, 8003a5c <LSM6DSO_Init+0x90>
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8003a26:	2106      	movs	r1, #6
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f000 fcd9 	bl	80043e0 <lsm6dso_gy_full_scale_set>
 8003a2e:	b9c0      	cbnz	r0, 8003a62 <LSM6DSO_Init+0x96>
  pObj->is_initialized = 1;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f885 3030 	strb.w	r3, [r5, #48]	@ 0x30
}
 8003a36:	bd38      	pop	{r3, r4, r5, pc}
    return LSM6DSO_ERROR;
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	e7fb      	b.n	8003a36 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8003a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003a42:	e7f8      	b.n	8003a36 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8003a44:	f04f 30ff 	mov.w	r0, #4294967295
 8003a48:	e7f5      	b.n	8003a36 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8003a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4e:	e7f2      	b.n	8003a36 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	e7ef      	b.n	8003a36 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5a:	e7ec      	b.n	8003a36 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8003a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a60:	e7e9      	b.n	8003a36 <LSM6DSO_Init+0x6a>
    return LSM6DSO_ERROR;
 8003a62:	f04f 30ff 	mov.w	r0, #4294967295
 8003a66:	e7e6      	b.n	8003a36 <LSM6DSO_Init+0x6a>

08003a68 <LSM6DSO_GYRO_SetFullScale>:
{
 8003a68:	b508      	push	{r3, lr}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8003a6a:	297d      	cmp	r1, #125	@ 0x7d
 8003a6c:	dd09      	ble.n	8003a82 <LSM6DSO_GYRO_SetFullScale+0x1a>
 8003a6e:	29fa      	cmp	r1, #250	@ 0xfa
 8003a70:	dd0d      	ble.n	8003a8e <LSM6DSO_GYRO_SetFullScale+0x26>
 8003a72:	f5b1 7ffa 	cmp.w	r1, #500	@ 0x1f4
 8003a76:	dd0c      	ble.n	8003a92 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8003a78:	f5b1 7f7a 	cmp.w	r1, #1000	@ 0x3e8
 8003a7c:	dc0b      	bgt.n	8003a96 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8003a7e:	2104      	movs	r1, #4
 8003a80:	e000      	b.n	8003a84 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8003a82:	2101      	movs	r1, #1
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8003a84:	3020      	adds	r0, #32
 8003a86:	f000 fcab 	bl	80043e0 <lsm6dso_gy_full_scale_set>
 8003a8a:	b930      	cbnz	r0, 8003a9a <LSM6DSO_GYRO_SetFullScale+0x32>
}
 8003a8c:	bd08      	pop	{r3, pc}
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8003a8e:	2100      	movs	r1, #0
 8003a90:	e7f8      	b.n	8003a84 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8003a92:	2102      	movs	r1, #2
 8003a94:	e7f6      	b.n	8003a84 <LSM6DSO_GYRO_SetFullScale+0x1c>
 8003a96:	2106      	movs	r1, #6
 8003a98:	e7f4      	b.n	8003a84 <LSM6DSO_GYRO_SetFullScale+0x1c>
    return LSM6DSO_ERROR;
 8003a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9e:	e7f5      	b.n	8003a8c <LSM6DSO_GYRO_SetFullScale+0x24>

08003aa0 <LSM6DSO_ReadID>:
{
 8003aa0:	b508      	push	{r3, lr}
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8003aa2:	3020      	adds	r0, #32
 8003aa4:	f000 fd9b 	bl	80045de <lsm6dso_device_id_get>
 8003aa8:	b900      	cbnz	r0, 8003aac <LSM6DSO_ReadID+0xc>
}
 8003aaa:	bd08      	pop	{r3, pc}
    return LSM6DSO_ERROR;
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	e7fb      	b.n	8003aaa <LSM6DSO_ReadID+0xa>

08003ab2 <LSM6DSO_ACC_Disable>:
{
 8003ab2:	b538      	push	{r3, r4, r5, lr}
  if (pObj->acc_is_enabled == 0U)
 8003ab4:	f890 3031 	ldrb.w	r3, [r0, #49]	@ 0x31
 8003ab8:	b90b      	cbnz	r3, 8003abe <LSM6DSO_ACC_Disable+0xc>
    return LSM6DSO_OK;
 8003aba:	2000      	movs	r0, #0
}
 8003abc:	bd38      	pop	{r3, r4, r5, pc}
 8003abe:	4604      	mov	r4, r0
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8003ac0:	f100 0520 	add.w	r5, r0, #32
 8003ac4:	f100 0133 	add.w	r1, r0, #51	@ 0x33
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 fc4c 	bl	8004366 <lsm6dso_xl_data_rate_get>
 8003ace:	b938      	cbnz	r0, 8003ae0 <LSM6DSO_ACC_Disable+0x2e>
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	f000 feaf 	bl	8004836 <lsm6dso_xl_data_rate_set>
 8003ad8:	b928      	cbnz	r0, 8003ae6 <LSM6DSO_ACC_Disable+0x34>
  pObj->acc_is_enabled = 0;
 8003ada:	f884 0031 	strb.w	r0, [r4, #49]	@ 0x31
  return LSM6DSO_OK;
 8003ade:	e7ed      	b.n	8003abc <LSM6DSO_ACC_Disable+0xa>
    return LSM6DSO_ERROR;
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	e7ea      	b.n	8003abc <LSM6DSO_ACC_Disable+0xa>
    return LSM6DSO_ERROR;
 8003ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aea:	e7e7      	b.n	8003abc <LSM6DSO_ACC_Disable+0xa>

08003aec <LSM6DSO_ACC_GetOutputDataRate>:
{
 8003aec:	b510      	push	{r4, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	460c      	mov	r4, r1
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003af2:	f10d 0107 	add.w	r1, sp, #7
 8003af6:	3020      	adds	r0, #32
 8003af8:	f000 fc35 	bl	8004366 <lsm6dso_xl_data_rate_get>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	d130      	bne.n	8003b62 <LSM6DSO_ACC_GetOutputDataRate+0x76>
  switch (odr_low_level)
 8003b00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003b04:	2b0b      	cmp	r3, #11
 8003b06:	d82f      	bhi.n	8003b68 <LSM6DSO_ACC_GetOutputDataRate+0x7c>
 8003b08:	e8df f003 	tbb	[pc, r3]
 8003b0c:	13100d06 	.word	0x13100d06
 8003b10:	1f1c1916 	.word	0x1f1c1916
 8003b14:	0a282522 	.word	0x0a282522
      *Odr = 0.0f;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	6023      	str	r3, [r4, #0]
}
 8003b1c:	b002      	add	sp, #8
 8003b1e:	bd10      	pop	{r4, pc}
      *Odr = 1.6f;
 8003b20:	4b13      	ldr	r3, [pc, #76]	@ (8003b70 <LSM6DSO_ACC_GetOutputDataRate+0x84>)
 8003b22:	6023      	str	r3, [r4, #0]
      break;
 8003b24:	e7fa      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 12.5f;
 8003b26:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <LSM6DSO_ACC_GetOutputDataRate+0x88>)
 8003b28:	6023      	str	r3, [r4, #0]
      break;
 8003b2a:	e7f7      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8003b2c:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <LSM6DSO_ACC_GetOutputDataRate+0x8c>)
 8003b2e:	6023      	str	r3, [r4, #0]
      break;
 8003b30:	e7f4      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8003b32:	4b12      	ldr	r3, [pc, #72]	@ (8003b7c <LSM6DSO_ACC_GetOutputDataRate+0x90>)
 8003b34:	6023      	str	r3, [r4, #0]
      break;
 8003b36:	e7f1      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8003b38:	4b11      	ldr	r3, [pc, #68]	@ (8003b80 <LSM6DSO_ACC_GetOutputDataRate+0x94>)
 8003b3a:	6023      	str	r3, [r4, #0]
      break;
 8003b3c:	e7ee      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8003b3e:	4b11      	ldr	r3, [pc, #68]	@ (8003b84 <LSM6DSO_ACC_GetOutputDataRate+0x98>)
 8003b40:	6023      	str	r3, [r4, #0]
      break;
 8003b42:	e7eb      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8003b44:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <LSM6DSO_ACC_GetOutputDataRate+0x9c>)
 8003b46:	6023      	str	r3, [r4, #0]
      break;
 8003b48:	e7e8      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8003b4a:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <LSM6DSO_ACC_GetOutputDataRate+0xa0>)
 8003b4c:	6023      	str	r3, [r4, #0]
      break;
 8003b4e:	e7e5      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8003b50:	4b0f      	ldr	r3, [pc, #60]	@ (8003b90 <LSM6DSO_ACC_GetOutputDataRate+0xa4>)
 8003b52:	6023      	str	r3, [r4, #0]
      break;
 8003b54:	e7e2      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 8003b56:	4b0f      	ldr	r3, [pc, #60]	@ (8003b94 <LSM6DSO_ACC_GetOutputDataRate+0xa8>)
 8003b58:	6023      	str	r3, [r4, #0]
      break;
 8003b5a:	e7df      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <LSM6DSO_ACC_GetOutputDataRate+0xac>)
 8003b5e:	6023      	str	r3, [r4, #0]
      break;
 8003b60:	e7dc      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
    return LSM6DSO_ERROR;
 8003b62:	f04f 30ff 	mov.w	r0, #4294967295
 8003b66:	e7d9      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8003b68:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6c:	e7d6      	b.n	8003b1c <LSM6DSO_ACC_GetOutputDataRate+0x30>
 8003b6e:	bf00      	nop
 8003b70:	3fcccccd 	.word	0x3fcccccd
 8003b74:	41480000 	.word	0x41480000
 8003b78:	41d00000 	.word	0x41d00000
 8003b7c:	42500000 	.word	0x42500000
 8003b80:	42d00000 	.word	0x42d00000
 8003b84:	43500000 	.word	0x43500000
 8003b88:	43d08000 	.word	0x43d08000
 8003b8c:	44504000 	.word	0x44504000
 8003b90:	44d06000 	.word	0x44d06000
 8003b94:	45505000 	.word	0x45505000
 8003b98:	45d05800 	.word	0x45d05800

08003b9c <LSM6DSO_ACC_GetSensitivity>:
{
 8003b9c:	b510      	push	{r4, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003ba2:	f10d 0107 	add.w	r1, sp, #7
 8003ba6:	3020      	adds	r0, #32
 8003ba8:	f000 fbbb 	bl	8004322 <lsm6dso_xl_full_scale_get>
 8003bac:	b9a0      	cbnz	r0, 8003bd8 <LSM6DSO_ACC_GetSensitivity+0x3c>
  switch (full_scale)
 8003bae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d813      	bhi.n	8003bde <LSM6DSO_ACC_GetSensitivity+0x42>
 8003bb6:	e8df f003 	tbb	[pc, r3]
 8003bba:	0c02      	.short	0x0c02
 8003bbc:	0906      	.short	0x0906
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <LSM6DSO_ACC_GetSensitivity+0x48>)
 8003bc0:	6023      	str	r3, [r4, #0]
}
 8003bc2:	b002      	add	sp, #8
 8003bc4:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8003bc6:	4b08      	ldr	r3, [pc, #32]	@ (8003be8 <LSM6DSO_ACC_GetSensitivity+0x4c>)
 8003bc8:	6023      	str	r3, [r4, #0]
      break;
 8003bca:	e7fa      	b.n	8003bc2 <LSM6DSO_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8003bcc:	4b07      	ldr	r3, [pc, #28]	@ (8003bec <LSM6DSO_ACC_GetSensitivity+0x50>)
 8003bce:	6023      	str	r3, [r4, #0]
      break;
 8003bd0:	e7f7      	b.n	8003bc2 <LSM6DSO_ACC_GetSensitivity+0x26>
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8003bd2:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <LSM6DSO_ACC_GetSensitivity+0x54>)
 8003bd4:	6023      	str	r3, [r4, #0]
      break;
 8003bd6:	e7f4      	b.n	8003bc2 <LSM6DSO_ACC_GetSensitivity+0x26>
    return LSM6DSO_ERROR;
 8003bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bdc:	e7f1      	b.n	8003bc2 <LSM6DSO_ACC_GetSensitivity+0x26>
  switch (full_scale)
 8003bde:	f04f 30ff 	mov.w	r0, #4294967295
 8003be2:	e7ee      	b.n	8003bc2 <LSM6DSO_ACC_GetSensitivity+0x26>
 8003be4:	3d79db23 	.word	0x3d79db23
 8003be8:	3df9db23 	.word	0x3df9db23
 8003bec:	3e79db23 	.word	0x3e79db23
 8003bf0:	3ef9db23 	.word	0x3ef9db23

08003bf4 <LSM6DSO_ACC_GetFullScale>:
{
 8003bf4:	b510      	push	{r4, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	460c      	mov	r4, r1
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003bfa:	f10d 0107 	add.w	r1, sp, #7
 8003bfe:	3020      	adds	r0, #32
 8003c00:	f000 fb8f 	bl	8004322 <lsm6dso_xl_full_scale_get>
 8003c04:	b9a0      	cbnz	r0, 8003c30 <LSM6DSO_ACC_GetFullScale+0x3c>
  switch (fs_low_level)
 8003c06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	d813      	bhi.n	8003c36 <LSM6DSO_ACC_GetFullScale+0x42>
 8003c0e:	e8df f003 	tbb	[pc, r3]
 8003c12:	0c02      	.short	0x0c02
 8003c14:	0906      	.short	0x0906
      *FullScale =  2;
 8003c16:	2302      	movs	r3, #2
 8003c18:	6023      	str	r3, [r4, #0]
}
 8003c1a:	b002      	add	sp, #8
 8003c1c:	bd10      	pop	{r4, pc}
      *FullScale =  4;
 8003c1e:	2304      	movs	r3, #4
 8003c20:	6023      	str	r3, [r4, #0]
      break;
 8003c22:	e7fa      	b.n	8003c1a <LSM6DSO_ACC_GetFullScale+0x26>
      *FullScale =  8;
 8003c24:	2308      	movs	r3, #8
 8003c26:	6023      	str	r3, [r4, #0]
      break;
 8003c28:	e7f7      	b.n	8003c1a <LSM6DSO_ACC_GetFullScale+0x26>
      *FullScale = 16;
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	6023      	str	r3, [r4, #0]
      break;
 8003c2e:	e7f4      	b.n	8003c1a <LSM6DSO_ACC_GetFullScale+0x26>
    return LSM6DSO_ERROR;
 8003c30:	f04f 30ff 	mov.w	r0, #4294967295
 8003c34:	e7f1      	b.n	8003c1a <LSM6DSO_ACC_GetFullScale+0x26>
  switch (fs_low_level)
 8003c36:	f04f 30ff 	mov.w	r0, #4294967295
 8003c3a:	e7ee      	b.n	8003c1a <LSM6DSO_ACC_GetFullScale+0x26>

08003c3c <LSM6DSO_ACC_GetAxesRaw>:
{
 8003c3c:	b510      	push	{r4, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	460c      	mov	r4, r1
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003c42:	4669      	mov	r1, sp
 8003c44:	3020      	adds	r0, #32
 8003c46:	f000 fc8f 	bl	8004568 <lsm6dso_acceleration_raw_get>
 8003c4a:	b950      	cbnz	r0, 8003c62 <LSM6DSO_ACC_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8003c4c:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003c50:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003c52:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003c56:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003c58:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003c5c:	80a3      	strh	r3, [r4, #4]
}
 8003c5e:	b002      	add	sp, #8
 8003c60:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8003c62:	f04f 30ff 	mov.w	r0, #4294967295
 8003c66:	e7fa      	b.n	8003c5e <LSM6DSO_ACC_GetAxesRaw+0x22>

08003c68 <LSM6DSO_ACC_GetAxes>:
{
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	460c      	mov	r4, r1
  float_t sensitivity = 0.0f;
 8003c70:	2300      	movs	r3, #0
 8003c72:	9301      	str	r3, [sp, #4]
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003c74:	a902      	add	r1, sp, #8
 8003c76:	3020      	adds	r0, #32
 8003c78:	f000 fc76 	bl	8004568 <lsm6dso_acceleration_raw_get>
 8003c7c:	bb40      	cbnz	r0, 8003cd0 <LSM6DSO_ACC_GetAxes+0x68>
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003c7e:	a901      	add	r1, sp, #4
 8003c80:	4628      	mov	r0, r5
 8003c82:	f7ff ff8b 	bl	8003b9c <LSM6DSO_ACC_GetSensitivity>
 8003c86:	4606      	mov	r6, r0
 8003c88:	bb28      	cbnz	r0, 8003cd6 <LSM6DSO_ACC_GetAxes+0x6e>
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003c8a:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8003c8e:	f7fd f86d 	bl	8000d6c <__aeabi_i2f>
 8003c92:	9901      	ldr	r1, [sp, #4]
 8003c94:	f7fd f8be 	bl	8000e14 <__aeabi_fmul>
 8003c98:	f7fd fa82 	bl	80011a0 <__aeabi_f2iz>
 8003c9c:	6020      	str	r0, [r4, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003c9e:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8003ca2:	f7fd f863 	bl	8000d6c <__aeabi_i2f>
 8003ca6:	9d01      	ldr	r5, [sp, #4]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	f7fd f8b3 	bl	8000e14 <__aeabi_fmul>
 8003cae:	f7fd fa77 	bl	80011a0 <__aeabi_f2iz>
 8003cb2:	6060      	str	r0, [r4, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003cb4:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8003cb8:	f7fd f858 	bl	8000d6c <__aeabi_i2f>
 8003cbc:	4601      	mov	r1, r0
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	f7fd f8a8 	bl	8000e14 <__aeabi_fmul>
 8003cc4:	f7fd fa6c 	bl	80011a0 <__aeabi_f2iz>
 8003cc8:	60a0      	str	r0, [r4, #8]
}
 8003cca:	4630      	mov	r0, r6
 8003ccc:	b004      	add	sp, #16
 8003cce:	bd70      	pop	{r4, r5, r6, pc}
    return LSM6DSO_ERROR;
 8003cd0:	f04f 36ff 	mov.w	r6, #4294967295
 8003cd4:	e7f9      	b.n	8003cca <LSM6DSO_ACC_GetAxes+0x62>
    return LSM6DSO_ERROR;
 8003cd6:	f04f 36ff 	mov.w	r6, #4294967295
 8003cda:	e7f6      	b.n	8003cca <LSM6DSO_ACC_GetAxes+0x62>

08003cdc <LSM6DSO_GYRO_Disable>:
{
 8003cdc:	b538      	push	{r3, r4, r5, lr}
  if (pObj->gyro_is_enabled == 0U)
 8003cde:	f890 3032 	ldrb.w	r3, [r0, #50]	@ 0x32
 8003ce2:	b90b      	cbnz	r3, 8003ce8 <LSM6DSO_GYRO_Disable+0xc>
    return LSM6DSO_OK;
 8003ce4:	2000      	movs	r0, #0
}
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	4604      	mov	r4, r0
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8003cea:	f100 0520 	add.w	r5, r0, #32
 8003cee:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 fbb4 	bl	8004460 <lsm6dso_gy_data_rate_get>
 8003cf8:	b938      	cbnz	r0, 8003d0a <LSM6DSO_GYRO_Disable+0x2e>
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	f000 fe25 	bl	800494c <lsm6dso_gy_data_rate_set>
 8003d02:	b928      	cbnz	r0, 8003d10 <LSM6DSO_GYRO_Disable+0x34>
  pObj->gyro_is_enabled = 0;
 8003d04:	f884 0032 	strb.w	r0, [r4, #50]	@ 0x32
  return LSM6DSO_OK;
 8003d08:	e7ed      	b.n	8003ce6 <LSM6DSO_GYRO_Disable+0xa>
    return LSM6DSO_ERROR;
 8003d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d0e:	e7ea      	b.n	8003ce6 <LSM6DSO_GYRO_Disable+0xa>
    return LSM6DSO_ERROR;
 8003d10:	f04f 30ff 	mov.w	r0, #4294967295
 8003d14:	e7e7      	b.n	8003ce6 <LSM6DSO_GYRO_Disable+0xa>

08003d16 <LSM6DSO_DeInit>:
{
 8003d16:	b510      	push	{r4, lr}
 8003d18:	4604      	mov	r4, r0
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8003d1a:	f7ff feca 	bl	8003ab2 <LSM6DSO_ACC_Disable>
 8003d1e:	b950      	cbnz	r0, 8003d36 <LSM6DSO_DeInit+0x20>
  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8003d20:	4620      	mov	r0, r4
 8003d22:	f7ff ffdb 	bl	8003cdc <LSM6DSO_GYRO_Disable>
 8003d26:	b948      	cbnz	r0, 8003d3c <LSM6DSO_DeInit+0x26>
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8003d28:	f884 0033 	strb.w	r0, [r4, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8003d2c:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  pObj->is_initialized = 0;
 8003d30:	f884 0030 	strb.w	r0, [r4, #48]	@ 0x30
}
 8003d34:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8003d36:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3a:	e7fb      	b.n	8003d34 <LSM6DSO_DeInit+0x1e>
    return LSM6DSO_ERROR;
 8003d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d40:	e7f8      	b.n	8003d34 <LSM6DSO_DeInit+0x1e>
	...

08003d44 <LSM6DSO_GYRO_GetOutputDataRate>:
{
 8003d44:	b510      	push	{r4, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	460c      	mov	r4, r1
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8003d4a:	f10d 0107 	add.w	r1, sp, #7
 8003d4e:	3020      	adds	r0, #32
 8003d50:	f000 fb86 	bl	8004460 <lsm6dso_gy_data_rate_get>
 8003d54:	2800      	cmp	r0, #0
 8003d56:	d12d      	bne.n	8003db4 <LSM6DSO_GYRO_GetOutputDataRate+0x70>
  switch (odr_low_level)
 8003d58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003d5c:	2b0a      	cmp	r3, #10
 8003d5e:	d82c      	bhi.n	8003dba <LSM6DSO_GYRO_GetOutputDataRate+0x76>
 8003d60:	e8df f003 	tbb	[pc, r3]
 8003d64:	100d0a06 	.word	0x100d0a06
 8003d68:	1c191613 	.word	0x1c191613
 8003d6c:	221f      	.short	0x221f
 8003d6e:	25          	.byte	0x25
 8003d6f:	00          	.byte	0x00
      *Odr = 0.0f;
 8003d70:	2300      	movs	r3, #0
 8003d72:	6023      	str	r3, [r4, #0]
}
 8003d74:	b002      	add	sp, #8
 8003d76:	bd10      	pop	{r4, pc}
      *Odr = 12.5f;
 8003d78:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <LSM6DSO_GYRO_GetOutputDataRate+0x7c>)
 8003d7a:	6023      	str	r3, [r4, #0]
      break;
 8003d7c:	e7fa      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 26.0f;
 8003d7e:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <LSM6DSO_GYRO_GetOutputDataRate+0x80>)
 8003d80:	6023      	str	r3, [r4, #0]
      break;
 8003d82:	e7f7      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 52.0f;
 8003d84:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <LSM6DSO_GYRO_GetOutputDataRate+0x84>)
 8003d86:	6023      	str	r3, [r4, #0]
      break;
 8003d88:	e7f4      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 104.0f;
 8003d8a:	4b10      	ldr	r3, [pc, #64]	@ (8003dcc <LSM6DSO_GYRO_GetOutputDataRate+0x88>)
 8003d8c:	6023      	str	r3, [r4, #0]
      break;
 8003d8e:	e7f1      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 208.0f;
 8003d90:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd0 <LSM6DSO_GYRO_GetOutputDataRate+0x8c>)
 8003d92:	6023      	str	r3, [r4, #0]
      break;
 8003d94:	e7ee      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 417.0f;
 8003d96:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd4 <LSM6DSO_GYRO_GetOutputDataRate+0x90>)
 8003d98:	6023      	str	r3, [r4, #0]
      break;
 8003d9a:	e7eb      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 833.0f;
 8003d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd8 <LSM6DSO_GYRO_GetOutputDataRate+0x94>)
 8003d9e:	6023      	str	r3, [r4, #0]
      break;
 8003da0:	e7e8      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 1667.0f;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <LSM6DSO_GYRO_GetOutputDataRate+0x98>)
 8003da4:	6023      	str	r3, [r4, #0]
      break;
 8003da6:	e7e5      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 3333.0f;
 8003da8:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>)
 8003daa:	6023      	str	r3, [r4, #0]
      break;
 8003dac:	e7e2      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
      *Odr = 6667.0f;
 8003dae:	4b0d      	ldr	r3, [pc, #52]	@ (8003de4 <LSM6DSO_GYRO_GetOutputDataRate+0xa0>)
 8003db0:	6023      	str	r3, [r4, #0]
      break;
 8003db2:	e7df      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
    return LSM6DSO_ERROR;
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295
 8003db8:	e7dc      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
  switch (odr_low_level)
 8003dba:	f04f 30ff 	mov.w	r0, #4294967295
 8003dbe:	e7d9      	b.n	8003d74 <LSM6DSO_GYRO_GetOutputDataRate+0x30>
 8003dc0:	41480000 	.word	0x41480000
 8003dc4:	41d00000 	.word	0x41d00000
 8003dc8:	42500000 	.word	0x42500000
 8003dcc:	42d00000 	.word	0x42d00000
 8003dd0:	43500000 	.word	0x43500000
 8003dd4:	43d08000 	.word	0x43d08000
 8003dd8:	44504000 	.word	0x44504000
 8003ddc:	44d06000 	.word	0x44d06000
 8003de0:	45505000 	.word	0x45505000
 8003de4:	45d05800 	.word	0x45d05800

08003de8 <LSM6DSO_GYRO_GetSensitivity>:
{
 8003de8:	b510      	push	{r4, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8003dee:	f10d 0107 	add.w	r1, sp, #7
 8003df2:	3020      	adds	r0, #32
 8003df4:	f000 fb0d 	bl	8004412 <lsm6dso_gy_full_scale_get>
 8003df8:	b9c8      	cbnz	r0, 8003e2e <LSM6DSO_GYRO_GetSensitivity+0x46>
  switch (full_scale)
 8003dfa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d818      	bhi.n	8003e34 <LSM6DSO_GYRO_GetSensitivity+0x4c>
 8003e02:	e8df f003 	tbb	[pc, r3]
 8003e06:	0408      	.short	0x0408
 8003e08:	170e170b 	.word	0x170e170b
 8003e0c:	11          	.byte	0x11
 8003e0d:	00          	.byte	0x00
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e3c <LSM6DSO_GYRO_GetSensitivity+0x54>)
 8003e10:	6023      	str	r3, [r4, #0]
}
 8003e12:	b002      	add	sp, #8
 8003e14:	bd10      	pop	{r4, pc}
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8003e16:	4b0a      	ldr	r3, [pc, #40]	@ (8003e40 <LSM6DSO_GYRO_GetSensitivity+0x58>)
 8003e18:	6023      	str	r3, [r4, #0]
      break;
 8003e1a:	e7fa      	b.n	8003e12 <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8003e1c:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <LSM6DSO_GYRO_GetSensitivity+0x5c>)
 8003e1e:	6023      	str	r3, [r4, #0]
      break;
 8003e20:	e7f7      	b.n	8003e12 <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8003e22:	4b09      	ldr	r3, [pc, #36]	@ (8003e48 <LSM6DSO_GYRO_GetSensitivity+0x60>)
 8003e24:	6023      	str	r3, [r4, #0]
      break;
 8003e26:	e7f4      	b.n	8003e12 <LSM6DSO_GYRO_GetSensitivity+0x2a>
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8003e28:	4b08      	ldr	r3, [pc, #32]	@ (8003e4c <LSM6DSO_GYRO_GetSensitivity+0x64>)
 8003e2a:	6023      	str	r3, [r4, #0]
      break;
 8003e2c:	e7f1      	b.n	8003e12 <LSM6DSO_GYRO_GetSensitivity+0x2a>
    return LSM6DSO_ERROR;
 8003e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e32:	e7ee      	b.n	8003e12 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  switch (full_scale)
 8003e34:	f04f 30ff 	mov.w	r0, #4294967295
 8003e38:	e7eb      	b.n	8003e12 <LSM6DSO_GYRO_GetSensitivity+0x2a>
 8003e3a:	bf00      	nop
 8003e3c:	408c0000 	.word	0x408c0000
 8003e40:	410c0000 	.word	0x410c0000
 8003e44:	418c0000 	.word	0x418c0000
 8003e48:	420c0000 	.word	0x420c0000
 8003e4c:	428c0000 	.word	0x428c0000

08003e50 <LSM6DSO_GYRO_GetFullScale>:
{
 8003e50:	b510      	push	{r4, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	460c      	mov	r4, r1
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8003e56:	f10d 0107 	add.w	r1, sp, #7
 8003e5a:	3020      	adds	r0, #32
 8003e5c:	f000 fad9 	bl	8004412 <lsm6dso_gy_full_scale_get>
 8003e60:	b9e0      	cbnz	r0, 8003e9c <LSM6DSO_GYRO_GetFullScale+0x4c>
  switch (fs_low_level)
 8003e62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e66:	2b06      	cmp	r3, #6
 8003e68:	d81b      	bhi.n	8003ea2 <LSM6DSO_GYRO_GetFullScale+0x52>
 8003e6a:	e8df f003 	tbb	[pc, r3]
 8003e6e:	0408      	.short	0x0408
 8003e70:	1a0f1a0b 	.word	0x1a0f1a0b
 8003e74:	13          	.byte	0x13
 8003e75:	00          	.byte	0x00
      *FullScale =  125;
 8003e76:	237d      	movs	r3, #125	@ 0x7d
 8003e78:	6023      	str	r3, [r4, #0]
}
 8003e7a:	b002      	add	sp, #8
 8003e7c:	bd10      	pop	{r4, pc}
      *FullScale =  250;
 8003e7e:	23fa      	movs	r3, #250	@ 0xfa
 8003e80:	6023      	str	r3, [r4, #0]
      break;
 8003e82:	e7fa      	b.n	8003e7a <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale =  500;
 8003e84:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003e88:	6023      	str	r3, [r4, #0]
      break;
 8003e8a:	e7f6      	b.n	8003e7a <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale = 1000;
 8003e8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e90:	6023      	str	r3, [r4, #0]
      break;
 8003e92:	e7f2      	b.n	8003e7a <LSM6DSO_GYRO_GetFullScale+0x2a>
      *FullScale = 2000;
 8003e94:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003e98:	6023      	str	r3, [r4, #0]
      break;
 8003e9a:	e7ee      	b.n	8003e7a <LSM6DSO_GYRO_GetFullScale+0x2a>
    return LSM6DSO_ERROR;
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	e7eb      	b.n	8003e7a <LSM6DSO_GYRO_GetFullScale+0x2a>
  switch (fs_low_level)
 8003ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea6:	e7e8      	b.n	8003e7a <LSM6DSO_GYRO_GetFullScale+0x2a>

08003ea8 <LSM6DSO_GYRO_GetAxesRaw>:
{
 8003ea8:	b510      	push	{r4, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003eae:	4669      	mov	r1, sp
 8003eb0:	3020      	adds	r0, #32
 8003eb2:	f000 fb37 	bl	8004524 <lsm6dso_angular_rate_raw_get>
 8003eb6:	b950      	cbnz	r0, 8003ece <LSM6DSO_GYRO_GetAxesRaw+0x26>
  Value->x = data_raw.i16bit[0];
 8003eb8:	f9bd 3000 	ldrsh.w	r3, [sp]
 8003ebc:	8023      	strh	r3, [r4, #0]
  Value->y = data_raw.i16bit[1];
 8003ebe:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8003ec2:	8063      	strh	r3, [r4, #2]
  Value->z = data_raw.i16bit[2];
 8003ec4:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003ec8:	80a3      	strh	r3, [r4, #4]
}
 8003eca:	b002      	add	sp, #8
 8003ecc:	bd10      	pop	{r4, pc}
    return LSM6DSO_ERROR;
 8003ece:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed2:	e7fa      	b.n	8003eca <LSM6DSO_GYRO_GetAxesRaw+0x22>

08003ed4 <LSM6DSO_GYRO_GetAxes>:
{
 8003ed4:	b570      	push	{r4, r5, r6, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	4605      	mov	r5, r0
 8003eda:	460c      	mov	r4, r1
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8003edc:	a902      	add	r1, sp, #8
 8003ede:	3020      	adds	r0, #32
 8003ee0:	f000 fb20 	bl	8004524 <lsm6dso_angular_rate_raw_get>
 8003ee4:	bb40      	cbnz	r0, 8003f38 <LSM6DSO_GYRO_GetAxes+0x64>
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8003ee6:	a901      	add	r1, sp, #4
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f7ff ff7d 	bl	8003de8 <LSM6DSO_GYRO_GetSensitivity>
 8003eee:	4606      	mov	r6, r0
 8003ef0:	bb28      	cbnz	r0, 8003f3e <LSM6DSO_GYRO_GetAxes+0x6a>
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8003ef2:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8003ef6:	f7fc ff39 	bl	8000d6c <__aeabi_i2f>
 8003efa:	9901      	ldr	r1, [sp, #4]
 8003efc:	f7fc ff8a 	bl	8000e14 <__aeabi_fmul>
 8003f00:	f7fd f94e 	bl	80011a0 <__aeabi_f2iz>
 8003f04:	6020      	str	r0, [r4, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8003f06:	f9bd 000a 	ldrsh.w	r0, [sp, #10]
 8003f0a:	f7fc ff2f 	bl	8000d6c <__aeabi_i2f>
 8003f0e:	9d01      	ldr	r5, [sp, #4]
 8003f10:	4629      	mov	r1, r5
 8003f12:	f7fc ff7f 	bl	8000e14 <__aeabi_fmul>
 8003f16:	f7fd f943 	bl	80011a0 <__aeabi_f2iz>
 8003f1a:	6060      	str	r0, [r4, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8003f1c:	f9bd 000c 	ldrsh.w	r0, [sp, #12]
 8003f20:	f7fc ff24 	bl	8000d6c <__aeabi_i2f>
 8003f24:	4601      	mov	r1, r0
 8003f26:	4628      	mov	r0, r5
 8003f28:	f7fc ff74 	bl	8000e14 <__aeabi_fmul>
 8003f2c:	f7fd f938 	bl	80011a0 <__aeabi_f2iz>
 8003f30:	60a0      	str	r0, [r4, #8]
}
 8003f32:	4630      	mov	r0, r6
 8003f34:	b004      	add	sp, #16
 8003f36:	bd70      	pop	{r4, r5, r6, pc}
    return LSM6DSO_ERROR;
 8003f38:	f04f 36ff 	mov.w	r6, #4294967295
 8003f3c:	e7f9      	b.n	8003f32 <LSM6DSO_GYRO_GetAxes+0x5e>
    return LSM6DSO_ERROR;
 8003f3e:	f04f 36ff 	mov.w	r6, #4294967295
 8003f42:	e7f6      	b.n	8003f32 <LSM6DSO_GYRO_GetAxes+0x5e>

08003f44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
{
 8003f44:	b570      	push	{r4, r5, r6, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	4604      	mov	r4, r0
 8003f4a:	460d      	mov	r5, r1
  switch (Mode)
 8003f4c:	2a01      	cmp	r2, #1
 8003f4e:	d05b      	beq.n	8004008 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc4>
 8003f50:	2a02      	cmp	r2, #2
 8003f52:	f000 80a2 	beq.w	800409a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x156>
 8003f56:	b11a      	cbz	r2, 8003f60 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1c>
 8003f58:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003f5c:	b002      	add	sp, #8
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003f60:	f100 0620 	add.w	r6, r0, #32
 8003f64:	2301      	movs	r3, #1
 8003f66:	466a      	mov	r2, sp
 8003f68:	2114      	movs	r1, #20
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f000 f9ac 	bl	80042c8 <lsm6dso_read_reg>
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d144      	bne.n	8003ffe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xba>
      if (val1.xl_ulp_en != 0U)
 8003f74:	f99d 3000 	ldrsb.w	r3, [sp]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da10      	bge.n	8003f9e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x5a>
        if (pObj->acc_is_enabled == 1U)
 8003f7c:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d027      	beq.n	8003fd4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x90>
        val1.xl_ulp_en = 0;
 8003f84:	f89d 3000 	ldrb.w	r3, [sp]
 8003f88:	f36f 13c7 	bfc	r3, #7, #1
 8003f8c:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8003f90:	2301      	movs	r3, #1
 8003f92:	466a      	mov	r2, sp
 8003f94:	2114      	movs	r1, #20
 8003f96:	4630      	mov	r0, r6
 8003f98:	f000 f99b 	bl	80042d2 <lsm6dso_write_reg>
 8003f9c:	bb78      	cbnz	r0, 8003ffe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xba>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	aa01      	add	r2, sp, #4
 8003fa2:	2115      	movs	r1, #21
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	f000 f98f 	bl	80042c8 <lsm6dso_read_reg>
 8003faa:	bb40      	cbnz	r0, 8003ffe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xba>
      if (val2.xl_hm_mode != 0U)
 8003fac:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003fb0:	f013 0f10 	tst.w	r3, #16
 8003fb4:	d115      	bne.n	8003fe2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x9e>
      if (newOdr < 12.5f)
 8003fb6:	4966      	ldr	r1, [pc, #408]	@ (8004150 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20c>)
 8003fb8:	4628      	mov	r0, r5
 8003fba:	f7fd f8c9 	bl	8001150 <__aeabi_fcmplt>
 8003fbe:	bb08      	cbnz	r0, 8004004 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc0>
  if (pObj->acc_is_enabled == 1U)
 8003fc0:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f000 80be 	beq.w	8004146 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x202>
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8003fca:	4629      	mov	r1, r5
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff fb2d 	bl	800362c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8003fd2:	e7c3      	b.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4630      	mov	r0, r6
 8003fd8:	f000 fc2d 	bl	8004836 <lsm6dso_xl_data_rate_set>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d0d1      	beq.n	8003f84 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x40>
 8003fe0:	e00d      	b.n	8003ffe <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xba>
        val2.xl_hm_mode = 0U;
 8003fe2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003fe6:	f36f 1304 	bfc	r3, #4, #1
 8003fea:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8003fee:	2301      	movs	r3, #1
 8003ff0:	aa01      	add	r2, sp, #4
 8003ff2:	2115      	movs	r1, #21
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f000 f96c 	bl	80042d2 <lsm6dso_write_reg>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d0db      	beq.n	8003fb6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x72>
        return LSM6DSO_ERROR;
 8003ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8004002:	e7ab      	b.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18>
        newOdr = 12.5f;
 8004004:	4d52      	ldr	r5, [pc, #328]	@ (8004150 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20c>)
  if (ret == LSM6DSO_ERROR)
 8004006:	e7db      	b.n	8003fc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004008:	f100 0620 	add.w	r6, r0, #32
 800400c:	2301      	movs	r3, #1
 800400e:	466a      	mov	r2, sp
 8004010:	2114      	movs	r1, #20
 8004012:	4630      	mov	r0, r6
 8004014:	f000 f958 	bl	80042c8 <lsm6dso_read_reg>
 8004018:	2800      	cmp	r0, #0
 800401a:	d13b      	bne.n	8004094 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x150>
      if (val1.xl_ulp_en != 0U)
 800401c:	f99d 3000 	ldrsb.w	r3, [sp]
 8004020:	2b00      	cmp	r3, #0
 8004022:	da10      	bge.n	8004046 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x102>
        if (pObj->acc_is_enabled == 1U)
 8004024:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 8004028:	2b01      	cmp	r3, #1
 800402a:	d020      	beq.n	800406e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x12a>
        val1.xl_ulp_en = 0;
 800402c:	f89d 3000 	ldrb.w	r3, [sp]
 8004030:	f36f 13c7 	bfc	r3, #7, #1
 8004034:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8004038:	2301      	movs	r3, #1
 800403a:	466a      	mov	r2, sp
 800403c:	2114      	movs	r1, #20
 800403e:	4630      	mov	r0, r6
 8004040:	f000 f947 	bl	80042d2 <lsm6dso_write_reg>
 8004044:	bb30      	cbnz	r0, 8004094 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x150>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004046:	2301      	movs	r3, #1
 8004048:	aa01      	add	r2, sp, #4
 800404a:	2115      	movs	r1, #21
 800404c:	4630      	mov	r0, r6
 800404e:	f000 f93b 	bl	80042c8 <lsm6dso_read_reg>
 8004052:	b9f8      	cbnz	r0, 8004094 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x150>
      if (val2.xl_hm_mode == 0U)
 8004054:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004058:	f013 0f10 	tst.w	r3, #16
 800405c:	d00e      	beq.n	800407c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x138>
      if (newOdr > 208.0f)
 800405e:	493d      	ldr	r1, [pc, #244]	@ (8004154 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x210>)
 8004060:	4628      	mov	r0, r5
 8004062:	f7fd f893 	bl	800118c <__aeabi_fcmpgt>
 8004066:	2800      	cmp	r0, #0
 8004068:	d0aa      	beq.n	8003fc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        newOdr = 208.0f;
 800406a:	4d3a      	ldr	r5, [pc, #232]	@ (8004154 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x210>)
  if (ret == LSM6DSO_ERROR)
 800406c:	e7a8      	b.n	8003fc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800406e:	2100      	movs	r1, #0
 8004070:	4630      	mov	r0, r6
 8004072:	f000 fbe0 	bl	8004836 <lsm6dso_xl_data_rate_set>
 8004076:	2800      	cmp	r0, #0
 8004078:	d0d8      	beq.n	800402c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xe8>
 800407a:	e00b      	b.n	8004094 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x150>
        val2.xl_hm_mode = 1U;
 800407c:	f043 0310 	orr.w	r3, r3, #16
 8004080:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004084:	2301      	movs	r3, #1
 8004086:	aa01      	add	r2, sp, #4
 8004088:	2115      	movs	r1, #21
 800408a:	4630      	mov	r0, r6
 800408c:	f000 f921 	bl	80042d2 <lsm6dso_write_reg>
 8004090:	2800      	cmp	r0, #0
 8004092:	d0e4      	beq.n	800405e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x11a>
        return LSM6DSO_ERROR;
 8004094:	f04f 30ff 	mov.w	r0, #4294967295
 8004098:	e760      	b.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800409a:	f100 0620 	add.w	r6, r0, #32
 800409e:	2301      	movs	r3, #1
 80040a0:	aa01      	add	r2, sp, #4
 80040a2:	2115      	movs	r1, #21
 80040a4:	4630      	mov	r0, r6
 80040a6:	f000 f90f 	bl	80042c8 <lsm6dso_read_reg>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d141      	bne.n	8004132 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      if (val2.xl_hm_mode != 0U)
 80040ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80040b2:	f013 0f10 	tst.w	r3, #16
 80040b6:	d128      	bne.n	800410a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1c6>
      if (pObj->gyro_is_enabled == 1U)
 80040b8:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d033      	beq.n	8004128 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e4>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80040c0:	2301      	movs	r3, #1
 80040c2:	466a      	mov	r2, sp
 80040c4:	2114      	movs	r1, #20
 80040c6:	4630      	mov	r0, r6
 80040c8:	f000 f8fe 	bl	80042c8 <lsm6dso_read_reg>
 80040cc:	bb88      	cbnz	r0, 8004132 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      if (val1.xl_ulp_en == 0U)
 80040ce:	f99d 3000 	ldrsb.w	r3, [sp]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	db10      	blt.n	80040f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1b4>
        if (pObj->acc_is_enabled == 1U)
 80040d6:	f894 3031 	ldrb.w	r3, [r4, #49]	@ 0x31
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d02c      	beq.n	8004138 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
        val1.xl_ulp_en = 1U;
 80040de:	f89d 3000 	ldrb.w	r3, [sp]
 80040e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040e6:	f88d 3000 	strb.w	r3, [sp]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80040ea:	2301      	movs	r3, #1
 80040ec:	466a      	mov	r2, sp
 80040ee:	2114      	movs	r1, #20
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 f8ee 	bl	80042d2 <lsm6dso_write_reg>
 80040f6:	b9e0      	cbnz	r0, 8004132 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      if (newOdr > 208.0f)
 80040f8:	4916      	ldr	r1, [pc, #88]	@ (8004154 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x210>)
 80040fa:	4628      	mov	r0, r5
 80040fc:	f7fd f846 	bl	800118c <__aeabi_fcmpgt>
 8004100:	2800      	cmp	r0, #0
 8004102:	f43f af5d 	beq.w	8003fc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        newOdr = 208.0f;
 8004106:	4d13      	ldr	r5, [pc, #76]	@ (8004154 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x210>)
  if (ret == LSM6DSO_ERROR)
 8004108:	e75a      	b.n	8003fc0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        val2.xl_hm_mode = 0U;
 800410a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800410e:	f36f 1304 	bfc	r3, #4, #1
 8004112:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8004116:	2301      	movs	r3, #1
 8004118:	aa01      	add	r2, sp, #4
 800411a:	2115      	movs	r1, #21
 800411c:	4630      	mov	r0, r6
 800411e:	f000 f8d8 	bl	80042d2 <lsm6dso_write_reg>
 8004122:	2800      	cmp	r0, #0
 8004124:	d0c8      	beq.n	80040b8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x174>
 8004126:	e004      	b.n	8004132 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff fdd7 	bl	8003cdc <LSM6DSO_GYRO_Disable>
 800412e:	2800      	cmp	r0, #0
 8004130:	d0c6      	beq.n	80040c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x17c>
        return LSM6DSO_ERROR;
 8004132:	f04f 30ff 	mov.w	r0, #4294967295
 8004136:	e711      	b.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18>
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8004138:	2100      	movs	r1, #0
 800413a:	4630      	mov	r0, r6
 800413c:	f000 fb7b 	bl	8004836 <lsm6dso_xl_data_rate_set>
 8004140:	2800      	cmp	r0, #0
 8004142:	d0cc      	beq.n	80040de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x19a>
 8004144:	e7f5      	b.n	8004132 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004146:	4629      	mov	r1, r5
 8004148:	4620      	mov	r0, r4
 800414a:	f7ff fb4b 	bl	80037e4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800414e:	e705      	b.n	8003f5c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18>
 8004150:	41480000 	.word	0x41480000
 8004154:	43500000 	.word	0x43500000

08004158 <LSM6DSO_ACC_SetOutputDataRate>:
{
 8004158:	b508      	push	{r3, lr}
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800415a:	2200      	movs	r2, #0
 800415c:	f7ff fef2 	bl	8003f44 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
}
 8004160:	bd08      	pop	{r3, pc}
	...

08004164 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
{
 8004164:	b570      	push	{r4, r5, r6, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	4604      	mov	r4, r0
 800416a:	460d      	mov	r5, r1
  switch (Mode)
 800416c:	b12a      	cbz	r2, 800417a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x16>
 800416e:	2a01      	cmp	r2, #1
 8004170:	d02a      	beq.n	80041c8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x64>
 8004172:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004176:	b002      	add	sp, #8
 8004178:	bd70      	pop	{r4, r5, r6, pc}
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800417a:	f100 0620 	add.w	r6, r0, #32
 800417e:	2301      	movs	r3, #1
 8004180:	aa01      	add	r2, sp, #4
 8004182:	2116      	movs	r1, #22
 8004184:	4630      	mov	r0, r6
 8004186:	f000 f89f 	bl	80042c8 <lsm6dso_read_reg>
 800418a:	b9d0      	cbnz	r0, 80041c2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x5e>
      if (val1.g_hm_mode != 0U)
 800418c:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db08      	blt.n	80041a6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
  if (pObj->gyro_is_enabled == 1U)
 8004194:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8004198:	2b01      	cmp	r3, #1
 800419a:	d03b      	beq.n	8004214 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xb0>
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800419c:	4629      	mov	r1, r5
 800419e:	4620      	mov	r0, r4
 80041a0:	f7ff faa8 	bl	80036f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80041a4:	e7e7      	b.n	8004176 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x12>
        val1.g_hm_mode = 0U;
 80041a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041aa:	f36f 13c7 	bfc	r3, #7, #1
 80041ae:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80041b2:	2301      	movs	r3, #1
 80041b4:	aa01      	add	r2, sp, #4
 80041b6:	2116      	movs	r1, #22
 80041b8:	4630      	mov	r0, r6
 80041ba:	f000 f88a 	bl	80042d2 <lsm6dso_write_reg>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d0e8      	beq.n	8004194 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x30>
        return LSM6DSO_ERROR;
 80041c2:	f04f 30ff 	mov.w	r0, #4294967295
 80041c6:	e7d6      	b.n	8004176 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x12>
      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80041c8:	f100 0620 	add.w	r6, r0, #32
 80041cc:	2301      	movs	r3, #1
 80041ce:	aa01      	add	r2, sp, #4
 80041d0:	2116      	movs	r1, #22
 80041d2:	4630      	mov	r0, r6
 80041d4:	f000 f878 	bl	80042c8 <lsm6dso_read_reg>
 80041d8:	b9c8      	cbnz	r0, 800420e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xaa>
      if (val1.g_hm_mode == 0U)
 80041da:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	da07      	bge.n	80041f2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x8e>
      if (newOdr > 208.0f)
 80041e2:	490f      	ldr	r1, [pc, #60]	@ (8004220 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xbc>)
 80041e4:	4628      	mov	r0, r5
 80041e6:	f7fc ffd1 	bl	800118c <__aeabi_fcmpgt>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d0d2      	beq.n	8004194 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x30>
        newOdr = 208.0f;
 80041ee:	4d0c      	ldr	r5, [pc, #48]	@ (8004220 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xbc>)
  if (ret == LSM6DSO_ERROR)
 80041f0:	e7d0      	b.n	8004194 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x30>
        val1.g_hm_mode = 1U;
 80041f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80041f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041fa:	f88d 3004 	strb.w	r3, [sp, #4]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80041fe:	2301      	movs	r3, #1
 8004200:	aa01      	add	r2, sp, #4
 8004202:	2116      	movs	r1, #22
 8004204:	4630      	mov	r0, r6
 8004206:	f000 f864 	bl	80042d2 <lsm6dso_write_reg>
 800420a:	2800      	cmp	r0, #0
 800420c:	d0e9      	beq.n	80041e2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x7e>
        return LSM6DSO_ERROR;
 800420e:	f04f 30ff 	mov.w	r0, #4294967295
 8004212:	e7b0      	b.n	8004176 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x12>
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8004214:	4629      	mov	r1, r5
 8004216:	4620      	mov	r0, r4
 8004218:	f7ff fb7a 	bl	8003910 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800421c:	e7ab      	b.n	8004176 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x12>
 800421e:	bf00      	nop
 8004220:	43500000 	.word	0x43500000

08004224 <LSM6DSO_GYRO_SetOutputDataRate>:
{
 8004224:	b508      	push	{r3, lr}
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8004226:	2200      	movs	r2, #0
 8004228:	f7ff ff9c 	bl	8004164 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
}
 800422c:	bd08      	pop	{r3, pc}

0800422e <LSM6DSO_Write_Reg>:
{
 800422e:	b500      	push	{lr}
 8004230:	b083      	sub	sp, #12
 8004232:	f88d 2007 	strb.w	r2, [sp, #7]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8004236:	2301      	movs	r3, #1
 8004238:	f10d 0207 	add.w	r2, sp, #7
 800423c:	3020      	adds	r0, #32
 800423e:	f000 f848 	bl	80042d2 <lsm6dso_write_reg>
 8004242:	b910      	cbnz	r0, 800424a <LSM6DSO_Write_Reg+0x1c>
}
 8004244:	b003      	add	sp, #12
 8004246:	f85d fb04 	ldr.w	pc, [sp], #4
    return LSM6DSO_ERROR;
 800424a:	f04f 30ff 	mov.w	r0, #4294967295
 800424e:	e7f9      	b.n	8004244 <LSM6DSO_Write_Reg+0x16>

08004250 <LSM6DSO_RegisterBusIO>:
  if (pObj == NULL)
 8004250:	2800      	cmp	r0, #0
 8004252:	d02b      	beq.n	80042ac <LSM6DSO_RegisterBusIO+0x5c>
{
 8004254:	b510      	push	{r4, lr}
 8004256:	4604      	mov	r4, r0
    pObj->IO.Init      = pIO->Init;
 8004258:	680b      	ldr	r3, [r1, #0]
 800425a:	6003      	str	r3, [r0, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800425c:	684a      	ldr	r2, [r1, #4]
 800425e:	6042      	str	r2, [r0, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004260:	688a      	ldr	r2, [r1, #8]
 8004262:	6082      	str	r2, [r0, #8]
    pObj->IO.Address   = pIO->Address;
 8004264:	7b0a      	ldrb	r2, [r1, #12]
 8004266:	7302      	strb	r2, [r0, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004268:	690a      	ldr	r2, [r1, #16]
 800426a:	6102      	str	r2, [r0, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800426c:	694a      	ldr	r2, [r1, #20]
 800426e:	6142      	str	r2, [r0, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004270:	698a      	ldr	r2, [r1, #24]
 8004272:	6182      	str	r2, [r0, #24]
    pObj->Ctx.my_read_reg  = ReadRegWrap;
 8004274:	4a12      	ldr	r2, [pc, #72]	@ (80042c0 <LSM6DSO_RegisterBusIO+0x70>)
 8004276:	6242      	str	r2, [r0, #36]	@ 0x24
    pObj->Ctx.my_write_reg = WriteRegWrap;
 8004278:	4a12      	ldr	r2, [pc, #72]	@ (80042c4 <LSM6DSO_RegisterBusIO+0x74>)
 800427a:	6202      	str	r2, [r0, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800427c:	69ca      	ldr	r2, [r1, #28]
 800427e:	6282      	str	r2, [r0, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8004280:	62c0      	str	r0, [r0, #44]	@ 0x2c
    if (pObj->IO.Init == NULL)
 8004282:	b1b3      	cbz	r3, 80042b2 <LSM6DSO_RegisterBusIO+0x62>
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8004284:	4798      	blx	r3
 8004286:	b9b8      	cbnz	r0, 80042b8 <LSM6DSO_RegisterBusIO+0x68>
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8004288:	68a3      	ldr	r3, [r4, #8]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d000      	beq.n	8004290 <LSM6DSO_RegisterBusIO+0x40>
}
 800428e:	bd10      	pop	{r4, pc}
        if (pObj->is_initialized == 0U)
 8004290:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1fa      	bne.n	800428e <LSM6DSO_RegisterBusIO+0x3e>
          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8004298:	220c      	movs	r2, #12
 800429a:	2112      	movs	r1, #18
 800429c:	4620      	mov	r0, r4
 800429e:	f7ff ffc6 	bl	800422e <LSM6DSO_Write_Reg>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d0f3      	beq.n	800428e <LSM6DSO_RegisterBusIO+0x3e>
            ret = LSM6DSO_ERROR;
 80042a6:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80042aa:	e7f0      	b.n	800428e <LSM6DSO_RegisterBusIO+0x3e>
    ret = LSM6DSO_ERROR;
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
}
 80042b0:	4770      	bx	lr
      ret = LSM6DSO_ERROR;
 80042b2:	f04f 30ff 	mov.w	r0, #4294967295
 80042b6:	e7ea      	b.n	800428e <LSM6DSO_RegisterBusIO+0x3e>
      ret = LSM6DSO_ERROR;
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	e7e7      	b.n	800428e <LSM6DSO_RegisterBusIO+0x3e>
 80042be:	bf00      	nop
 80042c0:	080037a9 	.word	0x080037a9
 80042c4:	080037b1 	.word	0x080037b1

080042c8 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80042c8:	b508      	push	{r3, lr}
  int32_t ret;

  ret = my_read_reg(ctx->handle, reg, data, len);
 80042ca:	68c0      	ldr	r0, [r0, #12]
 80042cc:	f7fd fd16 	bl	8001cfc <my_read_reg>

  return ret;
}
 80042d0:	bd08      	pop	{r3, pc}

080042d2 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80042d2:	b508      	push	{r3, lr}
  int32_t ret;

  ret = my_write_reg(ctx->handle, reg, data, len);
 80042d4:	68c0      	ldr	r0, [r0, #12]
 80042d6:	f7fd fcd1 	bl	8001c7c <my_write_reg>

  return ret;
}
 80042da:	bd08      	pop	{r3, pc}

080042dc <lsm6dso_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dso_from_fs4_to_mg(int16_t lsb)
{
 80042dc:	b508      	push	{r3, lr}
  return ((float_t)lsb) * 0.122f;
 80042de:	f7fc fd45 	bl	8000d6c <__aeabi_i2f>
 80042e2:	4902      	ldr	r1, [pc, #8]	@ (80042ec <lsm6dso_from_fs4_to_mg+0x10>)
 80042e4:	f7fc fd96 	bl	8000e14 <__aeabi_fmul>
}
 80042e8:	bd08      	pop	{r3, pc}
 80042ea:	bf00      	nop
 80042ec:	3df9db23 	.word	0x3df9db23

080042f0 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80042f0:	b530      	push	{r4, r5, lr}
 80042f2:	b083      	sub	sp, #12
 80042f4:	4604      	mov	r4, r0
 80042f6:	460d      	mov	r5, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80042f8:	2301      	movs	r3, #1
 80042fa:	aa01      	add	r2, sp, #4
 80042fc:	2110      	movs	r1, #16
 80042fe:	f7ff ffe3 	bl	80042c8 <lsm6dso_read_reg>

  if (ret == 0)
 8004302:	b108      	cbz	r0, 8004308 <lsm6dso_xl_full_scale_set+0x18>
    reg.fs_xl = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004304:	b003      	add	sp, #12
 8004306:	bd30      	pop	{r4, r5, pc}
    reg.fs_xl = (uint8_t) val;
 8004308:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800430c:	f365 0383 	bfi	r3, r5, #2, #2
 8004310:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004314:	2301      	movs	r3, #1
 8004316:	aa01      	add	r2, sp, #4
 8004318:	2110      	movs	r1, #16
 800431a:	4620      	mov	r0, r4
 800431c:	f7ff ffd9 	bl	80042d2 <lsm6dso_write_reg>
  return ret;
 8004320:	e7f0      	b.n	8004304 <lsm6dso_xl_full_scale_set+0x14>

08004322 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8004322:	b510      	push	{r4, lr}
 8004324:	b082      	sub	sp, #8
 8004326:	460c      	mov	r4, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004328:	2301      	movs	r3, #1
 800432a:	aa01      	add	r2, sp, #4
 800432c:	2110      	movs	r1, #16
 800432e:	f7ff ffcb 	bl	80042c8 <lsm6dso_read_reg>

  switch (reg.fs_xl)
 8004332:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004336:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800433a:	2b03      	cmp	r3, #3
 800433c:	d810      	bhi.n	8004360 <lsm6dso_xl_full_scale_get+0x3e>
 800433e:	e8df f003 	tbb	[pc, r3]
 8004342:	0602      	.short	0x0602
 8004344:	0c09      	.short	0x0c09
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8004346:	2300      	movs	r3, #0
 8004348:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_2g;
      break;
  }

  return ret;
}
 800434a:	b002      	add	sp, #8
 800434c:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_16g;
 800434e:	2301      	movs	r3, #1
 8004350:	7023      	strb	r3, [r4, #0]
      break;
 8004352:	e7fa      	b.n	800434a <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_4g;
 8004354:	2302      	movs	r3, #2
 8004356:	7023      	strb	r3, [r4, #0]
      break;
 8004358:	e7f7      	b.n	800434a <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_8g;
 800435a:	2303      	movs	r3, #3
 800435c:	7023      	strb	r3, [r4, #0]
      break;
 800435e:	e7f4      	b.n	800434a <lsm6dso_xl_full_scale_get+0x28>
      *val = LSM6DSO_2g;
 8004360:	2300      	movs	r3, #0
 8004362:	7023      	strb	r3, [r4, #0]
  return ret;
 8004364:	e7f1      	b.n	800434a <lsm6dso_xl_full_scale_get+0x28>

08004366 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8004366:	b510      	push	{r4, lr}
 8004368:	b082      	sub	sp, #8
 800436a:	460c      	mov	r4, r1
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800436c:	2301      	movs	r3, #1
 800436e:	aa01      	add	r2, sp, #4
 8004370:	2110      	movs	r1, #16
 8004372:	f7ff ffa9 	bl	80042c8 <lsm6dso_read_reg>

  switch (reg.odr_xl)
 8004376:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	2b0b      	cmp	r3, #11
 800437e:	d82c      	bhi.n	80043da <lsm6dso_xl_data_rate_get+0x74>
 8004380:	e8df f003 	tbb	[pc, r3]
 8004384:	100d0a06 	.word	0x100d0a06
 8004388:	1c191613 	.word	0x1c191613
 800438c:	2825221f 	.word	0x2825221f
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8004390:	2300      	movs	r3, #0
 8004392:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_XL_ODR_OFF;
      break;
  }

  return ret;
}
 8004394:	b002      	add	sp, #8
 8004396:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_XL_ODR_12Hz5;
 8004398:	2301      	movs	r3, #1
 800439a:	7023      	strb	r3, [r4, #0]
      break;
 800439c:	e7fa      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_26Hz;
 800439e:	2302      	movs	r3, #2
 80043a0:	7023      	strb	r3, [r4, #0]
      break;
 80043a2:	e7f7      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_52Hz;
 80043a4:	2303      	movs	r3, #3
 80043a6:	7023      	strb	r3, [r4, #0]
      break;
 80043a8:	e7f4      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_104Hz;
 80043aa:	2304      	movs	r3, #4
 80043ac:	7023      	strb	r3, [r4, #0]
      break;
 80043ae:	e7f1      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_208Hz;
 80043b0:	2305      	movs	r3, #5
 80043b2:	7023      	strb	r3, [r4, #0]
      break;
 80043b4:	e7ee      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_417Hz;
 80043b6:	2306      	movs	r3, #6
 80043b8:	7023      	strb	r3, [r4, #0]
      break;
 80043ba:	e7eb      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_833Hz;
 80043bc:	2307      	movs	r3, #7
 80043be:	7023      	strb	r3, [r4, #0]
      break;
 80043c0:	e7e8      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_1667Hz;
 80043c2:	2308      	movs	r3, #8
 80043c4:	7023      	strb	r3, [r4, #0]
      break;
 80043c6:	e7e5      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_3333Hz;
 80043c8:	2309      	movs	r3, #9
 80043ca:	7023      	strb	r3, [r4, #0]
      break;
 80043cc:	e7e2      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_6667Hz;
 80043ce:	230a      	movs	r3, #10
 80043d0:	7023      	strb	r3, [r4, #0]
      break;
 80043d2:	e7df      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_1Hz6;
 80043d4:	230b      	movs	r3, #11
 80043d6:	7023      	strb	r3, [r4, #0]
      break;
 80043d8:	e7dc      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>
      *val = LSM6DSO_XL_ODR_OFF;
 80043da:	2300      	movs	r3, #0
 80043dc:	7023      	strb	r3, [r4, #0]
  return ret;
 80043de:	e7d9      	b.n	8004394 <lsm6dso_xl_data_rate_get+0x2e>

080043e0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80043e0:	b530      	push	{r4, r5, lr}
 80043e2:	b083      	sub	sp, #12
 80043e4:	4604      	mov	r4, r0
 80043e6:	460d      	mov	r5, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80043e8:	2301      	movs	r3, #1
 80043ea:	aa01      	add	r2, sp, #4
 80043ec:	2111      	movs	r1, #17
 80043ee:	f7ff ff6b 	bl	80042c8 <lsm6dso_read_reg>

  if (ret == 0)
 80043f2:	b108      	cbz	r0, 80043f8 <lsm6dso_gy_full_scale_set+0x18>
    reg.fs_g = (uint8_t) val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80043f4:	b003      	add	sp, #12
 80043f6:	bd30      	pop	{r4, r5, pc}
    reg.fs_g = (uint8_t) val;
 80043f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80043fc:	f365 0343 	bfi	r3, r5, #1, #3
 8004400:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004404:	2301      	movs	r3, #1
 8004406:	aa01      	add	r2, sp, #4
 8004408:	2111      	movs	r1, #17
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff ff61 	bl	80042d2 <lsm6dso_write_reg>
  return ret;
 8004410:	e7f0      	b.n	80043f4 <lsm6dso_gy_full_scale_set+0x14>

08004412 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8004412:	b510      	push	{r4, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	460c      	mov	r4, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004418:	2301      	movs	r3, #1
 800441a:	aa01      	add	r2, sp, #4
 800441c:	2111      	movs	r1, #17
 800441e:	f7ff ff53 	bl	80042c8 <lsm6dso_read_reg>

  switch (reg.fs_g)
 8004422:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004426:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800442a:	2b06      	cmp	r3, #6
 800442c:	d815      	bhi.n	800445a <lsm6dso_gy_full_scale_get+0x48>
 800442e:	e8df f003 	tbb	[pc, r3]
 8004432:	0804      	.short	0x0804
 8004434:	140e140b 	.word	0x140e140b
 8004438:	11          	.byte	0x11
 8004439:	00          	.byte	0x00
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 800443a:	2300      	movs	r3, #0
 800443c:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_250dps;
      break;
  }

  return ret;
}
 800443e:	b002      	add	sp, #8
 8004440:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_125dps;
 8004442:	2301      	movs	r3, #1
 8004444:	7023      	strb	r3, [r4, #0]
      break;
 8004446:	e7fa      	b.n	800443e <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_500dps;
 8004448:	2302      	movs	r3, #2
 800444a:	7023      	strb	r3, [r4, #0]
      break;
 800444c:	e7f7      	b.n	800443e <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_1000dps;
 800444e:	2304      	movs	r3, #4
 8004450:	7023      	strb	r3, [r4, #0]
      break;
 8004452:	e7f4      	b.n	800443e <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_2000dps;
 8004454:	2306      	movs	r3, #6
 8004456:	7023      	strb	r3, [r4, #0]
      break;
 8004458:	e7f1      	b.n	800443e <lsm6dso_gy_full_scale_get+0x2c>
      *val = LSM6DSO_250dps;
 800445a:	2300      	movs	r3, #0
 800445c:	7023      	strb	r3, [r4, #0]
  return ret;
 800445e:	e7ee      	b.n	800443e <lsm6dso_gy_full_scale_get+0x2c>

08004460 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8004460:	b510      	push	{r4, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	460c      	mov	r4, r1
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004466:	2301      	movs	r3, #1
 8004468:	aa01      	add	r2, sp, #4
 800446a:	2111      	movs	r1, #17
 800446c:	f7ff ff2c 	bl	80042c8 <lsm6dso_read_reg>

  switch (reg.odr_g)
 8004470:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	2b0a      	cmp	r3, #10
 8004478:	d829      	bhi.n	80044ce <lsm6dso_gy_data_rate_get+0x6e>
 800447a:	e8df f003 	tbb	[pc, r3]
 800447e:	0a06      	.short	0x0a06
 8004480:	1613100d 	.word	0x1613100d
 8004484:	221f1c19 	.word	0x221f1c19
 8004488:	25          	.byte	0x25
 8004489:	00          	.byte	0x00
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800448a:	2300      	movs	r3, #0
 800448c:	7023      	strb	r3, [r4, #0]
      *val = LSM6DSO_GY_ODR_OFF;
      break;
  }

  return ret;
}
 800448e:	b002      	add	sp, #8
 8004490:	bd10      	pop	{r4, pc}
      *val = LSM6DSO_GY_ODR_12Hz5;
 8004492:	2301      	movs	r3, #1
 8004494:	7023      	strb	r3, [r4, #0]
      break;
 8004496:	e7fa      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_26Hz;
 8004498:	2302      	movs	r3, #2
 800449a:	7023      	strb	r3, [r4, #0]
      break;
 800449c:	e7f7      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_52Hz;
 800449e:	2303      	movs	r3, #3
 80044a0:	7023      	strb	r3, [r4, #0]
      break;
 80044a2:	e7f4      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_104Hz;
 80044a4:	2304      	movs	r3, #4
 80044a6:	7023      	strb	r3, [r4, #0]
      break;
 80044a8:	e7f1      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_208Hz;
 80044aa:	2305      	movs	r3, #5
 80044ac:	7023      	strb	r3, [r4, #0]
      break;
 80044ae:	e7ee      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_417Hz;
 80044b0:	2306      	movs	r3, #6
 80044b2:	7023      	strb	r3, [r4, #0]
      break;
 80044b4:	e7eb      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_833Hz;
 80044b6:	2307      	movs	r3, #7
 80044b8:	7023      	strb	r3, [r4, #0]
      break;
 80044ba:	e7e8      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_1667Hz;
 80044bc:	2308      	movs	r3, #8
 80044be:	7023      	strb	r3, [r4, #0]
      break;
 80044c0:	e7e5      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_3333Hz;
 80044c2:	2309      	movs	r3, #9
 80044c4:	7023      	strb	r3, [r4, #0]
      break;
 80044c6:	e7e2      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_6667Hz;
 80044c8:	230a      	movs	r3, #10
 80044ca:	7023      	strb	r3, [r4, #0]
      break;
 80044cc:	e7df      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>
      *val = LSM6DSO_GY_ODR_OFF;
 80044ce:	2300      	movs	r3, #0
 80044d0:	7023      	strb	r3, [r4, #0]
  return ret;
 80044d2:	e7dc      	b.n	800448e <lsm6dso_gy_data_rate_get+0x2e>

080044d4 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80044d4:	b530      	push	{r4, r5, lr}
 80044d6:	b083      	sub	sp, #12
 80044d8:	4604      	mov	r4, r0
 80044da:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80044dc:	2301      	movs	r3, #1
 80044de:	aa01      	add	r2, sp, #4
 80044e0:	2112      	movs	r1, #18
 80044e2:	f7ff fef1 	bl	80042c8 <lsm6dso_read_reg>

  if (ret == 0)
 80044e6:	b108      	cbz	r0, 80044ec <lsm6dso_block_data_update_set+0x18>
    reg.bdu = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80044e8:	b003      	add	sp, #12
 80044ea:	bd30      	pop	{r4, r5, pc}
    reg.bdu = val;
 80044ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80044f0:	f365 1386 	bfi	r3, r5, #6, #1
 80044f4:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80044f8:	2301      	movs	r3, #1
 80044fa:	aa01      	add	r2, sp, #4
 80044fc:	2112      	movs	r1, #18
 80044fe:	4620      	mov	r0, r4
 8004500:	f7ff fee7 	bl	80042d2 <lsm6dso_write_reg>
  return ret;
 8004504:	e7f0      	b.n	80044e8 <lsm6dso_block_data_update_set+0x14>

08004506 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8004506:	b510      	push	{r4, lr}
 8004508:	b082      	sub	sp, #8
 800450a:	460c      	mov	r4, r1
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
 800450c:	2301      	movs	r3, #1
 800450e:	aa01      	add	r2, sp, #4
 8004510:	211e      	movs	r1, #30
 8004512:	f7ff fed9 	bl	80042c8 <lsm6dso_read_reg>
  *val = reg.xlda;
 8004516:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800451a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800451e:	7023      	strb	r3, [r4, #0]

  return ret;
}
 8004520:	b002      	add	sp, #8
 8004522:	bd10      	pop	{r4, pc}

08004524 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004524:	b510      	push	{r4, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800452a:	2306      	movs	r3, #6
 800452c:	466a      	mov	r2, sp
 800452e:	2122      	movs	r1, #34	@ 0x22
 8004530:	f7ff feca 	bl	80042c8 <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
 8004534:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004538:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800453a:	f89d 3000 	ldrb.w	r3, [sp]
 800453e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004542:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8004544:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004548:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800454a:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800454e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004552:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8004554:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004558:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800455a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800455e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004562:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8004564:	b002      	add	sp, #8
 8004566:	bd10      	pop	{r4, pc}

08004568 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004568:	b510      	push	{r4, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800456e:	2306      	movs	r3, #6
 8004570:	466a      	mov	r2, sp
 8004572:	2128      	movs	r1, #40	@ 0x28
 8004574:	f7ff fea8 	bl	80042c8 <lsm6dso_read_reg>
  val[0] = (int16_t)buff[1];
 8004578:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800457c:	8022      	strh	r2, [r4, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800457e:	f89d 3000 	ldrb.w	r3, [sp]
 8004582:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004586:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
 8004588:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800458c:	8062      	strh	r2, [r4, #2]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800458e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004592:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004596:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
 8004598:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800459c:	80a2      	strh	r2, [r4, #4]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800459e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80045a2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80045a6:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 80045a8:	b002      	add	sp, #8
 80045aa:	bd10      	pop	{r4, pc}

080045ac <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80045ac:	b530      	push	{r4, r5, lr}
 80045ae:	b083      	sub	sp, #12
 80045b0:	4604      	mov	r4, r0
 80045b2:	460d      	mov	r5, r1
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80045b4:	2301      	movs	r3, #1
 80045b6:	aa01      	add	r2, sp, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	f7ff fe85 	bl	80042c8 <lsm6dso_read_reg>

  if (ret == 0)
 80045be:	b108      	cbz	r0, 80045c4 <lsm6dso_mem_bank_set+0x18>
    reg.reg_access = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
  }

  return ret;
}
 80045c0:	b003      	add	sp, #12
 80045c2:	bd30      	pop	{r4, r5, pc}
    reg.reg_access = (uint8_t)val;
 80045c4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80045c8:	f365 1387 	bfi	r3, r5, #6, #2
 80045cc:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80045d0:	2301      	movs	r3, #1
 80045d2:	aa01      	add	r2, sp, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4620      	mov	r0, r4
 80045d8:	f7ff fe7b 	bl	80042d2 <lsm6dso_write_reg>
  return ret;
 80045dc:	e7f0      	b.n	80045c0 <lsm6dso_mem_bank_set+0x14>

080045de <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80045de:	b508      	push	{r3, lr}
 80045e0:	460a      	mov	r2, r1
  int32_t ret;

  ret = my_read_reg(ctx->handle, LSM6DSO_WHO_AM_I, buff, 1);
 80045e2:	2301      	movs	r3, #1
 80045e4:	210f      	movs	r1, #15
 80045e6:	68c0      	ldr	r0, [r0, #12]
 80045e8:	f7fd fb88 	bl	8001cfc <my_read_reg>

  return ret;
}
 80045ec:	bd08      	pop	{r3, pc}

080045ee <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80045ee:	b530      	push	{r4, r5, lr}
 80045f0:	b083      	sub	sp, #12
 80045f2:	4604      	mov	r4, r0
 80045f4:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80045f6:	2301      	movs	r3, #1
 80045f8:	aa01      	add	r2, sp, #4
 80045fa:	2112      	movs	r1, #18
 80045fc:	f7ff fe64 	bl	80042c8 <lsm6dso_read_reg>

  if (ret == 0)
 8004600:	b108      	cbz	r0, 8004606 <lsm6dso_reset_set+0x18>
    reg.sw_reset = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004602:	b003      	add	sp, #12
 8004604:	bd30      	pop	{r4, r5, pc}
    reg.sw_reset = val;
 8004606:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800460a:	f365 0300 	bfi	r3, r5, #0, #1
 800460e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004612:	2301      	movs	r3, #1
 8004614:	aa01      	add	r2, sp, #4
 8004616:	2112      	movs	r1, #18
 8004618:	4620      	mov	r0, r4
 800461a:	f7ff fe5a 	bl	80042d2 <lsm6dso_write_reg>
  return ret;
 800461e:	e7f0      	b.n	8004602 <lsm6dso_reset_set+0x14>

08004620 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8004620:	b510      	push	{r4, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	460c      	mov	r4, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004626:	2301      	movs	r3, #1
 8004628:	aa01      	add	r2, sp, #4
 800462a:	2112      	movs	r1, #18
 800462c:	f7ff fe4c 	bl	80042c8 <lsm6dso_read_reg>
  *val = reg.sw_reset;
 8004630:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004634:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004638:	7023      	strb	r3, [r4, #0]

  return ret;
}
 800463a:	b002      	add	sp, #8
 800463c:	bd10      	pop	{r4, pc}

0800463e <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800463e:	b530      	push	{r4, r5, lr}
 8004640:	b083      	sub	sp, #12
 8004642:	4604      	mov	r4, r0
 8004644:	460d      	mov	r5, r1
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004646:	2301      	movs	r3, #1
 8004648:	aa01      	add	r2, sp, #4
 800464a:	2112      	movs	r1, #18
 800464c:	f7ff fe3c 	bl	80042c8 <lsm6dso_read_reg>

  if (ret == 0)
 8004650:	b108      	cbz	r0, 8004656 <lsm6dso_auto_increment_set+0x18>
    reg.if_inc = val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004652:	b003      	add	sp, #12
 8004654:	bd30      	pop	{r4, r5, pc}
    reg.if_inc = val;
 8004656:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800465a:	f365 0382 	bfi	r3, r5, #2, #1
 800465e:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004662:	2301      	movs	r3, #1
 8004664:	aa01      	add	r2, sp, #4
 8004666:	2112      	movs	r1, #18
 8004668:	4620      	mov	r0, r4
 800466a:	f7ff fe32 	bl	80042d2 <lsm6dso_write_reg>
  return ret;
 800466e:	e7f0      	b.n	8004652 <lsm6dso_auto_increment_set+0x14>

08004670 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8004670:	b530      	push	{r4, r5, lr}
 8004672:	b085      	sub	sp, #20
 8004674:	4604      	mov	r4, r0
 8004676:	460d      	mov	r5, r1
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = my_read_reg(ctx->handle, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004678:	2301      	movs	r3, #1
 800467a:	aa02      	add	r2, sp, #8
 800467c:	2118      	movs	r1, #24
 800467e:	68c0      	ldr	r0, [r0, #12]
 8004680:	f7fd fb3c 	bl	8001cfc <my_read_reg>

  if(val == LSM6DSO_I3C_DISABLE)
 8004684:	2d80      	cmp	r5, #128	@ 0x80
 8004686:	d04a      	beq.n	800471e <lsm6dso_i3c_disable_set+0xae>
	  ctrl9_xl.not_used_01 = 1;
  }

  else
  {
	  ctrl9_xl.i3c_disable = 0;
 8004688:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800468c:	f36f 0341 	bfc	r3, #1, #1
 8004690:	f88d 3008 	strb.w	r3, [sp, #8]
  }

  // Write the updated ctrl9_xl register to the LSM6DSO_CTRL9_XL register
  ret = my_write_reg(ctx->handle, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004694:	2301      	movs	r3, #1
 8004696:	aa02      	add	r2, sp, #8
 8004698:	2118      	movs	r1, #24
 800469a:	68e0      	ldr	r0, [r4, #12]
 800469c:	f7fd faee 	bl	8001c7c <my_write_reg>

  if(ret != 0)
 80046a0:	2800      	cmp	r0, #0
 80046a2:	d048      	beq.n	8004736 <lsm6dso_i3c_disable_set+0xc6>
  {
	  // handle write error
	  APP_LOG(TS_OFF, VLEVEL_M, "WRITE Error in lsm6dso_i3c_disable_set.\n\r");
 80046a4:	4b2e      	ldr	r3, [pc, #184]	@ (8004760 <lsm6dso_i3c_disable_set+0xf0>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	4611      	mov	r1, r2
 80046aa:	2002      	movs	r0, #2
 80046ac:	f009 faaa 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  else
  {
	  APP_LOG(TS_OFF, VLEVEL_M, "WRITE SUCCESS in lsm6dso_i3c_disable_set!!!\n\r");
  }

  ret = my_read_reg(ctx->handle, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80046b0:	2301      	movs	r3, #1
 80046b2:	aa02      	add	r2, sp, #8
 80046b4:	2118      	movs	r1, #24
 80046b6:	68e0      	ldr	r0, [r4, #12]
 80046b8:	f7fd fb20 	bl	8001cfc <my_read_reg>

  if(ret != 0)
 80046bc:	2800      	cmp	r0, #0
 80046be:	d041      	beq.n	8004744 <lsm6dso_i3c_disable_set+0xd4>
  {
	  // Handle read error
	  APP_LOG(TS_OFF, VLEVEL_M, "READ Error in lsm6dso_i3c_disable_set.\n\r");
 80046c0:	4b28      	ldr	r3, [pc, #160]	@ (8004764 <lsm6dso_i3c_disable_set+0xf4>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	4611      	mov	r1, r2
 80046c6:	2002      	movs	r0, #2
 80046c8:	f009 fa9c 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  else
  {
	  APP_LOG(TS_OFF, VLEVEL_M, "READ SUCCESS in lsm6dso_i3c_disable_set!!!\n\r");
  }

  ret = my_read_reg(ctx->handle, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80046cc:	2301      	movs	r3, #1
 80046ce:	aa02      	add	r2, sp, #8
 80046d0:	2118      	movs	r1, #24
 80046d2:	68e0      	ldr	r0, [r4, #12]
 80046d4:	f7fd fb12 	bl	8001cfc <my_read_reg>
  APP_LOG(TS_OFF, VLEVEL_M, "CTRL9_XL register value: 0x%02X\n\r", ctrl9_xl);
 80046d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80046dc:	f88d 3000 	strb.w	r3, [sp]
 80046e0:	4b21      	ldr	r3, [pc, #132]	@ (8004768 <lsm6dso_i3c_disable_set+0xf8>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	4611      	mov	r1, r2
 80046e6:	2002      	movs	r0, #2
 80046e8:	f009 fa8c 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>

  //check if I3C_Disable bit is set correctly
  if(ctrl9_xl.i3c_disable == 1)
 80046ec:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80046f0:	f013 0f02 	tst.w	r3, #2
 80046f4:	d02d      	beq.n	8004752 <lsm6dso_i3c_disable_set+0xe2>
  {
	  APP_LOG(TS_OFF, VLEVEL_M, "I3C_disable bit is set correctly!!!\n\r");
 80046f6:	4b1d      	ldr	r3, [pc, #116]	@ (800476c <lsm6dso_i3c_disable_set+0xfc>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	4611      	mov	r1, r2
 80046fc:	2002      	movs	r0, #2
 80046fe:	f009 fa81 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
	  APP_LOG(TS_OFF, VLEVEL_M, "I3C_disable set bit FAILED.\n\r");
  }


  // Update the I3C_BUS_AVB register
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004702:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004706:	f365 03c4 	bfi	r3, r5, #3, #2
 800470a:	f88d 300c 	strb.w	r3, [sp, #12]
  ret = my_write_reg(ctx->handle, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 800470e:	2301      	movs	r3, #1
 8004710:	aa03      	add	r2, sp, #12
 8004712:	2162      	movs	r1, #98	@ 0x62
 8004714:	68e0      	ldr	r0, [r4, #12]
 8004716:	f7fd fab1 	bl	8001c7c <my_write_reg>
//    ret = my_write_reg(ctx->handle, LSM6DSO_I3C_BUS_AVB,
//                            (uint8_t *)&i3c_bus_avb, 1);
//  }

  return ret;
}
 800471a:	b005      	add	sp, #20
 800471c:	bd30      	pop	{r4, r5, pc}
	  ctrl9_xl.i3c_disable = 1;
 800471e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004722:	f043 0302 	orr.w	r3, r3, #2
 8004726:	f88d 3008 	strb.w	r3, [sp, #8]
	  ctrl9_xl.not_used_01 = 1;
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	f88d 3008 	strb.w	r3, [sp, #8]
 8004734:	e7ae      	b.n	8004694 <lsm6dso_i3c_disable_set+0x24>
	  APP_LOG(TS_OFF, VLEVEL_M, "WRITE SUCCESS in lsm6dso_i3c_disable_set!!!\n\r");
 8004736:	4b0e      	ldr	r3, [pc, #56]	@ (8004770 <lsm6dso_i3c_disable_set+0x100>)
 8004738:	2200      	movs	r2, #0
 800473a:	4611      	mov	r1, r2
 800473c:	2002      	movs	r0, #2
 800473e:	f009 fa61 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 8004742:	e7b5      	b.n	80046b0 <lsm6dso_i3c_disable_set+0x40>
	  APP_LOG(TS_OFF, VLEVEL_M, "READ SUCCESS in lsm6dso_i3c_disable_set!!!\n\r");
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <lsm6dso_i3c_disable_set+0x104>)
 8004746:	2200      	movs	r2, #0
 8004748:	4611      	mov	r1, r2
 800474a:	2002      	movs	r0, #2
 800474c:	f009 fa5a 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 8004750:	e7bc      	b.n	80046cc <lsm6dso_i3c_disable_set+0x5c>
	  APP_LOG(TS_OFF, VLEVEL_M, "I3C_disable set bit FAILED.\n\r");
 8004752:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <lsm6dso_i3c_disable_set+0x108>)
 8004754:	2200      	movs	r2, #0
 8004756:	4611      	mov	r1, r2
 8004758:	2002      	movs	r0, #2
 800475a:	f009 fa53 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 800475e:	e7d0      	b.n	8004702 <lsm6dso_i3c_disable_set+0x92>
 8004760:	08011a88 	.word	0x08011a88
 8004764:	08011ae4 	.word	0x08011ae4
 8004768:	08011b40 	.word	0x08011b40
 800476c:	08011b64 	.word	0x08011b64
 8004770:	08011ab4 	.word	0x08011ab4
 8004774:	08011b10 	.word	0x08011b10
 8004778:	08011b8c 	.word	0x08011b8c

0800477c <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 800477c:	b530      	push	{r4, r5, lr}
 800477e:	b083      	sub	sp, #12
 8004780:	4604      	mov	r4, r0
 8004782:	460d      	mov	r5, r1
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004784:	2301      	movs	r3, #1
 8004786:	aa01      	add	r2, sp, #4
 8004788:	210a      	movs	r1, #10
 800478a:	f7ff fd9d 	bl	80042c8 <lsm6dso_read_reg>

  if (ret == 0)
 800478e:	b108      	cbz	r0, 8004794 <lsm6dso_fifo_mode_set+0x18>
    reg.fifo_mode = (uint8_t)val;
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
  }

  return ret;
}
 8004790:	b003      	add	sp, #12
 8004792:	bd30      	pop	{r4, r5, pc}
    reg.fifo_mode = (uint8_t)val;
 8004794:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004798:	f365 0302 	bfi	r3, r5, #0, #3
 800479c:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80047a0:	2301      	movs	r3, #1
 80047a2:	aa01      	add	r2, sp, #4
 80047a4:	210a      	movs	r1, #10
 80047a6:	4620      	mov	r0, r4
 80047a8:	f7ff fd93 	bl	80042d2 <lsm6dso_write_reg>
  return ret;
 80047ac:	e7f0      	b.n	8004790 <lsm6dso_fifo_mode_set+0x14>

080047ae <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80047ae:	b538      	push	{r3, r4, r5, lr}
 80047b0:	4604      	mov	r4, r0
 80047b2:	460d      	mov	r5, r1
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80047b4:	2102      	movs	r1, #2
 80047b6:	f7ff fef9 	bl	80045ac <lsm6dso_mem_bank_set>

  if (ret == 0)
 80047ba:	b100      	cbz	r0, 80047be <lsm6dso_fsm_enable_get+0x10>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80047be:	2302      	movs	r3, #2
 80047c0:	462a      	mov	r2, r5
 80047c2:	2146      	movs	r1, #70	@ 0x46
 80047c4:	4620      	mov	r0, r4
 80047c6:	f7ff fd7f 	bl	80042c8 <lsm6dso_read_reg>
  if (ret == 0)
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d1f6      	bne.n	80047bc <lsm6dso_fsm_enable_get+0xe>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80047ce:	2100      	movs	r1, #0
 80047d0:	4620      	mov	r0, r4
 80047d2:	f7ff feeb 	bl	80045ac <lsm6dso_mem_bank_set>
  return ret;
 80047d6:	e7f1      	b.n	80047bc <lsm6dso_fsm_enable_get+0xe>

080047d8 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80047d8:	b530      	push	{r4, r5, lr}
 80047da:	b083      	sub	sp, #12
 80047dc:	4605      	mov	r5, r0
 80047de:	460c      	mov	r4, r1
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80047e0:	2102      	movs	r1, #2
 80047e2:	f7ff fee3 	bl	80045ac <lsm6dso_mem_bank_set>

  if (ret == 0)
 80047e6:	b108      	cbz	r0, 80047ec <lsm6dso_fsm_data_rate_get+0x14>

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
  }

  return ret;
}
 80047e8:	b003      	add	sp, #12
 80047ea:	bd30      	pop	{r4, r5, pc}
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 80047ec:	2301      	movs	r3, #1
 80047ee:	aa01      	add	r2, sp, #4
 80047f0:	215f      	movs	r1, #95	@ 0x5f
 80047f2:	4628      	mov	r0, r5
 80047f4:	f7ff fd68 	bl	80042c8 <lsm6dso_read_reg>
  if (ret == 0)
 80047f8:	2800      	cmp	r0, #0
 80047fa:	d1f5      	bne.n	80047e8 <lsm6dso_fsm_data_rate_get+0x10>
    switch (reg.fsm_odr)
 80047fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004800:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004804:	2b03      	cmp	r3, #3
 8004806:	d813      	bhi.n	8004830 <lsm6dso_fsm_data_rate_get+0x58>
 8004808:	e8df f003 	tbb	[pc, r3]
 800480c:	0f0c0902 	.word	0x0f0c0902
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8004810:	2300      	movs	r3, #0
 8004812:	7023      	strb	r3, [r4, #0]
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004814:	2100      	movs	r1, #0
 8004816:	4628      	mov	r0, r5
 8004818:	f7ff fec8 	bl	80045ac <lsm6dso_mem_bank_set>
  return ret;
 800481c:	e7e4      	b.n	80047e8 <lsm6dso_fsm_data_rate_get+0x10>
        *val = LSM6DSO_ODR_FSM_26Hz;
 800481e:	2301      	movs	r3, #1
 8004820:	7023      	strb	r3, [r4, #0]
        break;
 8004822:	e7f7      	b.n	8004814 <lsm6dso_fsm_data_rate_get+0x3c>
        *val = LSM6DSO_ODR_FSM_52Hz;
 8004824:	2302      	movs	r3, #2
 8004826:	7023      	strb	r3, [r4, #0]
        break;
 8004828:	e7f4      	b.n	8004814 <lsm6dso_fsm_data_rate_get+0x3c>
        *val = LSM6DSO_ODR_FSM_104Hz;
 800482a:	2303      	movs	r3, #3
 800482c:	7023      	strb	r3, [r4, #0]
        break;
 800482e:	e7f1      	b.n	8004814 <lsm6dso_fsm_data_rate_get+0x3c>
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8004830:	2300      	movs	r3, #0
 8004832:	7023      	strb	r3, [r4, #0]
        break;
 8004834:	e7ee      	b.n	8004814 <lsm6dso_fsm_data_rate_get+0x3c>

08004836 <lsm6dso_xl_data_rate_set>:
{
 8004836:	b530      	push	{r4, r5, lr}
 8004838:	b083      	sub	sp, #12
 800483a:	4604      	mov	r4, r0
 800483c:	460d      	mov	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 800483e:	a901      	add	r1, sp, #4
 8004840:	f7ff ffb5 	bl	80047ae <lsm6dso_fsm_enable_get>
  if (ret == 0)
 8004844:	4602      	mov	r2, r0
 8004846:	bbc8      	cbnz	r0, 80048bc <lsm6dso_xl_data_rate_set+0x86>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004848:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800484c:	f001 0301 	and.w	r3, r1, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004850:	f3c1 0040 	ubfx	r0, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004854:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004856:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 800485a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
 800485c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004860:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004862:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004866:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004868:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 800486c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 800486e:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004872:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004874:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004878:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800487c:	f001 0001 	and.w	r0, r1, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004880:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm10_en |
 8004882:	f3c1 0040 	ubfx	r0, r1, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 8004886:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm11_en |
 8004888:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 800488c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm12_en |
 800488e:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 8004892:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm13_en |
 8004894:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 8004898:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm14_en |
 800489a:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 800489e:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm15_en |
 80048a0:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 80048a4:	4303      	orrs	r3, r0
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80048a6:	ea53 13d1 	orrs.w	r3, r3, r1, lsr #7
 80048aa:	d10c      	bne.n	80048c6 <lsm6dso_xl_data_rate_set+0x90>
  if (ret == 0)
 80048ac:	b942      	cbnz	r2, 80048c0 <lsm6dso_xl_data_rate_set+0x8a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80048ae:	2301      	movs	r3, #1
 80048b0:	466a      	mov	r2, sp
 80048b2:	2110      	movs	r1, #16
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7ff fd07 	bl	80042c8 <lsm6dso_read_reg>
 80048ba:	4602      	mov	r2, r0
  if (ret == 0)
 80048bc:	2a00      	cmp	r2, #0
 80048be:	d037      	beq.n	8004930 <lsm6dso_xl_data_rate_set+0xfa>
}
 80048c0:	4610      	mov	r0, r2
 80048c2:	b003      	add	sp, #12
 80048c4:	bd30      	pop	{r4, r5, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80048c6:	f10d 0103 	add.w	r1, sp, #3
 80048ca:	4620      	mov	r0, r4
 80048cc:	f7ff ff84 	bl	80047d8 <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 80048d0:	4602      	mov	r2, r0
 80048d2:	2800      	cmp	r0, #0
 80048d4:	d1f4      	bne.n	80048c0 <lsm6dso_xl_data_rate_set+0x8a>
        switch (fsm_odr)
 80048d6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80048da:	2b03      	cmp	r3, #3
 80048dc:	d8e6      	bhi.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
 80048de:	e8df f003 	tbb	[pc, r3]
 80048e2:	0602      	.short	0x0602
 80048e4:	120b      	.short	0x120b
            if (val == LSM6DSO_XL_ODR_OFF)
 80048e6:	2d00      	cmp	r5, #0
 80048e8:	d1e0      	bne.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80048ea:	2501      	movs	r5, #1
 80048ec:	e7de      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
            if (val == LSM6DSO_XL_ODR_OFF)
 80048ee:	b19d      	cbz	r5, 8004918 <lsm6dso_xl_data_rate_set+0xe2>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80048f0:	2d01      	cmp	r5, #1
 80048f2:	d1db      	bne.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80048f4:	2502      	movs	r5, #2
 80048f6:	e7d9      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
            if (val == LSM6DSO_XL_ODR_OFF)
 80048f8:	b185      	cbz	r5, 800491c <lsm6dso_xl_data_rate_set+0xe6>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80048fa:	2d01      	cmp	r5, #1
 80048fc:	d010      	beq.n	8004920 <lsm6dso_xl_data_rate_set+0xea>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80048fe:	2d02      	cmp	r5, #2
 8004900:	d1d4      	bne.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004902:	2503      	movs	r5, #3
 8004904:	e7d2      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
            if (val == LSM6DSO_XL_ODR_OFF)
 8004906:	b16d      	cbz	r5, 8004924 <lsm6dso_xl_data_rate_set+0xee>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004908:	2d02      	cmp	r5, #2
 800490a:	d00d      	beq.n	8004928 <lsm6dso_xl_data_rate_set+0xf2>
 800490c:	2d03      	cmp	r5, #3
 800490e:	d00d      	beq.n	800492c <lsm6dso_xl_data_rate_set+0xf6>
 8004910:	2d01      	cmp	r5, #1
 8004912:	d1cb      	bne.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
            if (val == LSM6DSO_XL_ODR_OFF)
 8004914:	2504      	movs	r5, #4
 8004916:	e7c9      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004918:	2502      	movs	r5, #2
 800491a:	e7c7      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800491c:	2503      	movs	r5, #3
 800491e:	e7c5      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004920:	2503      	movs	r5, #3
 8004922:	e7c3      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004924:	2504      	movs	r5, #4
 8004926:	e7c1      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
            if (val == LSM6DSO_XL_ODR_OFF)
 8004928:	2504      	movs	r5, #4
 800492a:	e7bf      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
 800492c:	2504      	movs	r5, #4
 800492e:	e7bd      	b.n	80048ac <lsm6dso_xl_data_rate_set+0x76>
    reg.odr_xl = (uint8_t) odr_xl;
 8004930:	f89d 3000 	ldrb.w	r3, [sp]
 8004934:	f365 1307 	bfi	r3, r5, #4, #4
 8004938:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800493c:	2301      	movs	r3, #1
 800493e:	466a      	mov	r2, sp
 8004940:	2110      	movs	r1, #16
 8004942:	4620      	mov	r0, r4
 8004944:	f7ff fcc5 	bl	80042d2 <lsm6dso_write_reg>
 8004948:	4602      	mov	r2, r0
  return ret;
 800494a:	e7b9      	b.n	80048c0 <lsm6dso_xl_data_rate_set+0x8a>

0800494c <lsm6dso_gy_data_rate_set>:
{
 800494c:	b530      	push	{r4, r5, lr}
 800494e:	b083      	sub	sp, #12
 8004950:	4604      	mov	r4, r0
 8004952:	460d      	mov	r5, r1
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004954:	a901      	add	r1, sp, #4
 8004956:	f7ff ff2a 	bl	80047ae <lsm6dso_fsm_enable_get>
  if (ret == 0)
 800495a:	4602      	mov	r2, r0
 800495c:	bbc8      	cbnz	r0, 80049d2 <lsm6dso_gy_data_rate_set+0x86>
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800495e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004962:	f001 0301 	and.w	r3, r1, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004966:	f3c1 0040 	ubfx	r0, r1, #1, #1
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800496a:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm3_en  |
 800496c:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_a.fsm2_en  |
 8004970:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm4_en  |
 8004972:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_a.fsm3_en  |
 8004976:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004978:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_a.fsm4_en  |
 800497c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm6_en  |
 800497e:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_a.fsm5_en  |
 8004982:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 8004984:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_a.fsm6_en  |
 8004988:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_a.fsm7_en  |
 800498a:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
         fsm_enable.fsm_enable_b.fsm9_en  |
 800498e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004992:	f001 0001 	and.w	r0, r1, #1
         fsm_enable.fsm_enable_a.fsm8_en  |
 8004996:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm10_en |
 8004998:	f3c1 0040 	ubfx	r0, r1, #1, #1
         fsm_enable.fsm_enable_b.fsm9_en  |
 800499c:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm11_en |
 800499e:	f3c1 0080 	ubfx	r0, r1, #2, #1
         fsm_enable.fsm_enable_b.fsm10_en |
 80049a2:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm12_en |
 80049a4:	f3c1 00c0 	ubfx	r0, r1, #3, #1
         fsm_enable.fsm_enable_b.fsm11_en |
 80049a8:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm13_en |
 80049aa:	f3c1 1000 	ubfx	r0, r1, #4, #1
         fsm_enable.fsm_enable_b.fsm12_en |
 80049ae:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm14_en |
 80049b0:	f3c1 1040 	ubfx	r0, r1, #5, #1
         fsm_enable.fsm_enable_b.fsm13_en |
 80049b4:	4303      	orrs	r3, r0
         fsm_enable.fsm_enable_b.fsm15_en |
 80049b6:	f3c1 1080 	ubfx	r0, r1, #6, #1
         fsm_enable.fsm_enable_b.fsm14_en |
 80049ba:	4303      	orrs	r3, r0
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80049bc:	ea53 13d1 	orrs.w	r3, r3, r1, lsr #7
 80049c0:	d10c      	bne.n	80049dc <lsm6dso_gy_data_rate_set+0x90>
  if (ret == 0)
 80049c2:	b942      	cbnz	r2, 80049d6 <lsm6dso_gy_data_rate_set+0x8a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80049c4:	2301      	movs	r3, #1
 80049c6:	466a      	mov	r2, sp
 80049c8:	2111      	movs	r1, #17
 80049ca:	4620      	mov	r0, r4
 80049cc:	f7ff fc7c 	bl	80042c8 <lsm6dso_read_reg>
 80049d0:	4602      	mov	r2, r0
  if (ret == 0)
 80049d2:	2a00      	cmp	r2, #0
 80049d4:	d037      	beq.n	8004a46 <lsm6dso_gy_data_rate_set+0xfa>
}
 80049d6:	4610      	mov	r0, r2
 80049d8:	b003      	add	sp, #12
 80049da:	bd30      	pop	{r4, r5, pc}
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80049dc:	f10d 0103 	add.w	r1, sp, #3
 80049e0:	4620      	mov	r0, r4
 80049e2:	f7ff fef9 	bl	80047d8 <lsm6dso_fsm_data_rate_get>
      if (ret == 0)
 80049e6:	4602      	mov	r2, r0
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d1f4      	bne.n	80049d6 <lsm6dso_gy_data_rate_set+0x8a>
        switch (fsm_odr)
 80049ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d8e6      	bhi.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
 80049f4:	e8df f003 	tbb	[pc, r3]
 80049f8:	120b0602 	.word	0x120b0602
            if (val == LSM6DSO_GY_ODR_OFF)
 80049fc:	2d00      	cmp	r5, #0
 80049fe:	d1e0      	bne.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8004a00:	2501      	movs	r5, #1
 8004a02:	e7de      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
            if (val == LSM6DSO_GY_ODR_OFF)
 8004a04:	b19d      	cbz	r5, 8004a2e <lsm6dso_gy_data_rate_set+0xe2>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004a06:	2d01      	cmp	r5, #1
 8004a08:	d1db      	bne.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004a0a:	2502      	movs	r5, #2
 8004a0c:	e7d9      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
            if (val == LSM6DSO_GY_ODR_OFF)
 8004a0e:	b185      	cbz	r5, 8004a32 <lsm6dso_gy_data_rate_set+0xe6>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004a10:	2d01      	cmp	r5, #1
 8004a12:	d010      	beq.n	8004a36 <lsm6dso_gy_data_rate_set+0xea>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8004a14:	2d02      	cmp	r5, #2
 8004a16:	d1d4      	bne.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004a18:	2503      	movs	r5, #3
 8004a1a:	e7d2      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
            if (val == LSM6DSO_GY_ODR_OFF)
 8004a1c:	b16d      	cbz	r5, 8004a3a <lsm6dso_gy_data_rate_set+0xee>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8004a1e:	2d02      	cmp	r5, #2
 8004a20:	d00d      	beq.n	8004a3e <lsm6dso_gy_data_rate_set+0xf2>
 8004a22:	2d03      	cmp	r5, #3
 8004a24:	d00d      	beq.n	8004a42 <lsm6dso_gy_data_rate_set+0xf6>
 8004a26:	2d01      	cmp	r5, #1
 8004a28:	d1cb      	bne.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
            if (val == LSM6DSO_GY_ODR_OFF)
 8004a2a:	2504      	movs	r5, #4
 8004a2c:	e7c9      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8004a2e:	2502      	movs	r5, #2
 8004a30:	e7c7      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004a32:	2503      	movs	r5, #3
 8004a34:	e7c5      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8004a36:	2503      	movs	r5, #3
 8004a38:	e7c3      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8004a3a:	2504      	movs	r5, #4
 8004a3c:	e7c1      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
            if (val == LSM6DSO_GY_ODR_OFF)
 8004a3e:	2504      	movs	r5, #4
 8004a40:	e7bf      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
 8004a42:	2504      	movs	r5, #4
 8004a44:	e7bd      	b.n	80049c2 <lsm6dso_gy_data_rate_set+0x76>
    reg.odr_g = (uint8_t) odr_gy;
 8004a46:	f89d 3000 	ldrb.w	r3, [sp]
 8004a4a:	f365 1307 	bfi	r3, r5, #4, #4
 8004a4e:	f88d 3000 	strb.w	r3, [sp]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8004a52:	2301      	movs	r3, #1
 8004a54:	466a      	mov	r2, sp
 8004a56:	2111      	movs	r1, #17
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7ff fc3a 	bl	80042d2 <lsm6dso_write_reg>
 8004a5e:	4602      	mov	r2, r0
  return ret;
 8004a60:	e7b9      	b.n	80049d6 <lsm6dso_gy_data_rate_set+0x8a>
	...

08004a64 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004a64:	4b11      	ldr	r3, [pc, #68]	@ (8004aac <HAL_InitTick+0x48>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b90b      	cbnz	r3, 8004a6e <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a6a:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8004a6c:	4770      	bx	lr
{
 8004a6e:	b510      	push	{r4, lr}
 8004a70:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004a72:	f001 fb05 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <HAL_InitTick+0x48>)
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a82:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a86:	f000 f8f1 	bl	8004c6c <HAL_SYSTICK_Config>
 8004a8a:	b968      	cbnz	r0, 8004aa8 <HAL_InitTick+0x44>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a8c:	2c0f      	cmp	r4, #15
 8004a8e:	d901      	bls.n	8004a94 <HAL_InitTick+0x30>
        status = HAL_ERROR;
 8004a90:	2001      	movs	r0, #1
 8004a92:	e00a      	b.n	8004aaa <HAL_InitTick+0x46>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a94:	2200      	movs	r2, #0
 8004a96:	4621      	mov	r1, r4
 8004a98:	f04f 30ff 	mov.w	r0, #4294967295
 8004a9c:	f000 f8ca 	bl	8004c34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004aa0:	4b03      	ldr	r3, [pc, #12]	@ (8004ab0 <HAL_InitTick+0x4c>)
 8004aa2:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e000      	b.n	8004aaa <HAL_InitTick+0x46>
      status = HAL_ERROR;
 8004aa8:	2001      	movs	r0, #1
}
 8004aaa:	bd10      	pop	{r4, pc}
 8004aac:	20000060 	.word	0x20000060
 8004ab0:	20000064 	.word	0x20000064

08004ab4 <HAL_Init>:
{
 8004ab4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ab6:	2003      	movs	r0, #3
 8004ab8:	f000 f8aa 	bl	8004c10 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004abc:	f001 fae0 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_Init+0x28>)
 8004ac2:	6018      	str	r0, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ac4:	200f      	movs	r0, #15
 8004ac6:	f7ff ffcd 	bl	8004a64 <HAL_InitTick>
 8004aca:	b110      	cbz	r0, 8004ad2 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8004acc:	2401      	movs	r4, #1
}
 8004ace:	4620      	mov	r0, r4
 8004ad0:	bd10      	pop	{r4, pc}
 8004ad2:	4604      	mov	r4, r0
    HAL_MspInit();
 8004ad4:	f7fd ff24 	bl	8002920 <HAL_MspInit>
 8004ad8:	e7f9      	b.n	8004ace <HAL_Init+0x1a>
 8004ada:	bf00      	nop
 8004adc:	20000004 	.word	0x20000004

08004ae0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004ae0:	4b03      	ldr	r3, [pc, #12]	@ (8004af0 <HAL_IncTick+0x10>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4a03      	ldr	r2, [pc, #12]	@ (8004af4 <HAL_IncTick+0x14>)
 8004ae6:	6811      	ldr	r1, [r2, #0]
 8004ae8:	440b      	add	r3, r1
 8004aea:	6013      	str	r3, [r2, #0]
}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20000060 	.word	0x20000060
 8004af4:	20000808 	.word	0x20000808

08004af8 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004af8:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004afc:	6913      	ldr	r3, [r2, #16]
 8004afe:	f023 0302 	bic.w	r3, r3, #2
 8004b02:	6113      	str	r3, [r2, #16]
}
 8004b04:	4770      	bx	lr

08004b06 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8004b06:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004b0a:	6913      	ldr	r3, [r2, #16]
 8004b0c:	f043 0302 	orr.w	r3, r3, #2
 8004b10:	6113      	str	r3, [r2, #16]
}
 8004b12:	4770      	bx	lr

08004b14 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004b14:	4a02      	ldr	r2, [pc, #8]	@ (8004b20 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8004b16:	6853      	ldr	r3, [r2, #4]
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8004b1e:	4770      	bx	lr
 8004b20:	e0042000 	.word	0xe0042000

08004b24 <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004b24:	4a02      	ldr	r2, [pc, #8]	@ (8004b30 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8004b26:	6853      	ldr	r3, [r2, #4]
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8004b2e:	4770      	bx	lr
 8004b30:	e0042000 	.word	0xe0042000

08004b34 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8004b34:	4a02      	ldr	r2, [pc, #8]	@ (8004b40 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8004b36:	6853      	ldr	r3, [r2, #4]
 8004b38:	f043 0304 	orr.w	r3, r3, #4
 8004b3c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8004b3e:	4770      	bx	lr
 8004b40:	e0042000 	.word	0xe0042000

08004b44 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004b44:	2800      	cmp	r0, #0
 8004b46:	db07      	blt.n	8004b58 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b48:	f000 021f 	and.w	r2, r0, #31
 8004b4c:	0940      	lsrs	r0, r0, #5
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4093      	lsls	r3, r2
 8004b52:	4a02      	ldr	r2, [pc, #8]	@ (8004b5c <__NVIC_EnableIRQ+0x18>)
 8004b54:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	e000e100 	.word	0xe000e100

08004b60 <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8004b60:	2800      	cmp	r0, #0
 8004b62:	db0c      	blt.n	8004b7e <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b64:	f000 021f 	and.w	r2, r0, #31
 8004b68:	0940      	lsrs	r0, r0, #5
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4093      	lsls	r3, r2
 8004b6e:	3020      	adds	r0, #32
 8004b70:	4a03      	ldr	r2, [pc, #12]	@ (8004b80 <__NVIC_DisableIRQ+0x20>)
 8004b72:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004b76:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b7a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8004b7e:	4770      	bx	lr
 8004b80:	e000e100 	.word	0xe000e100

08004b84 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8004b84:	2800      	cmp	r0, #0
 8004b86:	db08      	blt.n	8004b9a <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b88:	0109      	lsls	r1, r1, #4
 8004b8a:	b2c9      	uxtb	r1, r1
 8004b8c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004b90:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004b94:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8004b98:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b9a:	f000 000f 	and.w	r0, r0, #15
 8004b9e:	0109      	lsls	r1, r1, #4
 8004ba0:	b2c9      	uxtb	r1, r1
 8004ba2:	4b01      	ldr	r3, [pc, #4]	@ (8004ba8 <__NVIC_SetPriority+0x24>)
 8004ba4:	5419      	strb	r1, [r3, r0]
  }
}
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed14 	.word	0xe000ed14

08004bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bac:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bae:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bb2:	f1c0 0c07 	rsb	ip, r0, #7
 8004bb6:	f1bc 0f04 	cmp.w	ip, #4
 8004bba:	bf28      	it	cs
 8004bbc:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bc0:	1d03      	adds	r3, r0, #4
 8004bc2:	2b06      	cmp	r3, #6
 8004bc4:	d90f      	bls.n	8004be6 <NVIC_EncodePriority+0x3a>
 8004bc6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc8:	f04f 3eff 	mov.w	lr, #4294967295
 8004bcc:	fa0e f00c 	lsl.w	r0, lr, ip
 8004bd0:	ea21 0100 	bic.w	r1, r1, r0
 8004bd4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd6:	fa0e fe03 	lsl.w	lr, lr, r3
 8004bda:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8004bde:	ea41 0002 	orr.w	r0, r1, r2
 8004be2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004be6:	2300      	movs	r3, #0
 8004be8:	e7ee      	b.n	8004bc8 <NVIC_EncodePriority+0x1c>
	...

08004bec <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8004bec:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004bf0:	4905      	ldr	r1, [pc, #20]	@ (8004c08 <__NVIC_SystemReset+0x1c>)
 8004bf2:	68ca      	ldr	r2, [r1, #12]
 8004bf4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004bf8:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <__NVIC_SystemReset+0x20>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60cb      	str	r3, [r1, #12]
 8004bfe:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004c02:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004c04:	e7fd      	b.n	8004c02 <__NVIC_SystemReset+0x16>
 8004c06:	bf00      	nop
 8004c08:	e000ed00 	.word	0xe000ed00
 8004c0c:	05fa0004 	.word	0x05fa0004

08004c10 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c10:	4a07      	ldr	r2, [pc, #28]	@ (8004c30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004c12:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c14:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c1c:	0200      	lsls	r0, r0, #8
 8004c1e:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c22:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8004c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004c2c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004c2e:	4770      	bx	lr
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c38:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <HAL_NVIC_SetPriority+0x1c>)
 8004c3a:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c3c:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004c40:	f7ff ffb4 	bl	8004bac <NVIC_EncodePriority>
 8004c44:	4601      	mov	r1, r0
 8004c46:	4620      	mov	r0, r4
 8004c48:	f7ff ff9c 	bl	8004b84 <__NVIC_SetPriority>
}
 8004c4c:	bd10      	pop	{r4, pc}
 8004c4e:	bf00      	nop
 8004c50:	e000ed00 	.word	0xe000ed00

08004c54 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c54:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c56:	f7ff ff75 	bl	8004b44 <__NVIC_EnableIRQ>
}
 8004c5a:	bd08      	pop	{r3, pc}

08004c5c <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c5c:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c5e:	f7ff ff7f 	bl	8004b60 <__NVIC_DisableIRQ>
}
 8004c62:	bd08      	pop	{r3, pc}

08004c64 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004c64:	b508      	push	{r3, lr}
  /* System Reset */
  NVIC_SystemReset();
 8004c66:	f7ff ffc1 	bl	8004bec <__NVIC_SystemReset>
	...

08004c6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c6c:	3801      	subs	r0, #1
 8004c6e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004c72:	d20b      	bcs.n	8004c8c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004c78:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c7a:	4a05      	ldr	r2, [pc, #20]	@ (8004c90 <HAL_SYSTICK_Config+0x24>)
 8004c7c:	21f0      	movs	r1, #240	@ 0xf0
 8004c7e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c82:	2000      	movs	r0, #0
 8004c84:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c86:	2207      	movs	r2, #7
 8004c88:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c8a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004c8c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8004c8e:	4770      	bx	lr
 8004c90:	e000ed00 	.word	0xe000ed00

08004c94 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c94:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c96:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8004c98:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 8004c9c:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004ca0:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8004ca2:	b124      	cbz	r4, 8004cae <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ca4:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 8004ca6:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 8004caa:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004cae:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004cb0:	f004 0c1c 	and.w	ip, r4, #28
 8004cb4:	2401      	movs	r4, #1
 8004cb6:	fa04 f40c 	lsl.w	r4, r4, ip
 8004cba:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 8004cbe:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004cc2:	6804      	ldr	r4, [r0, #0]
 8004cc4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cc6:	6883      	ldr	r3, [r0, #8]
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	d005      	beq.n	8004cd8 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004ccc:	6803      	ldr	r3, [r0, #0]
 8004cce:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004cd0:	6803      	ldr	r3, [r0, #0]
 8004cd2:	60da      	str	r2, [r3, #12]
  }
}
 8004cd4:	bc10      	pop	{r4}
 8004cd6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8004cd8:	6803      	ldr	r3, [r0, #0]
 8004cda:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004cdc:	6803      	ldr	r3, [r0, #0]
 8004cde:	60d9      	str	r1, [r3, #12]
 8004ce0:	e7f8      	b.n	8004cd4 <DMA_SetConfig+0x40>
	...

08004ce4 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004ce4:	6803      	ldr	r3, [r0, #0]
 8004ce6:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d816      	bhi.n	8004d1a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004cec:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004cee:	f022 0203 	bic.w	r2, r2, #3
 8004cf2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004cf6:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 8004cfa:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	3b08      	subs	r3, #8
 8004d00:	4a0e      	ldr	r2, [pc, #56]	@ (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004d02:	fba2 2303 	umull	r2, r3, r2, r3
 8004d06:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004d08:	4a0d      	ldr	r2, [pc, #52]	@ (8004d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 8004d0a:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	2201      	movs	r2, #1
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8004d18:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004d1a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004d1c:	f022 0103 	bic.w	r1, r2, #3
 8004d20:	4a08      	ldr	r2, [pc, #32]	@ (8004d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004d22:	440a      	add	r2, r1
 8004d24:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	3b08      	subs	r3, #8
 8004d2a:	4a04      	ldr	r2, [pc, #16]	@ (8004d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	3307      	adds	r3, #7
 8004d34:	e7e8      	b.n	8004d08 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8004d36:	bf00      	nop
 8004d38:	40020407 	.word	0x40020407
 8004d3c:	cccccccd 	.word	0xcccccccd
 8004d40:	40020880 	.word	0x40020880
 8004d44:	4002081c 	.word	0x4002081c

08004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004d48:	6843      	ldr	r3, [r0, #4]
 8004d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004d4e:	4a07      	ldr	r2, [pc, #28]	@ (8004d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004d50:	441a      	add	r2, r3
 8004d52:	0092      	lsls	r2, r2, #2
 8004d54:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004d56:	4a06      	ldr	r2, [pc, #24]	@ (8004d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8004d58:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2201      	movs	r2, #1
 8004d62:	fa02 f303 	lsl.w	r3, r2, r3
 8004d66:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	1000823f 	.word	0x1000823f
 8004d70:	40020940 	.word	0x40020940

08004d74 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d060      	beq.n	8004e3a <HAL_DMA_Init+0xc6>
{
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d7c:	6802      	ldr	r2, [r0, #0]
 8004d7e:	4b30      	ldr	r3, [pc, #192]	@ (8004e40 <HAL_DMA_Init+0xcc>)
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d842      	bhi.n	8004e0a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004d84:	4b2f      	ldr	r3, [pc, #188]	@ (8004e44 <HAL_DMA_Init+0xd0>)
 8004d86:	4413      	add	r3, r2
 8004d88:	492f      	ldr	r1, [pc, #188]	@ (8004e48 <HAL_DMA_Init+0xd4>)
 8004d8a:	fba1 1303 	umull	r1, r3, r1, r3
 8004d8e:	091b      	lsrs	r3, r3, #4
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d94:	4b2d      	ldr	r3, [pc, #180]	@ (8004e4c <HAL_DMA_Init+0xd8>)
 8004d96:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004d9e:	6813      	ldr	r3, [r2, #0]
 8004da0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da8:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004daa:	6821      	ldr	r1, [r4, #0]
 8004dac:	680a      	ldr	r2, [r1, #0]
 8004dae:	68a3      	ldr	r3, [r4, #8]
 8004db0:	68e0      	ldr	r0, [r4, #12]
 8004db2:	4303      	orrs	r3, r0
 8004db4:	6920      	ldr	r0, [r4, #16]
 8004db6:	4303      	orrs	r3, r0
 8004db8:	6960      	ldr	r0, [r4, #20]
 8004dba:	4303      	orrs	r3, r0
 8004dbc:	69a0      	ldr	r0, [r4, #24]
 8004dbe:	4303      	orrs	r3, r0
 8004dc0:	69e0      	ldr	r0, [r4, #28]
 8004dc2:	4303      	orrs	r3, r0
 8004dc4:	6a20      	ldr	r0, [r4, #32]
 8004dc6:	4303      	orrs	r3, r0
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f7ff ff89 	bl	8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004dd2:	68a3      	ldr	r3, [r4, #8]
 8004dd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dd8:	d022      	beq.n	8004e20 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004dda:	6863      	ldr	r3, [r4, #4]
 8004ddc:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8004dde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004de6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004de8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004dea:	6863      	ldr	r3, [r4, #4]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d919      	bls.n	8004e26 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8004df6:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004df8:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8004e04:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8004e08:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004e0a:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <HAL_DMA_Init+0xdc>)
 8004e0c:	4413      	add	r3, r2
 8004e0e:	490e      	ldr	r1, [pc, #56]	@ (8004e48 <HAL_DMA_Init+0xd4>)
 8004e10:	fba1 1303 	umull	r1, r3, r1, r3
 8004e14:	091b      	lsrs	r3, r3, #4
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e54 <HAL_DMA_Init+0xe0>)
 8004e1c:	6403      	str	r3, [r0, #64]	@ 0x40
 8004e1e:	e7bb      	b.n	8004d98 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e20:	2300      	movs	r3, #0
 8004e22:	6063      	str	r3, [r4, #4]
 8004e24:	e7d9      	b.n	8004dda <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e26:	4620      	mov	r0, r4
 8004e28:	f7ff ff8e 	bl	8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e2c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004e2e:	2200      	movs	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e34:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004e36:	605a      	str	r2, [r3, #4]
 8004e38:	e7df      	b.n	8004dfa <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8004e3a:	2001      	movs	r0, #1
}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40020407 	.word	0x40020407
 8004e44:	bffdfff8 	.word	0xbffdfff8
 8004e48:	cccccccd 	.word	0xcccccccd
 8004e4c:	40020000 	.word	0x40020000
 8004e50:	bffdfbf8 	.word	0xbffdfbf8
 8004e54:	40020400 	.word	0x40020400

08004e58 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	d04b      	beq.n	8004ef4 <HAL_DMA_DeInit+0x9c>
{
 8004e5c:	b538      	push	{r3, r4, r5, lr}
 8004e5e:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004e60:	6802      	ldr	r2, [r0, #0]
 8004e62:	6813      	ldr	r3, [r2, #0]
 8004e64:	f023 0301 	bic.w	r3, r3, #1
 8004e68:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004e6a:	6802      	ldr	r2, [r0, #0]
 8004e6c:	4b22      	ldr	r3, [pc, #136]	@ (8004ef8 <HAL_DMA_DeInit+0xa0>)
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d82c      	bhi.n	8004ecc <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004e72:	4b22      	ldr	r3, [pc, #136]	@ (8004efc <HAL_DMA_DeInit+0xa4>)
 8004e74:	4413      	add	r3, r2
 8004e76:	4922      	ldr	r1, [pc, #136]	@ (8004f00 <HAL_DMA_DeInit+0xa8>)
 8004e78:	fba1 1303 	umull	r1, r3, r1, r3
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004e82:	4b20      	ldr	r3, [pc, #128]	@ (8004f04 <HAL_DMA_DeInit+0xac>)
 8004e84:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 8004e86:	2500      	movs	r5, #0
 8004e88:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004e8a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004e8c:	f003 021c 	and.w	r2, r3, #28
 8004e90:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004e92:	2301      	movs	r3, #1
 8004e94:	4093      	lsls	r3, r2
 8004e96:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f7ff ff23 	bl	8004ce4 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8004e9e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004ea0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ea2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8004ea4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004ea6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004ea8:	6863      	ldr	r3, [r4, #4]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d918      	bls.n	8004ee2 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8004eb0:	2000      	movs	r0, #0
 8004eb2:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8004eb4:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8004eb6:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8004eb8:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004eba:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8004ebc:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004ebe:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ec0:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8004ec2:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8004ec6:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <HAL_DMA_DeInit+0xb0>)
 8004ece:	4413      	add	r3, r2
 8004ed0:	490b      	ldr	r1, [pc, #44]	@ (8004f00 <HAL_DMA_DeInit+0xa8>)
 8004ed2:	fba1 1303 	umull	r1, r3, r1, r3
 8004ed6:	091b      	lsrs	r3, r3, #4
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <HAL_DMA_DeInit+0xb4>)
 8004ede:	6403      	str	r3, [r0, #64]	@ 0x40
 8004ee0:	e7d1      	b.n	8004e86 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff ff30 	bl	8004d48 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004ee8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004eea:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004eec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004eee:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	e7dd      	b.n	8004eb0 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8004ef4:	2001      	movs	r0, #1
}
 8004ef6:	4770      	bx	lr
 8004ef8:	40020407 	.word	0x40020407
 8004efc:	bffdfff8 	.word	0xbffdfff8
 8004f00:	cccccccd 	.word	0xcccccccd
 8004f04:	40020000 	.word	0x40020000
 8004f08:	bffdfbf8 	.word	0xbffdfbf8
 8004f0c:	40020400 	.word	0x40020400

08004f10 <HAL_DMA_Start_IT>:
{
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004f14:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8004f18:	2801      	cmp	r0, #1
 8004f1a:	d043      	beq.n	8004fa4 <HAL_DMA_Start_IT+0x94>
 8004f1c:	2001      	movs	r0, #1
 8004f1e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004f22:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8004f26:	b2c0      	uxtb	r0, r0
 8004f28:	2801      	cmp	r0, #1
 8004f2a:	d006      	beq.n	8004f3a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004f2c:	2380      	movs	r3, #128	@ 0x80
 8004f2e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004f30:	2300      	movs	r3, #0
 8004f32:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 8004f36:	2001      	movs	r0, #1
}
 8004f38:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f3a:	2002      	movs	r0, #2
 8004f3c:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f40:	2000      	movs	r0, #0
 8004f42:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004f44:	6825      	ldr	r5, [r4, #0]
 8004f46:	6828      	ldr	r0, [r5, #0]
 8004f48:	f020 0001 	bic.w	r0, r0, #1
 8004f4c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7ff fea0 	bl	8004c94 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004f54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004f56:	b1d3      	cbz	r3, 8004f8e <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f58:	6822      	ldr	r2, [r4, #0]
 8004f5a:	6813      	ldr	r3, [r2, #0]
 8004f5c:	f043 030e 	orr.w	r3, r3, #14
 8004f60:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f62:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8004f6a:	d003      	beq.n	8004f74 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f72:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004f74:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004f76:	b11b      	cbz	r3, 8004f80 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f7e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004f80:	6822      	ldr	r2, [r4, #0]
 8004f82:	6813      	ldr	r3, [r2, #0]
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2000      	movs	r0, #0
 8004f8c:	e7d4      	b.n	8004f38 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f8e:	6822      	ldr	r2, [r4, #0]
 8004f90:	6813      	ldr	r3, [r2, #0]
 8004f92:	f023 0304 	bic.w	r3, r3, #4
 8004f96:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	f043 030a 	orr.w	r3, r3, #10
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	e7de      	b.n	8004f62 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004fa4:	2002      	movs	r0, #2
 8004fa6:	e7c7      	b.n	8004f38 <HAL_DMA_Start_IT+0x28>

08004fa8 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d034      	beq.n	8005018 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004fae:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	2a02      	cmp	r2, #2
 8004fb6:	d006      	beq.n	8004fc6 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fb8:	2204      	movs	r2, #4
 8004fba:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8004fc2:	2001      	movs	r0, #1
 8004fc4:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fc6:	6801      	ldr	r1, [r0, #0]
 8004fc8:	680a      	ldr	r2, [r1, #0]
 8004fca:	f022 020e 	bic.w	r2, r2, #14
 8004fce:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fd0:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004fd2:	680a      	ldr	r2, [r1, #0]
 8004fd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004fd8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004fda:	6801      	ldr	r1, [r0, #0]
 8004fdc:	680a      	ldr	r2, [r1, #0]
 8004fde:	f022 0201 	bic.w	r2, r2, #1
 8004fe2:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004fe4:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8004fe6:	f002 011c 	and.w	r1, r2, #28
 8004fea:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8004fec:	2201      	movs	r2, #1
 8004fee:	408a      	lsls	r2, r1
 8004ff0:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ff4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ff6:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004ff8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ffa:	b132      	cbz	r2, 800500a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ffc:	6811      	ldr	r1, [r2, #0]
 8004ffe:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8005002:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005004:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005006:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8005008:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8005010:	2000      	movs	r0, #0
 8005012:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 8005016:	4770      	bx	lr
    return HAL_ERROR;
 8005018:	2001      	movs	r0, #1
}
 800501a:	4770      	bx	lr

0800501c <HAL_DMA_Abort_IT>:
{
 800501c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800501e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d003      	beq.n	8005030 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005028:	2304      	movs	r3, #4
 800502a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800502c:	2001      	movs	r0, #1
}
 800502e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005030:	6802      	ldr	r2, [r0, #0]
 8005032:	6813      	ldr	r3, [r2, #0]
 8005034:	f023 030e 	bic.w	r3, r3, #14
 8005038:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800503a:	6802      	ldr	r2, [r0, #0]
 800503c:	6813      	ldr	r3, [r2, #0]
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005044:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800504c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800504e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005050:	f003 021c 	and.w	r2, r3, #28
 8005054:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8005056:	2301      	movs	r3, #1
 8005058:	4093      	lsls	r3, r2
 800505a:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800505c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800505e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8005060:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8005062:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8005064:	b133      	cbz	r3, 8005074 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800506c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800506e:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8005070:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8005072:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8005074:	2301      	movs	r3, #1
 8005076:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800507a:	2300      	movs	r3, #0
 800507c:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8005080:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8005082:	b113      	cbz	r3, 800508a <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8005084:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2000      	movs	r0, #0
 8005088:	e7d1      	b.n	800502e <HAL_DMA_Abort_IT+0x12>
 800508a:	2000      	movs	r0, #0
 800508c:	e7cf      	b.n	800502e <HAL_DMA_Abort_IT+0x12>
	...

08005090 <HAL_DMA_IRQHandler>:
{
 8005090:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005092:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005094:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005096:	6804      	ldr	r4, [r0, #0]
 8005098:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800509a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800509c:	f003 031c 	and.w	r3, r3, #28
 80050a0:	2204      	movs	r2, #4
 80050a2:	409a      	lsls	r2, r3
 80050a4:	420a      	tst	r2, r1
 80050a6:	d015      	beq.n	80050d4 <HAL_DMA_IRQHandler+0x44>
 80050a8:	f015 0f04 	tst.w	r5, #4
 80050ac:	d012      	beq.n	80050d4 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	f013 0f20 	tst.w	r3, #32
 80050b4:	d103      	bne.n	80050be <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	f023 0304 	bic.w	r3, r3, #4
 80050bc:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80050be:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80050c0:	f003 021c 	and.w	r2, r3, #28
 80050c4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80050c6:	2304      	movs	r3, #4
 80050c8:	4093      	lsls	r3, r2
 80050ca:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80050cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80050ce:	b103      	cbz	r3, 80050d2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80050d0:	4798      	blx	r3
}
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80050d4:	2202      	movs	r2, #2
 80050d6:	409a      	lsls	r2, r3
 80050d8:	420a      	tst	r2, r1
 80050da:	d028      	beq.n	800512e <HAL_DMA_IRQHandler+0x9e>
 80050dc:	f015 0f02 	tst.w	r5, #2
 80050e0:	d025      	beq.n	800512e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	f013 0f20 	tst.w	r3, #32
 80050e8:	d106      	bne.n	80050f8 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	f023 030a 	bic.w	r3, r3, #10
 80050f0:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80050f8:	6802      	ldr	r2, [r0, #0]
 80050fa:	4b1c      	ldr	r3, [pc, #112]	@ (800516c <HAL_DMA_IRQHandler+0xdc>)
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d90e      	bls.n	800511e <HAL_DMA_IRQHandler+0x8e>
 8005100:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005102:	f003 021c 	and.w	r2, r3, #28
 8005106:	2302      	movs	r3, #2
 8005108:	4093      	lsls	r3, r2
 800510a:	4a19      	ldr	r2, [pc, #100]	@ (8005170 <HAL_DMA_IRQHandler+0xe0>)
 800510c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 800510e:	2300      	movs	r3, #0
 8005110:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 8005114:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8005116:	2b00      	cmp	r3, #0
 8005118:	d0db      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800511a:	4798      	blx	r3
 800511c:	e7d9      	b.n	80050d2 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800511e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005120:	f003 021c 	and.w	r2, r3, #28
 8005124:	2302      	movs	r3, #2
 8005126:	4093      	lsls	r3, r2
 8005128:	4a12      	ldr	r2, [pc, #72]	@ (8005174 <HAL_DMA_IRQHandler+0xe4>)
 800512a:	6053      	str	r3, [r2, #4]
 800512c:	e7ef      	b.n	800510e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800512e:	2208      	movs	r2, #8
 8005130:	fa02 f303 	lsl.w	r3, r2, r3
 8005134:	420b      	tst	r3, r1
 8005136:	d0cc      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x42>
 8005138:	f015 0f08 	tst.w	r5, #8
 800513c:	d0c9      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	f023 030e 	bic.w	r3, r3, #14
 8005144:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005146:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8005148:	f003 031c 	and.w	r3, r3, #28
 800514c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800514e:	2201      	movs	r2, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005156:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005158:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800515c:	2300      	movs	r3, #0
 800515e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8005162:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0b4      	beq.n	80050d2 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8005168:	4798      	blx	r3
  return;
 800516a:	e7b2      	b.n	80050d2 <HAL_DMA_IRQHandler+0x42>
 800516c:	40020080 	.word	0x40020080
 8005170:	40020400 	.word	0x40020400
 8005174:	40020000 	.word	0x40020000

08005178 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8005178:	b178      	cbz	r0, 800519a <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 800517a:	6803      	ldr	r3, [r0, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 800517e:	f011 0f10 	tst.w	r1, #16
 8005182:	d004      	beq.n	800518e <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8005184:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005188:	d004      	beq.n	8005194 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 800518a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 800518e:	601a      	str	r2, [r3, #0]
  return status;
 8005190:	2000      	movs	r0, #0
 8005192:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8005194:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8005198:	e7f9      	b.n	800518e <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 800519a:	2001      	movs	r0, #1
}
 800519c:	4770      	bx	lr
	...

080051a0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051a0:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 80051a2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051a4:	e069      	b.n	800527a <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051a6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80051a8:	005e      	lsls	r6, r3, #1
 80051aa:	2403      	movs	r4, #3
 80051ac:	40b4      	lsls	r4, r6
 80051ae:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051b2:	68cc      	ldr	r4, [r1, #12]
 80051b4:	40b4      	lsls	r4, r6
 80051b6:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80051b8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051ba:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80051bc:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051c0:	684c      	ldr	r4, [r1, #4]
 80051c2:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80051c6:	409c      	lsls	r4, r3
 80051c8:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80051ca:	6044      	str	r4, [r0, #4]
 80051cc:	e066      	b.n	800529c <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ce:	08dd      	lsrs	r5, r3, #3
 80051d0:	3508      	adds	r5, #8
 80051d2:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051d6:	f003 0c07 	and.w	ip, r3, #7
 80051da:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80051de:	f04f 0e0f 	mov.w	lr, #15
 80051e2:	fa0e fe0c 	lsl.w	lr, lr, ip
 80051e6:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051ea:	690c      	ldr	r4, [r1, #16]
 80051ec:	fa04 f40c 	lsl.w	r4, r4, ip
 80051f0:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 80051f4:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 80051f8:	e067      	b.n	80052ca <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80051fa:	2402      	movs	r4, #2
 80051fc:	e000      	b.n	8005200 <HAL_GPIO_Init+0x60>
 80051fe:	2400      	movs	r4, #0
 8005200:	fa04 f40e 	lsl.w	r4, r4, lr
 8005204:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005206:	f10c 0c02 	add.w	ip, ip, #2
 800520a:	4d4b      	ldr	r5, [pc, #300]	@ (8005338 <HAL_GPIO_Init+0x198>)
 800520c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005210:	4c4a      	ldr	r4, [pc, #296]	@ (800533c <HAL_GPIO_Init+0x19c>)
 8005212:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005214:	43d4      	mvns	r4, r2
 8005216:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800521a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800521e:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 8005222:	d001      	beq.n	8005228 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8005224:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005228:	4d44      	ldr	r5, [pc, #272]	@ (800533c <HAL_GPIO_Init+0x19c>)
 800522a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800522c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800522e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005232:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005236:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 800523a:	d001      	beq.n	8005240 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 800523c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8005240:	4d3e      	ldr	r5, [pc, #248]	@ (800533c <HAL_GPIO_Init+0x19c>)
 8005242:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8005244:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005248:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800524c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8005250:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 8005254:	d001      	beq.n	800525a <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8005256:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800525a:	4d38      	ldr	r5, [pc, #224]	@ (800533c <HAL_GPIO_Init+0x19c>)
 800525c:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8005260:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8005264:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005266:	684e      	ldr	r6, [r1, #4]
 8005268:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 800526c:	d001      	beq.n	8005272 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 800526e:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8005272:	4a32      	ldr	r2, [pc, #200]	@ (800533c <HAL_GPIO_Init+0x19c>)
 8005274:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8005278:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800527a:	680a      	ldr	r2, [r1, #0]
 800527c:	fa32 f403 	lsrs.w	r4, r2, r3
 8005280:	d058      	beq.n	8005334 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005282:	f04f 0c01 	mov.w	ip, #1
 8005286:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800528a:	ea1c 0202 	ands.w	r2, ip, r2
 800528e:	d0f3      	beq.n	8005278 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005290:	684c      	ldr	r4, [r1, #4]
 8005292:	f004 0403 	and.w	r4, r4, #3
 8005296:	3c01      	subs	r4, #1
 8005298:	2c01      	cmp	r4, #1
 800529a:	d984      	bls.n	80051a6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800529c:	684c      	ldr	r4, [r1, #4]
 800529e:	f004 0403 	and.w	r4, r4, #3
 80052a2:	2c03      	cmp	r4, #3
 80052a4:	d00c      	beq.n	80052c0 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 80052a6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052a8:	005d      	lsls	r5, r3, #1
 80052aa:	f04f 0c03 	mov.w	ip, #3
 80052ae:	fa0c fc05 	lsl.w	ip, ip, r5
 80052b2:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052b6:	688c      	ldr	r4, [r1, #8]
 80052b8:	40ac      	lsls	r4, r5
 80052ba:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 80052be:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052c0:	684c      	ldr	r4, [r1, #4]
 80052c2:	f004 0403 	and.w	r4, r4, #3
 80052c6:	2c02      	cmp	r4, #2
 80052c8:	d081      	beq.n	80051ce <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 80052ca:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80052cc:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80052d0:	f04f 0c03 	mov.w	ip, #3
 80052d4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80052d8:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052dc:	684c      	ldr	r4, [r1, #4]
 80052de:	f004 0403 	and.w	r4, r4, #3
 80052e2:	fa04 f40e 	lsl.w	r4, r4, lr
 80052e6:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 80052ea:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80052ec:	684c      	ldr	r4, [r1, #4]
 80052ee:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 80052f2:	d0c1      	beq.n	8005278 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 80052f4:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80052f8:	f10c 0502 	add.w	r5, ip, #2
 80052fc:	4c0e      	ldr	r4, [pc, #56]	@ (8005338 <HAL_GPIO_Init+0x198>)
 80052fe:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8005302:	f003 0e03 	and.w	lr, r3, #3
 8005306:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800530a:	2407      	movs	r4, #7
 800530c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005310:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005314:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8005318:	f43f af71 	beq.w	80051fe <HAL_GPIO_Init+0x5e>
 800531c:	4c08      	ldr	r4, [pc, #32]	@ (8005340 <HAL_GPIO_Init+0x1a0>)
 800531e:	42a0      	cmp	r0, r4
 8005320:	d006      	beq.n	8005330 <HAL_GPIO_Init+0x190>
 8005322:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8005326:	42a0      	cmp	r0, r4
 8005328:	f43f af67 	beq.w	80051fa <HAL_GPIO_Init+0x5a>
 800532c:	2407      	movs	r4, #7
 800532e:	e767      	b.n	8005200 <HAL_GPIO_Init+0x60>
 8005330:	2401      	movs	r4, #1
 8005332:	e765      	b.n	8005200 <HAL_GPIO_Init+0x60>
  }
}
 8005334:	bd70      	pop	{r4, r5, r6, pc}
 8005336:	bf00      	nop
 8005338:	40010000 	.word	0x40010000
 800533c:	58000800 	.word	0x58000800
 8005340:	48000400 	.word	0x48000400

08005344 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8005344:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005346:	fa31 f203 	lsrs.w	r2, r1, r3
 800534a:	d071      	beq.n	8005430 <HAL_GPIO_DeInit+0xec>
{
 800534c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800534e:	e02e      	b.n	80053ae <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005350:	2502      	movs	r5, #2
 8005352:	e000      	b.n	8005356 <HAL_GPIO_DeInit+0x12>
 8005354:	2500      	movs	r5, #0
 8005356:	fa05 f50c 	lsl.w	r5, r5, ip
 800535a:	42a5      	cmp	r5, r4
 800535c:	d049      	beq.n	80053f2 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800535e:	6804      	ldr	r4, [r0, #0]
 8005360:	005d      	lsls	r5, r3, #1
 8005362:	f04f 0c03 	mov.w	ip, #3
 8005366:	fa0c fc05 	lsl.w	ip, ip, r5
 800536a:	ea44 040c 	orr.w	r4, r4, ip
 800536e:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8005370:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8005374:	f10e 0e08 	add.w	lr, lr, #8
 8005378:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 800537c:	f003 0607 	and.w	r6, r3, #7
 8005380:	00b6      	lsls	r6, r6, #2
 8005382:	250f      	movs	r5, #15
 8005384:	40b5      	lsls	r5, r6
 8005386:	ea24 0405 	bic.w	r4, r4, r5
 800538a:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800538e:	6884      	ldr	r4, [r0, #8]
 8005390:	ea24 040c 	bic.w	r4, r4, ip
 8005394:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005396:	6844      	ldr	r4, [r0, #4]
 8005398:	ea24 0202 	bic.w	r2, r4, r2
 800539c:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800539e:	68c2      	ldr	r2, [r0, #12]
 80053a0:	ea22 020c 	bic.w	r2, r2, ip
 80053a4:	60c2      	str	r2, [r0, #12]
    }

    position++;
 80053a6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80053a8:	fa31 f203 	lsrs.w	r2, r1, r3
 80053ac:	d03f      	beq.n	800542e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80053ae:	2201      	movs	r2, #1
 80053b0:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80053b2:	ea12 0701 	ands.w	r7, r2, r1
 80053b6:	d0f6      	beq.n	80053a6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80053b8:	089e      	lsrs	r6, r3, #2
 80053ba:	1cb5      	adds	r5, r6, #2
 80053bc:	4c1d      	ldr	r4, [pc, #116]	@ (8005434 <HAL_GPIO_DeInit+0xf0>)
 80053be:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 80053c2:	f003 0c03 	and.w	ip, r3, #3
 80053c6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80053ca:	f04f 0e07 	mov.w	lr, #7
 80053ce:	fa0e fe0c 	lsl.w	lr, lr, ip
 80053d2:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80053d6:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80053da:	d0bb      	beq.n	8005354 <HAL_GPIO_DeInit+0x10>
 80053dc:	4d16      	ldr	r5, [pc, #88]	@ (8005438 <HAL_GPIO_DeInit+0xf4>)
 80053de:	42a8      	cmp	r0, r5
 80053e0:	d005      	beq.n	80053ee <HAL_GPIO_DeInit+0xaa>
 80053e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80053e6:	42a8      	cmp	r0, r5
 80053e8:	d0b2      	beq.n	8005350 <HAL_GPIO_DeInit+0xc>
 80053ea:	2507      	movs	r5, #7
 80053ec:	e7b3      	b.n	8005356 <HAL_GPIO_DeInit+0x12>
 80053ee:	2501      	movs	r5, #1
 80053f0:	e7b1      	b.n	8005356 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 80053f2:	4c12      	ldr	r4, [pc, #72]	@ (800543c <HAL_GPIO_DeInit+0xf8>)
 80053f4:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 80053f8:	ea25 0507 	bic.w	r5, r5, r7
 80053fc:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005400:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8005404:	ea25 0507 	bic.w	r5, r5, r7
 8005408:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 800540c:	6825      	ldr	r5, [r4, #0]
 800540e:	ea25 0507 	bic.w	r5, r5, r7
 8005412:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8005414:	6865      	ldr	r5, [r4, #4]
 8005416:	ea25 0507 	bic.w	r5, r5, r7
 800541a:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800541c:	4d05      	ldr	r5, [pc, #20]	@ (8005434 <HAL_GPIO_DeInit+0xf0>)
 800541e:	3602      	adds	r6, #2
 8005420:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8005424:	ea24 040e 	bic.w	r4, r4, lr
 8005428:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 800542c:	e797      	b.n	800535e <HAL_GPIO_DeInit+0x1a>
  }
}
 800542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	48000400 	.word	0x48000400
 800543c:	58000800 	.word	0x58000800

08005440 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005440:	6903      	ldr	r3, [r0, #16]
 8005442:	4219      	tst	r1, r3
 8005444:	d001      	beq.n	800544a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8005446:	2001      	movs	r0, #1
 8005448:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800544a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 800544c:	4770      	bx	lr

0800544e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800544e:	b10a      	cbz	r2, 8005454 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005450:	6181      	str	r1, [r0, #24]
 8005452:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005454:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8005456:	4770      	bx	lr

08005458 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005458:	4770      	bx	lr
	...

0800545c <HAL_GPIO_EXTI_IRQHandler>:
{
 800545c:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800545e:	4b05      	ldr	r3, [pc, #20]	@ (8005474 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4203      	tst	r3, r0
 8005464:	d100      	bne.n	8005468 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8005466:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005468:	4b02      	ldr	r3, [pc, #8]	@ (8005474 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800546a:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800546c:	f7ff fff4 	bl	8005458 <HAL_GPIO_EXTI_Callback>
}
 8005470:	e7f9      	b.n	8005466 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005472:	bf00      	nop
 8005474:	58000800 	.word	0x58000800

08005478 <HAL_I2C_MasterTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005478:	4770      	bx	lr

0800547a <HAL_I2C_MasterRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800547a:	4770      	bx	lr

0800547c <HAL_I2C_SlaveTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800547c:	4770      	bx	lr

0800547e <HAL_I2C_SlaveRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800547e:	4770      	bx	lr

08005480 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005480:	4770      	bx	lr

08005482 <HAL_I2C_ListenCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005482:	4770      	bx	lr

08005484 <HAL_I2C_MemTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005484:	4770      	bx	lr

08005486 <HAL_I2C_MemRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005486:	4770      	bx	lr

08005488 <HAL_I2C_ErrorCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005488:	4770      	bx	lr

0800548a <HAL_I2C_AbortCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800548a:	4770      	bx	lr

0800548c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800548c:	6803      	ldr	r3, [r0, #0]
 800548e:	699a      	ldr	r2, [r3, #24]
 8005490:	f012 0f02 	tst.w	r2, #2
 8005494:	d001      	beq.n	800549a <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005496:	2200      	movs	r2, #0
 8005498:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800549a:	6803      	ldr	r3, [r0, #0]
 800549c:	699a      	ldr	r2, [r3, #24]
 800549e:	f012 0f01 	tst.w	r2, #1
 80054a2:	d103      	bne.n	80054ac <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	619a      	str	r2, [r3, #24]
  }
}
 80054ac:	4770      	bx	lr

080054ae <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80054ae:	b410      	push	{r4}
 80054b0:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80054b6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80054ba:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054bc:	4321      	orrs	r1, r4
 80054be:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054c2:	6802      	ldr	r2, [r0, #0]
 80054c4:	6853      	ldr	r3, [r2, #4]
 80054c6:	0d64      	lsrs	r4, r4, #21
 80054c8:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 80054cc:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 80054d0:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 80054d4:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 80054d8:	f044 0403 	orr.w	r4, r4, #3
 80054dc:	ea23 0304 	bic.w	r3, r3, r4
 80054e0:	430b      	orrs	r3, r1
 80054e2:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054e4:	bc10      	pop	{r4}
 80054e6:	4770      	bx	lr

080054e8 <I2C_IsErrorOccurred>:
{
 80054e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ec:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80054ee:	6803      	ldr	r3, [r0, #0]
 80054f0:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80054f2:	f016 0610 	ands.w	r6, r6, #16
 80054f6:	d07c      	beq.n	80055f2 <I2C_IsErrorOccurred+0x10a>
 80054f8:	460d      	mov	r5, r1
 80054fa:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054fc:	2210      	movs	r2, #16
 80054fe:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8005500:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	6998      	ldr	r0, [r3, #24]
 8005508:	f010 0f20 	tst.w	r0, #32
 800550c:	d130      	bne.n	8005570 <I2C_IsErrorOccurred+0x88>
 800550e:	bb7f      	cbnz	r7, 8005570 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8005510:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005514:	d0f6      	beq.n	8005504 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fd facb 	bl	8002ab0 <HAL_GetTick>
 800551a:	eba0 0008 	sub.w	r0, r0, r8
 800551e:	42a8      	cmp	r0, r5
 8005520:	d801      	bhi.n	8005526 <I2C_IsErrorOccurred+0x3e>
 8005522:	2d00      	cmp	r5, #0
 8005524:	d1ee      	bne.n	8005504 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005526:	6821      	ldr	r1, [r4, #0]
 8005528:	684b      	ldr	r3, [r1, #4]
 800552a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 800552e:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8005532:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005534:	6988      	ldr	r0, [r1, #24]
 8005536:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 800553a:	d002      	beq.n	8005542 <I2C_IsErrorOccurred+0x5a>
 800553c:	b90b      	cbnz	r3, 8005542 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800553e:	2a20      	cmp	r2, #32
 8005540:	d10e      	bne.n	8005560 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f013 0f20 	tst.w	r3, #32
 800554a:	d1db      	bne.n	8005504 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800554c:	f7fd fab0 	bl	8002ab0 <HAL_GetTick>
 8005550:	eba0 0008 	sub.w	r0, r0, r8
 8005554:	2819      	cmp	r0, #25
 8005556:	d9f4      	bls.n	8005542 <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005558:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 800555c:	2701      	movs	r7, #1
              break;
 800555e:	e7d1      	b.n	8005504 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005560:	684b      	ldr	r3, [r1, #4]
 8005562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005566:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005568:	f7fd faa2 	bl	8002ab0 <HAL_GetTick>
 800556c:	4680      	mov	r8, r0
 800556e:	e7e8      	b.n	8005542 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8005570:	b90f      	cbnz	r7, 8005576 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005572:	2220      	movs	r2, #32
 8005574:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005576:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800557a:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005580:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005584:	d005      	beq.n	8005592 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 8005586:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800558a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800558e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005590:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005592:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8005596:	d006      	beq.n	80055a6 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8005598:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800559c:	6822      	ldr	r2, [r4, #0]
 800559e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80055a2:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80055a4:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80055a6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80055aa:	d024      	beq.n	80055f6 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 80055ac:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055b6:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80055b8:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80055ba:	4620      	mov	r0, r4
 80055bc:	f7ff ff66 	bl	800548c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80055c0:	6822      	ldr	r2, [r4, #0]
 80055c2:	6853      	ldr	r3, [r2, #4]
 80055c4:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80055c8:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80055cc:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80055d0:	f023 0301 	bic.w	r3, r3, #1
 80055d4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80055d6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80055d8:	4333      	orrs	r3, r6
 80055da:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	2320      	movs	r3, #32
 80055de:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80055e8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80055ec:	4628      	mov	r0, r5
 80055ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80055f2:	2500      	movs	r5, #0
 80055f4:	e7c2      	b.n	800557c <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 80055f6:	2d00      	cmp	r5, #0
 80055f8:	d0f8      	beq.n	80055ec <I2C_IsErrorOccurred+0x104>
 80055fa:	e7de      	b.n	80055ba <I2C_IsErrorOccurred+0xd2>

080055fc <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	4604      	mov	r4, r0
 8005600:	460d      	mov	r5, r1
 8005602:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	f013 0f02 	tst.w	r3, #2
 800560c:	d11d      	bne.n	800564a <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800560e:	4632      	mov	r2, r6
 8005610:	4629      	mov	r1, r5
 8005612:	4620      	mov	r0, r4
 8005614:	f7ff ff68 	bl	80054e8 <I2C_IsErrorOccurred>
 8005618:	b9c8      	cbnz	r0, 800564e <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800561a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800561e:	d0f1      	beq.n	8005604 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005620:	f7fd fa46 	bl	8002ab0 <HAL_GetTick>
 8005624:	1b80      	subs	r0, r0, r6
 8005626:	42a8      	cmp	r0, r5
 8005628:	d801      	bhi.n	800562e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800562a:	2d00      	cmp	r5, #0
 800562c:	d1ea      	bne.n	8005604 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005630:	f043 0320 	orr.w	r3, r3, #32
 8005634:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005636:	2320      	movs	r3, #32
 8005638:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800563c:	2300      	movs	r3, #0
 800563e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8005642:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8005646:	2001      	movs	r0, #1
 8005648:	e000      	b.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 800564a:	2000      	movs	r0, #0
}
 800564c:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800564e:	2001      	movs	r0, #1
 8005650:	e7fc      	b.n	800564c <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08005652 <I2C_WaitOnFlagUntilTimeout>:
{
 8005652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005656:	4606      	mov	r6, r0
 8005658:	4688      	mov	r8, r1
 800565a:	4617      	mov	r7, r2
 800565c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800565e:	6834      	ldr	r4, [r6, #0]
 8005660:	69a4      	ldr	r4, [r4, #24]
 8005662:	ea38 0404 	bics.w	r4, r8, r4
 8005666:	bf0c      	ite	eq
 8005668:	2401      	moveq	r4, #1
 800566a:	2400      	movne	r4, #0
 800566c:	42bc      	cmp	r4, r7
 800566e:	d118      	bne.n	80056a2 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8005670:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005674:	d0f3      	beq.n	800565e <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005676:	f7fd fa1b 	bl	8002ab0 <HAL_GetTick>
 800567a:	9b06      	ldr	r3, [sp, #24]
 800567c:	1ac0      	subs	r0, r0, r3
 800567e:	42a8      	cmp	r0, r5
 8005680:	d801      	bhi.n	8005686 <I2C_WaitOnFlagUntilTimeout+0x34>
 8005682:	2d00      	cmp	r5, #0
 8005684:	d1eb      	bne.n	800565e <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005686:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8005688:	f043 0320 	orr.w	r3, r3, #32
 800568c:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800568e:	2320      	movs	r3, #32
 8005690:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005694:	2300      	movs	r3, #0
 8005696:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800569a:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 800569e:	2001      	movs	r0, #1
 80056a0:	e000      	b.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 80056a2:	2000      	movs	r0, #0
}
 80056a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056a8 <I2C_RequestMemoryWrite>:
{
 80056a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	4604      	mov	r4, r0
 80056b0:	4690      	mov	r8, r2
 80056b2:	461d      	mov	r5, r3
 80056b4:	9e08      	ldr	r6, [sp, #32]
 80056b6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80056b8:	4b19      	ldr	r3, [pc, #100]	@ (8005720 <I2C_RequestMemoryWrite+0x78>)
 80056ba:	9300      	str	r3, [sp, #0]
 80056bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80056c0:	b2ea      	uxtb	r2, r5
 80056c2:	f7ff fef4 	bl	80054ae <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056c6:	463a      	mov	r2, r7
 80056c8:	4631      	mov	r1, r6
 80056ca:	4620      	mov	r0, r4
 80056cc:	f7ff ff96 	bl	80055fc <I2C_WaitOnTXISFlagUntilTimeout>
 80056d0:	b9f8      	cbnz	r0, 8005712 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80056d2:	2d01      	cmp	r5, #1
 80056d4:	d10e      	bne.n	80056f4 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	fa5f f288 	uxtb.w	r2, r8
 80056dc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80056de:	9700      	str	r7, [sp, #0]
 80056e0:	4633      	mov	r3, r6
 80056e2:	2200      	movs	r2, #0
 80056e4:	2180      	movs	r1, #128	@ 0x80
 80056e6:	4620      	mov	r0, r4
 80056e8:	f7ff ffb3 	bl	8005652 <I2C_WaitOnFlagUntilTimeout>
 80056ec:	b9a8      	cbnz	r0, 800571a <I2C_RequestMemoryWrite+0x72>
}
 80056ee:	b002      	add	sp, #8
 80056f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056f4:	6823      	ldr	r3, [r4, #0]
 80056f6:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80056fa:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056fc:	463a      	mov	r2, r7
 80056fe:	4631      	mov	r1, r6
 8005700:	4620      	mov	r0, r4
 8005702:	f7ff ff7b 	bl	80055fc <I2C_WaitOnTXISFlagUntilTimeout>
 8005706:	b930      	cbnz	r0, 8005716 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	fa5f f288 	uxtb.w	r2, r8
 800570e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005710:	e7e5      	b.n	80056de <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8005712:	2001      	movs	r0, #1
 8005714:	e7eb      	b.n	80056ee <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8005716:	2001      	movs	r0, #1
 8005718:	e7e9      	b.n	80056ee <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800571a:	2001      	movs	r0, #1
 800571c:	e7e7      	b.n	80056ee <I2C_RequestMemoryWrite+0x46>
 800571e:	bf00      	nop
 8005720:	80002000 	.word	0x80002000

08005724 <I2C_RequestMemoryRead>:
{
 8005724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	4604      	mov	r4, r0
 800572c:	4690      	mov	r8, r2
 800572e:	461d      	mov	r5, r3
 8005730:	9e08      	ldr	r6, [sp, #32]
 8005732:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005734:	4b18      	ldr	r3, [pc, #96]	@ (8005798 <I2C_RequestMemoryRead+0x74>)
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	2300      	movs	r3, #0
 800573a:	b2ea      	uxtb	r2, r5
 800573c:	f7ff feb7 	bl	80054ae <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005740:	463a      	mov	r2, r7
 8005742:	4631      	mov	r1, r6
 8005744:	4620      	mov	r0, r4
 8005746:	f7ff ff59 	bl	80055fc <I2C_WaitOnTXISFlagUntilTimeout>
 800574a:	b9f8      	cbnz	r0, 800578c <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800574c:	2d01      	cmp	r5, #1
 800574e:	d10e      	bne.n	800576e <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	fa5f f288 	uxtb.w	r2, r8
 8005756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005758:	9700      	str	r7, [sp, #0]
 800575a:	4633      	mov	r3, r6
 800575c:	2200      	movs	r2, #0
 800575e:	2140      	movs	r1, #64	@ 0x40
 8005760:	4620      	mov	r0, r4
 8005762:	f7ff ff76 	bl	8005652 <I2C_WaitOnFlagUntilTimeout>
 8005766:	b9a8      	cbnz	r0, 8005794 <I2C_RequestMemoryRead+0x70>
}
 8005768:	b002      	add	sp, #8
 800576a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8005774:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005776:	463a      	mov	r2, r7
 8005778:	4631      	mov	r1, r6
 800577a:	4620      	mov	r0, r4
 800577c:	f7ff ff3e 	bl	80055fc <I2C_WaitOnTXISFlagUntilTimeout>
 8005780:	b930      	cbnz	r0, 8005790 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005782:	6823      	ldr	r3, [r4, #0]
 8005784:	fa5f f288 	uxtb.w	r2, r8
 8005788:	629a      	str	r2, [r3, #40]	@ 0x28
 800578a:	e7e5      	b.n	8005758 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 800578c:	2001      	movs	r0, #1
 800578e:	e7eb      	b.n	8005768 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8005790:	2001      	movs	r0, #1
 8005792:	e7e9      	b.n	8005768 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8005794:	2001      	movs	r0, #1
 8005796:	e7e7      	b.n	8005768 <I2C_RequestMemoryRead+0x44>
 8005798:	80002000 	.word	0x80002000

0800579c <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	4605      	mov	r5, r0
 80057a0:	460c      	mov	r4, r1
 80057a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	f013 0f20 	tst.w	r3, #32
 80057ac:	d11a      	bne.n	80057e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ae:	4632      	mov	r2, r6
 80057b0:	4621      	mov	r1, r4
 80057b2:	4628      	mov	r0, r5
 80057b4:	f7ff fe98 	bl	80054e8 <I2C_IsErrorOccurred>
 80057b8:	b9b0      	cbnz	r0, 80057e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ba:	f7fd f979 	bl	8002ab0 <HAL_GetTick>
 80057be:	1b80      	subs	r0, r0, r6
 80057c0:	42a0      	cmp	r0, r4
 80057c2:	d801      	bhi.n	80057c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 80057c4:	2c00      	cmp	r4, #0
 80057c6:	d1ed      	bne.n	80057a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057c8:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80057ca:	f043 0320 	orr.w	r3, r3, #32
 80057ce:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80057d0:	2320      	movs	r3, #32
 80057d2:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80057dc:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 80057e0:	2001      	movs	r0, #1
}
 80057e2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80057e4:	2000      	movs	r0, #0
 80057e6:	e7fc      	b.n	80057e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80057e8:	2001      	movs	r0, #1
 80057ea:	e7fa      	b.n	80057e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080057ec <HAL_I2C_Init>:
  if (hi2c == NULL)
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d072      	beq.n	80058d6 <HAL_I2C_Init+0xea>
{
 80057f0:	b510      	push	{r4, lr}
 80057f2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057f4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80057f8:	b9db      	cbnz	r3, 8005832 <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 80057fa:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80057fe:	4b37      	ldr	r3, [pc, #220]	@ (80058dc <HAL_I2C_Init+0xf0>)
 8005800:	6543      	str	r3, [r0, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8005802:	4b37      	ldr	r3, [pc, #220]	@ (80058e0 <HAL_I2C_Init+0xf4>)
 8005804:	6583      	str	r3, [r0, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8005806:	4b37      	ldr	r3, [pc, #220]	@ (80058e4 <HAL_I2C_Init+0xf8>)
 8005808:	65c3      	str	r3, [r0, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 800580a:	4b37      	ldr	r3, [pc, #220]	@ (80058e8 <HAL_I2C_Init+0xfc>)
 800580c:	6603      	str	r3, [r0, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800580e:	4b37      	ldr	r3, [pc, #220]	@ (80058ec <HAL_I2C_Init+0x100>)
 8005810:	6643      	str	r3, [r0, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8005812:	4b37      	ldr	r3, [pc, #220]	@ (80058f0 <HAL_I2C_Init+0x104>)
 8005814:	6683      	str	r3, [r0, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8005816:	4b37      	ldr	r3, [pc, #220]	@ (80058f4 <HAL_I2C_Init+0x108>)
 8005818:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800581a:	4b37      	ldr	r3, [pc, #220]	@ (80058f8 <HAL_I2C_Init+0x10c>)
 800581c:	6703      	str	r3, [r0, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800581e:	4b37      	ldr	r3, [pc, #220]	@ (80058fc <HAL_I2C_Init+0x110>)
 8005820:	6743      	str	r3, [r0, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8005822:	4b37      	ldr	r3, [pc, #220]	@ (8005900 <HAL_I2C_Init+0x114>)
 8005824:	6783      	str	r3, [r0, #120]	@ 0x78
    if (hi2c->MspInitCallback == NULL)
 8005826:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005828:	2b00      	cmp	r3, #0
 800582a:	d046      	beq.n	80058ba <HAL_I2C_Init+0xce>
    hi2c->MspInitCallback(hi2c);
 800582c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800582e:	4620      	mov	r0, r4
 8005830:	4798      	blx	r3
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005832:	2324      	movs	r3, #36	@ 0x24
 8005834:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005838:	6822      	ldr	r2, [r4, #0]
 800583a:	6813      	ldr	r3, [r2, #0]
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005842:	6863      	ldr	r3, [r4, #4]
 8005844:	6822      	ldr	r2, [r4, #0]
 8005846:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800584a:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800584c:	6822      	ldr	r2, [r4, #0]
 800584e:	6893      	ldr	r3, [r2, #8]
 8005850:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005854:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005856:	68e3      	ldr	r3, [r4, #12]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d031      	beq.n	80058c0 <HAL_I2C_Init+0xd4>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800585c:	68a3      	ldr	r3, [r4, #8]
 800585e:	6822      	ldr	r2, [r4, #0]
 8005860:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 8005864:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005866:	68e3      	ldr	r3, [r4, #12]
 8005868:	2b02      	cmp	r3, #2
 800586a:	d02f      	beq.n	80058cc <HAL_I2C_Init+0xe0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800586c:	6822      	ldr	r2, [r4, #0]
 800586e:	6853      	ldr	r3, [r2, #4]
 8005870:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005878:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800587a:	6822      	ldr	r2, [r4, #0]
 800587c:	68d3      	ldr	r3, [r2, #12]
 800587e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005882:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	6962      	ldr	r2, [r4, #20]
 8005888:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800588a:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800588c:	6822      	ldr	r2, [r4, #0]
 800588e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005892:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005894:	69e3      	ldr	r3, [r4, #28]
 8005896:	6a21      	ldr	r1, [r4, #32]
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	430b      	orrs	r3, r1
 800589c:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800589e:	6822      	ldr	r2, [r4, #0]
 80058a0:	6813      	ldr	r3, [r2, #0]
 80058a2:	f043 0301 	orr.w	r3, r3, #1
 80058a6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058a8:	2000      	movs	r0, #0
 80058aa:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80058ac:	2320      	movs	r3, #32
 80058ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80058b2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80058b8:	bd10      	pop	{r4, pc}
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80058ba:	4b12      	ldr	r3, [pc, #72]	@ (8005904 <HAL_I2C_Init+0x118>)
 80058bc:	67c3      	str	r3, [r0, #124]	@ 0x7c
 80058be:	e7b5      	b.n	800582c <HAL_I2C_Init+0x40>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058c0:	68a3      	ldr	r3, [r4, #8]
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c8:	6093      	str	r3, [r2, #8]
 80058ca:	e7cc      	b.n	8005866 <HAL_I2C_Init+0x7a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058cc:	6823      	ldr	r3, [r4, #0]
 80058ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	e7ca      	b.n	800586c <HAL_I2C_Init+0x80>
    return HAL_ERROR;
 80058d6:	2001      	movs	r0, #1
}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	08005479 	.word	0x08005479
 80058e0:	0800547b 	.word	0x0800547b
 80058e4:	0800547d 	.word	0x0800547d
 80058e8:	0800547f 	.word	0x0800547f
 80058ec:	08005483 	.word	0x08005483
 80058f0:	08005485 	.word	0x08005485
 80058f4:	08005487 	.word	0x08005487
 80058f8:	08005489 	.word	0x08005489
 80058fc:	0800548b 	.word	0x0800548b
 8005900:	08005481 	.word	0x08005481
 8005904:	08001749 	.word	0x08001749

08005908 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8005908:	b1f0      	cbz	r0, 8005948 <HAL_I2C_DeInit+0x40>
{
 800590a:	b510      	push	{r4, lr}
 800590c:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800590e:	2324      	movs	r3, #36	@ 0x24
 8005910:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005914:	6802      	ldr	r2, [r0, #0]
 8005916:	6813      	ldr	r3, [r2, #0]
 8005918:	f023 0301 	bic.w	r3, r3, #1
 800591c:	6013      	str	r3, [r2, #0]
  if (hi2c->MspDeInitCallback == NULL)
 800591e:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8005922:	b16b      	cbz	r3, 8005940 <HAL_I2C_DeInit+0x38>
  hi2c->MspDeInitCallback(hi2c);
 8005924:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8005928:	4620      	mov	r0, r4
 800592a:	4798      	blx	r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800592c:	2000      	movs	r0, #0
 800592e:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005930:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005934:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005936:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  __HAL_UNLOCK(hi2c);
 800593a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 800593e:	bd10      	pop	{r4, pc}
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
 8005940:	4b02      	ldr	r3, [pc, #8]	@ (800594c <HAL_I2C_DeInit+0x44>)
 8005942:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8005946:	e7ed      	b.n	8005924 <HAL_I2C_DeInit+0x1c>
    return HAL_ERROR;
 8005948:	2001      	movs	r0, #1
}
 800594a:	4770      	bx	lr
 800594c:	08001861 	.word	0x08001861

08005950 <HAL_I2C_Mem_Write>:
{
 8005950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005954:	b083      	sub	sp, #12
 8005956:	460e      	mov	r6, r1
 8005958:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800595c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800595e:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8005962:	b2c9      	uxtb	r1, r1
 8005964:	2920      	cmp	r1, #32
 8005966:	f040 80bb 	bne.w	8005ae0 <HAL_I2C_Mem_Write+0x190>
 800596a:	4604      	mov	r4, r0
 800596c:	4690      	mov	r8, r2
 800596e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005972:	b1cb      	cbz	r3, 80059a8 <HAL_I2C_Mem_Write+0x58>
 8005974:	f1ba 0f00 	cmp.w	sl, #0
 8005978:	d016      	beq.n	80059a8 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 800597a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800597e:	2b01      	cmp	r3, #1
 8005980:	f000 80b2 	beq.w	8005ae8 <HAL_I2C_Mem_Write+0x198>
 8005984:	f04f 0b01 	mov.w	fp, #1
 8005988:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800598c:	f7fd f890 	bl	8002ab0 <HAL_GetTick>
 8005990:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005992:	9000      	str	r0, [sp, #0]
 8005994:	2319      	movs	r3, #25
 8005996:	465a      	mov	r2, fp
 8005998:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff fe58 	bl	8005652 <I2C_WaitOnFlagUntilTimeout>
 80059a2:	b130      	cbz	r0, 80059b2 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 80059a4:	2001      	movs	r0, #1
 80059a6:	e09c      	b.n	8005ae2 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059ac:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80059ae:	2001      	movs	r0, #1
 80059b0:	e097      	b.n	8005ae2 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059b2:	2321      	movs	r3, #33	@ 0x21
 80059b4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059b8:	2340      	movs	r3, #64	@ 0x40
 80059ba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059be:	2300      	movs	r3, #0
 80059c0:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80059c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059c4:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80059c6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80059ca:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059cc:	9701      	str	r7, [sp, #4]
 80059ce:	9500      	str	r5, [sp, #0]
 80059d0:	464b      	mov	r3, r9
 80059d2:	4642      	mov	r2, r8
 80059d4:	4631      	mov	r1, r6
 80059d6:	4620      	mov	r0, r4
 80059d8:	f7ff fe66 	bl	80056a8 <I2C_RequestMemoryWrite>
 80059dc:	b970      	cbnz	r0, 80059fc <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2bff      	cmp	r3, #255	@ 0xff
 80059e4:	d90f      	bls.n	8005a06 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059e6:	22ff      	movs	r2, #255	@ 0xff
 80059e8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059ea:	2300      	movs	r3, #0
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059f2:	4631      	mov	r1, r6
 80059f4:	4620      	mov	r0, r4
 80059f6:	f7ff fd5a 	bl	80054ae <I2C_TransferConfig>
 80059fa:	e021      	b.n	8005a40 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 80059fc:	2300      	movs	r3, #0
 80059fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005a02:	4658      	mov	r0, fp
 8005a04:	e06d      	b.n	8005ae2 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 8005a06:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005a08:	b292      	uxth	r2, r2
 8005a0a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	4631      	mov	r1, r6
 8005a18:	4620      	mov	r0, r4
 8005a1a:	f7ff fd48 	bl	80054ae <I2C_TransferConfig>
 8005a1e:	e00f      	b.n	8005a40 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8005a20:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005a22:	b292      	uxth	r2, r2
 8005a24:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a26:	2300      	movs	r3, #0
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	4631      	mov	r1, r6
 8005a32:	4620      	mov	r0, r4
 8005a34:	f7ff fd3b 	bl	80054ae <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005a38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d033      	beq.n	8005aa8 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a40:	463a      	mov	r2, r7
 8005a42:	4629      	mov	r1, r5
 8005a44:	4620      	mov	r0, r4
 8005a46:	f7ff fdd9 	bl	80055fc <I2C_WaitOnTXISFlagUntilTimeout>
 8005a4a:	2800      	cmp	r0, #0
 8005a4c:	d14e      	bne.n	8005aec <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a4e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	7812      	ldrb	r2, [r2, #0]
 8005a54:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8005a56:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005a58:	3301      	adds	r3, #1
 8005a5a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8005a5c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a66:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a6e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005a70:	b292      	uxth	r2, r2
 8005a72:	2a00      	cmp	r2, #0
 8005a74:	d0e0      	beq.n	8005a38 <HAL_I2C_Mem_Write+0xe8>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1de      	bne.n	8005a38 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a7a:	9700      	str	r7, [sp, #0]
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	2200      	movs	r2, #0
 8005a80:	2180      	movs	r1, #128	@ 0x80
 8005a82:	4620      	mov	r0, r4
 8005a84:	f7ff fde5 	bl	8005652 <I2C_WaitOnFlagUntilTimeout>
 8005a88:	bb90      	cbnz	r0, 8005af0 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a8a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	2bff      	cmp	r3, #255	@ 0xff
 8005a90:	d9c6      	bls.n	8005a20 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a92:	22ff      	movs	r2, #255	@ 0xff
 8005a94:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a96:	2300      	movs	r3, #0
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f7ff fd04 	bl	80054ae <I2C_TransferConfig>
 8005aa6:	e7c7      	b.n	8005a38 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005aa8:	463a      	mov	r2, r7
 8005aaa:	4629      	mov	r1, r5
 8005aac:	4620      	mov	r0, r4
 8005aae:	f7ff fe75 	bl	800579c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ab2:	b9f8      	cbnz	r0, 8005af4 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ab4:	6823      	ldr	r3, [r4, #0]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005aba:	6821      	ldr	r1, [r4, #0]
 8005abc:	684b      	ldr	r3, [r1, #4]
 8005abe:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8005ac2:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8005ac6:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8005aca:	f023 0301 	bic.w	r3, r3, #1
 8005ace:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005ad0:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8005ada:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8005ade:	e000      	b.n	8005ae2 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8005ae0:	2002      	movs	r0, #2
}
 8005ae2:	b003      	add	sp, #12
 8005ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005ae8:	2002      	movs	r0, #2
 8005aea:	e7fa      	b.n	8005ae2 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 8005aec:	2001      	movs	r0, #1
 8005aee:	e7f8      	b.n	8005ae2 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 8005af0:	2001      	movs	r0, #1
 8005af2:	e7f6      	b.n	8005ae2 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 8005af4:	2001      	movs	r0, #1
 8005af6:	e7f4      	b.n	8005ae2 <HAL_I2C_Mem_Write+0x192>

08005af8 <HAL_I2C_Mem_Read>:
{
 8005af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	b083      	sub	sp, #12
 8005afe:	460e      	mov	r6, r1
 8005b00:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8005b04:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b06:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8005b0a:	b2c9      	uxtb	r1, r1
 8005b0c:	2920      	cmp	r1, #32
 8005b0e:	f040 80bc 	bne.w	8005c8a <HAL_I2C_Mem_Read+0x192>
 8005b12:	4604      	mov	r4, r0
 8005b14:	4690      	mov	r8, r2
 8005b16:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8005b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b1a:	b1cb      	cbz	r3, 8005b50 <HAL_I2C_Mem_Read+0x58>
 8005b1c:	f1ba 0f00 	cmp.w	sl, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8005b22:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	f000 80b3 	beq.w	8005c92 <HAL_I2C_Mem_Read+0x19a>
 8005b2c:	f04f 0b01 	mov.w	fp, #1
 8005b30:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8005b34:	f7fc ffbc 	bl	8002ab0 <HAL_GetTick>
 8005b38:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b3a:	9000      	str	r0, [sp, #0]
 8005b3c:	2319      	movs	r3, #25
 8005b3e:	465a      	mov	r2, fp
 8005b40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b44:	4620      	mov	r0, r4
 8005b46:	f7ff fd84 	bl	8005652 <I2C_WaitOnFlagUntilTimeout>
 8005b4a:	b130      	cbz	r0, 8005b5a <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	e09d      	b.n	8005c8c <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b54:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8005b56:	2001      	movs	r0, #1
 8005b58:	e098      	b.n	8005c8c <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b5a:	2322      	movs	r3, #34	@ 0x22
 8005b5c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b60:	2340      	movs	r3, #64	@ 0x40
 8005b62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b66:	2300      	movs	r3, #0
 8005b68:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8005b6a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005b6c:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b6e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b72:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b74:	9701      	str	r7, [sp, #4]
 8005b76:	9500      	str	r5, [sp, #0]
 8005b78:	464b      	mov	r3, r9
 8005b7a:	4642      	mov	r2, r8
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f7ff fdd0 	bl	8005724 <I2C_RequestMemoryRead>
 8005b84:	b970      	cbnz	r0, 8005ba4 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b86:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2bff      	cmp	r3, #255	@ 0xff
 8005b8c:	d90f      	bls.n	8005bae <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b8e:	22ff      	movs	r2, #255	@ 0xff
 8005b90:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b92:	4b44      	ldr	r3, [pc, #272]	@ (8005ca4 <HAL_I2C_Mem_Read+0x1ac>)
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b9a:	4631      	mov	r1, r6
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f7ff fc86 	bl	80054ae <I2C_TransferConfig>
 8005ba2:	e021      	b.n	8005be8 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8005baa:	4658      	mov	r0, fp
 8005bac:	e06e      	b.n	8005c8c <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8005bae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ca4 <HAL_I2C_Mem_Read+0x1ac>)
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f7ff fc74 	bl	80054ae <I2C_TransferConfig>
 8005bc6:	e00f      	b.n	8005be8 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8005bc8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8005bca:	b292      	uxth	r2, r2
 8005bcc:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f7ff fc67 	bl	80054ae <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005be0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d034      	beq.n	8005c52 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005be8:	9700      	str	r7, [sp, #0]
 8005bea:	462b      	mov	r3, r5
 8005bec:	2200      	movs	r2, #0
 8005bee:	2104      	movs	r1, #4
 8005bf0:	4620      	mov	r0, r4
 8005bf2:	f7ff fd2e 	bl	8005652 <I2C_WaitOnFlagUntilTimeout>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d14d      	bne.n	8005c96 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bfe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005c00:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8005c02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005c04:	3301      	adds	r3, #1
 8005c06:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8005c08:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8005c0a:	3a01      	subs	r2, #1
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8005c10:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c1a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0de      	beq.n	8005be0 <HAL_I2C_Mem_Read+0xe8>
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	d1dc      	bne.n	8005be0 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c26:	9700      	str	r7, [sp, #0]
 8005c28:	462b      	mov	r3, r5
 8005c2a:	2180      	movs	r1, #128	@ 0x80
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	f7ff fd10 	bl	8005652 <I2C_WaitOnFlagUntilTimeout>
 8005c32:	bb90      	cbnz	r0, 8005c9a <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c34:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2bff      	cmp	r3, #255	@ 0xff
 8005c3a:	d9c5      	bls.n	8005bc8 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c3c:	22ff      	movs	r2, #255	@ 0xff
 8005c3e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c40:	2300      	movs	r3, #0
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f7ff fc2f 	bl	80054ae <I2C_TransferConfig>
 8005c50:	e7c6      	b.n	8005be0 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c52:	463a      	mov	r2, r7
 8005c54:	4629      	mov	r1, r5
 8005c56:	4620      	mov	r0, r4
 8005c58:	f7ff fda0 	bl	800579c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c5c:	b9f8      	cbnz	r0, 8005c9e <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	2220      	movs	r2, #32
 8005c62:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005c64:	6821      	ldr	r1, [r4, #0]
 8005c66:	684b      	ldr	r3, [r1, #4]
 8005c68:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8005c6c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8005c70:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c7a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8005c84:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8005c88:	e000      	b.n	8005c8c <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8005c8a:	2002      	movs	r0, #2
}
 8005c8c:	b003      	add	sp, #12
 8005c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8005c92:	2002      	movs	r0, #2
 8005c94:	e7fa      	b.n	8005c8c <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8005c96:	2001      	movs	r0, #1
 8005c98:	e7f8      	b.n	8005c8c <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	e7f6      	b.n	8005c8c <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8005c9e:	2001      	movs	r0, #1
 8005ca0:	e7f4      	b.n	8005c8c <HAL_I2C_Mem_Read+0x194>
 8005ca2:	bf00      	nop
 8005ca4:	80002400 	.word	0x80002400

08005ca8 <HAL_I2C_EV_IRQHandler>:
{
 8005ca8:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005caa:	6803      	ldr	r3, [r0, #0]
 8005cac:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cae:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8005cb0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8005cb2:	b103      	cbz	r3, 8005cb6 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8005cb4:	4798      	blx	r3
}
 8005cb6:	bd08      	pop	{r3, pc}

08005cb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005cb8:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cba:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8005cbe:	b2d2      	uxtb	r2, r2
 8005cc0:	2a20      	cmp	r2, #32
 8005cc2:	d123      	bne.n	8005d0c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cc4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005cc8:	2a01      	cmp	r2, #1
 8005cca:	d021      	beq.n	8005d10 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd2:	2224      	movs	r2, #36	@ 0x24
 8005cd4:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cd8:	6800      	ldr	r0, [r0, #0]
 8005cda:	6802      	ldr	r2, [r0, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	6802      	ldr	r2, [r0, #0]
 8005ce6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005cea:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	6802      	ldr	r2, [r0, #0]
 8005cf0:	4311      	orrs	r1, r2
 8005cf2:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cf4:	6819      	ldr	r1, [r3, #0]
 8005cf6:	680a      	ldr	r2, [r1, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d04:	2000      	movs	r0, #0
 8005d06:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d0a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005d0c:	2002      	movs	r0, #2
 8005d0e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005d10:	2002      	movs	r0, #2
  }
}
 8005d12:	4770      	bx	lr

08005d14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d14:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d16:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	2a20      	cmp	r2, #32
 8005d1e:	d121      	bne.n	8005d64 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d20:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8005d24:	2a01      	cmp	r2, #1
 8005d26:	d01f      	beq.n	8005d68 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d2e:	2224      	movs	r2, #36	@ 0x24
 8005d30:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d34:	6800      	ldr	r0, [r0, #0]
 8005d36:	6802      	ldr	r2, [r0, #0]
 8005d38:	f022 0201 	bic.w	r2, r2, #1
 8005d3c:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d42:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d4a:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d4c:	6819      	ldr	r1, [r3, #0]
 8005d4e:	680a      	ldr	r2, [r1, #0]
 8005d50:	f042 0201 	orr.w	r2, r2, #1
 8005d54:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d62:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8005d64:	2002      	movs	r0, #2
 8005d66:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8005d68:	2002      	movs	r0, #2
  }
}
 8005d6a:	4770      	bx	lr

08005d6c <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d6c:	4a02      	ldr	r2, [pc, #8]	@ (8005d78 <HAL_PWR_EnableBkUpAccess+0xc>)
 8005d6e:	6813      	ldr	r3, [r2, #0]
 8005d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d74:	6013      	str	r3, [r2, #0]
}
 8005d76:	4770      	bx	lr
 8005d78:	58000400 	.word	0x58000400

08005d7c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8005d80:	b9a0      	cbnz	r0, 8005dac <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005d82:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8005d8a:	d10a      	bne.n	8005da2 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8005dc4 <HAL_PWR_EnterSLEEPMode+0x48>)
 8005d8e:	6913      	ldr	r3, [r2, #16]
 8005d90:	f023 0304 	bic.w	r3, r3, #4
 8005d94:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005d96:	2c01      	cmp	r4, #1
 8005d98:	d010      	beq.n	8005dbc <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005d9a:	bf40      	sev
    __WFE();
 8005d9c:	bf20      	wfe
    __WFE();
 8005d9e:	bf20      	wfe
  }
}
 8005da0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8005da2:	f000 f821 	bl	8005de8 <HAL_PWREx_DisableLowPowerRunMode>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d0f0      	beq.n	8005d8c <HAL_PWR_EnterSLEEPMode+0x10>
 8005daa:	e7f9      	b.n	8005da0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8005dac:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <HAL_PWR_EnterSLEEPMode+0x44>)
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8005db4:	d1ea      	bne.n	8005d8c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8005db6:	f000 f80f 	bl	8005dd8 <HAL_PWREx_EnableLowPowerRunMode>
 8005dba:	e7e7      	b.n	8005d8c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8005dbc:	bf30      	wfi
 8005dbe:	e7ef      	b.n	8005da0 <HAL_PWR_EnterSLEEPMode+0x24>
 8005dc0:	58000400 	.word	0x58000400
 8005dc4:	e000ed00 	.word	0xe000ed00

08005dc8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005dc8:	4b02      	ldr	r3, [pc, #8]	@ (8005dd4 <HAL_PWREx_GetVoltageRange+0xc>)
 8005dca:	6818      	ldr	r0, [r3, #0]
}
 8005dcc:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	58000400 	.word	0x58000400

08005dd8 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005dd8:	4a02      	ldr	r2, [pc, #8]	@ (8005de4 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8005dda:	6813      	ldr	r3, [r2, #0]
 8005ddc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005de0:	6013      	str	r3, [r2, #0]
}
 8005de2:	4770      	bx	lr
 8005de4:	58000400 	.word	0x58000400

08005de8 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005de8:	4a0f      	ldr	r2, [pc, #60]	@ (8005e28 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005dea:	6813      	ldr	r3, [r2, #0]
 8005dec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005df0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005df2:	4b0e      	ldr	r3, [pc, #56]	@ (8005e2c <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2232      	movs	r2, #50	@ 0x32
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	4a0c      	ldr	r2, [pc, #48]	@ (8005e30 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8005dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005e02:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005e04:	e000      	b.n	8005e08 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8005e06:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005e08:	4a07      	ldr	r2, [pc, #28]	@ (8005e28 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005e0a:	6952      	ldr	r2, [r2, #20]
 8005e0c:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8005e10:	d001      	beq.n	8005e16 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f7      	bne.n	8005e06 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005e16:	4b04      	ldr	r3, [pc, #16]	@ (8005e28 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8005e1e:	d101      	bne.n	8005e24 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005e20:	2000      	movs	r0, #0
 8005e22:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005e24:	2003      	movs	r0, #3
}
 8005e26:	4770      	bx	lr
 8005e28:	58000400 	.word	0x58000400
 8005e2c:	20000004 	.word	0x20000004
 8005e30:	431bde83 	.word	0x431bde83

08005e34 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005e34:	4a0c      	ldr	r2, [pc, #48]	@ (8005e68 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005e36:	6813      	ldr	r3, [r2, #0]
 8005e38:	f023 0307 	bic.w	r3, r3, #7
 8005e3c:	f043 0302 	orr.w	r3, r3, #2
 8005e40:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005e42:	4a0a      	ldr	r2, [pc, #40]	@ (8005e6c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005e44:	6913      	ldr	r3, [r2, #16]
 8005e46:	f043 0304 	orr.w	r3, r3, #4
 8005e4a:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005e4c:	2801      	cmp	r0, #1
 8005e4e:	d008      	beq.n	8005e62 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005e50:	bf40      	sev
    __WFE();
 8005e52:	bf20      	wfe
    __WFE();
 8005e54:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005e56:	4a05      	ldr	r2, [pc, #20]	@ (8005e6c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005e58:	6913      	ldr	r3, [r2, #16]
 8005e5a:	f023 0304 	bic.w	r3, r3, #4
 8005e5e:	6113      	str	r3, [r2, #16]
}
 8005e60:	4770      	bx	lr
    __WFI();
 8005e62:	bf30      	wfi
 8005e64:	e7f7      	b.n	8005e56 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8005e66:	bf00      	nop
 8005e68:	58000400 	.word	0x58000400
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005e70:	b530      	push	{r4, r5, lr}
 8005e72:	b089      	sub	sp, #36	@ 0x24
 8005e74:	4604      	mov	r4, r0
 8005e76:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005e78:	4b2a      	ldr	r3, [pc, #168]	@ (8005f24 <RCC_SetFlashLatency+0xb4>)
 8005e7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005e7e:	9006      	str	r0, [sp, #24]
 8005e80:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005e84:	f103 0208 	add.w	r2, r3, #8
 8005e88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e8c:	9004      	str	r0, [sp, #16]
 8005e8e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005e92:	ad01      	add	r5, sp, #4
 8005e94:	3310      	adds	r3, #16
 8005e96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e9a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e9e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8005ea2:	d007      	beq.n	8005eb4 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	e014      	b.n	8005ed2 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8005ea8:	aa08      	add	r2, sp, #32
 8005eaa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005eae:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005eb2:	e01e      	b.n	8005ef2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d808      	bhi.n	8005ecc <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005eba:	aa08      	add	r2, sp, #32
 8005ebc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005ec0:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005ec4:	42a2      	cmp	r2, r4
 8005ec6:	d2ef      	bcs.n	8005ea8 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ec8:	3301      	adds	r3, #1
 8005eca:	e7f4      	b.n	8005eb6 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ecc:	2500      	movs	r5, #0
 8005ece:	e010      	b.n	8005ef2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d80c      	bhi.n	8005ef0 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005ed6:	aa08      	add	r2, sp, #32
 8005ed8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005edc:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005ee0:	42a2      	cmp	r2, r4
 8005ee2:	d3f5      	bcc.n	8005ed0 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ee4:	aa08      	add	r2, sp, #32
 8005ee6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005eea:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005eee:	e000      	b.n	8005ef2 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ef0:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8005f28 <RCC_SetFlashLatency+0xb8>)
 8005ef4:	6813      	ldr	r3, [r2, #0]
 8005ef6:	f023 0307 	bic.w	r3, r3, #7
 8005efa:	432b      	orrs	r3, r5
 8005efc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005efe:	f7fc fdd7 	bl	8002ab0 <HAL_GetTick>
 8005f02:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f04:	4b08      	ldr	r3, [pc, #32]	@ (8005f28 <RCC_SetFlashLatency+0xb8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	42ab      	cmp	r3, r5
 8005f0e:	d006      	beq.n	8005f1e <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f10:	f7fc fdce 	bl	8002ab0 <HAL_GetTick>
 8005f14:	1b00      	subs	r0, r0, r4
 8005f16:	2802      	cmp	r0, #2
 8005f18:	d9f4      	bls.n	8005f04 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8005f1a:	2003      	movs	r0, #3
 8005f1c:	e000      	b.n	8005f20 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8005f1e:	2000      	movs	r0, #0
}
 8005f20:	b009      	add	sp, #36	@ 0x24
 8005f22:	bd30      	pop	{r4, r5, pc}
 8005f24:	08011030 	.word	0x08011030
 8005f28:	58004000 	.word	0x58004000

08005f2c <RCC_SetFlashLatencyFromMSIRange>:
{
 8005f2c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005f2e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005f32:	4b0c      	ldr	r3, [pc, #48]	@ (8005f64 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005f34:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005f38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	4a08      	ldr	r2, [pc, #32]	@ (8005f68 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f4a:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005f4e:	f7ff ff3b 	bl	8005dc8 <HAL_PWREx_GetVoltageRange>
 8005f52:	4601      	mov	r1, r0
 8005f54:	4b05      	ldr	r3, [pc, #20]	@ (8005f6c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8005f56:	fba3 3404 	umull	r3, r4, r3, r4
 8005f5a:	0ca0      	lsrs	r0, r4, #18
 8005f5c:	f7ff ff88 	bl	8005e70 <RCC_SetFlashLatency>
}
 8005f60:	bd10      	pop	{r4, pc}
 8005f62:	bf00      	nop
 8005f64:	08011984 	.word	0x08011984
 8005f68:	080119e4 	.word	0x080119e4
 8005f6c:	431bde83 	.word	0x431bde83

08005f70 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f74:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f7c:	f011 010c 	ands.w	r1, r1, #12
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCC_GetSysClockFreq+0x28>
 8005f82:	290c      	cmp	r1, #12
 8005f84:	d006      	beq.n	8005f94 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f86:	2904      	cmp	r1, #4
 8005f88:	d047      	beq.n	800601a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f8a:	2908      	cmp	r1, #8
 8005f8c:	d03b      	beq.n	8006006 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8005f8e:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8005f90:	4610      	mov	r0, r2
 8005f92:	e026      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d1f6      	bne.n	8005f86 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f013 0308 	ands.w	r3, r3, #8
 8005fa2:	d00d      	beq.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x50>
 8005fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f013 0308 	ands.w	r3, r3, #8
 8005fae:	d124      	bne.n	8005ffa <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005fb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fb4:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005fb8:	4a2e      	ldr	r2, [pc, #184]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x104>)
 8005fba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005fbe:	e00e      	b.n	8005fde <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005fc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	f012 0f08 	tst.w	r2, #8
 8005fca:	d112      	bne.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005fcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fd4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005fd8:	4a26      	ldr	r2, [pc, #152]	@ (8006074 <HAL_RCC_GetSysClockFreq+0x104>)
 8005fda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fde:	b1d1      	cbz	r1, 8006016 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005fe0:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	d01a      	beq.n	8006026 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005ff0:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	e7ee      	b.n	8005fd8 <HAL_RCC_GetSysClockFreq+0x68>
 8005ffa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ffe:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006000:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006004:	e7d8      	b.n	8005fb8 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 8006010:	d106      	bne.n	8006020 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8006012:	4819      	ldr	r0, [pc, #100]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x108>)
 8006014:	e7e5      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8006016:	4610      	mov	r0, r2
 8006018:	e7e3      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800601a:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 800601c:	4817      	ldr	r0, [pc, #92]	@ (800607c <HAL_RCC_GetSysClockFreq+0x10c>)
 800601e:	e7e0      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8006020:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8006022:	4816      	ldr	r0, [pc, #88]	@ (800607c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006024:	e7dd      	b.n	8005fe2 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8006030:	2b02      	cmp	r3, #2
 8006032:	d009      	beq.n	8006048 <HAL_RCC_GetSysClockFreq+0xd8>
 8006034:	2b03      	cmp	r3, #3
 8006036:	d108      	bne.n	800604a <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8006038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8006042:	d115      	bne.n	8006070 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8006044:	4a0c      	ldr	r2, [pc, #48]	@ (8006078 <HAL_RCC_GetSysClockFreq+0x108>)
 8006046:	e000      	b.n	800604a <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8006048:	4a0c      	ldr	r2, [pc, #48]	@ (800607c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800604a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800604e:	68cb      	ldr	r3, [r1, #12]
 8006050:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006054:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006058:	68cb      	ldr	r3, [r1, #12]
 800605a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800605e:	3301      	adds	r3, #1
 8006060:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006064:	68c8      	ldr	r0, [r1, #12]
 8006066:	0f40      	lsrs	r0, r0, #29
 8006068:	3001      	adds	r0, #1
 800606a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800606e:	e7bf      	b.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8006070:	4a02      	ldr	r2, [pc, #8]	@ (800607c <HAL_RCC_GetSysClockFreq+0x10c>)
 8006072:	e7ea      	b.n	800604a <HAL_RCC_GetSysClockFreq+0xda>
 8006074:	08011984 	.word	0x08011984
 8006078:	01e84800 	.word	0x01e84800
 800607c:	00f42400 	.word	0x00f42400

08006080 <HAL_RCC_GetHCLKFreq>:
{
 8006080:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006082:	f7ff ff75 	bl	8005f70 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006090:	4a02      	ldr	r2, [pc, #8]	@ (800609c <HAL_RCC_GetHCLKFreq+0x1c>)
 8006092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006096:	fbb0 f0f3 	udiv	r0, r0, r3
 800609a:	bd08      	pop	{r3, pc}
 800609c:	080119e4 	.word	0x080119e4

080060a0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80060a0:	2800      	cmp	r0, #0
 80060a2:	f000 8311 	beq.w	80066c8 <HAL_RCC_OscConfig+0x628>
{
 80060a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80060aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ae:	689d      	ldr	r5, [r3, #8]
 80060b0:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80060b4:	68de      	ldr	r6, [r3, #12]
 80060b6:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060ba:	6803      	ldr	r3, [r0, #0]
 80060bc:	f013 0f20 	tst.w	r3, #32
 80060c0:	d02a      	beq.n	8006118 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80060c2:	2d00      	cmp	r5, #0
 80060c4:	d065      	beq.n	8006192 <HAL_RCC_OscConfig+0xf2>
 80060c6:	2d0c      	cmp	r5, #12
 80060c8:	d061      	beq.n	800618e <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060ca:	6a23      	ldr	r3, [r4, #32]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 80bf 	beq.w	8006250 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80060d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060d6:	6813      	ldr	r3, [r2, #0]
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80060de:	f7fc fce7 	bl	8002ab0 <HAL_GetTick>
 80060e2:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80060e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f013 0f02 	tst.w	r3, #2
 80060ee:	f000 80a7 	beq.w	8006240 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80060f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	f042 0208 	orr.w	r2, r2, #8
 80060fc:	601a      	str	r2, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006104:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006106:	430a      	orrs	r2, r1
 8006108:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800610a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006112:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006116:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	f013 0f01 	tst.w	r3, #1
 800611e:	f000 80b5 	beq.w	800628c <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006122:	2d08      	cmp	r5, #8
 8006124:	f000 80ae 	beq.w	8006284 <HAL_RCC_OscConfig+0x1e4>
 8006128:	2d0c      	cmp	r5, #12
 800612a:	f000 80a8 	beq.w	800627e <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800612e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006138:	68a1      	ldr	r1, [r4, #8]
 800613a:	430b      	orrs	r3, r1
 800613c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006144:	f000 80c4 	beq.w	80062d0 <HAL_RCC_OscConfig+0x230>
 8006148:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800614c:	f000 80c5 	beq.w	80062da <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800615a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8006162:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 80c2 	beq.w	80062f0 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 800616c:	f7fc fca0 	bl	8002ab0 <HAL_GetTick>
 8006170:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800617c:	f040 8086 	bne.w	800628c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006180:	f7fc fc96 	bl	8002ab0 <HAL_GetTick>
 8006184:	1bc0      	subs	r0, r0, r7
 8006186:	2864      	cmp	r0, #100	@ 0x64
 8006188:	d9f3      	bls.n	8006172 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 800618a:	2003      	movs	r0, #3
 800618c:	e2a9      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800618e:	2e01      	cmp	r6, #1
 8006190:	d19b      	bne.n	80060ca <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006192:	6a23      	ldr	r3, [r4, #32]
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8299 	beq.w	80066cc <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800619a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800619c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f013 0f08 	tst.w	r3, #8
 80061a6:	d029      	beq.n	80061fc <HAL_RCC_OscConfig+0x15c>
 80061a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061b2:	4298      	cmp	r0, r3
 80061b4:	d92a      	bls.n	800620c <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061b6:	f7ff feb9 	bl	8005f2c <RCC_SetFlashLatencyFromMSIRange>
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f040 8288 	bne.w	80066d0 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80061c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	f042 0208 	orr.w	r2, r2, #8
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80061d2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80061d4:	430a      	orrs	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061d8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80061e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80061e4:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80061e6:	f7ff ff4b 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 80061ea:	4bba      	ldr	r3, [pc, #744]	@ (80064d4 <HAL_RCC_OscConfig+0x434>)
 80061ec:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80061ee:	4bba      	ldr	r3, [pc, #744]	@ (80064d8 <HAL_RCC_OscConfig+0x438>)
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	f7fe fc37 	bl	8004a64 <HAL_InitTick>
        if (status != HAL_OK)
 80061f6:	2800      	cmp	r0, #0
 80061f8:	d08e      	beq.n	8006118 <HAL_RCC_OscConfig+0x78>
 80061fa:	e272      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80061fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006200:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006204:	091b      	lsrs	r3, r3, #4
 8006206:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800620a:	e7d2      	b.n	80061b2 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800620c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	f042 0208 	orr.w	r2, r2, #8
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800621e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8006220:	430a      	orrs	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006224:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800622c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006230:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006232:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006234:	f7ff fe7a 	bl	8005f2c <RCC_SetFlashLatencyFromMSIRange>
 8006238:	2800      	cmp	r0, #0
 800623a:	d0d4      	beq.n	80061e6 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 800623c:	2001      	movs	r0, #1
 800623e:	e250      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006240:	f7fc fc36 	bl	8002ab0 <HAL_GetTick>
 8006244:	1bc0      	subs	r0, r0, r7
 8006246:	2802      	cmp	r0, #2
 8006248:	f67f af4c 	bls.w	80060e4 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800624c:	2003      	movs	r0, #3
 800624e:	e248      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006250:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006254:	6813      	ldr	r3, [r2, #0]
 8006256:	f023 0301 	bic.w	r3, r3, #1
 800625a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800625c:	f7fc fc28 	bl	8002ab0 <HAL_GetTick>
 8006260:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f013 0f02 	tst.w	r3, #2
 800626c:	f43f af54 	beq.w	8006118 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006270:	f7fc fc1e 	bl	8002ab0 <HAL_GetTick>
 8006274:	1bc0      	subs	r0, r0, r7
 8006276:	2802      	cmp	r0, #2
 8006278:	d9f3      	bls.n	8006262 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 800627a:	2003      	movs	r0, #3
 800627c:	e231      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800627e:	2e03      	cmp	r6, #3
 8006280:	f47f af55 	bne.w	800612e <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8224 	beq.w	80066d4 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	f013 0f02 	tst.w	r3, #2
 8006292:	d056      	beq.n	8006342 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006294:	2d04      	cmp	r5, #4
 8006296:	d03d      	beq.n	8006314 <HAL_RCC_OscConfig+0x274>
 8006298:	2d0c      	cmp	r5, #12
 800629a:	d039      	beq.n	8006310 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 808a 	beq.w	80063b8 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80062a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062a8:	6813      	ldr	r3, [r2, #0]
 80062aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062ae:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80062b0:	f7fc fbfe 	bl	8002ab0 <HAL_GetTick>
 80062b4:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80062c0:	d136      	bne.n	8006330 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062c2:	f7fc fbf5 	bl	8002ab0 <HAL_GetTick>
 80062c6:	1b80      	subs	r0, r0, r6
 80062c8:	2802      	cmp	r0, #2
 80062ca:	d9f4      	bls.n	80062b6 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 80062cc:	2003      	movs	r0, #3
 80062ce:	e208      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80062d0:	6813      	ldr	r3, [r2, #0]
 80062d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d6:	6013      	str	r3, [r2, #0]
}
 80062d8:	e744      	b.n	8006164 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80062da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80062e4:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80062ec:	601a      	str	r2, [r3, #0]
}
 80062ee:	e739      	b.n	8006164 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80062f0:	f7fc fbde 	bl	8002ab0 <HAL_GetTick>
 80062f4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006300:	d0c4      	beq.n	800628c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006302:	f7fc fbd5 	bl	8002ab0 <HAL_GetTick>
 8006306:	1bc0      	subs	r0, r0, r7
 8006308:	2864      	cmp	r0, #100	@ 0x64
 800630a:	d9f4      	bls.n	80062f6 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 800630c:	2003      	movs	r0, #3
 800630e:	e1e8      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006310:	2e02      	cmp	r6, #2
 8006312:	d1c3      	bne.n	800629c <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006314:	6923      	ldr	r3, [r4, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 81de 	beq.w	80066d8 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800631e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006322:	6853      	ldr	r3, [r2, #4]
 8006324:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006328:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800632c:	6053      	str	r3, [r2, #4]
}
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006330:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006332:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006336:	6853      	ldr	r3, [r2, #4]
 8006338:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800633c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006340:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	f013 0f08 	tst.w	r3, #8
 8006348:	d07e      	beq.n	8006448 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800634a:	69a3      	ldr	r3, [r4, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d062      	beq.n	8006416 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8006350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006354:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8006358:	69e1      	ldr	r1, [r4, #28]
 800635a:	f003 0210 	and.w	r2, r3, #16
 800635e:	4291      	cmp	r1, r2
 8006360:	d011      	beq.n	8006386 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8006362:	f003 0203 	and.w	r2, r3, #3
 8006366:	2a02      	cmp	r2, #2
 8006368:	f000 81b8 	beq.w	80066dc <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800636c:	f013 0f01 	tst.w	r3, #1
 8006370:	d138      	bne.n	80063e4 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8006372:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006376:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800637a:	f023 0310 	bic.w	r3, r3, #16
 800637e:	69e1      	ldr	r1, [r4, #28]
 8006380:	430b      	orrs	r3, r1
 8006382:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8006386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800638a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8006396:	f7fc fb8b 	bl	8002ab0 <HAL_GetTick>
 800639a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800639c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063a4:	f013 0f02 	tst.w	r3, #2
 80063a8:	d14e      	bne.n	8006448 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063aa:	f7fc fb81 	bl	8002ab0 <HAL_GetTick>
 80063ae:	1b80      	subs	r0, r0, r6
 80063b0:	2811      	cmp	r0, #17
 80063b2:	d9f3      	bls.n	800639c <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 80063b4:	2003      	movs	r0, #3
 80063b6:	e194      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80063b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063bc:	6813      	ldr	r3, [r2, #0]
 80063be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80063c4:	f7fc fb74 	bl	8002ab0 <HAL_GetTick>
 80063c8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80063ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80063d4:	d0b5      	beq.n	8006342 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063d6:	f7fc fb6b 	bl	8002ab0 <HAL_GetTick>
 80063da:	1b80      	subs	r0, r0, r6
 80063dc:	2802      	cmp	r0, #2
 80063de:	d9f4      	bls.n	80063ca <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 80063e0:	2003      	movs	r0, #3
 80063e2:	e17e      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80063e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063e8:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 80063f4:	f7fc fb5c 	bl	8002ab0 <HAL_GetTick>
 80063f8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80063fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006402:	f013 0f02 	tst.w	r3, #2
 8006406:	d0b4      	beq.n	8006372 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006408:	f7fc fb52 	bl	8002ab0 <HAL_GetTick>
 800640c:	1b80      	subs	r0, r0, r6
 800640e:	2811      	cmp	r0, #17
 8006410:	d9f3      	bls.n	80063fa <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8006412:	2003      	movs	r0, #3
 8006414:	e165      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8006416:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800641a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800641e:	f023 0301 	bic.w	r3, r3, #1
 8006422:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8006426:	f7fc fb43 	bl	8002ab0 <HAL_GetTick>
 800642a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800642c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006434:	f013 0f02 	tst.w	r3, #2
 8006438:	d006      	beq.n	8006448 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800643a:	f7fc fb39 	bl	8002ab0 <HAL_GetTick>
 800643e:	1b80      	subs	r0, r0, r6
 8006440:	2811      	cmp	r0, #17
 8006442:	d9f3      	bls.n	800642c <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8006444:	2003      	movs	r0, #3
 8006446:	e14c      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	f013 0f04 	tst.w	r3, #4
 800644e:	f000 80b8 	beq.w	80065c2 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8006452:	4b22      	ldr	r3, [pc, #136]	@ (80064dc <HAL_RCC_OscConfig+0x43c>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800645a:	d110      	bne.n	800647e <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 800645c:	f7ff fc86 	bl	8005d6c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8006460:	f7fc fb26 	bl	8002ab0 <HAL_GetTick>
 8006464:	4606      	mov	r6, r0
 8006466:	4b1d      	ldr	r3, [pc, #116]	@ (80064dc <HAL_RCC_OscConfig+0x43c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006470:	f7fc fb1e 	bl	8002ab0 <HAL_GetTick>
 8006474:	1b80      	subs	r0, r0, r6
 8006476:	2802      	cmp	r0, #2
 8006478:	d9f5      	bls.n	8006466 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800647a:	2003      	movs	r0, #3
 800647c:	e131      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800647e:	68e3      	ldr	r3, [r4, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d068      	beq.n	8006556 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8006484:	2b85      	cmp	r3, #133	@ 0x85
 8006486:	d001      	beq.n	800648c <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8006488:	2b05      	cmp	r3, #5
 800648a:	d107      	bne.n	800649c <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800648c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006490:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006494:	f043 0304 	orr.w	r3, r3, #4
 8006498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800649c:	f7fc fb08 	bl	8002ab0 <HAL_GetTick>
 80064a0:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80064a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064a6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80064aa:	f043 0301 	orr.w	r3, r3, #1
 80064ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80064b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ba:	f013 0f02 	tst.w	r3, #2
 80064be:	d10f      	bne.n	80064e0 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064c0:	f7fc faf6 	bl	8002ab0 <HAL_GetTick>
 80064c4:	1b80      	subs	r0, r0, r6
 80064c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80064ca:	4298      	cmp	r0, r3
 80064cc:	d9f1      	bls.n	80064b2 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 80064ce:	2003      	movs	r0, #3
 80064d0:	e107      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
 80064d2:	bf00      	nop
 80064d4:	20000004 	.word	0x20000004
 80064d8:	20000064 	.word	0x20000064
 80064dc:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80064e0:	68e3      	ldr	r3, [r4, #12]
 80064e2:	2b81      	cmp	r3, #129	@ 0x81
 80064e4:	d001      	beq.n	80064ea <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80064e6:	2b85      	cmp	r3, #133	@ 0x85
 80064e8:	d11a      	bne.n	8006520 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 80064ea:	f7fc fae1 	bl	8002ab0 <HAL_GetTick>
 80064ee:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80064f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064f4:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80064f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006508:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800650c:	d159      	bne.n	80065c2 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800650e:	f7fc facf 	bl	8002ab0 <HAL_GetTick>
 8006512:	1b80      	subs	r0, r0, r6
 8006514:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006518:	4298      	cmp	r0, r3
 800651a:	d9f1      	bls.n	8006500 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 800651c:	2003      	movs	r0, #3
 800651e:	e0e0      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8006520:	f7fc fac6 	bl	8002ab0 <HAL_GetTick>
 8006524:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800652a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800652e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006532:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800653a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653e:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8006542:	d03e      	beq.n	80065c2 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006544:	f7fc fab4 	bl	8002ab0 <HAL_GetTick>
 8006548:	1b80      	subs	r0, r0, r6
 800654a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800654e:	4298      	cmp	r0, r3
 8006550:	d9f1      	bls.n	8006536 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8006552:	2003      	movs	r0, #3
 8006554:	e0c5      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8006556:	f7fc faab 	bl	8002ab0 <HAL_GetTick>
 800655a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800655c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006560:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800656c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006574:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8006578:	d008      	beq.n	800658c <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657a:	f7fc fa99 	bl	8002ab0 <HAL_GetTick>
 800657e:	1b80      	subs	r0, r0, r6
 8006580:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006584:	4298      	cmp	r0, r3
 8006586:	d9f1      	bls.n	800656c <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8006588:	2003      	movs	r0, #3
 800658a:	e0aa      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800658c:	f7fc fa90 	bl	8002ab0 <HAL_GetTick>
 8006590:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006596:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065aa:	f013 0f02 	tst.w	r3, #2
 80065ae:	d008      	beq.n	80065c2 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b0:	f7fc fa7e 	bl	8002ab0 <HAL_GetTick>
 80065b4:	1b80      	subs	r0, r0, r6
 80065b6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80065ba:	4298      	cmp	r0, r3
 80065bc:	d9f1      	bls.n	80065a2 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 80065be:	2003      	movs	r0, #3
 80065c0:	e08f      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80065c2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 808b 	beq.w	80066e0 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065ca:	2d0c      	cmp	r5, #12
 80065cc:	d060      	beq.n	8006690 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d016      	beq.n	8006600 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80065d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065d6:	6813      	ldr	r3, [r2, #0]
 80065d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065dc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80065de:	f7fc fa67 	bl	8002ab0 <HAL_GetTick>
 80065e2:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80065e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80065ee:	d148      	bne.n	8006682 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80065f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065f4:	68d1      	ldr	r1, [r2, #12]
 80065f6:	4b41      	ldr	r3, [pc, #260]	@ (80066fc <HAL_RCC_OscConfig+0x65c>)
 80065f8:	400b      	ands	r3, r1
 80065fa:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80065fc:	2000      	movs	r0, #0
 80065fe:	e070      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006604:	6813      	ldr	r3, [r2, #0]
 8006606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800660a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800660c:	f7fc fa50 	bl	8002ab0 <HAL_GetTick>
 8006610:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800661c:	d12a      	bne.n	8006674 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800661e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006622:	68d3      	ldr	r3, [r2, #12]
 8006624:	4936      	ldr	r1, [pc, #216]	@ (8006700 <HAL_RCC_OscConfig+0x660>)
 8006626:	4019      	ands	r1, r3
 8006628:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800662a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800662c:	4303      	orrs	r3, r0
 800662e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8006630:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006634:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8006636:	4303      	orrs	r3, r0
 8006638:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800663a:	4303      	orrs	r3, r0
 800663c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800663e:	4303      	orrs	r3, r0
 8006640:	4319      	orrs	r1, r3
 8006642:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006644:	6813      	ldr	r3, [r2, #0]
 8006646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800664a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800664c:	68d3      	ldr	r3, [r2, #12]
 800664e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006652:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8006654:	f7fc fa2c 	bl	8002ab0 <HAL_GetTick>
 8006658:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800665a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8006664:	d13e      	bne.n	80066e4 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006666:	f7fc fa23 	bl	8002ab0 <HAL_GetTick>
 800666a:	1b00      	subs	r0, r0, r4
 800666c:	280a      	cmp	r0, #10
 800666e:	d9f4      	bls.n	800665a <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8006670:	2003      	movs	r0, #3
 8006672:	e036      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006674:	f7fc fa1c 	bl	8002ab0 <HAL_GetTick>
 8006678:	1b40      	subs	r0, r0, r5
 800667a:	280a      	cmp	r0, #10
 800667c:	d9c9      	bls.n	8006612 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800667e:	2003      	movs	r0, #3
 8006680:	e02f      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006682:	f7fc fa15 	bl	8002ab0 <HAL_GetTick>
 8006686:	1b00      	subs	r0, r0, r4
 8006688:	280a      	cmp	r0, #10
 800668a:	d9ab      	bls.n	80065e4 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 800668c:	2003      	movs	r0, #3
 800668e:	e028      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006690:	2b01      	cmp	r3, #1
 8006692:	d029      	beq.n	80066e8 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8006694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006698:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800669a:	f003 0103 	and.w	r1, r3, #3
 800669e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80066a0:	4291      	cmp	r1, r2
 80066a2:	d123      	bne.n	80066ec <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80066a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80066a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066aa:	428a      	cmp	r2, r1
 80066ac:	d120      	bne.n	80066f0 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80066ae:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80066b2:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80066b4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80066b8:	d11c      	bne.n	80066f4 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80066ba:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80066be:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d119      	bne.n	80066f8 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 80066c4:	2000      	movs	r0, #0
 80066c6:	e00c      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 80066c8:	2001      	movs	r0, #1
}
 80066ca:	4770      	bx	lr
        return HAL_ERROR;
 80066cc:	2001      	movs	r0, #1
 80066ce:	e008      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 80066d0:	2001      	movs	r0, #1
 80066d2:	e006      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80066d4:	2001      	movs	r0, #1
 80066d6:	e004      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80066d8:	2001      	movs	r0, #1
 80066da:	e002      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 80066dc:	2001      	movs	r0, #1
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 80066e0:	2000      	movs	r0, #0
}
 80066e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80066e4:	2000      	movs	r0, #0
 80066e6:	e7fc      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 80066e8:	2001      	movs	r0, #1
 80066ea:	e7fa      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
 80066ee:	e7f8      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
 80066f0:	2001      	movs	r0, #1
 80066f2:	e7f6      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
 80066f4:	2001      	movs	r0, #1
 80066f6:	e7f4      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
 80066f8:	2001      	movs	r0, #1
 80066fa:	e7f2      	b.n	80066e2 <HAL_RCC_OscConfig+0x642>
 80066fc:	eefefffc 	.word	0xeefefffc
 8006700:	11c1808c 	.word	0x11c1808c

08006704 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006704:	2800      	cmp	r0, #0
 8006706:	f000 8127 	beq.w	8006958 <HAL_RCC_ClockConfig+0x254>
{
 800670a:	b570      	push	{r4, r5, r6, lr}
 800670c:	460c      	mov	r4, r1
 800670e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006710:	4b93      	ldr	r3, [pc, #588]	@ (8006960 <HAL_RCC_ClockConfig+0x25c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	428b      	cmp	r3, r1
 800671a:	d32d      	bcc.n	8006778 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800671c:	682b      	ldr	r3, [r5, #0]
 800671e:	f013 0f02 	tst.w	r3, #2
 8006722:	d13f      	bne.n	80067a4 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	f013 0f20 	tst.w	r3, #32
 800672a:	d153      	bne.n	80067d4 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006732:	d16a      	bne.n	800680a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	f013 0f04 	tst.w	r3, #4
 800673a:	f040 8083 	bne.w	8006844 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	f013 0f08 	tst.w	r3, #8
 8006744:	f040 8097 	bne.w	8006876 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006748:	682b      	ldr	r3, [r5, #0]
 800674a:	f013 0f01 	tst.w	r3, #1
 800674e:	f000 80de 	beq.w	800690e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006752:	686b      	ldr	r3, [r5, #4]
 8006754:	2b02      	cmp	r3, #2
 8006756:	f000 80a8 	beq.w	80068aa <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800675a:	2b03      	cmp	r3, #3
 800675c:	f000 80ad 	beq.w	80068ba <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006760:	2b00      	cmp	r3, #0
 8006762:	f040 80b2 	bne.w	80068ca <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006766:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	f012 0f02 	tst.w	r2, #2
 8006770:	f040 80b1 	bne.w	80068d6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8006774:	2001      	movs	r0, #1
 8006776:	e0ee      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006778:	4a79      	ldr	r2, [pc, #484]	@ (8006960 <HAL_RCC_ClockConfig+0x25c>)
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	f023 0307 	bic.w	r3, r3, #7
 8006780:	430b      	orrs	r3, r1
 8006782:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006784:	f7fc f994 	bl	8002ab0 <HAL_GetTick>
 8006788:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800678a:	4b75      	ldr	r3, [pc, #468]	@ (8006960 <HAL_RCC_ClockConfig+0x25c>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	42a3      	cmp	r3, r4
 8006794:	d0c2      	beq.n	800671c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006796:	f7fc f98b 	bl	8002ab0 <HAL_GetTick>
 800679a:	1b80      	subs	r0, r0, r6
 800679c:	2802      	cmp	r0, #2
 800679e:	d9f4      	bls.n	800678a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 80067a0:	2003      	movs	r0, #3
 80067a2:	e0d8      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80067a4:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80067a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067aa:	688a      	ldr	r2, [r1, #8]
 80067ac:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80067b0:	4313      	orrs	r3, r2
 80067b2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80067b4:	f7fc f97c 	bl	8002ab0 <HAL_GetTick>
 80067b8:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80067ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80067c4:	d1ae      	bne.n	8006724 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067c6:	f7fc f973 	bl	8002ab0 <HAL_GetTick>
 80067ca:	1b80      	subs	r0, r0, r6
 80067cc:	2802      	cmp	r0, #2
 80067ce:	d9f4      	bls.n	80067ba <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 80067d0:	2003      	movs	r0, #3
 80067d2:	e0c0      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80067d4:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80067d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067da:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 80067de:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80067e2:	4313      	orrs	r3, r2
 80067e4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 80067e8:	f7fc f962 	bl	8002ab0 <HAL_GetTick>
 80067ec:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80067ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80067f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80067fa:	d197      	bne.n	800672c <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80067fc:	f7fc f958 	bl	8002ab0 <HAL_GetTick>
 8006800:	1b80      	subs	r0, r0, r6
 8006802:	2802      	cmp	r0, #2
 8006804:	d9f3      	bls.n	80067ee <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8006806:	2003      	movs	r0, #3
 8006808:	e0a5      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800680a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800680c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006810:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 8006814:	f023 030f 	bic.w	r3, r3, #15
 8006818:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 800681c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8006820:	f7fc f946 	bl	8002ab0 <HAL_GetTick>
 8006824:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800682a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800682e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8006832:	f47f af7f 	bne.w	8006734 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006836:	f7fc f93b 	bl	8002ab0 <HAL_GetTick>
 800683a:	1b80      	subs	r0, r0, r6
 800683c:	2802      	cmp	r0, #2
 800683e:	d9f2      	bls.n	8006826 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8006840:	2003      	movs	r0, #3
 8006842:	e088      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006846:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800684a:	688a      	ldr	r2, [r1, #8]
 800684c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006850:	4313      	orrs	r3, r2
 8006852:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8006854:	f7fc f92c 	bl	8002ab0 <HAL_GetTick>
 8006858:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800685a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8006864:	f47f af6b 	bne.w	800673e <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006868:	f7fc f922 	bl	8002ab0 <HAL_GetTick>
 800686c:	1b80      	subs	r0, r0, r6
 800686e:	2802      	cmp	r0, #2
 8006870:	d9f3      	bls.n	800685a <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8006872:	2003      	movs	r0, #3
 8006874:	e06f      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006876:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006878:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800687c:	6893      	ldr	r3, [r2, #8]
 800687e:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8006882:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006886:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8006888:	f7fc f912 	bl	8002ab0 <HAL_GetTick>
 800688c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800688e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8006898:	f47f af56 	bne.w	8006748 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800689c:	f7fc f908 	bl	8002ab0 <HAL_GetTick>
 80068a0:	1b80      	subs	r0, r0, r6
 80068a2:	2802      	cmp	r0, #2
 80068a4:	d9f3      	bls.n	800688e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 80068a6:	2003      	movs	r0, #3
 80068a8:	e055      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80068aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ae:	6812      	ldr	r2, [r2, #0]
 80068b0:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80068b4:	d10f      	bne.n	80068d6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80068b6:	2001      	movs	r0, #1
 80068b8:	e04d      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80068ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068be:	6812      	ldr	r2, [r2, #0]
 80068c0:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 80068c4:	d107      	bne.n	80068d6 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80068c6:	2001      	movs	r0, #1
 80068c8:	e045      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80068ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80068d4:	d042      	beq.n	800695c <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80068d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80068da:	688a      	ldr	r2, [r1, #8]
 80068dc:	f022 0203 	bic.w	r2, r2, #3
 80068e0:	4313      	orrs	r3, r2
 80068e2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80068e4:	f7fc f8e4 	bl	8002ab0 <HAL_GetTick>
 80068e8:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80068ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068f4:	686a      	ldr	r2, [r5, #4]
 80068f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80068fa:	d008      	beq.n	800690e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068fc:	f7fc f8d8 	bl	8002ab0 <HAL_GetTick>
 8006900:	1b80      	subs	r0, r0, r6
 8006902:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006906:	4298      	cmp	r0, r3
 8006908:	d9ef      	bls.n	80068ea <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800690a:	2003      	movs	r0, #3
 800690c:	e023      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800690e:	4b14      	ldr	r3, [pc, #80]	@ (8006960 <HAL_RCC_ClockConfig+0x25c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	42a3      	cmp	r3, r4
 8006918:	d915      	bls.n	8006946 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691a:	4a11      	ldr	r2, [pc, #68]	@ (8006960 <HAL_RCC_ClockConfig+0x25c>)
 800691c:	6813      	ldr	r3, [r2, #0]
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	4323      	orrs	r3, r4
 8006924:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006926:	f7fc f8c3 	bl	8002ab0 <HAL_GetTick>
 800692a:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800692c:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <HAL_RCC_ClockConfig+0x25c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0307 	and.w	r3, r3, #7
 8006934:	42a3      	cmp	r3, r4
 8006936:	d006      	beq.n	8006946 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006938:	f7fc f8ba 	bl	8002ab0 <HAL_GetTick>
 800693c:	1b40      	subs	r0, r0, r5
 800693e:	2802      	cmp	r0, #2
 8006940:	d9f4      	bls.n	800692c <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8006942:	2003      	movs	r0, #3
 8006944:	e007      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006946:	f7ff fb9b 	bl	8006080 <HAL_RCC_GetHCLKFreq>
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_RCC_ClockConfig+0x260>)
 800694c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800694e:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <HAL_RCC_ClockConfig+0x264>)
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f7fe f887 	bl	8004a64 <HAL_InitTick>
}
 8006956:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006958:	2001      	movs	r0, #1
}
 800695a:	4770      	bx	lr
        return HAL_ERROR;
 800695c:	2001      	movs	r0, #1
 800695e:	e7fa      	b.n	8006956 <HAL_RCC_ClockConfig+0x252>
 8006960:	58004000 	.word	0x58004000
 8006964:	20000004 	.word	0x20000004
 8006968:	20000064 	.word	0x20000064

0800696c <HAL_RCC_GetPCLK1Freq>:
{
 800696c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800696e:	f7ff fb87 	bl	8006080 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800697c:	4a02      	ldr	r2, [pc, #8]	@ (8006988 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800697e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8006982:	40d8      	lsrs	r0, r3
 8006984:	bd08      	pop	{r3, pc}
 8006986:	bf00      	nop
 8006988:	080119c4 	.word	0x080119c4

0800698c <HAL_RCC_GetPCLK2Freq>:
{
 800698c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800698e:	f7ff fb77 	bl	8006080 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800699c:	4a02      	ldr	r2, [pc, #8]	@ (80069a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800699e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80069a2:	40d8      	lsrs	r0, r3
 80069a4:	bd08      	pop	{r3, pc}
 80069a6:	bf00      	nop
 80069a8:	080119c4 	.word	0x080119c4

080069ac <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80069ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069b0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80069b4:	0902      	lsrs	r2, r0, #4
 80069b6:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 80069ba:	ea23 0302 	bic.w	r3, r3, r2
 80069be:	0100      	lsls	r0, r0, #4
 80069c0:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 80069c4:	4303      	orrs	r3, r0
 80069c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80069ca:	4770      	bx	lr

080069cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069d0:	6803      	ldr	r3, [r0, #0]
 80069d2:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80069d6:	f040 80aa 	bne.w	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80069da:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	f013 0f01 	tst.w	r3, #1
 80069e2:	d00a      	beq.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069e4:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80069e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069ea:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80069ee:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 80069f2:	b292      	uxth	r2, r2
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	f013 0f02 	tst.w	r3, #2
 8006a00:	d00a      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a02:	68a2      	ldr	r2, [r4, #8]
 8006a04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a08:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006a0c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8006a10:	b292      	uxth	r2, r2
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	f013 0f20 	tst.w	r3, #32
 8006a1e:	d009      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a20:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006a22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a26:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006a2a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8006a3a:	d00c      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006a3c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006a3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a42:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006a46:	0c02      	lsrs	r2, r0, #16
 8006a48:	0412      	lsls	r2, r2, #16
 8006a4a:	ea23 0302 	bic.w	r3, r3, r2
 8006a4e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8006a5c:	d00c      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a5e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8006a60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a64:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006a68:	0c02      	lsrs	r2, r0, #16
 8006a6a:	0412      	lsls	r2, r2, #16
 8006a6c:	ea23 0302 	bic.w	r3, r3, r2
 8006a70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8006a7e:	d00c      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006a80:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006a82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a86:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8006a8a:	0c02      	lsrs	r2, r0, #16
 8006a8c:	0412      	lsls	r2, r2, #16
 8006a8e:	ea23 0302 	bic.w	r3, r3, r2
 8006a92:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006aa0:	f040 809d 	bne.w	8006bde <HAL_RCCEx_PeriphCLKConfig+0x212>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006aa4:	6823      	ldr	r3, [r4, #0]
 8006aa6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006aaa:	f040 809c 	bne.w	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006ab4:	f040 809b 	bne.w	8006bee <HAL_RCCEx_PeriphCLKConfig+0x222>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006ab8:	6823      	ldr	r3, [r4, #0]
 8006aba:	f013 0f10 	tst.w	r3, #16
 8006abe:	d00e      	beq.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8006ac0:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8006ac2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ac6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006aca:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006ad4:	68e3      	ldr	r3, [r4, #12]
 8006ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ada:	f000 808c 	beq.w	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8006ae4:	d00f      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ae6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006ae8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006aec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006af0:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8006af4:	4313      	orrs	r3, r2
 8006af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006afa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006afc:	b91b      	cbnz	r3, 8006b06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006afe:	68cb      	ldr	r3, [r1, #12]
 8006b00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b04:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8006b0c:	d00d      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b0e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b14:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006b18:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006b22:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b28:	d06a      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8006b2e:	f7ff f91d 	bl	8005d6c <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8006b32:	f7fb ffbd 	bl	8002ab0 <HAL_GetTick>
 8006b36:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006b38:	4b34      	ldr	r3, [pc, #208]	@ (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8006b40:	d106      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b42:	f7fb ffb5 	bl	8002ab0 <HAL_GetTick>
 8006b46:	1b40      	subs	r0, r0, r5
 8006b48:	2802      	cmp	r0, #2
 8006b4a:	d9f5      	bls.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 8006b4c:	2503      	movs	r5, #3
 8006b4e:	e000      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8006b50:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8006b52:	2d00      	cmp	r5, #0
 8006b54:	f47f af42 	bne.w	80069dc <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006b64:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d024      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006b6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b6e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006b72:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b76:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8006b7a:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8006b7e:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006b82:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 8006b86:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8006b8a:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8006b8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8006b92:	f012 0f02 	tst.w	r2, #2
 8006b96:	d10f      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      if (ret == HAL_OK)
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	f47f af1f 	bne.w	80069dc <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006ba0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ba4:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8006ba8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006bac:	4313      	orrs	r3, r2
 8006bae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006bb2:	e713      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	e7ec      	b.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        tickstart = HAL_GetTick();
 8006bb8:	f7fb ff7a 	bl	8002ab0 <HAL_GetTick>
 8006bbc:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bc6:	f013 0f02 	tst.w	r3, #2
 8006bca:	d1e5      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bcc:	f7fb ff70 	bl	8002ab0 <HAL_GetTick>
 8006bd0:	1b80      	subs	r0, r0, r6
 8006bd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	d9f1      	bls.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            ret = HAL_TIMEOUT;
 8006bda:	2503      	movs	r5, #3
 8006bdc:	e7dc      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bde:	6960      	ldr	r0, [r4, #20]
 8006be0:	f7ff fee4 	bl	80069ac <LL_RCC_SetI2CClockSource>
 8006be4:	e75e      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006be6:	69a0      	ldr	r0, [r4, #24]
 8006be8:	f7ff fee0 	bl	80069ac <LL_RCC_SetI2CClockSource>
 8006bec:	e75f      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bee:	69e0      	ldr	r0, [r4, #28]
 8006bf0:	f7ff fedc 	bl	80069ac <LL_RCC_SetI2CClockSource>
 8006bf4:	e760      	b.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006bf6:	68cb      	ldr	r3, [r1, #12]
 8006bf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006bfc:	60cb      	str	r3, [r1, #12]
 8006bfe:	e76e      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c00:	68cb      	ldr	r3, [r1, #12]
 8006c02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c06:	60cb      	str	r3, [r1, #12]
 8006c08:	e78f      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006c0a:	bf00      	nop
 8006c0c:	58000400 	.word	0x58000400

08006c10 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006c10:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c12:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8006c16:	2a01      	cmp	r2, #1
 8006c18:	d035      	beq.n	8006c86 <HAL_RTC_DeactivateAlarm+0x76>
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c20:	2202      	movs	r2, #2
 8006c22:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c26:	4a19      	ldr	r2, [pc, #100]	@ (8006c8c <HAL_RTC_DeactivateAlarm+0x7c>)
 8006c28:	20ca      	movs	r0, #202	@ 0xca
 8006c2a:	6250      	str	r0, [r2, #36]	@ 0x24
 8006c2c:	2053      	movs	r0, #83	@ 0x53
 8006c2e:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8006c30:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006c34:	d018      	beq.n	8006c68 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006c36:	4a15      	ldr	r2, [pc, #84]	@ (8006c8c <HAL_RTC_DeactivateAlarm+0x7c>)
 8006c38:	6991      	ldr	r1, [r2, #24]
 8006c3a:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 8006c3e:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006c40:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 8006c42:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006c46:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006c48:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006c4a:	f021 0102 	bic.w	r1, r1, #2
 8006c4e:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006c50:	2102      	movs	r1, #2
 8006c52:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c54:	4a0d      	ldr	r2, [pc, #52]	@ (8006c8c <HAL_RTC_DeactivateAlarm+0x7c>)
 8006c56:	21ff      	movs	r1, #255	@ 0xff
 8006c58:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c60:	2000      	movs	r0, #0
 8006c62:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006c66:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c68:	6991      	ldr	r1, [r2, #24]
 8006c6a:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 8006c6e:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006c70:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006c72:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8006c76:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006c78:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006c7a:	f021 0101 	bic.w	r1, r1, #1
 8006c7e:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006c80:	2101      	movs	r1, #1
 8006c82:	65d1      	str	r1, [r2, #92]	@ 0x5c
 8006c84:	e7e6      	b.n	8006c54 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8006c86:	2002      	movs	r0, #2
}
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40002800 	.word	0x40002800

08006c90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c90:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006c92:	4a0b      	ldr	r2, [pc, #44]	@ (8006cc0 <HAL_RTC_WaitForSynchro+0x30>)
 8006c94:	68d3      	ldr	r3, [r2, #12]
 8006c96:	f023 0320 	bic.w	r3, r3, #32
 8006c9a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006c9c:	f7fb ff08 	bl	8002ab0 <HAL_GetTick>
 8006ca0:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ca2:	4b07      	ldr	r3, [pc, #28]	@ (8006cc0 <HAL_RTC_WaitForSynchro+0x30>)
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	f013 0f20 	tst.w	r3, #32
 8006caa:	d107      	bne.n	8006cbc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006cac:	f7fb ff00 	bl	8002ab0 <HAL_GetTick>
 8006cb0:	1b00      	subs	r0, r0, r4
 8006cb2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006cb6:	d9f4      	bls.n	8006ca2 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006cb8:	2003      	movs	r0, #3
 8006cba:	e000      	b.n	8006cbe <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006cbc:	2000      	movs	r0, #0
}
 8006cbe:	bd10      	pop	{r4, pc}
 8006cc0:	40002800 	.word	0x40002800

08006cc4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006cc4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006cc6:	4b11      	ldr	r3, [pc, #68]	@ (8006d0c <RTC_EnterInitMode+0x48>)
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006cce:	d002      	beq.n	8006cd6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006cd0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	bd70      	pop	{r4, r5, r6, pc}
 8006cd6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8006d0c <RTC_EnterInitMode+0x48>)
 8006cda:	68d3      	ldr	r3, [r2, #12]
 8006cdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ce0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8006ce2:	f7fb fee5 	bl	8002ab0 <HAL_GetTick>
 8006ce6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8006ce8:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006cea:	4b08      	ldr	r3, [pc, #32]	@ (8006d0c <RTC_EnterInitMode+0x48>)
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006cf2:	d1ee      	bne.n	8006cd2 <RTC_EnterInitMode+0xe>
 8006cf4:	2c03      	cmp	r4, #3
 8006cf6:	d0ec      	beq.n	8006cd2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006cf8:	f7fb feda 	bl	8002ab0 <HAL_GetTick>
 8006cfc:	1b43      	subs	r3, r0, r5
 8006cfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d02:	d9f2      	bls.n	8006cea <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d04:	2403      	movs	r4, #3
 8006d06:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 8006d0a:	e7ee      	b.n	8006cea <RTC_EnterInitMode+0x26>
 8006d0c:	40002800 	.word	0x40002800

08006d10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006d10:	b510      	push	{r4, lr}
 8006d12:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006d14:	4b10      	ldr	r3, [pc, #64]	@ (8006d58 <RTC_ExitInitMode+0x48>)
 8006d16:	68da      	ldr	r2, [r3, #12]
 8006d18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d1c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f013 0f20 	tst.w	r3, #32
 8006d24:	d106      	bne.n	8006d34 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d26:	f7ff ffb3 	bl	8006c90 <HAL_RTC_WaitForSynchro>
 8006d2a:	b198      	cbz	r0, 8006d54 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d2c:	2003      	movs	r0, #3
 8006d2e:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006d32:	e00f      	b.n	8006d54 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d34:	4a08      	ldr	r2, [pc, #32]	@ (8006d58 <RTC_ExitInitMode+0x48>)
 8006d36:	6993      	ldr	r3, [r2, #24]
 8006d38:	f023 0320 	bic.w	r3, r3, #32
 8006d3c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006d3e:	f7ff ffa7 	bl	8006c90 <HAL_RTC_WaitForSynchro>
 8006d42:	b110      	cbz	r0, 8006d4a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006d44:	2003      	movs	r0, #3
 8006d46:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006d4a:	4a03      	ldr	r2, [pc, #12]	@ (8006d58 <RTC_ExitInitMode+0x48>)
 8006d4c:	6993      	ldr	r3, [r2, #24]
 8006d4e:	f043 0320 	orr.w	r3, r3, #32
 8006d52:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8006d54:	bd10      	pop	{r4, pc}
 8006d56:	bf00      	nop
 8006d58:	40002800 	.word	0x40002800

08006d5c <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d077      	beq.n	8006e50 <HAL_RTC_Init+0xf4>
{
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006d64:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8006d68:	bb03      	cbnz	r3, 8006dac <HAL_RTC_Init+0x50>
      hrtc->Lock = HAL_UNLOCKED;
 8006d6a:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 8006d6e:	4b39      	ldr	r3, [pc, #228]	@ (8006e54 <HAL_RTC_Init+0xf8>)
 8006d70:	6383      	str	r3, [r0, #56]	@ 0x38
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 8006d72:	4b39      	ldr	r3, [pc, #228]	@ (8006e58 <HAL_RTC_Init+0xfc>)
 8006d74:	63c3      	str	r3, [r0, #60]	@ 0x3c
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 8006d76:	4b39      	ldr	r3, [pc, #228]	@ (8006e5c <HAL_RTC_Init+0x100>)
 8006d78:	6403      	str	r3, [r0, #64]	@ 0x40
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 8006d7a:	4b39      	ldr	r3, [pc, #228]	@ (8006e60 <HAL_RTC_Init+0x104>)
 8006d7c:	6443      	str	r3, [r0, #68]	@ 0x44
      hrtc->SSRUEventCallback            =  HAL_RTCEx_SSRUEventCallback;             /* Legacy weak SSRUEventCallback */
 8006d7e:	4b39      	ldr	r3, [pc, #228]	@ (8006e64 <HAL_RTC_Init+0x108>)
 8006d80:	6483      	str	r3, [r0, #72]	@ 0x48
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
 8006d82:	4b39      	ldr	r3, [pc, #228]	@ (8006e68 <HAL_RTC_Init+0x10c>)
 8006d84:	64c3      	str	r3, [r0, #76]	@ 0x4c
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 8006d86:	4b39      	ldr	r3, [pc, #228]	@ (8006e6c <HAL_RTC_Init+0x110>)
 8006d88:	6503      	str	r3, [r0, #80]	@ 0x50
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
 8006d8a:	4b39      	ldr	r3, [pc, #228]	@ (8006e70 <HAL_RTC_Init+0x114>)
 8006d8c:	6543      	str	r3, [r0, #84]	@ 0x54
      hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;  /* Legacy weak InternalTamper3EventCallback */
 8006d8e:	4b39      	ldr	r3, [pc, #228]	@ (8006e74 <HAL_RTC_Init+0x118>)
 8006d90:	6583      	str	r3, [r0, #88]	@ 0x58
      hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;  /* Legacy weak InternalTamper5EventCallback */
 8006d92:	4b39      	ldr	r3, [pc, #228]	@ (8006e78 <HAL_RTC_Init+0x11c>)
 8006d94:	65c3      	str	r3, [r0, #92]	@ 0x5c
      hrtc->InternalTamper6EventCallback =  HAL_RTCEx_InternalTamper6EventCallback;  /* Legacy weak InternalTamper6EventCallback */
 8006d96:	4b39      	ldr	r3, [pc, #228]	@ (8006e7c <HAL_RTC_Init+0x120>)
 8006d98:	6603      	str	r3, [r0, #96]	@ 0x60
      hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;  /* Legacy weak InternalTamper8EventCallback */
 8006d9a:	4b39      	ldr	r3, [pc, #228]	@ (8006e80 <HAL_RTC_Init+0x124>)
 8006d9c:	6643      	str	r3, [r0, #100]	@ 0x64
      if (hrtc->MspInitCallback == NULL)
 8006d9e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006da0:	b18b      	cbz	r3, 8006dc6 <HAL_RTC_Init+0x6a>
      hrtc->MspInitCallback(hrtc);
 8006da2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8006da4:	4620      	mov	r0, r4
 8006da6:	4798      	blx	r3
      if (hrtc->MspDeInitCallback == NULL)
 8006da8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8006daa:	b17b      	cbz	r3, 8006dcc <HAL_RTC_Init+0x70>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006dac:	2302      	movs	r3, #2
 8006dae:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006db2:	4b34      	ldr	r3, [pc, #208]	@ (8006e84 <HAL_RTC_Init+0x128>)
 8006db4:	68db      	ldr	r3, [r3, #12]
 8006db6:	f013 0f10 	tst.w	r3, #16
 8006dba:	d00a      	beq.n	8006dd2 <HAL_RTC_Init+0x76>
      status = HAL_OK;
 8006dbc:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8006dc4:	bd38      	pop	{r3, r4, r5, pc}
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 8006dc6:	4b30      	ldr	r3, [pc, #192]	@ (8006e88 <HAL_RTC_Init+0x12c>)
 8006dc8:	6683      	str	r3, [r0, #104]	@ 0x68
 8006dca:	e7ea      	b.n	8006da2 <HAL_RTC_Init+0x46>
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8006dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8006e8c <HAL_RTC_Init+0x130>)
 8006dce:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8006dd0:	e7ec      	b.n	8006dac <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006dd2:	4b2c      	ldr	r3, [pc, #176]	@ (8006e84 <HAL_RTC_Init+0x128>)
 8006dd4:	22ca      	movs	r2, #202	@ 0xca
 8006dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006dd8:	2253      	movs	r2, #83	@ 0x53
 8006dda:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f7ff ff71 	bl	8006cc4 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8006de2:	b118      	cbz	r0, 8006dec <HAL_RTC_Init+0x90>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006de4:	4b27      	ldr	r3, [pc, #156]	@ (8006e84 <HAL_RTC_Init+0x128>)
 8006de6:	22ff      	movs	r2, #255	@ 0xff
 8006de8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006dea:	e7eb      	b.n	8006dc4 <HAL_RTC_Init+0x68>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006dec:	4b25      	ldr	r3, [pc, #148]	@ (8006e84 <HAL_RTC_Init+0x128>)
 8006dee:	699a      	ldr	r2, [r3, #24]
 8006df0:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 8006df4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006df8:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006dfa:	6999      	ldr	r1, [r3, #24]
 8006dfc:	6862      	ldr	r2, [r4, #4]
 8006dfe:	6920      	ldr	r0, [r4, #16]
 8006e00:	4302      	orrs	r2, r0
 8006e02:	69a0      	ldr	r0, [r4, #24]
 8006e04:	4302      	orrs	r2, r0
 8006e06:	430a      	orrs	r2, r1
 8006e08:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006e0a:	68e2      	ldr	r2, [r4, #12]
 8006e0c:	68a1      	ldr	r1, [r4, #8]
 8006e0e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006e12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8006e1a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006e1c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8006e1e:	4301      	orrs	r1, r0
 8006e20:	430a      	orrs	r2, r1
 8006e22:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8006e24:	4620      	mov	r0, r4
 8006e26:	f7ff ff73 	bl	8006d10 <RTC_ExitInitMode>
        if (status == HAL_OK)
 8006e2a:	b118      	cbz	r0, 8006e34 <HAL_RTC_Init+0xd8>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e2c:	4b15      	ldr	r3, [pc, #84]	@ (8006e84 <HAL_RTC_Init+0x128>)
 8006e2e:	22ff      	movs	r2, #255	@ 0xff
 8006e30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8006e32:	e7c7      	b.n	8006dc4 <HAL_RTC_Init+0x68>
          MODIFY_REG(RTC->CR, \
 8006e34:	4913      	ldr	r1, [pc, #76]	@ (8006e84 <HAL_RTC_Init+0x128>)
 8006e36:	698b      	ldr	r3, [r1, #24]
 8006e38:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8006e3c:	6a22      	ldr	r2, [r4, #32]
 8006e3e:	69e5      	ldr	r5, [r4, #28]
 8006e40:	432a      	orrs	r2, r5
 8006e42:	6965      	ldr	r5, [r4, #20]
 8006e44:	432a      	orrs	r2, r5
 8006e46:	4313      	orrs	r3, r2
 8006e48:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e4a:	23ff      	movs	r3, #255	@ 0xff
 8006e4c:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 8006e4e:	e7b6      	b.n	8006dbe <HAL_RTC_Init+0x62>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e50:	2001      	movs	r0, #1
}
 8006e52:	4770      	bx	lr
 8006e54:	08002f5d 	.word	0x08002f5d
 8006e58:	0800734d 	.word	0x0800734d
 8006e5c:	08007309 	.word	0x08007309
 8006e60:	0800730b 	.word	0x0800730b
 8006e64:	08002f65 	.word	0x08002f65
 8006e68:	0800734f 	.word	0x0800734f
 8006e6c:	08007351 	.word	0x08007351
 8006e70:	08007353 	.word	0x08007353
 8006e74:	08007355 	.word	0x08007355
 8006e78:	08007357 	.word	0x08007357
 8006e7c:	08007359 	.word	0x08007359
 8006e80:	0800735b 	.word	0x0800735b
 8006e84:	40002800 	.word	0x40002800
 8006e88:	08002791 	.word	0x08002791
 8006e8c:	080027f1 	.word	0x080027f1

08006e90 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006e90:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8006e92:	e002      	b.n	8006e9a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8006e94:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8006e96:	380a      	subs	r0, #10
 8006e98:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8006e9a:	2809      	cmp	r0, #9
 8006e9c:	d8fa      	bhi.n	8006e94 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006e9e:	011b      	lsls	r3, r3, #4
 8006ea0:	b2db      	uxtb	r3, r3
}
 8006ea2:	4318      	orrs	r0, r3
 8006ea4:	4770      	bx	lr
	...

08006ea8 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8006ea8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d063      	beq.n	8006f78 <HAL_RTC_SetTime+0xd0>
{
 8006eb0:	b570      	push	{r4, r5, r6, lr}
 8006eb2:	4604      	mov	r4, r0
 8006eb4:	460d      	mov	r5, r1
 8006eb6:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 8006eb8:	2301      	movs	r3, #1
 8006eba:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8006f7c <HAL_RTC_SetTime+0xd4>)
 8006ec6:	22ca      	movs	r2, #202	@ 0xca
 8006ec8:	625a      	str	r2, [r3, #36]	@ 0x24
 8006eca:	2253      	movs	r2, #83	@ 0x53
 8006ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006ece:	f7ff fef9 	bl	8006cc4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d130      	bne.n	8006f38 <HAL_RTC_SetTime+0x90>
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006ed6:	4b29      	ldr	r3, [pc, #164]	@ (8006f7c <HAL_RTC_SetTime+0xd4>)
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ee2:	d029      	beq.n	8006f38 <HAL_RTC_SetTime+0x90>
      if (Format == RTC_FORMAT_BIN)
 8006ee4:	2e00      	cmp	r6, #0
 8006ee6:	d135      	bne.n	8006f54 <HAL_RTC_SetTime+0xac>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006ee8:	4b24      	ldr	r3, [pc, #144]	@ (8006f7c <HAL_RTC_SetTime+0xd4>)
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006ef0:	d101      	bne.n	8006ef6 <HAL_RTC_SetTime+0x4e>
          sTime->TimeFormat = 0x00U;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	70eb      	strb	r3, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ef6:	7828      	ldrb	r0, [r5, #0]
 8006ef8:	f7ff ffca 	bl	8006e90 <RTC_ByteToBcd2>
 8006efc:	0406      	lsls	r6, r0, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006efe:	7868      	ldrb	r0, [r5, #1]
 8006f00:	f7ff ffc6 	bl	8006e90 <RTC_ByteToBcd2>
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f04:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006f08:	78a8      	ldrb	r0, [r5, #2]
 8006f0a:	f7ff ffc1 	bl	8006e90 <RTC_ByteToBcd2>
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f0e:	ea46 0300 	orr.w	r3, r6, r0
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f12:	78ea      	ldrb	r2, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f14:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8006f18:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006f1c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006f20:	4a16      	ldr	r2, [pc, #88]	@ (8006f7c <HAL_RTC_SetTime+0xd4>)
 8006f22:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8006f24:	6993      	ldr	r3, [r2, #24]
 8006f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f2a:	6193      	str	r3, [r2, #24]
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006f2c:	6993      	ldr	r3, [r2, #24]
 8006f2e:	68e9      	ldr	r1, [r5, #12]
 8006f30:	6928      	ldr	r0, [r5, #16]
 8006f32:	4301      	orrs	r1, r0
 8006f34:	430b      	orrs	r3, r1
 8006f36:	6193      	str	r3, [r2, #24]
  status = RTC_ExitInitMode(hrtc);
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f7ff fee9 	bl	8006d10 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8006f7c <HAL_RTC_SetTime+0xd4>)
 8006f40:	21ff      	movs	r1, #255	@ 0xff
 8006f42:	6251      	str	r1, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 8006f44:	b910      	cbnz	r0, 8006f4c <HAL_RTC_SetTime+0xa4>
    hrtc->State = HAL_RTC_STATE_READY;
 8006f46:	2301      	movs	r3, #1
 8006f48:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006f54:	4b09      	ldr	r3, [pc, #36]	@ (8006f7c <HAL_RTC_SetTime+0xd4>)
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006f5c:	d101      	bne.n	8006f62 <HAL_RTC_SetTime+0xba>
          sTime->TimeFormat = 0x00U;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	70eb      	strb	r3, [r5, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f62:	782a      	ldrb	r2, [r5, #0]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f64:	786b      	ldrb	r3, [r5, #1]
 8006f66:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006f6c:	78aa      	ldrb	r2, [r5, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006f6e:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006f70:	78ea      	ldrb	r2, [r5, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006f72:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8006f76:	e7cf      	b.n	8006f18 <HAL_RTC_SetTime+0x70>
  __HAL_LOCK(hrtc);
 8006f78:	2002      	movs	r0, #2
}
 8006f7a:	4770      	bx	lr
 8006f7c:	40002800 	.word	0x40002800

08006f80 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8006f80:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d04d      	beq.n	8007024 <HAL_RTC_SetDate+0xa4>
{
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f94:	2302      	movs	r3, #2
 8006f96:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006f9a:	b1ca      	cbz	r2, 8006fd0 <HAL_RTC_SetDate+0x50>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006f9c:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006f9e:	784c      	ldrb	r4, [r1, #1]
 8006fa0:	0224      	lsls	r4, r4, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006fa2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006fa6:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006fa8:	431c      	orrs	r4, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006faa:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006fac:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8007028 <HAL_RTC_SetDate+0xa8>)
 8006fb2:	22ca      	movs	r2, #202	@ 0xca
 8006fb4:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fb6:	2253      	movs	r2, #83	@ 0x53
 8006fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8006fba:	4628      	mov	r0, r5
 8006fbc:	f7ff fe82 	bl	8006cc4 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8006fc0:	b1f8      	cbz	r0, 8007002 <HAL_RTC_SetDate+0x82>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fc2:	4b19      	ldr	r3, [pc, #100]	@ (8007028 <HAL_RTC_SetDate+0xa8>)
 8006fc4:	22ff      	movs	r2, #255	@ 0xff
 8006fc6:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8006fc8:	2300      	movs	r3, #0
 8006fca:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
}
 8006fce:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006fd0:	784b      	ldrb	r3, [r1, #1]
 8006fd2:	f013 0f10 	tst.w	r3, #16
 8006fd6:	d003      	beq.n	8006fe0 <HAL_RTC_SetDate+0x60>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006fd8:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8006fdc:	330a      	adds	r3, #10
 8006fde:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006fe0:	78f0      	ldrb	r0, [r6, #3]
 8006fe2:	f7ff ff55 	bl	8006e90 <RTC_ByteToBcd2>
 8006fe6:	0404      	lsls	r4, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006fe8:	7870      	ldrb	r0, [r6, #1]
 8006fea:	f7ff ff51 	bl	8006e90 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006fee:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006ff2:	78b0      	ldrb	r0, [r6, #2]
 8006ff4:	f7ff ff4c 	bl	8006e90 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006ff8:	4304      	orrs	r4, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006ffa:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ffc:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 8007000:	e7d6      	b.n	8006fb0 <HAL_RTC_SetDate+0x30>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8007002:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8007006:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 800700a:	4e07      	ldr	r6, [pc, #28]	@ (8007028 <HAL_RTC_SetDate+0xa8>)
 800700c:	6074      	str	r4, [r6, #4]
    status = RTC_ExitInitMode(hrtc);
 800700e:	4628      	mov	r0, r5
 8007010:	f7ff fe7e 	bl	8006d10 <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007014:	22ff      	movs	r2, #255	@ 0xff
 8007016:	6272      	str	r2, [r6, #36]	@ 0x24
  if (status == HAL_OK)
 8007018:	2800      	cmp	r0, #0
 800701a:	d1d5      	bne.n	8006fc8 <HAL_RTC_SetDate+0x48>
    hrtc->State = HAL_RTC_STATE_READY ;
 800701c:	2301      	movs	r3, #1
 800701e:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
 8007022:	e7d1      	b.n	8006fc8 <HAL_RTC_SetDate+0x48>
  __HAL_LOCK(hrtc);
 8007024:	2002      	movs	r0, #2
}
 8007026:	4770      	bx	lr
 8007028:	40002800 	.word	0x40002800

0800702c <HAL_RTC_SetAlarm>:
  __HAL_LOCK(hrtc);
 800702c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007030:	2b01      	cmp	r3, #1
 8007032:	f000 80a9 	beq.w	8007188 <HAL_RTC_SetAlarm+0x15c>
{
 8007036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703a:	4605      	mov	r5, r0
 800703c:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800703e:	2301      	movs	r3, #1
 8007040:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007044:	2302      	movs	r3, #2
 8007046:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800704a:	4b50      	ldr	r3, [pc, #320]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 800704c:	68de      	ldr	r6, [r3, #12]
 800704e:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8007052:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8007056:	d043      	beq.n	80070e0 <HAL_RTC_SetAlarm+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8007058:	bb12      	cbnz	r2, 80070a0 <HAL_RTC_SetAlarm+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007060:	d101      	bne.n	8007066 <HAL_RTC_SetAlarm+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007062:	2300      	movs	r3, #0
 8007064:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8007066:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800706a:	7820      	ldrb	r0, [r4, #0]
 800706c:	f7ff ff10 	bl	8006e90 <RTC_ByteToBcd2>
 8007070:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007072:	7860      	ldrb	r0, [r4, #1]
 8007074:	f7ff ff0c 	bl	8006e90 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007078:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800707c:	78a0      	ldrb	r0, [r4, #2]
 800707e:	f7ff ff07 	bl	8006e90 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007082:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007084:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007086:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800708a:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800708e:	f7ff feff 	bl	8006e90 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007092:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007096:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007098:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800709a:	ea48 0000 	orr.w	r0, r8, r0
 800709e:	e020      	b.n	80070e2 <HAL_RTC_SetAlarm+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80070a0:	6948      	ldr	r0, [r1, #20]
 80070a2:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 80070a6:	d009      	beq.n	80070bc <HAL_RTC_SetAlarm+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80070a8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80070ac:	d006      	beq.n	80070bc <HAL_RTC_SetAlarm+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80070ae:	4b37      	ldr	r3, [pc, #220]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80070b6:	d101      	bne.n	80070bc <HAL_RTC_SetAlarm+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070bc:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070be:	7863      	ldrb	r3, [r4, #1]
 80070c0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070c6:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070c8:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070ca:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070cc:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070d0:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070d8:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070da:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070dc:	4318      	orrs	r0, r3
 80070de:	e000      	b.n	80070e2 <HAL_RTC_SetAlarm+0xb6>
  uint32_t tmpreg = 0;
 80070e0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070e2:	4b2a      	ldr	r3, [pc, #168]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 80070e4:	22ca      	movs	r2, #202	@ 0xca
 80070e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80070e8:	2253      	movs	r2, #83	@ 0x53
 80070ea:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80070ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f2:	d023      	beq.n	800713c <HAL_RTC_SetAlarm+0x110>
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80070f4:	4b25      	ldr	r3, [pc, #148]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 80070f6:	699a      	ldr	r2, [r3, #24]
 80070f8:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 80070fc:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80070fe:	2202      	movs	r2, #2
 8007100:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8007102:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8007106:	d039      	beq.n	800717c <HAL_RTC_SetAlarm+0x150>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8007108:	4b20      	ldr	r3, [pc, #128]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 800710a:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800710c:	69a2      	ldr	r2, [r4, #24]
 800710e:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007110:	6862      	ldr	r2, [r4, #4]
 8007112:	4b1e      	ldr	r3, [pc, #120]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 8007114:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8007116:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8007118:	f042 0202 	orr.w	r2, r2, #2
 800711c:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 800711e:	699a      	ldr	r2, [r3, #24]
 8007120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007124:	619a      	str	r2, [r3, #24]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007126:	4b19      	ldr	r3, [pc, #100]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 8007128:	22ff      	movs	r2, #255	@ 0xff
 800712a:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800712c:	2301      	movs	r3, #1
 800712e:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8007132:	2000      	movs	r0, #0
 8007134:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 8007138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 800713c:	4b13      	ldr	r3, [pc, #76]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 800713e:	699a      	ldr	r2, [r3, #24]
 8007140:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8007144:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8007146:	2201      	movs	r2, #1
 8007148:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800714a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800714e:	d00f      	beq.n	8007170 <HAL_RTC_SetAlarm+0x144>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8007150:	4b0e      	ldr	r3, [pc, #56]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 8007152:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8007154:	69a2      	ldr	r2, [r4, #24]
 8007156:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8007158:	6862      	ldr	r2, [r4, #4]
 800715a:	4b0c      	ldr	r3, [pc, #48]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 800715c:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800715e:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8007160:	f042 0201 	orr.w	r2, r2, #1
 8007164:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8007166:	699a      	ldr	r2, [r3, #24]
 8007168:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800716c:	619a      	str	r2, [r3, #24]
 800716e:	e7da      	b.n	8007126 <HAL_RTC_SetAlarm+0xfa>
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8007170:	69a3      	ldr	r3, [r4, #24]
 8007172:	69e2      	ldr	r2, [r4, #28]
 8007174:	4313      	orrs	r3, r2
 8007176:	4a05      	ldr	r2, [pc, #20]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 8007178:	6453      	str	r3, [r2, #68]	@ 0x44
 800717a:	e7ed      	b.n	8007158 <HAL_RTC_SetAlarm+0x12c>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800717c:	69a3      	ldr	r3, [r4, #24]
 800717e:	69e2      	ldr	r2, [r4, #28]
 8007180:	4313      	orrs	r3, r2
 8007182:	4a02      	ldr	r2, [pc, #8]	@ (800718c <HAL_RTC_SetAlarm+0x160>)
 8007184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007186:	e7c3      	b.n	8007110 <HAL_RTC_SetAlarm+0xe4>
  __HAL_LOCK(hrtc);
 8007188:	2002      	movs	r0, #2
}
 800718a:	4770      	bx	lr
 800718c:	40002800 	.word	0x40002800

08007190 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8007190:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007194:	2b01      	cmp	r3, #1
 8007196:	f000 80b0 	beq.w	80072fa <HAL_RTC_SetAlarm_IT+0x16a>
{
 800719a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800719e:	4605      	mov	r5, r0
 80071a0:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80071a2:	2301      	movs	r3, #1
 80071a4:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80071a8:	2302      	movs	r3, #2
 80071aa:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80071ae:	4b54      	ldr	r3, [pc, #336]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 80071b0:	68de      	ldr	r6, [r3, #12]
 80071b2:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 80071b6:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80071ba:	d043      	beq.n	8007244 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 80071bc:	bb12      	cbnz	r2, 8007204 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80071c4:	d101      	bne.n	80071ca <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80071ca:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80071ce:	7820      	ldrb	r0, [r4, #0]
 80071d0:	f7ff fe5e 	bl	8006e90 <RTC_ByteToBcd2>
 80071d4:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80071d6:	7860      	ldrb	r0, [r4, #1]
 80071d8:	f7ff fe5a 	bl	8006e90 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80071dc:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80071e0:	78a0      	ldrb	r0, [r4, #2]
 80071e2:	f7ff fe55 	bl	8006e90 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80071e6:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80071e8:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80071ea:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80071ee:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 80071f2:	f7ff fe4d 	bl	8006e90 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80071f6:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80071fa:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80071fc:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80071fe:	ea48 0000 	orr.w	r0, r8, r0
 8007202:	e020      	b.n	8007246 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8007204:	6948      	ldr	r0, [r1, #20]
 8007206:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 800720a:	d009      	beq.n	8007220 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800720c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8007210:	d006      	beq.n	8007220 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007212:	4b3b      	ldr	r3, [pc, #236]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800721a:	d101      	bne.n	8007220 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800721c:	2300      	movs	r3, #0
 800721e:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007220:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007222:	7863      	ldrb	r3, [r4, #1]
 8007224:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007226:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800722a:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800722c:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800722e:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007230:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007234:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007238:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800723c:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800723e:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007240:	4318      	orrs	r0, r3
 8007242:	e000      	b.n	8007246 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8007244:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007246:	4b2e      	ldr	r3, [pc, #184]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 8007248:	22ca      	movs	r2, #202	@ 0xca
 800724a:	625a      	str	r2, [r3, #36]	@ 0x24
 800724c:	2253      	movs	r2, #83	@ 0x53
 800724e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007250:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007252:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007256:	d02a      	beq.n	80072ae <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007258:	4b29      	ldr	r3, [pc, #164]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 800725a:	699a      	ldr	r2, [r3, #24]
 800725c:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8007260:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8007262:	2202      	movs	r2, #2
 8007264:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8007266:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800726a:	d040      	beq.n	80072ee <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800726c:	4b24      	ldr	r3, [pc, #144]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 800726e:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8007270:	69a2      	ldr	r2, [r4, #24]
 8007272:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8007274:	6862      	ldr	r2, [r4, #4]
 8007276:	4b22      	ldr	r3, [pc, #136]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 8007278:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800727a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 800727c:	f042 0202 	orr.w	r2, r2, #2
 8007280:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8007288:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800728a:	4a1e      	ldr	r2, [pc, #120]	@ (8007304 <HAL_RTC_SetAlarm_IT+0x174>)
 800728c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8007290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007294:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007298:	4b19      	ldr	r3, [pc, #100]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 800729a:	22ff      	movs	r2, #255	@ 0xff
 800729c:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800729e:	2301      	movs	r3, #1
 80072a0:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 80072a4:	2000      	movs	r0, #0
 80072a6:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 80072aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80072ae:	4b14      	ldr	r3, [pc, #80]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80072b6:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80072b8:	2201      	movs	r2, #1
 80072ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80072bc:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80072c0:	d00f      	beq.n	80072e2 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80072c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 80072c4:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80072c6:	69a2      	ldr	r2, [r4, #24]
 80072c8:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80072ca:	6862      	ldr	r2, [r4, #4]
 80072cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 80072ce:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80072d0:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 80072de:	619a      	str	r2, [r3, #24]
 80072e0:	e7d3      	b.n	800728a <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80072e2:	69a3      	ldr	r3, [r4, #24]
 80072e4:	69e2      	ldr	r2, [r4, #28]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	4a05      	ldr	r2, [pc, #20]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 80072ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80072ec:	e7ed      	b.n	80072ca <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80072ee:	69a3      	ldr	r3, [r4, #24]
 80072f0:	69e2      	ldr	r2, [r4, #28]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	4a02      	ldr	r2, [pc, #8]	@ (8007300 <HAL_RTC_SetAlarm_IT+0x170>)
 80072f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072f8:	e7bc      	b.n	8007274 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80072fa:	2002      	movs	r0, #2
}
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	40002800 	.word	0x40002800
 8007304:	58000800 	.word	0x58000800

08007308 <HAL_RTCEx_TimeStampEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8007308:	4770      	bx	lr

0800730a <HAL_RTCEx_WakeUpTimerEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800730a:	4770      	bx	lr

0800730c <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800730c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8007310:	2b01      	cmp	r3, #1
 8007312:	d017      	beq.n	8007344 <HAL_RTCEx_EnableBypassShadow+0x38>
 8007314:	2101      	movs	r1, #1
 8007316:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800731a:	2302      	movs	r3, #2
 800731c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007320:	4b09      	ldr	r3, [pc, #36]	@ (8007348 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8007322:	22ca      	movs	r2, #202	@ 0xca
 8007324:	625a      	str	r2, [r3, #36]	@ 0x24
 8007326:	2253      	movs	r2, #83	@ 0x53
 8007328:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800732a:	699a      	ldr	r2, [r3, #24]
 800732c:	f042 0220 	orr.w	r2, r2, #32
 8007330:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007332:	22ff      	movs	r2, #255	@ 0xff
 8007334:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007336:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800733a:	2300      	movs	r3, #0
 800733c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8007340:	4618      	mov	r0, r3
 8007342:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8007344:	2002      	movs	r0, #2
}
 8007346:	4770      	bx	lr
 8007348:	40002800 	.word	0x40002800

0800734c <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800734c:	4770      	bx	lr

0800734e <HAL_RTCEx_Tamper1EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 800734e:	4770      	bx	lr

08007350 <HAL_RTCEx_Tamper2EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8007350:	4770      	bx	lr

08007352 <HAL_RTCEx_Tamper3EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8007352:	4770      	bx	lr

08007354 <HAL_RTCEx_InternalTamper3EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 8007354:	4770      	bx	lr

08007356 <HAL_RTCEx_InternalTamper5EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 8007356:	4770      	bx	lr

08007358 <HAL_RTCEx_InternalTamper6EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper6EventCallback could be implemented in the user file
   */
}
 8007358:	4770      	bx	lr

0800735a <HAL_RTCEx_InternalTamper8EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper8EventCallback could be implemented in the user file
   */
}
 800735a:	4770      	bx	lr

0800735c <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800735c:	0089      	lsls	r1, r1, #2
 800735e:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8007362:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007366:	600a      	str	r2, [r1, #0]
}
 8007368:	4770      	bx	lr

0800736a <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800736a:	0089      	lsls	r1, r1, #2
 800736c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8007370:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8007374:	6808      	ldr	r0, [r1, #0]
}
 8007376:	4770      	bx	lr

08007378 <HAL_SPI_TxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8007378:	4770      	bx	lr

0800737a <HAL_SPI_RxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800737a:	4770      	bx	lr

0800737c <HAL_SPI_TxRxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800737c:	4770      	bx	lr

0800737e <HAL_SPI_TxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800737e:	4770      	bx	lr

08007380 <HAL_SPI_RxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8007380:	4770      	bx	lr

08007382 <HAL_SPI_TxRxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8007382:	4770      	bx	lr

08007384 <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007384:	4770      	bx	lr

08007386 <HAL_SPI_AbortCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8007386:	4770      	bx	lr

08007388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	b082      	sub	sp, #8
 800738e:	4605      	mov	r5, r0
 8007390:	4688      	mov	r8, r1
 8007392:	4617      	mov	r7, r2
 8007394:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007396:	f7fb fb8b 	bl	8002ab0 <HAL_GetTick>
 800739a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800739c:	1a1b      	subs	r3, r3, r0
 800739e:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80073a2:	f7fb fb85 	bl	8002ab0 <HAL_GetTick>
 80073a6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073a8:	4b28      	ldr	r3, [pc, #160]	@ (800744c <SPI_WaitFlagStateUntilTimeout+0xc4>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80073b0:	fb09 f303 	mul.w	r3, r9, r3
 80073b4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073b6:	682b      	ldr	r3, [r5, #0]
 80073b8:	689c      	ldr	r4, [r3, #8]
 80073ba:	ea38 0404 	bics.w	r4, r8, r4
 80073be:	bf0c      	ite	eq
 80073c0:	2301      	moveq	r3, #1
 80073c2:	2300      	movne	r3, #0
 80073c4:	42bb      	cmp	r3, r7
 80073c6:	d03d      	beq.n	8007444 <SPI_WaitFlagStateUntilTimeout+0xbc>
  {
    if (Timeout != HAL_MAX_DELAY)
 80073c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80073cc:	d0f3      	beq.n	80073b6 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073ce:	f7fb fb6f 	bl	8002ab0 <HAL_GetTick>
 80073d2:	eba0 000a 	sub.w	r0, r0, sl
 80073d6:	4548      	cmp	r0, r9
 80073d8:	d207      	bcs.n	80073ea <SPI_WaitFlagStateUntilTimeout+0x62>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80073da:	9a01      	ldr	r2, [sp, #4]
 80073dc:	b102      	cbz	r2, 80073e0 <SPI_WaitFlagStateUntilTimeout+0x58>
 80073de:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80073e0:	9b01      	ldr	r3, [sp, #4]
 80073e2:	3b01      	subs	r3, #1
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	4691      	mov	r9, r2
 80073e8:	e7e5      	b.n	80073b6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ea:	682a      	ldr	r2, [r5, #0]
 80073ec:	6853      	ldr	r3, [r2, #4]
 80073ee:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80073f2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073f4:	686b      	ldr	r3, [r5, #4]
 80073f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073fa:	d00b      	beq.n	8007414 <SPI_WaitFlagStateUntilTimeout+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073fc:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80073fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007402:	d014      	beq.n	800742e <SPI_WaitFlagStateUntilTimeout+0xa6>
        hspi->State = HAL_SPI_STATE_READY;
 8007404:	2301      	movs	r3, #1
 8007406:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800740a:	2300      	movs	r3, #0
 800740c:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8007410:	2003      	movs	r0, #3
 8007412:	e018      	b.n	8007446 <SPI_WaitFlagStateUntilTimeout+0xbe>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007414:	68ab      	ldr	r3, [r5, #8]
 8007416:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800741a:	d002      	beq.n	8007422 <SPI_WaitFlagStateUntilTimeout+0x9a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800741c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007420:	d1ec      	bne.n	80073fc <SPI_WaitFlagStateUntilTimeout+0x74>
          __HAL_SPI_DISABLE(hspi);
 8007422:	682a      	ldr	r2, [r5, #0]
 8007424:	6813      	ldr	r3, [r2, #0]
 8007426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800742a:	6013      	str	r3, [r2, #0]
 800742c:	e7e6      	b.n	80073fc <SPI_WaitFlagStateUntilTimeout+0x74>
          SPI_RESET_CRC(hspi);
 800742e:	682a      	ldr	r2, [r5, #0]
 8007430:	6813      	ldr	r3, [r2, #0]
 8007432:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007436:	6013      	str	r3, [r2, #0]
 8007438:	682a      	ldr	r2, [r5, #0]
 800743a:	6813      	ldr	r3, [r2, #0]
 800743c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	e7df      	b.n	8007404 <SPI_WaitFlagStateUntilTimeout+0x7c>
    }
  }

  return HAL_OK;
 8007444:	2000      	movs	r0, #0
}
 8007446:	b002      	add	sp, #8
 8007448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800744c:	20000004 	.word	0x20000004

08007450 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	b082      	sub	sp, #8
 8007456:	4606      	mov	r6, r0
 8007458:	460c      	mov	r4, r1
 800745a:	4615      	mov	r5, r2
 800745c:	461f      	mov	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007464:	f7fb fb24 	bl	8002ab0 <HAL_GetTick>
 8007468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746a:	1a1b      	subs	r3, r3, r0
 800746c:	eb03 0807 	add.w	r8, r3, r7
  tmp_tickstart = HAL_GetTick();
 8007470:	f7fb fb1e 	bl	8002ab0 <HAL_GetTick>
 8007474:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007476:	f8d6 a000 	ldr.w	sl, [r6]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800747a:	4b30      	ldr	r3, [pc, #192]	@ (800753c <SPI_WaitFifoStateUntilTimeout+0xec>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007482:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007486:	0d1b      	lsrs	r3, r3, #20
 8007488:	fb08 f303 	mul.w	r3, r8, r3
 800748c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800748e:	e002      	b.n	8007496 <SPI_WaitFifoStateUntilTimeout+0x46>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8007490:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007494:	d112      	bne.n	80074bc <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8007496:	6833      	ldr	r3, [r6, #0]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	ea03 0c04 	and.w	ip, r3, r4
 800749e:	45ac      	cmp	ip, r5
 80074a0:	d047      	beq.n	8007532 <SPI_WaitFifoStateUntilTimeout+0xe2>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80074a2:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
 80074a6:	d1f3      	bne.n	8007490 <SPI_WaitFifoStateUntilTimeout+0x40>
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	d1f1      	bne.n	8007490 <SPI_WaitFifoStateUntilTimeout+0x40>
      tmpreg8 = *ptmpreg8;
 80074ac:	f89a 300c 	ldrb.w	r3, [sl, #12]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80074b6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80074ba:	e7e9      	b.n	8007490 <SPI_WaitFifoStateUntilTimeout+0x40>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074bc:	f7fb faf8 	bl	8002ab0 <HAL_GetTick>
 80074c0:	eba0 0009 	sub.w	r0, r0, r9
 80074c4:	4540      	cmp	r0, r8
 80074c6:	d207      	bcs.n	80074d8 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c8:	9a01      	ldr	r2, [sp, #4]
 80074ca:	b102      	cbz	r2, 80074ce <SPI_WaitFifoStateUntilTimeout+0x7e>
 80074cc:	4642      	mov	r2, r8
      {
        tmp_timeout = 0U;
      }
      count--;
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	3b01      	subs	r3, #1
 80074d2:	9301      	str	r3, [sp, #4]
 80074d4:	4690      	mov	r8, r2
 80074d6:	e7de      	b.n	8007496 <SPI_WaitFifoStateUntilTimeout+0x46>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074d8:	6832      	ldr	r2, [r6, #0]
 80074da:	6853      	ldr	r3, [r2, #4]
 80074dc:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80074e0:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074e2:	6873      	ldr	r3, [r6, #4]
 80074e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074e8:	d00b      	beq.n	8007502 <SPI_WaitFifoStateUntilTimeout+0xb2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074ea:	6ab3      	ldr	r3, [r6, #40]	@ 0x28
 80074ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f0:	d014      	beq.n	800751c <SPI_WaitFifoStateUntilTimeout+0xcc>
        hspi->State = HAL_SPI_STATE_READY;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f886 305d 	strb.w	r3, [r6, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80074f8:	2300      	movs	r3, #0
 80074fa:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80074fe:	2003      	movs	r0, #3
 8007500:	e018      	b.n	8007534 <SPI_WaitFifoStateUntilTimeout+0xe4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007502:	68b3      	ldr	r3, [r6, #8]
 8007504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007508:	d002      	beq.n	8007510 <SPI_WaitFifoStateUntilTimeout+0xc0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800750a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800750e:	d1ec      	bne.n	80074ea <SPI_WaitFifoStateUntilTimeout+0x9a>
          __HAL_SPI_DISABLE(hspi);
 8007510:	6832      	ldr	r2, [r6, #0]
 8007512:	6813      	ldr	r3, [r2, #0]
 8007514:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	e7e6      	b.n	80074ea <SPI_WaitFifoStateUntilTimeout+0x9a>
          SPI_RESET_CRC(hspi);
 800751c:	6832      	ldr	r2, [r6, #0]
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	6832      	ldr	r2, [r6, #0]
 8007528:	6813      	ldr	r3, [r2, #0]
 800752a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	e7df      	b.n	80074f2 <SPI_WaitFifoStateUntilTimeout+0xa2>
    }
  }

  return HAL_OK;
 8007532:	2000      	movs	r0, #0
}
 8007534:	b002      	add	sp, #8
 8007536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753a:	bf00      	nop
 800753c:	20000004 	.word	0x20000004

08007540 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800754a:	9200      	str	r2, [sp, #0]
 800754c:	460b      	mov	r3, r1
 800754e:	2200      	movs	r2, #0
 8007550:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007554:	f7ff ff7c 	bl	8007450 <SPI_WaitFifoStateUntilTimeout>
 8007558:	b9b0      	cbnz	r0, 8007588 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800755a:	9600      	str	r6, [sp, #0]
 800755c:	462b      	mov	r3, r5
 800755e:	2200      	movs	r2, #0
 8007560:	2180      	movs	r1, #128	@ 0x80
 8007562:	4620      	mov	r0, r4
 8007564:	f7ff ff10 	bl	8007388 <SPI_WaitFlagStateUntilTimeout>
 8007568:	b9a8      	cbnz	r0, 8007596 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800756a:	9600      	str	r6, [sp, #0]
 800756c:	462b      	mov	r3, r5
 800756e:	2200      	movs	r2, #0
 8007570:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007574:	4620      	mov	r0, r4
 8007576:	f7ff ff6b 	bl	8007450 <SPI_WaitFifoStateUntilTimeout>
 800757a:	b150      	cbz	r0, 8007592 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800757c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800757e:	f043 0320 	orr.w	r3, r3, #32
 8007582:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007584:	2003      	movs	r0, #3
 8007586:	e004      	b.n	8007592 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007588:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800758a:	f043 0320 	orr.w	r3, r3, #32
 800758e:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007590:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8007592:	b002      	add	sp, #8
 8007594:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007596:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007598:	f043 0320 	orr.w	r3, r3, #32
 800759c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800759e:	2003      	movs	r0, #3
 80075a0:	e7f7      	b.n	8007592 <SPI_EndRxTxTransaction+0x52>
	...

080075a4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80075a4:	2800      	cmp	r0, #0
 80075a6:	f000 80a6 	beq.w	80076f6 <HAL_SPI_Init+0x152>
{
 80075aa:	b510      	push	{r4, lr}
 80075ac:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075ae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80075b0:	b933      	cbnz	r3, 80075c0 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075b2:	6843      	ldr	r3, [r0, #4]
 80075b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075b8:	d005      	beq.n	80075c6 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075ba:	2300      	movs	r3, #0
 80075bc:	61c3      	str	r3, [r0, #28]
 80075be:	e002      	b.n	80075c6 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80075c0:	2300      	movs	r3, #0
 80075c2:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075c4:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80075c6:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80075ca:	b9d3      	cbnz	r3, 8007602 <HAL_SPI_Init+0x5e>
    hspi->Lock = HAL_UNLOCKED;
 80075cc:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80075d0:	4b4a      	ldr	r3, [pc, #296]	@ (80076fc <HAL_SPI_Init+0x158>)
 80075d2:	6663      	str	r3, [r4, #100]	@ 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 80075d4:	4b4a      	ldr	r3, [pc, #296]	@ (8007700 <HAL_SPI_Init+0x15c>)
 80075d6:	66a3      	str	r3, [r4, #104]	@ 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 80075d8:	4b4a      	ldr	r3, [pc, #296]	@ (8007704 <HAL_SPI_Init+0x160>)
 80075da:	66e3      	str	r3, [r4, #108]	@ 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 80075dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007708 <HAL_SPI_Init+0x164>)
 80075de:	6723      	str	r3, [r4, #112]	@ 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 80075e0:	4b4a      	ldr	r3, [pc, #296]	@ (800770c <HAL_SPI_Init+0x168>)
 80075e2:	6763      	str	r3, [r4, #116]	@ 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 80075e4:	4b4a      	ldr	r3, [pc, #296]	@ (8007710 <HAL_SPI_Init+0x16c>)
 80075e6:	67a3      	str	r3, [r4, #120]	@ 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80075e8:	4b4a      	ldr	r3, [pc, #296]	@ (8007714 <HAL_SPI_Init+0x170>)
 80075ea:	67e3      	str	r3, [r4, #124]	@ 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80075ec:	4b4a      	ldr	r3, [pc, #296]	@ (8007718 <HAL_SPI_Init+0x174>)
 80075ee:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    if (hspi->MspInitCallback == NULL)
 80075f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d05e      	beq.n	80076b8 <HAL_SPI_Init+0x114>
    hspi->MspInitCallback(hspi);
 80075fa:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80075fe:	4620      	mov	r0, r4
 8007600:	4798      	blx	r3
  hspi->State = HAL_SPI_STATE_BUSY;
 8007602:	2302      	movs	r3, #2
 8007604:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007610:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007612:	68e3      	ldr	r3, [r4, #12]
 8007614:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007618:	d952      	bls.n	80076c0 <HAL_SPI_Init+0x11c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800761a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800761c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007620:	d004      	beq.n	800762c <HAL_SPI_Init+0x88>
 8007622:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007626:	d001      	beq.n	800762c <HAL_SPI_Init+0x88>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007628:	2300      	movs	r3, #0
 800762a:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800762c:	6863      	ldr	r3, [r4, #4]
 800762e:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8007632:	68a1      	ldr	r1, [r4, #8]
 8007634:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8007638:	430b      	orrs	r3, r1
 800763a:	6921      	ldr	r1, [r4, #16]
 800763c:	f001 0102 	and.w	r1, r1, #2
 8007640:	430b      	orrs	r3, r1
 8007642:	6961      	ldr	r1, [r4, #20]
 8007644:	f001 0101 	and.w	r1, r1, #1
 8007648:	430b      	orrs	r3, r1
 800764a:	69a1      	ldr	r1, [r4, #24]
 800764c:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8007650:	430b      	orrs	r3, r1
 8007652:	69e1      	ldr	r1, [r4, #28]
 8007654:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8007658:	430b      	orrs	r3, r1
 800765a:	6a21      	ldr	r1, [r4, #32]
 800765c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8007660:	430b      	orrs	r3, r1
 8007662:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007664:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8007668:	6820      	ldr	r0, [r4, #0]
 800766a:	430b      	orrs	r3, r1
 800766c:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800766e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007670:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007674:	d027      	beq.n	80076c6 <HAL_SPI_Init+0x122>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007676:	8b63      	ldrh	r3, [r4, #26]
 8007678:	f003 0304 	and.w	r3, r3, #4
 800767c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800767e:	f001 0110 	and.w	r1, r1, #16
 8007682:	430b      	orrs	r3, r1
 8007684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007686:	f001 0108 	and.w	r1, r1, #8
 800768a:	430b      	orrs	r3, r1
 800768c:	68e1      	ldr	r1, [r4, #12]
 800768e:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8007692:	430b      	orrs	r3, r1
 8007694:	6821      	ldr	r1, [r4, #0]
 8007696:	431a      	orrs	r2, r3
 8007698:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800769a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800769c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076a0:	d025      	beq.n	80076ee <HAL_SPI_Init+0x14a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	69d3      	ldr	r3, [r2, #28]
 80076a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076aa:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076ac:	2000      	movs	r0, #0
 80076ae:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80076b6:	bd10      	pop	{r4, pc}
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 80076b8:	4b18      	ldr	r3, [pc, #96]	@ (800771c <HAL_SPI_Init+0x178>)
 80076ba:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 80076be:	e79c      	b.n	80075fa <HAL_SPI_Init+0x56>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80076c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80076c4:	e7aa      	b.n	800761c <HAL_SPI_Init+0x78>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80076c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80076c8:	b92b      	cbnz	r3, 80076d6 <HAL_SPI_Init+0x132>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80076ca:	68e3      	ldr	r3, [r4, #12]
 80076cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80076d0:	d90a      	bls.n	80076e8 <HAL_SPI_Init+0x144>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80076d2:	2302      	movs	r3, #2
 80076d4:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80076d6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d1cc      	bne.n	8007676 <HAL_SPI_Init+0xd2>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80076dc:	6821      	ldr	r1, [r4, #0]
 80076de:	680b      	ldr	r3, [r1, #0]
 80076e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80076e4:	600b      	str	r3, [r1, #0]
 80076e6:	e7c6      	b.n	8007676 <HAL_SPI_Init+0xd2>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80076e8:	2301      	movs	r3, #1
 80076ea:	6323      	str	r3, [r4, #48]	@ 0x30
 80076ec:	e7f3      	b.n	80076d6 <HAL_SPI_Init+0x132>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80076f2:	611a      	str	r2, [r3, #16]
 80076f4:	e7d5      	b.n	80076a2 <HAL_SPI_Init+0xfe>
    return HAL_ERROR;
 80076f6:	2001      	movs	r0, #1
}
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	08007379 	.word	0x08007379
 8007700:	0800737b 	.word	0x0800737b
 8007704:	0800737d 	.word	0x0800737d
 8007708:	0800737f 	.word	0x0800737f
 800770c:	08007381 	.word	0x08007381
 8007710:	08007383 	.word	0x08007383
 8007714:	08007385 	.word	0x08007385
 8007718:	08007387 	.word	0x08007387
 800771c:	08002865 	.word	0x08002865

08007720 <HAL_SPI_Transmit>:
{
 8007720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007724:	b083      	sub	sp, #12
 8007726:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8007728:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800772c:	2b01      	cmp	r3, #1
 800772e:	f000 810f 	beq.w	8007950 <HAL_SPI_Transmit+0x230>
 8007732:	4604      	mov	r4, r0
 8007734:	4688      	mov	r8, r1
 8007736:	4691      	mov	r9, r2
 8007738:	2301      	movs	r3, #1
 800773a:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800773e:	f7fb f9b7 	bl	8002ab0 <HAL_GetTick>
 8007742:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007744:	f894 605d 	ldrb.w	r6, [r4, #93]	@ 0x5d
 8007748:	b2f6      	uxtb	r6, r6
 800774a:	2e01      	cmp	r6, #1
 800774c:	f040 80ed 	bne.w	800792a <HAL_SPI_Transmit+0x20a>
  if ((pData == NULL) || (Size == 0U))
 8007750:	f1b8 0f00 	cmp.w	r8, #0
 8007754:	f000 80ea 	beq.w	800792c <HAL_SPI_Transmit+0x20c>
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	f000 80e6 	beq.w	800792c <HAL_SPI_Transmit+0x20c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007760:	2303      	movs	r3, #3
 8007762:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007766:	2300      	movs	r3, #0
 8007768:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800776a:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800776e:	f8a4 903c 	strh.w	r9, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007772:	f8a4 903e 	strh.w	r9, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007776:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007778:	f8a4 3044 	strh.w	r3, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800777c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007780:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007782:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007784:	68a3      	ldr	r3, [r4, #8]
 8007786:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800778a:	d022      	beq.n	80077d2 <HAL_SPI_Transmit+0xb2>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800778c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800778e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007792:	d029      	beq.n	80077e8 <HAL_SPI_Transmit+0xc8>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007794:	6823      	ldr	r3, [r4, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800779c:	d103      	bne.n	80077a6 <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077a4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077a6:	68e3      	ldr	r3, [r4, #12]
 80077a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80077ac:	d94d      	bls.n	800784a <HAL_SPI_Transmit+0x12a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	b113      	cbz	r3, 80077b8 <HAL_SPI_Transmit+0x98>
 80077b2:	f1b9 0f01 	cmp.w	r9, #1
 80077b6:	d12e      	bne.n	8007816 <HAL_SPI_Transmit+0xf6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	8812      	ldrh	r2, [r2, #0]
 80077be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80077c0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80077c2:	3302      	adds	r3, #2
 80077c4:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80077c6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	3b01      	subs	r3, #1
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80077d0:	e021      	b.n	8007816 <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 80077d2:	6822      	ldr	r2, [r4, #0]
 80077d4:	6813      	ldr	r3, [r2, #0]
 80077d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077da:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	e7d1      	b.n	800778c <HAL_SPI_Transmit+0x6c>
    SPI_RESET_CRC(hspi);
 80077e8:	6822      	ldr	r2, [r4, #0]
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	6822      	ldr	r2, [r4, #0]
 80077f4:	6813      	ldr	r3, [r2, #0]
 80077f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	e7ca      	b.n	8007794 <HAL_SPI_Transmit+0x74>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077fe:	f7fb f957 	bl	8002ab0 <HAL_GetTick>
 8007802:	1bc0      	subs	r0, r0, r7
 8007804:	42a8      	cmp	r0, r5
 8007806:	d303      	bcc.n	8007810 <HAL_SPI_Transmit+0xf0>
 8007808:	f1b5 3fff 	cmp.w	r5, #4294967295
 800780c:	f040 8098 	bne.w	8007940 <HAL_SPI_Transmit+0x220>
 8007810:	2d00      	cmp	r5, #0
 8007812:	f000 8097 	beq.w	8007944 <HAL_SPI_Transmit+0x224>
    while (hspi->TxXferCount > 0U)
 8007816:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d066      	beq.n	80078ec <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	689a      	ldr	r2, [r3, #8]
 8007822:	f012 0f02 	tst.w	r2, #2
 8007826:	d0ea      	beq.n	80077fe <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007828:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800782a:	8812      	ldrh	r2, [r2, #0]
 800782c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800782e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007830:	3302      	adds	r3, #2
 8007832:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007834:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
 8007838:	fa1f fc8c 	uxth.w	ip, ip
 800783c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007840:	fa1f fc8c 	uxth.w	ip, ip
 8007844:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
 8007848:	e7e5      	b.n	8007816 <HAL_SPI_Transmit+0xf6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800784a:	6863      	ldr	r3, [r4, #4]
 800784c:	b113      	cbz	r3, 8007854 <HAL_SPI_Transmit+0x134>
 800784e:	f1b9 0f01 	cmp.w	r9, #1
 8007852:	d133      	bne.n	80078bc <HAL_SPI_Transmit+0x19c>
      if (hspi->TxXferCount > 1U)
 8007854:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b01      	cmp	r3, #1
 800785a:	d90c      	bls.n	8007876 <HAL_SPI_Transmit+0x156>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800785c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800785e:	6823      	ldr	r3, [r4, #0]
 8007860:	8812      	ldrh	r2, [r2, #0]
 8007862:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007864:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007866:	3302      	adds	r3, #2
 8007868:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800786a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b02      	subs	r3, #2
 8007870:	b29b      	uxth	r3, r3
 8007872:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8007874:	e022      	b.n	80078bc <HAL_SPI_Transmit+0x19c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007876:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007878:	6823      	ldr	r3, [r4, #0]
 800787a:	7812      	ldrb	r2, [r2, #0]
 800787c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr ++;
 800787e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007880:	3301      	adds	r3, #1
 8007882:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007884:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29b      	uxth	r3, r3
 800788c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800788e:	e015      	b.n	80078bc <HAL_SPI_Transmit+0x19c>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007890:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8007896:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007898:	3301      	adds	r3, #1
 800789a:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800789c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800789e:	b29b      	uxth	r3, r3
 80078a0:	3b01      	subs	r3, #1
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80078a6:	e009      	b.n	80078bc <HAL_SPI_Transmit+0x19c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078a8:	f7fb f902 	bl	8002ab0 <HAL_GetTick>
 80078ac:	1bc0      	subs	r0, r0, r7
 80078ae:	42a8      	cmp	r0, r5
 80078b0:	d302      	bcc.n	80078b8 <HAL_SPI_Transmit+0x198>
 80078b2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80078b6:	d147      	bne.n	8007948 <HAL_SPI_Transmit+0x228>
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	d047      	beq.n	800794c <HAL_SPI_Transmit+0x22c>
    while (hspi->TxXferCount > 0U)
 80078bc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80078be:	b29b      	uxth	r3, r3
 80078c0:	b1a3      	cbz	r3, 80078ec <HAL_SPI_Transmit+0x1cc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80078c2:	6822      	ldr	r2, [r4, #0]
 80078c4:	6893      	ldr	r3, [r2, #8]
 80078c6:	f013 0f02 	tst.w	r3, #2
 80078ca:	d0ed      	beq.n	80078a8 <HAL_SPI_Transmit+0x188>
        if (hspi->TxXferCount > 1U)
 80078cc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d9dd      	bls.n	8007890 <HAL_SPI_Transmit+0x170>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80078d6:	881b      	ldrh	r3, [r3, #0]
 80078d8:	60d3      	str	r3, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80078da:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80078dc:	3302      	adds	r3, #2
 80078de:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80078e0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b02      	subs	r3, #2
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80078ea:	e7e7      	b.n	80078bc <HAL_SPI_Transmit+0x19c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80078ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078f2:	d014      	beq.n	800791e <HAL_SPI_Transmit+0x1fe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078f4:	463a      	mov	r2, r7
 80078f6:	4629      	mov	r1, r5
 80078f8:	4620      	mov	r0, r4
 80078fa:	f7ff fe21 	bl	8007540 <SPI_EndRxTxTransaction>
 80078fe:	b108      	cbz	r0, 8007904 <HAL_SPI_Transmit+0x1e4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007900:	2320      	movs	r3, #32
 8007902:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007904:	68a3      	ldr	r3, [r4, #8]
 8007906:	b933      	cbnz	r3, 8007916 <HAL_SPI_Transmit+0x1f6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	9201      	str	r2, [sp, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007916:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007918:	b943      	cbnz	r3, 800792c <HAL_SPI_Transmit+0x20c>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800791a:	2600      	movs	r6, #0
 800791c:	e006      	b.n	800792c <HAL_SPI_Transmit+0x20c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	6813      	ldr	r3, [r2, #0]
 8007922:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	e7e4      	b.n	80078f4 <HAL_SPI_Transmit+0x1d4>
    errorcode = HAL_BUSY;
 800792a:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 800792c:	2301      	movs	r3, #1
 800792e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007932:	2300      	movs	r3, #0
 8007934:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8007938:	4630      	mov	r0, r6
 800793a:	b003      	add	sp, #12
 800793c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8007940:	2603      	movs	r6, #3
 8007942:	e7f3      	b.n	800792c <HAL_SPI_Transmit+0x20c>
 8007944:	2603      	movs	r6, #3
 8007946:	e7f1      	b.n	800792c <HAL_SPI_Transmit+0x20c>
          errorcode = HAL_TIMEOUT;
 8007948:	2603      	movs	r6, #3
 800794a:	e7ef      	b.n	800792c <HAL_SPI_Transmit+0x20c>
 800794c:	2603      	movs	r6, #3
 800794e:	e7ed      	b.n	800792c <HAL_SPI_Transmit+0x20c>
  __HAL_LOCK(hspi);
 8007950:	2602      	movs	r6, #2
 8007952:	e7f1      	b.n	8007938 <HAL_SPI_Transmit+0x218>

08007954 <HAL_SPI_TransmitReceive>:
{
 8007954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007958:	b085      	sub	sp, #20
 800795a:	461f      	mov	r7, r3
 800795c:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  __IO uint32_t tmpreg = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	9303      	str	r3, [sp, #12]
  __IO uint8_t  tmpreg8 = 0;
 8007962:	f88d 300b 	strb.w	r3, [sp, #11]
  __HAL_LOCK(hspi);
 8007966:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800796a:	2b01      	cmp	r3, #1
 800796c:	f000 81fa 	beq.w	8007d64 <HAL_SPI_TransmitReceive+0x410>
 8007970:	4604      	mov	r4, r0
 8007972:	468a      	mov	sl, r1
 8007974:	4693      	mov	fp, r2
 8007976:	2301      	movs	r3, #1
 8007978:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
  tickstart = HAL_GetTick();
 800797c:	f7fb f898 	bl	8002ab0 <HAL_GetTick>
 8007980:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8007982:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8007986:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8007988:	6861      	ldr	r1, [r4, #4]
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800798a:	6822      	ldr	r2, [r4, #0]
 800798c:	f8d2 8000 	ldr.w	r8, [r2]
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8007990:	f8d2 9004 	ldr.w	r9, [r2, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007994:	2b01      	cmp	r3, #1
 8007996:	d00a      	beq.n	80079ae <HAL_SPI_TransmitReceive+0x5a>
 8007998:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
 800799c:	f040 81c7 	bne.w	8007d2e <HAL_SPI_TransmitReceive+0x3da>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80079a0:	68a1      	ldr	r1, [r4, #8]
 80079a2:	2900      	cmp	r1, #0
 80079a4:	f040 81ce 	bne.w	8007d44 <HAL_SPI_TransmitReceive+0x3f0>
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	f040 81cd 	bne.w	8007d48 <HAL_SPI_TransmitReceive+0x3f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80079ae:	f1ba 0f00 	cmp.w	sl, #0
 80079b2:	f000 81cb 	beq.w	8007d4c <HAL_SPI_TransmitReceive+0x3f8>
 80079b6:	f1bb 0f00 	cmp.w	fp, #0
 80079ba:	f000 81c9 	beq.w	8007d50 <HAL_SPI_TransmitReceive+0x3fc>
 80079be:	2f00      	cmp	r7, #0
 80079c0:	f000 81c8 	beq.w	8007d54 <HAL_SPI_TransmitReceive+0x400>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80079c4:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d002      	beq.n	80079d4 <HAL_SPI_TransmitReceive+0x80>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80079ce:	2305      	movs	r3, #5
 80079d0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079d4:	2300      	movs	r3, #0
 80079d6:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80079d8:	f8c4 b040 	str.w	fp, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80079dc:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80079e0:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80079e4:	f8c4 a038 	str.w	sl, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80079e8:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80079ea:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 80079ec:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80079ee:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079f0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80079f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079f6:	d029      	beq.n	8007a4c <HAL_SPI_TransmitReceive+0xf8>
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80079f8:	68e3      	ldr	r3, [r4, #12]
 80079fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80079fe:	d801      	bhi.n	8007a04 <HAL_SPI_TransmitReceive+0xb0>
 8007a00:	2f01      	cmp	r7, #1
 8007a02:	d92d      	bls.n	8007a60 <HAL_SPI_TransmitReceive+0x10c>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a04:	6822      	ldr	r2, [r4, #0]
 8007a06:	6853      	ldr	r3, [r2, #4]
 8007a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a0c:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a0e:	6823      	ldr	r3, [r4, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8007a16:	d103      	bne.n	8007a20 <HAL_SPI_TransmitReceive+0xcc>
    __HAL_SPI_ENABLE(hspi);
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a1e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a20:	68e3      	ldr	r3, [r4, #12]
 8007a22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a26:	d97d      	bls.n	8007b24 <HAL_SPI_TransmitReceive+0x1d0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a28:	6863      	ldr	r3, [r4, #4]
 8007a2a:	b10b      	cbz	r3, 8007a30 <HAL_SPI_TransmitReceive+0xdc>
 8007a2c:	2f01      	cmp	r7, #1
 8007a2e:	d10b      	bne.n	8007a48 <HAL_SPI_TransmitReceive+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a30:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	8812      	ldrh	r2, [r2, #0]
 8007a36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007a3a:	3302      	adds	r3, #2
 8007a3c:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a3e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	3b01      	subs	r3, #1
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8007a48:	2701      	movs	r7, #1
 8007a4a:	e042      	b.n	8007ad2 <HAL_SPI_TransmitReceive+0x17e>
    SPI_RESET_CRC(hspi);
 8007a4c:	6813      	ldr	r3, [r2, #0]
 8007a4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	6822      	ldr	r2, [r4, #0]
 8007a56:	6813      	ldr	r3, [r2, #0]
 8007a58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	e7cb      	b.n	80079f8 <HAL_SPI_TransmitReceive+0xa4>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007a60:	6822      	ldr	r2, [r4, #0]
 8007a62:	6853      	ldr	r3, [r2, #4]
 8007a64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a68:	6053      	str	r3, [r2, #4]
 8007a6a:	e7d0      	b.n	8007a0e <HAL_SPI_TransmitReceive+0xba>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8007a6c:	f018 0f04 	tst.w	r8, #4
 8007a70:	d107      	bne.n	8007a82 <HAL_SPI_TransmitReceive+0x12e>
 8007a72:	f019 0f08 	tst.w	r9, #8
 8007a76:	d004      	beq.n	8007a82 <HAL_SPI_TransmitReceive+0x12e>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007a78:	6822      	ldr	r2, [r4, #0]
 8007a7a:	6813      	ldr	r3, [r2, #0]
 8007a7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a80:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007a82:	6822      	ldr	r2, [r4, #0]
 8007a84:	6813      	ldr	r3, [r2, #0]
 8007a86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a8a:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8007a8c:	2700      	movs	r7, #0
 8007a8e:	e000      	b.n	8007a92 <HAL_SPI_TransmitReceive+0x13e>
 8007a90:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	f012 0f01 	tst.w	r2, #1
 8007a9a:	d011      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0x16c>
 8007a9c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8007aa0:	b292      	uxth	r2, r2
 8007aa2:	b16a      	cbz	r2, 8007ac0 <HAL_SPI_TransmitReceive+0x16c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aa4:	68da      	ldr	r2, [r3, #12]
 8007aa6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007aa8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007aaa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007aac:	3302      	adds	r3, #2
 8007aae:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8007ab0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	b29b      	uxth	r3, r3
 8007aba:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8007abe:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ac0:	f7fa fff6 	bl	8002ab0 <HAL_GetTick>
 8007ac4:	1b80      	subs	r0, r0, r6
 8007ac6:	42a8      	cmp	r0, r5
 8007ac8:	d303      	bcc.n	8007ad2 <HAL_SPI_TransmitReceive+0x17e>
 8007aca:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007ace:	f040 8143 	bne.w	8007d58 <HAL_SPI_TransmitReceive+0x404>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ad2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	b92b      	cbnz	r3, 8007ae4 <HAL_SPI_TransmitReceive+0x190>
 8007ad8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80d1 	beq.w	8007c86 <HAL_SPI_TransmitReceive+0x332>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	689a      	ldr	r2, [r3, #8]
 8007ae8:	f012 0f02 	tst.w	r2, #2
 8007aec:	d0d1      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x13e>
 8007aee:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8007af0:	b292      	uxth	r2, r2
 8007af2:	2a00      	cmp	r2, #0
 8007af4:	d0cd      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x13e>
 8007af6:	2f00      	cmp	r7, #0
 8007af8:	d0cb      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x13e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007afa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007afc:	8812      	ldrh	r2, [r2, #0]
 8007afe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b00:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b02:	3302      	adds	r3, #2
 8007b04:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b06:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007b10:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1bb      	bne.n	8007a90 <HAL_SPI_TransmitReceive+0x13c>
 8007b18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007b1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b1e:	d0a5      	beq.n	8007a6c <HAL_SPI_TransmitReceive+0x118>
        txallowed = 0U;
 8007b20:	2700      	movs	r7, #0
 8007b22:	e7b6      	b.n	8007a92 <HAL_SPI_TransmitReceive+0x13e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b24:	6863      	ldr	r3, [r4, #4]
 8007b26:	b10b      	cbz	r3, 8007b2c <HAL_SPI_TransmitReceive+0x1d8>
 8007b28:	2f01      	cmp	r7, #1
 8007b2a:	d10f      	bne.n	8007b4c <HAL_SPI_TransmitReceive+0x1f8>
      if (hspi->TxXferCount > 1U)
 8007b2c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d90d      	bls.n	8007b50 <HAL_SPI_TransmitReceive+0x1fc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b34:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	8812      	ldrh	r2, [r2, #0]
 8007b3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b3c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b3e:	3302      	adds	r3, #2
 8007b40:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007b42:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b02      	subs	r3, #2
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8007b4c:	2701      	movs	r7, #1
 8007b4e:	e065      	b.n	8007c1c <HAL_SPI_TransmitReceive+0x2c8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b50:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007b52:	6823      	ldr	r3, [r4, #0]
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007b58:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b5e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	3b01      	subs	r3, #1
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8007b68:	e7f0      	b.n	8007b4c <HAL_SPI_TransmitReceive+0x1f8>
        if (hspi->TxXferCount > 1U)
 8007b6a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8007b6c:	b292      	uxth	r2, r2
 8007b6e:	2a01      	cmp	r2, #1
 8007b70:	d913      	bls.n	8007b9a <HAL_SPI_TransmitReceive+0x246>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b72:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007b74:	8812      	ldrh	r2, [r2, #0]
 8007b76:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007b7a:	3302      	adds	r3, #2
 8007b7c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007b7e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b02      	subs	r3, #2
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007b88:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	bb1b      	cbnz	r3, 8007bd6 <HAL_SPI_TransmitReceive+0x282>
 8007b8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007b90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b94:	d00d      	beq.n	8007bb2 <HAL_SPI_TransmitReceive+0x25e>
        txallowed = 0U;
 8007b96:	2700      	movs	r7, #0
 8007b98:	e052      	b.n	8007c40 <HAL_SPI_TransmitReceive+0x2ec>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b9a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007b9c:	7812      	ldrb	r2, [r2, #0]
 8007b9e:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8007ba0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8007ba6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8007bb0:	e7ea      	b.n	8007b88 <HAL_SPI_TransmitReceive+0x234>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8007bb2:	f018 0f04 	tst.w	r8, #4
 8007bb6:	d107      	bne.n	8007bc8 <HAL_SPI_TransmitReceive+0x274>
 8007bb8:	f019 0f08 	tst.w	r9, #8
 8007bbc:	d004      	beq.n	8007bc8 <HAL_SPI_TransmitReceive+0x274>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8007bbe:	6822      	ldr	r2, [r4, #0]
 8007bc0:	6813      	ldr	r3, [r2, #0]
 8007bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bc6:	6013      	str	r3, [r2, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007bc8:	6822      	ldr	r2, [r4, #0]
 8007bca:	6813      	ldr	r3, [r2, #0]
 8007bcc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007bd0:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8007bd2:	2700      	movs	r7, #0
 8007bd4:	e034      	b.n	8007c40 <HAL_SPI_TransmitReceive+0x2ec>
 8007bd6:	2700      	movs	r7, #0
 8007bd8:	e032      	b.n	8007c40 <HAL_SPI_TransmitReceive+0x2ec>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007bda:	6822      	ldr	r2, [r4, #0]
 8007bdc:	6853      	ldr	r3, [r2, #4]
 8007bde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007be2:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8007be4:	2701      	movs	r7, #1
 8007be6:	e00d      	b.n	8007c04 <HAL_SPI_TransmitReceive+0x2b0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007be8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8007bea:	7b1b      	ldrb	r3, [r3, #12]
 8007bec:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 8007bee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8007bf4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8007c02:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c04:	f7fa ff54 	bl	8002ab0 <HAL_GetTick>
 8007c08:	1b80      	subs	r0, r0, r6
 8007c0a:	42a8      	cmp	r0, r5
 8007c0c:	d303      	bcc.n	8007c16 <HAL_SPI_TransmitReceive+0x2c2>
 8007c0e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007c12:	f040 80a3 	bne.w	8007d5c <HAL_SPI_TransmitReceive+0x408>
 8007c16:	2d00      	cmp	r5, #0
 8007c18:	f000 80a2 	beq.w	8007d60 <HAL_SPI_TransmitReceive+0x40c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	b923      	cbnz	r3, 8007c2c <HAL_SPI_TransmitReceive+0x2d8>
 8007c22:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d02c      	beq.n	8007c86 <HAL_SPI_TransmitReceive+0x332>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	689a      	ldr	r2, [r3, #8]
 8007c30:	f012 0f02 	tst.w	r2, #2
 8007c34:	d004      	beq.n	8007c40 <HAL_SPI_TransmitReceive+0x2ec>
 8007c36:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8007c38:	b292      	uxth	r2, r2
 8007c3a:	b10a      	cbz	r2, 8007c40 <HAL_SPI_TransmitReceive+0x2ec>
 8007c3c:	2f00      	cmp	r7, #0
 8007c3e:	d194      	bne.n	8007b6a <HAL_SPI_TransmitReceive+0x216>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	f012 0f01 	tst.w	r2, #1
 8007c48:	d0dc      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x2b0>
 8007c4a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8007c4e:	b292      	uxth	r2, r2
 8007c50:	2a00      	cmp	r2, #0
 8007c52:	d0d7      	beq.n	8007c04 <HAL_SPI_TransmitReceive+0x2b0>
        if (hspi->RxXferCount > 1U)
 8007c54:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8007c58:	b292      	uxth	r2, r2
 8007c5a:	2a01      	cmp	r2, #1
 8007c5c:	d9c4      	bls.n	8007be8 <HAL_SPI_TransmitReceive+0x294>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c66:	3302      	adds	r3, #2
 8007c68:	6423      	str	r3, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007c6a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	3b02      	subs	r3, #2
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007c78:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d9ab      	bls.n	8007bda <HAL_SPI_TransmitReceive+0x286>
        txallowed = 1U;
 8007c82:	2701      	movs	r7, #1
 8007c84:	e7be      	b.n	8007c04 <HAL_SPI_TransmitReceive+0x2b0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c86:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c8c:	d017      	beq.n	8007cbe <HAL_SPI_TransmitReceive+0x36a>
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	689a      	ldr	r2, [r3, #8]
 8007c92:	f012 0f10 	tst.w	r2, #16
 8007c96:	d048      	beq.n	8007d2a <HAL_SPI_TransmitReceive+0x3d6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007c98:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8007c9a:	f042 0202 	orr.w	r2, r2, #2
 8007c9e:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007ca0:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8007ca4:	609a      	str	r2, [r3, #8]
    errorcode = HAL_ERROR;
 8007ca6:	2701      	movs	r7, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ca8:	4632      	mov	r2, r6
 8007caa:	4629      	mov	r1, r5
 8007cac:	4620      	mov	r0, r4
 8007cae:	f7ff fc47 	bl	8007540 <SPI_EndRxTxTransaction>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d03c      	beq.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cb6:	2320      	movs	r3, #32
 8007cb8:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8007cba:	2701      	movs	r7, #1
 8007cbc:	e038      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007cbe:	9600      	str	r6, [sp, #0]
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f7ff fb5e 	bl	8007388 <SPI_WaitFlagStateUntilTimeout>
 8007ccc:	b9e0      	cbnz	r0, 8007d08 <HAL_SPI_TransmitReceive+0x3b4>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007cce:	68e3      	ldr	r3, [r4, #12]
 8007cd0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007cd4:	d01e      	beq.n	8007d14 <HAL_SPI_TransmitReceive+0x3c0>
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007cd6:	6827      	ldr	r7, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8007cd8:	7b3b      	ldrb	r3, [r7, #12]
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	f88d 300b 	strb.w	r3, [sp, #11]
      UNUSED(tmpreg8);
 8007ce0:	f89d 300b 	ldrb.w	r3, [sp, #11]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8007ce4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d1d1      	bne.n	8007c8e <HAL_SPI_TransmitReceive+0x33a>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007cea:	9600      	str	r6, [sp, #0]
 8007cec:	462b      	mov	r3, r5
 8007cee:	2201      	movs	r2, #1
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7ff fb48 	bl	8007388 <SPI_WaitFlagStateUntilTimeout>
 8007cf8:	b988      	cbnz	r0, 8007d1e <HAL_SPI_TransmitReceive+0x3ca>
        tmpreg8 = *ptmpreg8;
 8007cfa:	7b3b      	ldrb	r3, [r7, #12]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	f88d 300b 	strb.w	r3, [sp, #11]
        UNUSED(tmpreg8);
 8007d02:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8007d06:	e7c2      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x33a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d08:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007d0a:	f043 0302 	orr.w	r3, r3, #2
 8007d0e:	6623      	str	r3, [r4, #96]	@ 0x60
      errorcode = HAL_TIMEOUT;
 8007d10:	2703      	movs	r7, #3
      goto error;
 8007d12:	e00d      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
      tmpreg = READ_REG(hspi->Instance->DR);
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	9303      	str	r3, [sp, #12]
      UNUSED(tmpreg);
 8007d1a:	9b03      	ldr	r3, [sp, #12]
 8007d1c:	e7b7      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x33a>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007d1e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007d20:	f043 0302 	orr.w	r3, r3, #2
 8007d24:	6623      	str	r3, [r4, #96]	@ 0x60
          errorcode = HAL_TIMEOUT;
 8007d26:	2703      	movs	r7, #3
          goto error;
 8007d28:	e002      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d2a:	2700      	movs	r7, #0
 8007d2c:	e7bc      	b.n	8007ca8 <HAL_SPI_TransmitReceive+0x354>
    errorcode = HAL_BUSY;
 8007d2e:	2702      	movs	r7, #2
  hspi->State = HAL_SPI_STATE_READY;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8007d36:	2300      	movs	r3, #0
 8007d38:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	b005      	add	sp, #20
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    errorcode = HAL_BUSY;
 8007d44:	2702      	movs	r7, #2
 8007d46:	e7f3      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
 8007d48:	2702      	movs	r7, #2
 8007d4a:	e7f1      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
    errorcode = HAL_ERROR;
 8007d4c:	2701      	movs	r7, #1
 8007d4e:	e7ef      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
 8007d50:	2701      	movs	r7, #1
 8007d52:	e7ed      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
 8007d54:	2701      	movs	r7, #1
 8007d56:	e7eb      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
        errorcode = HAL_TIMEOUT;
 8007d58:	2703      	movs	r7, #3
 8007d5a:	e7e9      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
        errorcode = HAL_TIMEOUT;
 8007d5c:	2703      	movs	r7, #3
 8007d5e:	e7e7      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
 8007d60:	2703      	movs	r7, #3
 8007d62:	e7e5      	b.n	8007d30 <HAL_SPI_TransmitReceive+0x3dc>
  __HAL_LOCK(hspi);
 8007d64:	2702      	movs	r7, #2
 8007d66:	e7e9      	b.n	8007d3c <HAL_SPI_TransmitReceive+0x3e8>

08007d68 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d68:	4b07      	ldr	r3, [pc, #28]	@ (8007d88 <SUBGHZSPI_Init+0x20>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d70:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007d72:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8007d76:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007d78:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007d7c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d84:	601a      	str	r2, [r3, #0]
}
 8007d86:	4770      	bx	lr
 8007d88:	58010000 	.word	0x58010000

08007d8c <HAL_SUBGHZ_Init>:
{
 8007d8c:	b530      	push	{r4, r5, lr}
 8007d8e:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8007d90:	2800      	cmp	r0, #0
 8007d92:	d076      	beq.n	8007e82 <HAL_SUBGHZ_Init+0xf6>
 8007d94:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8007d96:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007d98:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8007d9c:	b10b      	cbz	r3, 8007da2 <HAL_SUBGHZ_Init+0x16>
 8007d9e:	2d03      	cmp	r5, #3
 8007da0:	d121      	bne.n	8007de6 <HAL_SUBGHZ_Init+0x5a>
    hsubghz->Lock = HAL_UNLOCKED;
 8007da2:	2300      	movs	r3, #0
 8007da4:	7163      	strb	r3, [r4, #5]
    hsubghz->TxCpltCallback              = HAL_SUBGHZ_TxCpltCallback;
 8007da6:	4b38      	ldr	r3, [pc, #224]	@ (8007e88 <HAL_SUBGHZ_Init+0xfc>)
 8007da8:	60e3      	str	r3, [r4, #12]
    hsubghz->RxCpltCallback              = HAL_SUBGHZ_RxCpltCallback;
 8007daa:	4b38      	ldr	r3, [pc, #224]	@ (8007e8c <HAL_SUBGHZ_Init+0x100>)
 8007dac:	6123      	str	r3, [r4, #16]
    hsubghz->PreambleDetectedCallback    = HAL_SUBGHZ_PreambleDetectedCallback;
 8007dae:	4b38      	ldr	r3, [pc, #224]	@ (8007e90 <HAL_SUBGHZ_Init+0x104>)
 8007db0:	6163      	str	r3, [r4, #20]
    hsubghz->SyncWordValidCallback       = HAL_SUBGHZ_SyncWordValidCallback;
 8007db2:	4b38      	ldr	r3, [pc, #224]	@ (8007e94 <HAL_SUBGHZ_Init+0x108>)
 8007db4:	61a3      	str	r3, [r4, #24]
    hsubghz->HeaderValidCallback         = HAL_SUBGHZ_HeaderValidCallback;
 8007db6:	4b38      	ldr	r3, [pc, #224]	@ (8007e98 <HAL_SUBGHZ_Init+0x10c>)
 8007db8:	61e3      	str	r3, [r4, #28]
    hsubghz->HeaderErrorCallback         = HAL_SUBGHZ_HeaderErrorCallback;
 8007dba:	4b38      	ldr	r3, [pc, #224]	@ (8007e9c <HAL_SUBGHZ_Init+0x110>)
 8007dbc:	6223      	str	r3, [r4, #32]
    hsubghz->CRCErrorCallback            = HAL_SUBGHZ_CRCErrorCallback;
 8007dbe:	4b38      	ldr	r3, [pc, #224]	@ (8007ea0 <HAL_SUBGHZ_Init+0x114>)
 8007dc0:	6263      	str	r3, [r4, #36]	@ 0x24
    hsubghz->CADStatusCallback           = HAL_SUBGHZ_CADStatusCallback;
 8007dc2:	4b38      	ldr	r3, [pc, #224]	@ (8007ea4 <HAL_SUBGHZ_Init+0x118>)
 8007dc4:	62a3      	str	r3, [r4, #40]	@ 0x28
    hsubghz->RxTxTimeoutCallback         = HAL_SUBGHZ_RxTxTimeoutCallback;
 8007dc6:	4b38      	ldr	r3, [pc, #224]	@ (8007ea8 <HAL_SUBGHZ_Init+0x11c>)
 8007dc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hsubghz->LrFhssHopCallback           = HAL_SUBGHZ_LrFhssHopCallback;
 8007dca:	4b38      	ldr	r3, [pc, #224]	@ (8007eac <HAL_SUBGHZ_Init+0x120>)
 8007dcc:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (hsubghz->MspInitCallback == NULL)
 8007dce:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007dd0:	b1db      	cbz	r3, 8007e0a <HAL_SUBGHZ_Init+0x7e>
    hsubghz->MspInitCallback(hsubghz);
 8007dd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	4798      	blx	r3
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007dd8:	4a35      	ldr	r2, [pc, #212]	@ (8007eb0 <HAL_SUBGHZ_Init+0x124>)
 8007dda:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007dde:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007de2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007de6:	b19d      	cbz	r5, 8007e10 <HAL_SUBGHZ_Init+0x84>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007de8:	4b32      	ldr	r3, [pc, #200]	@ (8007eb4 <HAL_SUBGHZ_Init+0x128>)
 8007dea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007dee:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8007df0:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8007df2:	6820      	ldr	r0, [r4, #0]
 8007df4:	f7ff ffb8 	bl	8007d68 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007e00:	2301      	movs	r3, #1
 8007e02:	71a3      	strb	r3, [r4, #6]
}
 8007e04:	4628      	mov	r0, r5
 8007e06:	b003      	add	sp, #12
 8007e08:	bd30      	pop	{r4, r5, pc}
      hsubghz->MspInitCallback = HAL_SUBGHZ_MspInit; /* Legacy weak MspInit  */
 8007e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8007eb8 <HAL_SUBGHZ_Init+0x12c>)
 8007e0c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e0e:	e7e0      	b.n	8007dd2 <HAL_SUBGHZ_Init+0x46>
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007e10:	2302      	movs	r3, #2
 8007e12:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8007e14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e18:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8007e1c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007e24:	4b25      	ldr	r3, [pc, #148]	@ (8007ebc <HAL_SUBGHZ_Init+0x130>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007e2c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007e30:	2264      	movs	r2, #100	@ 0x64
 8007e32:	fb02 f303 	mul.w	r3, r2, r3
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	e014      	b.n	8007e64 <HAL_SUBGHZ_Init+0xd8>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007e3a:	2501      	movs	r5, #1
 8007e3c:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb4 <HAL_SUBGHZ_Init+0x128>)
 8007e40:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007e44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8007e4c:	689a      	ldr	r2, [r3, #8]
 8007e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e52:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007e54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e58:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	d1d0      	bne.n	8007e00 <HAL_SUBGHZ_Init+0x74>
 8007e5e:	e7c8      	b.n	8007df2 <HAL_SUBGHZ_Init+0x66>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0ec      	beq.n	8007e3e <HAL_SUBGHZ_Init+0xb2>
      if (count == 0U)
 8007e64:	9b01      	ldr	r3, [sp, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0e7      	beq.n	8007e3a <HAL_SUBGHZ_Init+0xae>
      count--;
 8007e6a:	9b01      	ldr	r3, [sp, #4]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8007e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e78:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 8007e7c:	d0f0      	beq.n	8007e60 <HAL_SUBGHZ_Init+0xd4>
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e7ee      	b.n	8007e60 <HAL_SUBGHZ_Init+0xd4>
    return status;
 8007e82:	2501      	movs	r5, #1
 8007e84:	e7be      	b.n	8007e04 <HAL_SUBGHZ_Init+0x78>
 8007e86:	bf00      	nop
 8007e88:	0800c6a5 	.word	0x0800c6a5
 8007e8c:	0800c6b5 	.word	0x0800c6b5
 8007e90:	0800c71d 	.word	0x0800c71d
 8007e94:	0800c72d 	.word	0x0800c72d
 8007e98:	0800c73d 	.word	0x0800c73d
 8007e9c:	0800c70d 	.word	0x0800c70d
 8007ea0:	0800c6c5 	.word	0x0800c6c5
 8007ea4:	0800c6d5 	.word	0x0800c6d5
 8007ea8:	0800c6f9 	.word	0x0800c6f9
 8007eac:	0800c74d 	.word	0x0800c74d
 8007eb0:	58000800 	.word	0x58000800
 8007eb4:	58000400 	.word	0x58000400
 8007eb8:	080029c9 	.word	0x080029c9
 8007ebc:	20000004 	.word	0x20000004

08007ec0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8007f30 <SUBGHZSPI_Transmit+0x70>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007ecc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007ed0:	2064      	movs	r0, #100	@ 0x64
 8007ed2:	fb00 f303 	mul.w	r3, r0, r3
 8007ed6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	b14b      	cbz	r3, 8007ef0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007edc:	9b01      	ldr	r3, [sp, #4]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007ee2:	4b14      	ldr	r3, [pc, #80]	@ (8007f34 <SUBGHZSPI_Transmit+0x74>)
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f013 0f02 	tst.w	r3, #2
 8007eea:	d0f5      	beq.n	8007ed8 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8007eec:	2000      	movs	r0, #0
 8007eee:	e001      	b.n	8007ef4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007ef0:	2001      	movs	r0, #1
 8007ef2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8007ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8007f34 <SUBGHZSPI_Transmit+0x74>)
 8007ef6:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8007f30 <SUBGHZSPI_Transmit+0x70>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007f00:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007f04:	2164      	movs	r1, #100	@ 0x64
 8007f06:	fb01 f303 	mul.w	r3, r1, r3
 8007f0a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007f0c:	9b01      	ldr	r3, [sp, #4]
 8007f0e:	b143      	cbz	r3, 8007f22 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007f10:	9b01      	ldr	r3, [sp, #4]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007f16:	4b07      	ldr	r3, [pc, #28]	@ (8007f34 <SUBGHZSPI_Transmit+0x74>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f013 0f01 	tst.w	r3, #1
 8007f1e:	d0f5      	beq.n	8007f0c <SUBGHZSPI_Transmit+0x4c>
 8007f20:	e001      	b.n	8007f26 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007f22:	2001      	movs	r0, #1
 8007f24:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007f26:	4b03      	ldr	r3, [pc, #12]	@ (8007f34 <SUBGHZSPI_Transmit+0x74>)
 8007f28:	68db      	ldr	r3, [r3, #12]

  return status;
}
 8007f2a:	b002      	add	sp, #8
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	20000004 	.word	0x20000004
 8007f34:	58010000 	.word	0x58010000

08007f38 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007f38:	b082      	sub	sp, #8
 8007f3a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb0 <SUBGHZSPI_Receive+0x78>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007f44:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007f48:	2064      	movs	r0, #100	@ 0x64
 8007f4a:	fb00 f303 	mul.w	r3, r0, r3
 8007f4e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007f50:	9b01      	ldr	r3, [sp, #4]
 8007f52:	b14b      	cbz	r3, 8007f68 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007f54:	9b01      	ldr	r3, [sp, #4]
 8007f56:	3b01      	subs	r3, #1
 8007f58:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007f5a:	4b16      	ldr	r3, [pc, #88]	@ (8007fb4 <SUBGHZSPI_Receive+0x7c>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f013 0f02 	tst.w	r3, #2
 8007f62:	d0f5      	beq.n	8007f50 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8007f64:	2000      	movs	r0, #0
 8007f66:	e001      	b.n	8007f6c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007f68:	2001      	movs	r0, #1
 8007f6a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 8007f6c:	4b11      	ldr	r3, [pc, #68]	@ (8007fb4 <SUBGHZSPI_Receive+0x7c>)
 8007f6e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8007f72:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007f76:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb0 <SUBGHZSPI_Receive+0x78>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007f7e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8007f82:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8007f86:	fb0c f303 	mul.w	r3, ip, r3
 8007f8a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	b143      	cbz	r3, 8007fa2 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007f96:	4b07      	ldr	r3, [pc, #28]	@ (8007fb4 <SUBGHZSPI_Receive+0x7c>)
 8007f98:	689b      	ldr	r3, [r3, #8]
 8007f9a:	f013 0f01 	tst.w	r3, #1
 8007f9e:	d0f5      	beq.n	8007f8c <SUBGHZSPI_Receive+0x54>
 8007fa0:	e001      	b.n	8007fa6 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007fa6:	4b03      	ldr	r3, [pc, #12]	@ (8007fb4 <SUBGHZSPI_Receive+0x7c>)
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	700b      	strb	r3, [r1, #0]

  return status;
}
 8007fac:	b002      	add	sp, #8
 8007fae:	4770      	bx	lr
 8007fb0:	20000004 	.word	0x20000004
 8007fb4:	58010000 	.word	0x58010000

08007fb8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007fb8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007fba:	4b13      	ldr	r3, [pc, #76]	@ (8008008 <SUBGHZ_WaitOnBusy+0x50>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007fc2:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8007fc6:	2264      	movs	r2, #100	@ 0x64
 8007fc8:	fb02 f303 	mul.w	r3, r2, r3
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	e006      	b.n	8007fde <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8007fd4:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 8007fd6:	b002      	add	sp, #8
 8007fd8:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007fda:	4213      	tst	r3, r2
 8007fdc:	d012      	beq.n	8008004 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8007fde:	4b0b      	ldr	r3, [pc, #44]	@ (800800c <SUBGHZ_WaitOnBusy+0x54>)
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	f013 0304 	ands.w	r3, r3, #4
 8007fe6:	d000      	beq.n	8007fea <SUBGHZ_WaitOnBusy+0x32>
 8007fe8:	2301      	movs	r3, #1
    if (count == 0U)
 8007fea:	9a01      	ldr	r2, [sp, #4]
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	d0ef      	beq.n	8007fd0 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8007ff0:	9a01      	ldr	r2, [sp, #4]
 8007ff2:	3a01      	subs	r2, #1
 8007ff4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007ff6:	4a05      	ldr	r2, [pc, #20]	@ (800800c <SUBGHZ_WaitOnBusy+0x54>)
 8007ff8:	6952      	ldr	r2, [r2, #20]
 8007ffa:	f012 0202 	ands.w	r2, r2, #2
 8007ffe:	d0ec      	beq.n	8007fda <SUBGHZ_WaitOnBusy+0x22>
 8008000:	2201      	movs	r2, #1
 8008002:	e7ea      	b.n	8007fda <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8008004:	2000      	movs	r0, #0
 8008006:	e7e6      	b.n	8007fd6 <SUBGHZ_WaitOnBusy+0x1e>
 8008008:	20000004 	.word	0x20000004
 800800c:	58000400 	.word	0x58000400

08008010 <SUBGHZ_CheckDeviceReady>:
{
 8008010:	b500      	push	{lr}
 8008012:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8008014:	7903      	ldrb	r3, [r0, #4]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d004      	beq.n	8008024 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800801a:	f7ff ffcd 	bl	8007fb8 <SUBGHZ_WaitOnBusy>
}
 800801e:	b003      	add	sp, #12
 8008020:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8008024:	4b0d      	ldr	r3, [pc, #52]	@ (800805c <SUBGHZ_CheckDeviceReady+0x4c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800802c:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8008030:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008032:	4a0b      	ldr	r2, [pc, #44]	@ (8008060 <SUBGHZ_CheckDeviceReady+0x50>)
 8008034:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008038:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800803c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	3b01      	subs	r3, #1
 8008044:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8008046:	9b01      	ldr	r3, [sp, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f9      	bne.n	8008040 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800804c:	4a04      	ldr	r2, [pc, #16]	@ (8008060 <SUBGHZ_CheckDeviceReady+0x50>)
 800804e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800805a:	e7de      	b.n	800801a <SUBGHZ_CheckDeviceReady+0xa>
 800805c:	20000004 	.word	0x20000004
 8008060:	58000400 	.word	0x58000400

08008064 <HAL_SUBGHZ_WriteRegisters>:
{
 8008064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008068:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800806a:	7980      	ldrb	r0, [r0, #6]
 800806c:	fa5f f880 	uxtb.w	r8, r0
 8008070:	f1b8 0f01 	cmp.w	r8, #1
 8008074:	d13e      	bne.n	80080f4 <HAL_SUBGHZ_WriteRegisters+0x90>
 8008076:	460c      	mov	r4, r1
 8008078:	4617      	mov	r7, r2
 800807a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800807c:	796b      	ldrb	r3, [r5, #5]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d03b      	beq.n	80080fa <HAL_SUBGHZ_WriteRegisters+0x96>
 8008082:	2301      	movs	r3, #1
 8008084:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8008086:	2302      	movs	r3, #2
 8008088:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800808a:	4628      	mov	r0, r5
 800808c:	f7ff ffc0 	bl	8008010 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008090:	4a1b      	ldr	r2, [pc, #108]	@ (8008100 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8008092:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008096:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800809a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800809e:	210d      	movs	r1, #13
 80080a0:	4628      	mov	r0, r5
 80080a2:	f7ff ff0d 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80080a6:	0a21      	lsrs	r1, r4, #8
 80080a8:	4628      	mov	r0, r5
 80080aa:	f7ff ff09 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80080ae:	b2e1      	uxtb	r1, r4
 80080b0:	4628      	mov	r0, r5
 80080b2:	f7ff ff05 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80080b6:	2400      	movs	r4, #0
 80080b8:	e005      	b.n	80080c6 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80080ba:	5d39      	ldrb	r1, [r7, r4]
 80080bc:	4628      	mov	r0, r5
 80080be:	f7ff feff 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80080c2:	3401      	adds	r4, #1
 80080c4:	b2a4      	uxth	r4, r4
 80080c6:	42b4      	cmp	r4, r6
 80080c8:	d3f7      	bcc.n	80080ba <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80080ca:	4a0d      	ldr	r2, [pc, #52]	@ (8008100 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80080cc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80080d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80080d8:	4628      	mov	r0, r5
 80080da:	f7ff ff6d 	bl	8007fb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80080de:	68ab      	ldr	r3, [r5, #8]
 80080e0:	b90b      	cbnz	r3, 80080e6 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 80080e2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80080e6:	2301      	movs	r3, #1
 80080e8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80080ea:	2300      	movs	r3, #0
 80080ec:	716b      	strb	r3, [r5, #5]
}
 80080ee:	4640      	mov	r0, r8
 80080f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80080f4:	f04f 0802 	mov.w	r8, #2
 80080f8:	e7f9      	b.n	80080ee <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80080fa:	f04f 0802 	mov.w	r8, #2
 80080fe:	e7f6      	b.n	80080ee <HAL_SUBGHZ_WriteRegisters+0x8a>
 8008100:	58000400 	.word	0x58000400

08008104 <HAL_SUBGHZ_ReadRegisters>:
{
 8008104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008108:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800810a:	7980      	ldrb	r0, [r0, #6]
 800810c:	fa5f f880 	uxtb.w	r8, r0
 8008110:	f1b8 0f01 	cmp.w	r8, #1
 8008114:	d141      	bne.n	800819a <HAL_SUBGHZ_ReadRegisters+0x96>
 8008116:	460c      	mov	r4, r1
 8008118:	4615      	mov	r5, r2
 800811a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800811c:	7973      	ldrb	r3, [r6, #5]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d03e      	beq.n	80081a0 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8008122:	2301      	movs	r3, #1
 8008124:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008126:	4630      	mov	r0, r6
 8008128:	f7ff ff72 	bl	8008010 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800812c:	4a1e      	ldr	r2, [pc, #120]	@ (80081a8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800812e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008132:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800813a:	211d      	movs	r1, #29
 800813c:	4630      	mov	r0, r6
 800813e:	f7ff febf 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8008142:	0a21      	lsrs	r1, r4, #8
 8008144:	4630      	mov	r0, r6
 8008146:	f7ff febb 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800814a:	b2e1      	uxtb	r1, r4
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff feb7 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8008152:	2100      	movs	r1, #0
 8008154:	4630      	mov	r0, r6
 8008156:	f7ff feb3 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800815a:	2400      	movs	r4, #0
 800815c:	e006      	b.n	800816c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800815e:	4629      	mov	r1, r5
 8008160:	4630      	mov	r0, r6
 8008162:	f7ff fee9 	bl	8007f38 <SUBGHZSPI_Receive>
      pData++;
 8008166:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8008168:	3401      	adds	r4, #1
 800816a:	b2a4      	uxth	r4, r4
 800816c:	42bc      	cmp	r4, r7
 800816e:	d3f6      	bcc.n	800815e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008170:	4a0d      	ldr	r2, [pc, #52]	@ (80081a8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8008172:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008176:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800817a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ff1a 	bl	8007fb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008184:	68b3      	ldr	r3, [r6, #8]
 8008186:	b90b      	cbnz	r3, 800818c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8008188:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800818c:	2301      	movs	r3, #1
 800818e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8008190:	2300      	movs	r3, #0
 8008192:	7173      	strb	r3, [r6, #5]
}
 8008194:	4640      	mov	r0, r8
 8008196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800819a:	f04f 0802 	mov.w	r8, #2
 800819e:	e7f9      	b.n	8008194 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80081a0:	f04f 0802 	mov.w	r8, #2
 80081a4:	e7f6      	b.n	8008194 <HAL_SUBGHZ_ReadRegisters+0x90>
 80081a6:	bf00      	nop
 80081a8:	58000400 	.word	0x58000400

080081ac <HAL_SUBGHZ_ExecSetCmd>:
{
 80081ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081b0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80081b2:	7980      	ldrb	r0, [r0, #6]
 80081b4:	fa5f f980 	uxtb.w	r9, r0
 80081b8:	f1b9 0f01 	cmp.w	r9, #1
 80081bc:	d143      	bne.n	8008246 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80081be:	4688      	mov	r8, r1
 80081c0:	4617      	mov	r7, r2
 80081c2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80081c4:	796b      	ldrb	r3, [r5, #5]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d040      	beq.n	800824c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80081ca:	2301      	movs	r3, #1
 80081cc:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80081ce:	4628      	mov	r0, r5
 80081d0:	f7ff ff1e 	bl	8008010 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80081d4:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 80081d8:	d005      	beq.n	80081e6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 80081da:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 80081de:	d002      	beq.n	80081e6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	712b      	strb	r3, [r5, #4]
 80081e4:	e001      	b.n	80081ea <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80081e6:	2301      	movs	r3, #1
 80081e8:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80081ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008254 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80081ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80081f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80081f8:	4641      	mov	r1, r8
 80081fa:	4628      	mov	r0, r5
 80081fc:	f7ff fe60 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008200:	2400      	movs	r4, #0
 8008202:	e005      	b.n	8008210 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8008204:	5d39      	ldrb	r1, [r7, r4]
 8008206:	4628      	mov	r0, r5
 8008208:	f7ff fe5a 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800820c:	3401      	adds	r4, #1
 800820e:	b2a4      	uxth	r4, r4
 8008210:	42b4      	cmp	r4, r6
 8008212:	d3f7      	bcc.n	8008204 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008214:	4a0f      	ldr	r2, [pc, #60]	@ (8008254 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8008216:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800821a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800821e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8008222:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8008226:	d10a      	bne.n	800823e <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8008228:	68ab      	ldr	r3, [r5, #8]
 800822a:	b90b      	cbnz	r3, 8008230 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 800822c:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008230:	2301      	movs	r3, #1
 8008232:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8008234:	2300      	movs	r3, #0
 8008236:	716b      	strb	r3, [r5, #5]
}
 8008238:	4648      	mov	r0, r9
 800823a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800823e:	4628      	mov	r0, r5
 8008240:	f7ff feba 	bl	8007fb8 <SUBGHZ_WaitOnBusy>
 8008244:	e7f0      	b.n	8008228 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8008246:	f04f 0902 	mov.w	r9, #2
 800824a:	e7f5      	b.n	8008238 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 800824c:	f04f 0902 	mov.w	r9, #2
 8008250:	e7f2      	b.n	8008238 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8008252:	bf00      	nop
 8008254:	58000400 	.word	0x58000400

08008258 <HAL_SUBGHZ_ExecGetCmd>:
{
 8008258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800825c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800825e:	7980      	ldrb	r0, [r0, #6]
 8008260:	fa5f f880 	uxtb.w	r8, r0
 8008264:	f1b8 0f01 	cmp.w	r8, #1
 8008268:	d139      	bne.n	80082de <HAL_SUBGHZ_ExecGetCmd+0x86>
 800826a:	460c      	mov	r4, r1
 800826c:	4615      	mov	r5, r2
 800826e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8008270:	7973      	ldrb	r3, [r6, #5]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d036      	beq.n	80082e4 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8008276:	2301      	movs	r3, #1
 8008278:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800827a:	4630      	mov	r0, r6
 800827c:	f7ff fec8 	bl	8008010 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8008280:	4a1a      	ldr	r2, [pc, #104]	@ (80082ec <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8008282:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008286:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800828a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800828e:	4621      	mov	r1, r4
 8008290:	4630      	mov	r0, r6
 8008292:	f7ff fe15 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8008296:	2100      	movs	r1, #0
 8008298:	4630      	mov	r0, r6
 800829a:	f7ff fe11 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800829e:	2400      	movs	r4, #0
 80082a0:	e006      	b.n	80082b0 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80082a2:	4629      	mov	r1, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fe47 	bl	8007f38 <SUBGHZSPI_Receive>
      pData++;
 80082aa:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80082ac:	3401      	adds	r4, #1
 80082ae:	b2a4      	uxth	r4, r4
 80082b0:	42bc      	cmp	r4, r7
 80082b2:	d3f6      	bcc.n	80082a2 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80082b4:	4a0d      	ldr	r2, [pc, #52]	@ (80082ec <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80082b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80082ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff fe78 	bl	8007fb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80082c8:	68b3      	ldr	r3, [r6, #8]
 80082ca:	b90b      	cbnz	r3, 80082d0 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80082cc:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80082d0:	2301      	movs	r3, #1
 80082d2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80082d4:	2300      	movs	r3, #0
 80082d6:	7173      	strb	r3, [r6, #5]
}
 80082d8:	4640      	mov	r0, r8
 80082da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80082de:	f04f 0802 	mov.w	r8, #2
 80082e2:	e7f9      	b.n	80082d8 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80082e4:	f04f 0802 	mov.w	r8, #2
 80082e8:	e7f6      	b.n	80082d8 <HAL_SUBGHZ_ExecGetCmd+0x80>
 80082ea:	bf00      	nop
 80082ec:	58000400 	.word	0x58000400

080082f0 <HAL_SUBGHZ_IRQHandler>:
{
 80082f0:	b530      	push	{r4, r5, lr}
 80082f2:	b083      	sub	sp, #12
 80082f4:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80082f6:	2300      	movs	r3, #0
 80082f8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80082fc:	2302      	movs	r3, #2
 80082fe:	aa01      	add	r2, sp, #4
 8008300:	2112      	movs	r1, #18
 8008302:	f7ff ffa9 	bl	8008258 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8008306:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800830a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800830e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8008312:	b224      	sxth	r4, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8008314:	2302      	movs	r3, #2
 8008316:	aa01      	add	r2, sp, #4
 8008318:	4619      	mov	r1, r3
 800831a:	4628      	mov	r0, r5
 800831c:	f7ff ff46 	bl	80081ac <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8008320:	f014 0f01 	tst.w	r4, #1
 8008324:	d002      	beq.n	800832c <HAL_SUBGHZ_IRQHandler+0x3c>
    hsubghz->TxCpltCallback(hsubghz);
 8008326:	68eb      	ldr	r3, [r5, #12]
 8008328:	4628      	mov	r0, r5
 800832a:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800832c:	f014 0f02 	tst.w	r4, #2
 8008330:	d002      	beq.n	8008338 <HAL_SUBGHZ_IRQHandler+0x48>
    hsubghz->RxCpltCallback(hsubghz);
 8008332:	692b      	ldr	r3, [r5, #16]
 8008334:	4628      	mov	r0, r5
 8008336:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8008338:	f014 0f04 	tst.w	r4, #4
 800833c:	d002      	beq.n	8008344 <HAL_SUBGHZ_IRQHandler+0x54>
    hsubghz->PreambleDetectedCallback(hsubghz);
 800833e:	696b      	ldr	r3, [r5, #20]
 8008340:	4628      	mov	r0, r5
 8008342:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8008344:	f014 0f08 	tst.w	r4, #8
 8008348:	d002      	beq.n	8008350 <HAL_SUBGHZ_IRQHandler+0x60>
    hsubghz->SyncWordValidCallback(hsubghz);
 800834a:	69ab      	ldr	r3, [r5, #24]
 800834c:	4628      	mov	r0, r5
 800834e:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8008350:	f014 0f10 	tst.w	r4, #16
 8008354:	d002      	beq.n	800835c <HAL_SUBGHZ_IRQHandler+0x6c>
    hsubghz->HeaderValidCallback(hsubghz);
 8008356:	69eb      	ldr	r3, [r5, #28]
 8008358:	4628      	mov	r0, r5
 800835a:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800835c:	f014 0f20 	tst.w	r4, #32
 8008360:	d002      	beq.n	8008368 <HAL_SUBGHZ_IRQHandler+0x78>
    hsubghz->HeaderErrorCallback(hsubghz);
 8008362:	6a2b      	ldr	r3, [r5, #32]
 8008364:	4628      	mov	r0, r5
 8008366:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8008368:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800836c:	d002      	beq.n	8008374 <HAL_SUBGHZ_IRQHandler+0x84>
    hsubghz->CRCErrorCallback(hsubghz);
 800836e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8008370:	4628      	mov	r0, r5
 8008372:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8008374:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8008378:	d006      	beq.n	8008388 <HAL_SUBGHZ_IRQHandler+0x98>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800837a:	f414 7f80 	tst.w	r4, #256	@ 0x100
 800837e:	d011      	beq.n	80083a4 <HAL_SUBGHZ_IRQHandler+0xb4>
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8008380:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8008382:	2101      	movs	r1, #1
 8008384:	4628      	mov	r0, r5
 8008386:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8008388:	f414 7f00 	tst.w	r4, #512	@ 0x200
 800838c:	d002      	beq.n	8008394 <HAL_SUBGHZ_IRQHandler+0xa4>
    hsubghz->RxTxTimeoutCallback(hsubghz);
 800838e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8008390:	4628      	mov	r0, r5
 8008392:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8008394:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 8008398:	d002      	beq.n	80083a0 <HAL_SUBGHZ_IRQHandler+0xb0>
    hsubghz->LrFhssHopCallback(hsubghz);
 800839a:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 800839c:	4628      	mov	r0, r5
 800839e:	4798      	blx	r3
}
 80083a0:	b003      	add	sp, #12
 80083a2:	bd30      	pop	{r4, r5, pc}
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80083a4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80083a6:	2100      	movs	r1, #0
 80083a8:	4628      	mov	r0, r5
 80083aa:	4798      	blx	r3
 80083ac:	e7ec      	b.n	8008388 <HAL_SUBGHZ_IRQHandler+0x98>
	...

080083b0 <HAL_SUBGHZ_WriteBuffer>:
{
 80083b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083b4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80083b6:	7980      	ldrb	r0, [r0, #6]
 80083b8:	fa5f f880 	uxtb.w	r8, r0
 80083bc:	f1b8 0f01 	cmp.w	r8, #1
 80083c0:	d138      	bne.n	8008434 <HAL_SUBGHZ_WriteBuffer+0x84>
 80083c2:	460c      	mov	r4, r1
 80083c4:	4617      	mov	r7, r2
 80083c6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80083c8:	796b      	ldrb	r3, [r5, #5]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d035      	beq.n	800843a <HAL_SUBGHZ_WriteBuffer+0x8a>
 80083ce:	2301      	movs	r3, #1
 80083d0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80083d2:	4628      	mov	r0, r5
 80083d4:	f7ff fe1c 	bl	8008010 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80083d8:	4a19      	ldr	r2, [pc, #100]	@ (8008440 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80083da:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80083de:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80083e6:	210e      	movs	r1, #14
 80083e8:	4628      	mov	r0, r5
 80083ea:	f7ff fd69 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80083ee:	4621      	mov	r1, r4
 80083f0:	4628      	mov	r0, r5
 80083f2:	f7ff fd65 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80083f6:	2400      	movs	r4, #0
 80083f8:	e005      	b.n	8008406 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80083fa:	5d39      	ldrb	r1, [r7, r4]
 80083fc:	4628      	mov	r0, r5
 80083fe:	f7ff fd5f 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008402:	3401      	adds	r4, #1
 8008404:	b2a4      	uxth	r4, r4
 8008406:	42b4      	cmp	r4, r6
 8008408:	d3f7      	bcc.n	80083fa <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800840a:	4a0d      	ldr	r2, [pc, #52]	@ (8008440 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800840c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008410:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8008418:	4628      	mov	r0, r5
 800841a:	f7ff fdcd 	bl	8007fb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800841e:	68ab      	ldr	r3, [r5, #8]
 8008420:	b90b      	cbnz	r3, 8008426 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8008422:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8008426:	2301      	movs	r3, #1
 8008428:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800842a:	2300      	movs	r3, #0
 800842c:	716b      	strb	r3, [r5, #5]
}
 800842e:	4640      	mov	r0, r8
 8008430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8008434:	f04f 0802 	mov.w	r8, #2
 8008438:	e7f9      	b.n	800842e <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800843a:	f04f 0802 	mov.w	r8, #2
 800843e:	e7f6      	b.n	800842e <HAL_SUBGHZ_WriteBuffer+0x7e>
 8008440:	58000400 	.word	0x58000400

08008444 <HAL_SUBGHZ_ReadBuffer>:
{
 8008444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008448:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800844a:	7980      	ldrb	r0, [r0, #6]
 800844c:	fa5f f880 	uxtb.w	r8, r0
 8008450:	f1b8 0f01 	cmp.w	r8, #1
 8008454:	d13d      	bne.n	80084d2 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8008456:	460c      	mov	r4, r1
 8008458:	4615      	mov	r5, r2
 800845a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800845c:	7973      	ldrb	r3, [r6, #5]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d03a      	beq.n	80084d8 <HAL_SUBGHZ_ReadBuffer+0x94>
 8008462:	2301      	movs	r3, #1
 8008464:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8008466:	4630      	mov	r0, r6
 8008468:	f7ff fdd2 	bl	8008010 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800846c:	4a1c      	ldr	r2, [pc, #112]	@ (80084e0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800846e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008472:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800847a:	211e      	movs	r1, #30
 800847c:	4630      	mov	r0, r6
 800847e:	f7ff fd1f 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8008482:	4621      	mov	r1, r4
 8008484:	4630      	mov	r0, r6
 8008486:	f7ff fd1b 	bl	8007ec0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800848a:	2100      	movs	r1, #0
 800848c:	4630      	mov	r0, r6
 800848e:	f7ff fd17 	bl	8007ec0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8008492:	2400      	movs	r4, #0
 8008494:	e006      	b.n	80084a4 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8008496:	4629      	mov	r1, r5
 8008498:	4630      	mov	r0, r6
 800849a:	f7ff fd4d 	bl	8007f38 <SUBGHZSPI_Receive>
      pData++;
 800849e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80084a0:	3401      	adds	r4, #1
 80084a2:	b2a4      	uxth	r4, r4
 80084a4:	42bc      	cmp	r4, r7
 80084a6:	d3f6      	bcc.n	8008496 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80084a8:	4a0d      	ldr	r2, [pc, #52]	@ (80084e0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80084aa:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80084ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80084b6:	4630      	mov	r0, r6
 80084b8:	f7ff fd7e 	bl	8007fb8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80084bc:	68b3      	ldr	r3, [r6, #8]
 80084be:	b90b      	cbnz	r3, 80084c4 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80084c0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80084c4:	2301      	movs	r3, #1
 80084c6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80084c8:	2300      	movs	r3, #0
 80084ca:	7173      	strb	r3, [r6, #5]
}
 80084cc:	4640      	mov	r0, r8
 80084ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80084d2:	f04f 0802 	mov.w	r8, #2
 80084d6:	e7f9      	b.n	80084cc <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80084d8:	f04f 0802 	mov.w	r8, #2
 80084dc:	e7f6      	b.n	80084cc <HAL_SUBGHZ_ReadBuffer+0x88>
 80084de:	bf00      	nop
 80084e0:	58000400 	.word	0x58000400

080084e4 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80084e4:	4770      	bx	lr

080084e6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80084e6:	4770      	bx	lr

080084e8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80084e8:	4770      	bx	lr

080084ea <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ea:	4770      	bx	lr

080084ec <HAL_TIM_IC_CaptureHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80084ec:	4770      	bx	lr

080084ee <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084ee:	4770      	bx	lr

080084f0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80084f0:	4770      	bx	lr

080084f2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084f2:	4770      	bx	lr

080084f4 <HAL_TIM_TriggerHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80084f4:	4770      	bx	lr

080084f6 <HAL_TIM_ErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80084f6:	4770      	bx	lr

080084f8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80084f8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d122      	bne.n	8008548 <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8008502:	2302      	movs	r3, #2
 8008504:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008508:	6802      	ldr	r2, [r0, #0]
 800850a:	68d3      	ldr	r3, [r2, #12]
 800850c:	f043 0301 	orr.w	r3, r3, #1
 8008510:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008512:	6803      	ldr	r3, [r0, #0]
 8008514:	4a0f      	ldr	r2, [pc, #60]	@ (8008554 <HAL_TIM_Base_Start_IT+0x5c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d008      	beq.n	800852c <HAL_TIM_Base_Start_IT+0x34>
 800851a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800851e:	d005      	beq.n	800852c <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	f042 0201 	orr.w	r2, r2, #1
 8008526:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008528:	2000      	movs	r0, #0
 800852a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800852c:	6899      	ldr	r1, [r3, #8]
 800852e:	4a0a      	ldr	r2, [pc, #40]	@ (8008558 <HAL_TIM_Base_Start_IT+0x60>)
 8008530:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008532:	2a06      	cmp	r2, #6
 8008534:	d00a      	beq.n	800854c <HAL_TIM_Base_Start_IT+0x54>
 8008536:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800853a:	d009      	beq.n	8008550 <HAL_TIM_Base_Start_IT+0x58>
      __HAL_TIM_ENABLE(htim);
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	f042 0201 	orr.w	r2, r2, #1
 8008542:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8008544:	2000      	movs	r0, #0
 8008546:	4770      	bx	lr
    return HAL_ERROR;
 8008548:	2001      	movs	r0, #1
 800854a:	4770      	bx	lr
  return HAL_OK;
 800854c:	2000      	movs	r0, #0
 800854e:	4770      	bx	lr
 8008550:	2000      	movs	r0, #0
}
 8008552:	4770      	bx	lr
 8008554:	40012c00 	.word	0x40012c00
 8008558:	00010007 	.word	0x00010007

0800855c <HAL_TIM_IRQHandler>:
{
 800855c:	b510      	push	{r4, lr}
 800855e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008560:	6803      	ldr	r3, [r0, #0]
 8008562:	691a      	ldr	r2, [r3, #16]
 8008564:	f012 0f02 	tst.w	r2, #2
 8008568:	d013      	beq.n	8008592 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	f012 0f02 	tst.w	r2, #2
 8008570:	d00f      	beq.n	8008592 <HAL_TIM_IRQHandler+0x36>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008572:	f06f 0202 	mvn.w	r2, #2
 8008576:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008578:	2301      	movs	r3, #1
 800857a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800857c:	6803      	ldr	r3, [r0, #0]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f013 0f03 	tst.w	r3, #3
 8008584:	f000 80a3 	beq.w	80086ce <HAL_TIM_IRQHandler+0x172>
          htim->IC_CaptureCallback(htim);
 8008588:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 800858c:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800858e:	2300      	movs	r3, #0
 8008590:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	691a      	ldr	r2, [r3, #16]
 8008596:	f012 0f04 	tst.w	r2, #4
 800859a:	d014      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x6a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	f012 0f04 	tst.w	r2, #4
 80085a2:	d010      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x6a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80085a4:	f06f 0204 	mvn.w	r2, #4
 80085a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085aa:	2302      	movs	r3, #2
 80085ac:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80085b6:	f000 8092 	beq.w	80086de <HAL_TIM_IRQHandler+0x182>
        htim->IC_CaptureCallback(htim);
 80085ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80085be:	4620      	mov	r0, r4
 80085c0:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	2300      	movs	r3, #0
 80085c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	f012 0f08 	tst.w	r2, #8
 80085ce:	d014      	beq.n	80085fa <HAL_TIM_IRQHandler+0x9e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	f012 0f08 	tst.w	r2, #8
 80085d6:	d010      	beq.n	80085fa <HAL_TIM_IRQHandler+0x9e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085d8:	f06f 0208 	mvn.w	r2, #8
 80085dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085de:	2304      	movs	r3, #4
 80085e0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f013 0f03 	tst.w	r3, #3
 80085ea:	f000 8081 	beq.w	80086f0 <HAL_TIM_IRQHandler+0x194>
        htim->IC_CaptureCallback(htim);
 80085ee:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 80085f2:	4620      	mov	r0, r4
 80085f4:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085f6:	2300      	movs	r3, #0
 80085f8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	691a      	ldr	r2, [r3, #16]
 80085fe:	f012 0f10 	tst.w	r2, #16
 8008602:	d013      	beq.n	800862c <HAL_TIM_IRQHandler+0xd0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	f012 0f10 	tst.w	r2, #16
 800860a:	d00f      	beq.n	800862c <HAL_TIM_IRQHandler+0xd0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800860c:	f06f 0210 	mvn.w	r2, #16
 8008610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008612:	2308      	movs	r3, #8
 8008614:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800861e:	d070      	beq.n	8008702 <HAL_TIM_IRQHandler+0x1a6>
        htim->IC_CaptureCallback(htim);
 8008620:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8008624:	4620      	mov	r0, r4
 8008626:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008628:	2300      	movs	r3, #0
 800862a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	691a      	ldr	r2, [r3, #16]
 8008630:	f012 0f01 	tst.w	r2, #1
 8008634:	d00a      	beq.n	800864c <HAL_TIM_IRQHandler+0xf0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008636:	68da      	ldr	r2, [r3, #12]
 8008638:	f012 0f01 	tst.w	r2, #1
 800863c:	d006      	beq.n	800864c <HAL_TIM_IRQHandler+0xf0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800863e:	f06f 0201 	mvn.w	r2, #1
 8008642:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 8008644:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8008648:	4620      	mov	r0, r4
 800864a:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	691a      	ldr	r2, [r3, #16]
 8008650:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8008654:	d00a      	beq.n	800866c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008656:	68da      	ldr	r2, [r3, #12]
 8008658:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800865c:	d006      	beq.n	800866c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800865e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008662:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 8008664:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8008668:	4620      	mov	r0, r4
 800866a:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8008674:	d00a      	beq.n	800868c <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008676:	68da      	ldr	r2, [r3, #12]
 8008678:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800867c:	d006      	beq.n	800868c <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800867e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008682:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8008684:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 8008688:	4620      	mov	r0, r4
 800868a:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	691a      	ldr	r2, [r3, #16]
 8008690:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8008694:	d00a      	beq.n	80086ac <HAL_TIM_IRQHandler+0x150>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008696:	68da      	ldr	r2, [r3, #12]
 8008698:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800869c:	d006      	beq.n	80086ac <HAL_TIM_IRQHandler+0x150>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800869e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086a2:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 80086a4:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80086a8:	4620      	mov	r0, r4
 80086aa:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	f012 0f20 	tst.w	r2, #32
 80086b4:	d00a      	beq.n	80086cc <HAL_TIM_IRQHandler+0x170>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	f012 0f20 	tst.w	r2, #32
 80086bc:	d006      	beq.n	80086cc <HAL_TIM_IRQHandler+0x170>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086be:	f06f 0220 	mvn.w	r2, #32
 80086c2:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 80086c4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 80086c8:	4620      	mov	r0, r4
 80086ca:	4798      	blx	r3
}
 80086cc:	bd10      	pop	{r4, pc}
          htim->OC_DelayElapsedCallback(htim);
 80086ce:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80086d2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80086d4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 80086d8:	4620      	mov	r0, r4
 80086da:	4798      	blx	r3
 80086dc:	e757      	b.n	800858e <HAL_TIM_IRQHandler+0x32>
        htim->OC_DelayElapsedCallback(htim);
 80086de:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80086e2:	4620      	mov	r0, r4
 80086e4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086e6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 80086ea:	4620      	mov	r0, r4
 80086ec:	4798      	blx	r3
 80086ee:	e768      	b.n	80085c2 <HAL_TIM_IRQHandler+0x66>
        htim->OC_DelayElapsedCallback(htim);
 80086f0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80086f4:	4620      	mov	r0, r4
 80086f6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086f8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 80086fc:	4620      	mov	r0, r4
 80086fe:	4798      	blx	r3
 8008700:	e779      	b.n	80085f6 <HAL_TIM_IRQHandler+0x9a>
        htim->OC_DelayElapsedCallback(htim);
 8008702:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8008706:	4620      	mov	r0, r4
 8008708:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800870a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800870e:	4620      	mov	r0, r4
 8008710:	4798      	blx	r3
 8008712:	e789      	b.n	8008628 <HAL_TIM_IRQHandler+0xcc>

08008714 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008714:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008716:	4a1a      	ldr	r2, [pc, #104]	@ (8008780 <TIM_Base_SetConfig+0x6c>)
 8008718:	4290      	cmp	r0, r2
 800871a:	d002      	beq.n	8008722 <TIM_Base_SetConfig+0xe>
 800871c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008720:	d103      	bne.n	800872a <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008726:	684a      	ldr	r2, [r1, #4]
 8008728:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800872a:	4a15      	ldr	r2, [pc, #84]	@ (8008780 <TIM_Base_SetConfig+0x6c>)
 800872c:	4290      	cmp	r0, r2
 800872e:	d00a      	beq.n	8008746 <TIM_Base_SetConfig+0x32>
 8008730:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8008734:	d007      	beq.n	8008746 <TIM_Base_SetConfig+0x32>
 8008736:	f502 52c0 	add.w	r2, r2, #6144	@ 0x1800
 800873a:	4290      	cmp	r0, r2
 800873c:	d003      	beq.n	8008746 <TIM_Base_SetConfig+0x32>
 800873e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008742:	4290      	cmp	r0, r2
 8008744:	d103      	bne.n	800874e <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800874a:	68ca      	ldr	r2, [r1, #12]
 800874c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800874e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008752:	694a      	ldr	r2, [r1, #20]
 8008754:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8008756:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008758:	688b      	ldr	r3, [r1, #8]
 800875a:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800875c:	680b      	ldr	r3, [r1, #0]
 800875e:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008760:	4b07      	ldr	r3, [pc, #28]	@ (8008780 <TIM_Base_SetConfig+0x6c>)
 8008762:	4298      	cmp	r0, r3
 8008764:	d007      	beq.n	8008776 <TIM_Base_SetConfig+0x62>
 8008766:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 800876a:	4298      	cmp	r0, r3
 800876c:	d003      	beq.n	8008776 <TIM_Base_SetConfig+0x62>
 800876e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008772:	4298      	cmp	r0, r3
 8008774:	d101      	bne.n	800877a <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008776:	690b      	ldr	r3, [r1, #16]
 8008778:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800877a:	2301      	movs	r3, #1
 800877c:	6143      	str	r3, [r0, #20]
}
 800877e:	4770      	bx	lr
 8008780:	40012c00 	.word	0x40012c00

08008784 <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008784:	4b15      	ldr	r3, [pc, #84]	@ (80087dc <TIM_ResetCallback+0x58>)
 8008786:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800878a:	4b15      	ldr	r3, [pc, #84]	@ (80087e0 <TIM_ResetCallback+0x5c>)
 800878c:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008790:	4b14      	ldr	r3, [pc, #80]	@ (80087e4 <TIM_ResetCallback+0x60>)
 8008792:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008796:	4b14      	ldr	r3, [pc, #80]	@ (80087e8 <TIM_ResetCallback+0x64>)
 8008798:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800879c:	4b13      	ldr	r3, [pc, #76]	@ (80087ec <TIM_ResetCallback+0x68>)
 800879e:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80087a2:	4b13      	ldr	r3, [pc, #76]	@ (80087f0 <TIM_ResetCallback+0x6c>)
 80087a4:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80087a8:	4b12      	ldr	r3, [pc, #72]	@ (80087f4 <TIM_ResetCallback+0x70>)
 80087aa:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80087ae:	4b12      	ldr	r3, [pc, #72]	@ (80087f8 <TIM_ResetCallback+0x74>)
 80087b0:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80087b4:	4b11      	ldr	r3, [pc, #68]	@ (80087fc <TIM_ResetCallback+0x78>)
 80087b6:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80087ba:	4b11      	ldr	r3, [pc, #68]	@ (8008800 <TIM_ResetCallback+0x7c>)
 80087bc:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80087c0:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <TIM_ResetCallback+0x80>)
 80087c2:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80087c6:	4b10      	ldr	r3, [pc, #64]	@ (8008808 <TIM_ResetCallback+0x84>)
 80087c8:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80087cc:	4b0f      	ldr	r3, [pc, #60]	@ (800880c <TIM_ResetCallback+0x88>)
 80087ce:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80087d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008810 <TIM_ResetCallback+0x8c>)
 80087d4:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
}
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	080084e5 	.word	0x080084e5
 80087e0:	080084e7 	.word	0x080084e7
 80087e4:	080084f3 	.word	0x080084f3
 80087e8:	080084f5 	.word	0x080084f5
 80087ec:	080084eb 	.word	0x080084eb
 80087f0:	080084ed 	.word	0x080084ed
 80087f4:	080084e9 	.word	0x080084e9
 80087f8:	080084ef 	.word	0x080084ef
 80087fc:	080084f1 	.word	0x080084f1
 8008800:	080084f7 	.word	0x080084f7
 8008804:	08008889 	.word	0x08008889
 8008808:	0800888b 	.word	0x0800888b
 800880c:	0800888d 	.word	0x0800888d
 8008810:	0800888f 	.word	0x0800888f

08008814 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8008814:	b3a0      	cbz	r0, 8008880 <HAL_TIM_Base_Init+0x6c>
{
 8008816:	b510      	push	{r4, lr}
 8008818:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800881a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800881e:	b313      	cbz	r3, 8008866 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8008820:	2302      	movs	r3, #2
 8008822:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008826:	4621      	mov	r1, r4
 8008828:	f851 0b04 	ldr.w	r0, [r1], #4
 800882c:	f7ff ff72 	bl	8008714 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008830:	2301      	movs	r3, #1
 8008832:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008836:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800883a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800883e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008842:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008846:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800884a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800884e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008852:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008856:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800885a:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800885e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008862:	2000      	movs	r0, #0
}
 8008864:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8008866:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 800886a:	f7ff ff8b 	bl	8008784 <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 800886e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008870:	b11b      	cbz	r3, 800887a <HAL_TIM_Base_Init+0x66>
    htim->Base_MspInitCallback(htim);
 8008872:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008874:	4620      	mov	r0, r4
 8008876:	4798      	blx	r3
 8008878:	e7d2      	b.n	8008820 <HAL_TIM_Base_Init+0xc>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800887a:	4b02      	ldr	r3, [pc, #8]	@ (8008884 <HAL_TIM_Base_Init+0x70>)
 800887c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800887e:	e7f8      	b.n	8008872 <HAL_TIM_Base_Init+0x5e>
    return HAL_ERROR;
 8008880:	2001      	movs	r0, #1
}
 8008882:	4770      	bx	lr
 8008884:	08002cbd 	.word	0x08002cbd

08008888 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008888:	4770      	bx	lr

0800888a <HAL_TIMEx_CommutHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800888a:	4770      	bx	lr

0800888c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800888c:	4770      	bx	lr

0800888e <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800888e:	4770      	bx	lr

08008890 <HAL_UART_TxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008890:	4770      	bx	lr

08008892 <HAL_UART_RxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008892:	4770      	bx	lr

08008894 <HAL_UART_ErrorCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008894:	4770      	bx	lr

08008896 <HAL_UART_AbortCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008896:	4770      	bx	lr

08008898 <HAL_UART_AbortTransmitCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008898:	4770      	bx	lr

0800889a <HAL_UART_AbortReceiveCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800889a:	4770      	bx	lr

0800889c <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800889c:	4770      	bx	lr

0800889e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800889e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a0:	e852 3f00 	ldrex	r3, [r2]
 80088a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a8:	e842 3100 	strex	r1, r3, [r2]
 80088ac:	2900      	cmp	r1, #0
 80088ae:	d1f6      	bne.n	800889e <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80088b0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b2:	f102 0308 	add.w	r3, r2, #8
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088be:	3208      	adds	r2, #8
 80088c0:	e842 3100 	strex	r1, r3, [r2]
 80088c4:	2900      	cmp	r1, #0
 80088c6:	d1f3      	bne.n	80088b0 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088c8:	2320      	movs	r3, #32
 80088ca:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 80088ce:	4770      	bx	lr

080088d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088d0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	e852 3f00 	ldrex	r3, [r2]
 80088d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	e842 3100 	strex	r1, r3, [r2]
 80088de:	2900      	cmp	r1, #0
 80088e0:	d1f6      	bne.n	80088d0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088e2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e4:	f102 0308 	add.w	r3, r2, #8
 80088e8:	e853 3f00 	ldrex	r3, [r3]
 80088ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	3208      	adds	r2, #8
 80088f6:	e842 3100 	strex	r1, r3, [r2]
 80088fa:	2900      	cmp	r1, #0
 80088fc:	d1f1      	bne.n	80088e2 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088fe:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008900:	2b01      	cmp	r3, #1
 8008902:	d006      	beq.n	8008912 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008904:	2320      	movs	r3, #32
 8008906:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800890a:	2300      	movs	r3, #0
 800890c:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800890e:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8008910:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008912:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	e852 3f00 	ldrex	r3, [r2]
 8008918:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891c:	e842 3100 	strex	r1, r3, [r2]
 8008920:	2900      	cmp	r1, #0
 8008922:	d1f6      	bne.n	8008912 <UART_EndRxTransfer+0x42>
 8008924:	e7ee      	b.n	8008904 <UART_EndRxTransfer+0x34>

08008926 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008926:	b508      	push	{r3, lr}
 8008928:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800892a:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f013 0f20 	tst.w	r3, #32
 8008934:	d118      	bne.n	8008968 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800893c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	f102 0308 	add.w	r3, r2, #8
 8008942:	e853 3f00 	ldrex	r3, [r3]
 8008946:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	3208      	adds	r2, #8
 800894c:	e842 3100 	strex	r1, r3, [r2]
 8008950:	2900      	cmp	r1, #0
 8008952:	d1f3      	bne.n	800893c <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008954:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	e852 3f00 	ldrex	r3, [r2]
 800895a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	e842 3100 	strex	r1, r3, [r2]
 8008962:	2900      	cmp	r1, #0
 8008964:	d1f6      	bne.n	8008954 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008966:	bd08      	pop	{r3, pc}
    huart->TxCpltCallback(huart);
 8008968:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 800896c:	4798      	blx	r3
}
 800896e:	e7fa      	b.n	8008966 <UART_DMATransmitCplt+0x40>

08008970 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008970:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008972:	6a80      	ldr	r0, [r0, #40]	@ 0x28

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008974:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8008978:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800897a:	bd08      	pop	{r3, pc}

0800897c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800897c:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800897e:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008980:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008984:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008990:	d001      	beq.n	8008996 <UART_DMAError+0x1a>
 8008992:	2a21      	cmp	r2, #33	@ 0x21
 8008994:	d011      	beq.n	80089ba <UART_DMAError+0x3e>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800899e:	d001      	beq.n	80089a4 <UART_DMAError+0x28>
 80089a0:	2d22      	cmp	r5, #34	@ 0x22
 80089a2:	d011      	beq.n	80089c8 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80089a8:	f043 0310 	orr.w	r3, r3, #16
 80089ac:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80089b0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80089b4:	4620      	mov	r0, r4
 80089b6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80089c0:	4620      	mov	r0, r4
 80089c2:	f7ff ff6c 	bl	800889e <UART_EndTxTransfer>
 80089c6:	e7e6      	b.n	8008996 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80089c8:	2300      	movs	r3, #0
 80089ca:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80089ce:	4620      	mov	r0, r4
 80089d0:	f7ff ff7e 	bl	80088d0 <UART_EndRxTransfer>
 80089d4:	e7e6      	b.n	80089a4 <UART_DMAError+0x28>

080089d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089d6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089d8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80089e0:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80089e4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80089e8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ea:	bd08      	pop	{r3, pc}

080089ec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ec:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	e852 3f00 	ldrex	r3, [r2]
 80089f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f8:	e842 3100 	strex	r1, r3, [r2]
 80089fc:	2900      	cmp	r1, #0
 80089fe:	d1f6      	bne.n	80089ee <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a00:	2320      	movs	r3, #32
 8008a02:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	6783      	str	r3, [r0, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008a0a:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 8008a0e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a10:	bd08      	pop	{r3, pc}
	...

08008a14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a14:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8008a16:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a1a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8008a1e:	2a22      	cmp	r2, #34	@ 0x22
 8008a20:	d005      	beq.n	8008a2e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a22:	6802      	ldr	r2, [r0, #0]
 8008a24:	6993      	ldr	r3, [r2, #24]
 8008a26:	f043 0308 	orr.w	r3, r3, #8
 8008a2a:	6193      	str	r3, [r2, #24]
  }
}
 8008a2c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a2e:	6802      	ldr	r2, [r0, #0]
 8008a30:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8008a36:	400b      	ands	r3, r1
 8008a38:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8008a3a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8008a40:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8008a4e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d1e9      	bne.n	8008a2c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a58:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	e852 3f00 	ldrex	r3, [r2]
 8008a5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	e842 3100 	strex	r1, r3, [r2]
 8008a66:	2900      	cmp	r1, #0
 8008a68:	d1f6      	bne.n	8008a58 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6c:	f102 0308 	add.w	r3, r2, #8
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	3208      	adds	r2, #8
 8008a7a:	e842 3100 	strex	r1, r3, [r2]
 8008a7e:	2900      	cmp	r1, #0
 8008a80:	d1f3      	bne.n	8008a6a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8008a82:	2320      	movs	r3, #32
 8008a84:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a8c:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a8e:	6803      	ldr	r3, [r0, #0]
 8008a90:	4a17      	ldr	r2, [pc, #92]	@ (8008af0 <UART_RxISR_8BIT+0xdc>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d00c      	beq.n	8008ab0 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008a9c:	d008      	beq.n	8008ab0 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa0:	e852 3f00 	ldrex	r3, [r2]
 8008aa4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	e842 3100 	strex	r1, r3, [r2]
 8008aac:	2900      	cmp	r1, #0
 8008aae:	d1f6      	bne.n	8008a9e <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d003      	beq.n	8008abe <UART_RxISR_8BIT+0xaa>
        huart->RxCpltCallback(huart);
 8008ab6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8008aba:	4798      	blx	r3
 8008abc:	e7b6      	b.n	8008a2c <UART_RxISR_8BIT+0x18>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	e852 3f00 	ldrex	r3, [r2]
 8008ac8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008acc:	e842 3100 	strex	r1, r3, [r2]
 8008ad0:	2900      	cmp	r1, #0
 8008ad2:	d1f6      	bne.n	8008ac2 <UART_RxISR_8BIT+0xae>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ad4:	6803      	ldr	r3, [r0, #0]
 8008ad6:	69da      	ldr	r2, [r3, #28]
 8008ad8:	f012 0f10 	tst.w	r2, #16
 8008adc:	d001      	beq.n	8008ae2 <UART_RxISR_8BIT+0xce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ade:	2210      	movs	r2, #16
 8008ae0:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008ae2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8008ae6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8008aea:	4798      	blx	r3
 8008aec:	e79e      	b.n	8008a2c <UART_RxISR_8BIT+0x18>
 8008aee:	bf00      	nop
 8008af0:	40008000 	.word	0x40008000

08008af4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008af4:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008af6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008afa:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8008afe:	2b22      	cmp	r3, #34	@ 0x22
 8008b00:	d005      	beq.n	8008b0e <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b02:	6802      	ldr	r2, [r0, #0]
 8008b04:	6993      	ldr	r3, [r2, #24]
 8008b06:	f043 0308 	orr.w	r3, r3, #8
 8008b0a:	6193      	str	r3, [r2, #24]
  }
}
 8008b0c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b0e:	6803      	ldr	r3, [r0, #0]
 8008b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b12:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b14:	4013      	ands	r3, r2
 8008b16:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8008b18:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8008b1a:	3302      	adds	r3, #2
 8008b1c:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8008b1e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8008b2c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1ea      	bne.n	8008b0c <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b36:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	e852 3f00 	ldrex	r3, [r2]
 8008b3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	e842 3100 	strex	r1, r3, [r2]
 8008b44:	2900      	cmp	r1, #0
 8008b46:	d1f6      	bne.n	8008b36 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b48:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4a:	f102 0308 	add.w	r3, r2, #8
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b56:	3208      	adds	r2, #8
 8008b58:	e842 3100 	strex	r1, r3, [r2]
 8008b5c:	2900      	cmp	r1, #0
 8008b5e:	d1f3      	bne.n	8008b48 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8008b60:	2320      	movs	r3, #32
 8008b62:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b6a:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b6c:	6803      	ldr	r3, [r0, #0]
 8008b6e:	4a17      	ldr	r2, [pc, #92]	@ (8008bcc <UART_RxISR_16BIT+0xd8>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00c      	beq.n	8008b8e <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008b7a:	d008      	beq.n	8008b8e <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b7c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7e:	e852 3f00 	ldrex	r3, [r2]
 8008b82:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	e842 3100 	strex	r1, r3, [r2]
 8008b8a:	2900      	cmp	r1, #0
 8008b8c:	d1f6      	bne.n	8008b7c <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b8e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d003      	beq.n	8008b9c <UART_RxISR_16BIT+0xa8>
        huart->RxCpltCallback(huart);
 8008b94:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8008b98:	4798      	blx	r3
 8008b9a:	e7b7      	b.n	8008b0c <UART_RxISR_16BIT+0x18>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	e852 3f00 	ldrex	r3, [r2]
 8008ba6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008baa:	e842 3100 	strex	r1, r3, [r2]
 8008bae:	2900      	cmp	r1, #0
 8008bb0:	d1f6      	bne.n	8008ba0 <UART_RxISR_16BIT+0xac>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bb2:	6803      	ldr	r3, [r0, #0]
 8008bb4:	69da      	ldr	r2, [r3, #28]
 8008bb6:	f012 0f10 	tst.w	r2, #16
 8008bba:	d001      	beq.n	8008bc0 <UART_RxISR_16BIT+0xcc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bbc:	2210      	movs	r2, #16
 8008bbe:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008bc0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8008bc4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8008bc8:	4798      	blx	r3
 8008bca:	e79f      	b.n	8008b0c <UART_RxISR_16BIT+0x18>
 8008bcc:	40008000 	.word	0x40008000

08008bd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8008bd4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008bd8:	6803      	ldr	r3, [r0, #0]
 8008bda:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008bdc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008be0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008be4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8008be8:	2a22      	cmp	r2, #34	@ 0x22
 8008bea:	d005      	beq.n	8008bf8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bec:	699a      	ldr	r2, [r3, #24]
 8008bee:	f042 0208 	orr.w	r2, r2, #8
 8008bf2:	619a      	str	r2, [r3, #24]
  }
}
 8008bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8008bfa:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008bfe:	e00e      	b.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c00:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008c04:	b133      	cbz	r3, 8008c14 <UART_RxISR_8BIT_FIFOEN+0x44>
          huart->ErrorCallback(huart);
 8008c06:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 8008c14:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d047      	beq.n	8008cae <UART_RxISR_8BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c1e:	2f00      	cmp	r7, #0
 8008c20:	f000 8095 	beq.w	8008d4e <UART_RxISR_8BIT_FIFOEN+0x17e>
 8008c24:	f015 0f20 	tst.w	r5, #32
 8008c28:	f000 8091 	beq.w	8008d4e <UART_RxISR_8BIT_FIFOEN+0x17e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c30:	b2f3      	uxtb	r3, r6
 8008c32:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8008c34:	400b      	ands	r3, r1
 8008c36:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8008c38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8008c3e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008c50:	f015 0f07 	tst.w	r5, #7
 8008c54:	d0de      	beq.n	8008c14 <UART_RxISR_8BIT_FIFOEN+0x44>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c56:	f015 0f01 	tst.w	r5, #1
 8008c5a:	d009      	beq.n	8008c70 <UART_RxISR_8BIT_FIFOEN+0xa0>
 8008c5c:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8008c60:	d006      	beq.n	8008c70 <UART_RxISR_8BIT_FIFOEN+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c62:	2201      	movs	r2, #1
 8008c64:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c66:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c70:	f015 0f02 	tst.w	r5, #2
 8008c74:	d00b      	beq.n	8008c8e <UART_RxISR_8BIT_FIFOEN+0xbe>
 8008c76:	f018 0f01 	tst.w	r8, #1
 8008c7a:	d008      	beq.n	8008c8e <UART_RxISR_8BIT_FIFOEN+0xbe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	2202      	movs	r2, #2
 8008c80:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c82:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008c86:	f043 0304 	orr.w	r3, r3, #4
 8008c8a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8e:	f015 0f04 	tst.w	r5, #4
 8008c92:	d0b5      	beq.n	8008c00 <UART_RxISR_8BIT_FIFOEN+0x30>
 8008c94:	f018 0f01 	tst.w	r8, #1
 8008c98:	d0b2      	beq.n	8008c00 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	2204      	movs	r2, #4
 8008c9e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008ca4:	f043 0302 	orr.w	r3, r3, #2
 8008ca8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8008cac:	e7a8      	b.n	8008c00 <UART_RxISR_8BIT_FIFOEN+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	e852 3f00 	ldrex	r3, [r2]
 8008cb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	e842 3100 	strex	r1, r3, [r2]
 8008cbc:	2900      	cmp	r1, #0
 8008cbe:	d1f6      	bne.n	8008cae <UART_RxISR_8BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cc0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	f102 0308 	add.w	r3, r2, #8
 8008cc6:	e853 3f00 	ldrex	r3, [r3]
 8008cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008cce:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd2:	3208      	adds	r2, #8
 8008cd4:	e842 3100 	strex	r1, r3, [r2]
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	d1f1      	bne.n	8008cc0 <UART_RxISR_8BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 8008cdc:	2320      	movs	r3, #32
 8008cde:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ce6:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	4a2a      	ldr	r2, [pc, #168]	@ (8008d94 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <UART_RxISR_8BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008cf6:	d107      	bne.n	8008d08 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d00e      	beq.n	8008d1c <UART_RxISR_8BIT_FIFOEN+0x14c>
          huart->RxCpltCallback(huart);
 8008cfe:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8008d02:	4620      	mov	r0, r4
 8008d04:	4798      	blx	r3
 8008d06:	e78a      	b.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x4e>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d08:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0a:	e852 3f00 	ldrex	r3, [r2]
 8008d0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d12:	e842 3100 	strex	r1, r3, [r2]
 8008d16:	2900      	cmp	r1, #0
 8008d18:	d1f6      	bne.n	8008d08 <UART_RxISR_8BIT_FIFOEN+0x138>
 8008d1a:	e7ed      	b.n	8008cf8 <UART_RxISR_8BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d20:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	e852 3f00 	ldrex	r3, [r2]
 8008d26:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2a:	e842 3100 	strex	r1, r3, [r2]
 8008d2e:	2900      	cmp	r1, #0
 8008d30:	d1f6      	bne.n	8008d20 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	69da      	ldr	r2, [r3, #28]
 8008d36:	f012 0f10 	tst.w	r2, #16
 8008d3a:	d001      	beq.n	8008d40 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d3c:	2210      	movs	r2, #16
 8008d3e:	621a      	str	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 8008d40:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8008d44:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008d48:	4620      	mov	r0, r4
 8008d4a:	4798      	blx	r3
 8008d4c:	e767      	b.n	8008c1e <UART_RxISR_8BIT_FIFOEN+0x4e>
    rxdatacount = huart->RxXferCount;
 8008d4e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008d52:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	f43f af4d 	beq.w	8008bf4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8008d5a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	f67f af48 	bls.w	8008bf4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d64:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	f102 0308 	add.w	r3, r2, #8
 8008d6a:	e853 3f00 	ldrex	r3, [r3]
 8008d6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	3208      	adds	r2, #8
 8008d74:	e842 3100 	strex	r1, r3, [r2]
 8008d78:	2900      	cmp	r1, #0
 8008d7a:	d1f3      	bne.n	8008d64 <UART_RxISR_8BIT_FIFOEN+0x194>
      huart->RxISR = UART_RxISR_8BIT;
 8008d7c:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8008d7e:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d80:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	e852 3f00 	ldrex	r3, [r2]
 8008d86:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8a:	e842 3100 	strex	r1, r3, [r2]
 8008d8e:	2900      	cmp	r1, #0
 8008d90:	d1f6      	bne.n	8008d80 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8008d92:	e72f      	b.n	8008bf4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8008d94:	40008000 	.word	0x40008000
 8008d98:	08008a15 	.word	0x08008a15

08008d9c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008da0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008da4:	6803      	ldr	r3, [r0, #0]
 8008da6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008da8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dac:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008db0:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8008db4:	2a22      	cmp	r2, #34	@ 0x22
 8008db6:	d005      	beq.n	8008dc4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008db8:	699a      	ldr	r2, [r3, #24]
 8008dba:	f042 0208 	orr.w	r2, r2, #8
 8008dbe:	619a      	str	r2, [r3, #24]
  }
}
 8008dc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8008dc6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dca:	e00e      	b.n	8008dea <UART_RxISR_16BIT_FIFOEN+0x4e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dcc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008dd0:	b133      	cbz	r3, 8008de0 <UART_RxISR_16BIT_FIFOEN+0x44>
          huart->ErrorCallback(huart);
 8008dd2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 8008de0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d046      	beq.n	8008e78 <UART_RxISR_16BIT_FIFOEN+0xdc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dea:	2f00      	cmp	r7, #0
 8008dec:	f000 8094 	beq.w	8008f18 <UART_RxISR_16BIT_FIFOEN+0x17c>
 8008df0:	f015 0f20 	tst.w	r5, #32
 8008df4:	f000 8090 	beq.w	8008f18 <UART_RxISR_16BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008df8:	6823      	ldr	r3, [r4, #0]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dfc:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8008dfe:	4033      	ands	r3, r6
 8008e00:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8008e02:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e04:	3302      	adds	r3, #2
 8008e06:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 8008e08:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e16:	6823      	ldr	r3, [r4, #0]
 8008e18:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e1a:	f015 0f07 	tst.w	r5, #7
 8008e1e:	d0df      	beq.n	8008de0 <UART_RxISR_16BIT_FIFOEN+0x44>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e20:	f015 0f01 	tst.w	r5, #1
 8008e24:	d009      	beq.n	8008e3a <UART_RxISR_16BIT_FIFOEN+0x9e>
 8008e26:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8008e2a:	d006      	beq.n	8008e3a <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e30:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008e34:	4313      	orrs	r3, r2
 8008e36:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e3a:	f015 0f02 	tst.w	r5, #2
 8008e3e:	d00b      	beq.n	8008e58 <UART_RxISR_16BIT_FIFOEN+0xbc>
 8008e40:	f018 0f01 	tst.w	r8, #1
 8008e44:	d008      	beq.n	8008e58 <UART_RxISR_16BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e46:	6823      	ldr	r3, [r4, #0]
 8008e48:	2202      	movs	r2, #2
 8008e4a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e4c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008e50:	f043 0304 	orr.w	r3, r3, #4
 8008e54:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e58:	f015 0f04 	tst.w	r5, #4
 8008e5c:	d0b6      	beq.n	8008dcc <UART_RxISR_16BIT_FIFOEN+0x30>
 8008e5e:	f018 0f01 	tst.w	r8, #1
 8008e62:	d0b3      	beq.n	8008dcc <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e64:	6823      	ldr	r3, [r4, #0]
 8008e66:	2204      	movs	r2, #4
 8008e68:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e6a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8008e6e:	f043 0302 	orr.w	r3, r3, #2
 8008e72:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8008e76:	e7a9      	b.n	8008dcc <UART_RxISR_16BIT_FIFOEN+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e78:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7a:	e852 3f00 	ldrex	r3, [r2]
 8008e7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	e842 3100 	strex	r1, r3, [r2]
 8008e86:	2900      	cmp	r1, #0
 8008e88:	d1f6      	bne.n	8008e78 <UART_RxISR_16BIT_FIFOEN+0xdc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	f102 0308 	add.w	r3, r2, #8
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e98:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9c:	3208      	adds	r2, #8
 8008e9e:	e842 3100 	strex	r1, r3, [r2]
 8008ea2:	2900      	cmp	r1, #0
 8008ea4:	d1f1      	bne.n	8008e8a <UART_RxISR_16BIT_FIFOEN+0xee>
        huart->RxState = HAL_UART_STATE_READY;
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 8008eac:	2300      	movs	r3, #0
 8008eae:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eb0:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8008f60 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d003      	beq.n	8008ec2 <UART_RxISR_16BIT_FIFOEN+0x126>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8008ec0:	d107      	bne.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ec2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d00e      	beq.n	8008ee6 <UART_RxISR_16BIT_FIFOEN+0x14a>
          huart->RxCpltCallback(huart);
 8008ec8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8008ecc:	4620      	mov	r0, r4
 8008ece:	4798      	blx	r3
 8008ed0:	e78b      	b.n	8008dea <UART_RxISR_16BIT_FIFOEN+0x4e>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ed2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	e852 3f00 	ldrex	r3, [r2]
 8008ed8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008edc:	e842 3100 	strex	r1, r3, [r2]
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	d1f6      	bne.n	8008ed2 <UART_RxISR_16BIT_FIFOEN+0x136>
 8008ee4:	e7ed      	b.n	8008ec2 <UART_RxISR_16BIT_FIFOEN+0x126>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	e852 3f00 	ldrex	r3, [r2]
 8008ef0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef4:	e842 3100 	strex	r1, r3, [r2]
 8008ef8:	2900      	cmp	r1, #0
 8008efa:	d1f6      	bne.n	8008eea <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	69da      	ldr	r2, [r3, #28]
 8008f00:	f012 0f10 	tst.w	r2, #16
 8008f04:	d001      	beq.n	8008f0a <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f06:	2210      	movs	r2, #16
 8008f08:	621a      	str	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 8008f0a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8008f0e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8008f12:	4620      	mov	r0, r4
 8008f14:	4798      	blx	r3
 8008f16:	e768      	b.n	8008dea <UART_RxISR_16BIT_FIFOEN+0x4e>
    rxdatacount = huart->RxXferCount;
 8008f18:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8008f1c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f43f af4e 	beq.w	8008dc0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8008f24:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	f67f af49 	bls.w	8008dc0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008f2e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f30:	f102 0308 	add.w	r3, r2, #8
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	3208      	adds	r2, #8
 8008f3e:	e842 3100 	strex	r1, r3, [r2]
 8008f42:	2900      	cmp	r1, #0
 8008f44:	d1f3      	bne.n	8008f2e <UART_RxISR_16BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_16BIT;
 8008f46:	4b07      	ldr	r3, [pc, #28]	@ (8008f64 <UART_RxISR_16BIT_FIFOEN+0x1c8>)
 8008f48:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f4a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	e852 3f00 	ldrex	r3, [r2]
 8008f50:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	e842 3100 	strex	r1, r3, [r2]
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	d1f6      	bne.n	8008f4a <UART_RxISR_16BIT_FIFOEN+0x1ae>
 8008f5c:	e730      	b.n	8008dc0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8008f5e:	bf00      	nop
 8008f60:	40008000 	.word	0x40008000
 8008f64:	08008af5 	.word	0x08008af5

08008f68 <HAL_UART_Transmit_DMA>:
{
 8008f68:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8008f6a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8008f6e:	2a20      	cmp	r2, #32
 8008f70:	d13d      	bne.n	8008fee <HAL_UART_Transmit_DMA+0x86>
{
 8008f72:	b510      	push	{r4, lr}
 8008f74:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d03b      	beq.n	8008ff2 <HAL_UART_Transmit_DMA+0x8a>
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d03b      	beq.n	8008ff6 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8008f7e:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8008f80:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008f84:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f8e:	2221      	movs	r2, #33	@ 0x21
 8008f90:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8008f94:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008f96:	b1ca      	cbz	r2, 8008fcc <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f98:	4918      	ldr	r1, [pc, #96]	@ (8008ffc <HAL_UART_Transmit_DMA+0x94>)
 8008f9a:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f9c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008f9e:	4918      	ldr	r1, [pc, #96]	@ (8009000 <HAL_UART_Transmit_DMA+0x98>)
 8008fa0:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008fa2:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008fa4:	4917      	ldr	r1, [pc, #92]	@ (8009004 <HAL_UART_Transmit_DMA+0x9c>)
 8008fa6:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8008fa8:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8008faa:	2100      	movs	r1, #0
 8008fac:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008fae:	6802      	ldr	r2, [r0, #0]
 8008fb0:	3228      	adds	r2, #40	@ 0x28
 8008fb2:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8008fb4:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8008fb6:	f7fb ffab 	bl	8004f10 <HAL_DMA_Start_IT>
 8008fba:	b138      	cbz	r0, 8008fcc <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 8008fc2:	2320      	movs	r3, #32
 8008fc4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 8008fc8:	2001      	movs	r0, #1
 8008fca:	e00f      	b.n	8008fec <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008fcc:	6823      	ldr	r3, [r4, #0]
 8008fce:	2240      	movs	r2, #64	@ 0x40
 8008fd0:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fd2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	f102 0308 	add.w	r3, r2, #8
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe0:	3208      	adds	r2, #8
 8008fe2:	e842 3100 	strex	r1, r3, [r2]
 8008fe6:	2900      	cmp	r1, #0
 8008fe8:	d1f3      	bne.n	8008fd2 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8008fea:	2000      	movs	r0, #0
}
 8008fec:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8008fee:	2002      	movs	r0, #2
}
 8008ff0:	4770      	bx	lr
      return HAL_ERROR;
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	e7fa      	b.n	8008fec <HAL_UART_Transmit_DMA+0x84>
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	e7f8      	b.n	8008fec <HAL_UART_Transmit_DMA+0x84>
 8008ffa:	bf00      	nop
 8008ffc:	08008927 	.word	0x08008927
 8009000:	08008971 	.word	0x08008971
 8009004:	0800897d 	.word	0x0800897d

08009008 <HAL_UART_IRQHandler>:
{
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800900c:	6802      	ldr	r2, [r0, #0]
 800900e:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009010:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009012:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8009014:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8009018:	ea13 0f0c 	tst.w	r3, ip
 800901c:	d10d      	bne.n	800903a <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800901e:	f013 0f20 	tst.w	r3, #32
 8009022:	d010      	beq.n	8009046 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009024:	f010 0f20 	tst.w	r0, #32
 8009028:	d102      	bne.n	8009030 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800902a:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800902e:	d00a      	beq.n	8009046 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8009030:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009032:	b10b      	cbz	r3, 8009038 <HAL_UART_IRQHandler+0x30>
        huart->RxISR(huart);
 8009034:	4620      	mov	r0, r4
 8009036:	4798      	blx	r3
}
 8009038:	bd70      	pop	{r4, r5, r6, pc}
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800903a:	4d9a      	ldr	r5, [pc, #616]	@ (80092a4 <HAL_UART_IRQHandler+0x29c>)
 800903c:	400d      	ands	r5, r1
 800903e:	d130      	bne.n	80090a2 <HAL_UART_IRQHandler+0x9a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009040:	4e99      	ldr	r6, [pc, #612]	@ (80092a8 <HAL_UART_IRQHandler+0x2a0>)
 8009042:	4230      	tst	r0, r6
 8009044:	d12d      	bne.n	80090a2 <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009046:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8009048:	2d01      	cmp	r5, #1
 800904a:	f000 80c7 	beq.w	80091dc <HAL_UART_IRQHandler+0x1d4>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800904e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8009052:	d003      	beq.n	800905c <HAL_UART_IRQHandler+0x54>
 8009054:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8009058:	f040 8167 	bne.w	800932a <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800905c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009060:	d007      	beq.n	8009072 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009062:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8009066:	f040 8168 	bne.w	800933a <HAL_UART_IRQHandler+0x332>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800906a:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800906e:	f040 8164 	bne.w	800933a <HAL_UART_IRQHandler+0x332>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009072:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009076:	d003      	beq.n	8009080 <HAL_UART_IRQHandler+0x78>
 8009078:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800907c:	f040 8164 	bne.w	8009348 <HAL_UART_IRQHandler+0x340>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009080:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009084:	d003      	beq.n	800908e <HAL_UART_IRQHandler+0x86>
 8009086:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800908a:	f040 8161 	bne.w	8009350 <HAL_UART_IRQHandler+0x348>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800908e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8009092:	d0d1      	beq.n	8009038 <HAL_UART_IRQHandler+0x30>
 8009094:	2800      	cmp	r0, #0
 8009096:	dacf      	bge.n	8009038 <HAL_UART_IRQHandler+0x30>
    huart->RxFifoFullCallback(huart);
 8009098:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 800909c:	4620      	mov	r0, r4
 800909e:	4798      	blx	r3
    return;
 80090a0:	e7ca      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090a2:	f013 0f01 	tst.w	r3, #1
 80090a6:	d009      	beq.n	80090bc <HAL_UART_IRQHandler+0xb4>
 80090a8:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80090ac:	d006      	beq.n	80090bc <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090ae:	2601      	movs	r6, #1
 80090b0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090b2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80090b6:	4332      	orrs	r2, r6
 80090b8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090bc:	f013 0f02 	tst.w	r3, #2
 80090c0:	d00b      	beq.n	80090da <HAL_UART_IRQHandler+0xd2>
 80090c2:	f011 0f01 	tst.w	r1, #1
 80090c6:	d008      	beq.n	80090da <HAL_UART_IRQHandler+0xd2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090c8:	6822      	ldr	r2, [r4, #0]
 80090ca:	2602      	movs	r6, #2
 80090cc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ce:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80090d2:	f042 0204 	orr.w	r2, r2, #4
 80090d6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090da:	f013 0f04 	tst.w	r3, #4
 80090de:	d00b      	beq.n	80090f8 <HAL_UART_IRQHandler+0xf0>
 80090e0:	f011 0f01 	tst.w	r1, #1
 80090e4:	d008      	beq.n	80090f8 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090e6:	6822      	ldr	r2, [r4, #0]
 80090e8:	2604      	movs	r6, #4
 80090ea:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090ec:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80090f0:	f042 0202 	orr.w	r2, r2, #2
 80090f4:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80090f8:	f013 0f08 	tst.w	r3, #8
 80090fc:	d00b      	beq.n	8009116 <HAL_UART_IRQHandler+0x10e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80090fe:	f010 0f20 	tst.w	r0, #32
 8009102:	d100      	bne.n	8009106 <HAL_UART_IRQHandler+0xfe>
 8009104:	b13d      	cbz	r5, 8009116 <HAL_UART_IRQHandler+0x10e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009106:	6822      	ldr	r2, [r4, #0]
 8009108:	2508      	movs	r5, #8
 800910a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800910c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8009110:	432a      	orrs	r2, r5
 8009112:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009116:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800911a:	d00c      	beq.n	8009136 <HAL_UART_IRQHandler+0x12e>
 800911c:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8009120:	d009      	beq.n	8009136 <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8009128:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800912a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800912e:	f042 0220 	orr.w	r2, r2, #32
 8009132:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009136:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800913a:	2a00      	cmp	r2, #0
 800913c:	f43f af7c 	beq.w	8009038 <HAL_UART_IRQHandler+0x30>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009140:	f013 0f20 	tst.w	r3, #32
 8009144:	d009      	beq.n	800915a <HAL_UART_IRQHandler+0x152>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009146:	f010 0f20 	tst.w	r0, #32
 800914a:	d102      	bne.n	8009152 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800914c:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8009150:	d003      	beq.n	800915a <HAL_UART_IRQHandler+0x152>
        if (huart->RxISR != NULL)
 8009152:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8009154:	b10b      	cbz	r3, 800915a <HAL_UART_IRQHandler+0x152>
          huart->RxISR(huart);
 8009156:	4620      	mov	r0, r4
 8009158:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800915a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8009166:	d102      	bne.n	800916e <HAL_UART_IRQHandler+0x166>
 8009168:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800916c:	d02e      	beq.n	80091cc <HAL_UART_IRQHandler+0x1c4>
        UART_EndRxTransfer(huart);
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff fbae 	bl	80088d0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800917c:	d021      	beq.n	80091c2 <HAL_UART_IRQHandler+0x1ba>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800917e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	f102 0308 	add.w	r3, r2, #8
 8009184:	e853 3f00 	ldrex	r3, [r3]
 8009188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	3208      	adds	r2, #8
 800918e:	e842 3100 	strex	r1, r3, [r2]
 8009192:	2900      	cmp	r1, #0
 8009194:	d1f3      	bne.n	800917e <HAL_UART_IRQHandler+0x176>
          if (huart->hdmarx != NULL)
 8009196:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800919a:	b16b      	cbz	r3, 80091b8 <HAL_UART_IRQHandler+0x1b0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800919c:	4a43      	ldr	r2, [pc, #268]	@ (80092ac <HAL_UART_IRQHandler+0x2a4>)
 800919e:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091a0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80091a4:	f7fb ff3a 	bl	800501c <HAL_DMA_Abort_IT>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	f43f af45 	beq.w	8009038 <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091ae:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80091b2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80091b4:	4798      	blx	r3
 80091b6:	e73f      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
            huart->ErrorCallback(huart);
 80091b8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80091bc:	4620      	mov	r0, r4
 80091be:	4798      	blx	r3
 80091c0:	e73a      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
          huart->ErrorCallback(huart);
 80091c2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80091c6:	4620      	mov	r0, r4
 80091c8:	4798      	blx	r3
 80091ca:	e735      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
        huart->ErrorCallback(huart);
 80091cc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80091d0:	4620      	mov	r0, r4
 80091d2:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d4:	2300      	movs	r3, #0
 80091d6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 80091da:	e72d      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80091dc:	f013 0f10 	tst.w	r3, #16
 80091e0:	f43f af35 	beq.w	800904e <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80091e4:	f010 0f10 	tst.w	r0, #16
 80091e8:	f43f af31 	beq.w	800904e <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091ec:	2310      	movs	r3, #16
 80091ee:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80091f8:	d05a      	beq.n	80092b0 <HAL_UART_IRQHandler+0x2a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091fa:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8009204:	2b00      	cmp	r3, #0
 8009206:	f43f af17 	beq.w	8009038 <HAL_UART_IRQHandler+0x30>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800920a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 800920e:	4299      	cmp	r1, r3
 8009210:	f67f af12 	bls.w	8009038 <HAL_UART_IRQHandler+0x30>
        huart->RxXferCount = nb_remaining_rx_data;
 8009214:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009218:	6813      	ldr	r3, [r2, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f013 0f20 	tst.w	r3, #32
 8009220:	d132      	bne.n	8009288 <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009222:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009224:	e852 3f00 	ldrex	r3, [r2]
 8009228:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	e842 3100 	strex	r1, r3, [r2]
 8009230:	2900      	cmp	r1, #0
 8009232:	d1f6      	bne.n	8009222 <HAL_UART_IRQHandler+0x21a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009234:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	f102 0308 	add.w	r3, r2, #8
 800923a:	e853 3f00 	ldrex	r3, [r3]
 800923e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009242:	3208      	adds	r2, #8
 8009244:	e842 3100 	strex	r1, r3, [r2]
 8009248:	2900      	cmp	r1, #0
 800924a:	d1f3      	bne.n	8009234 <HAL_UART_IRQHandler+0x22c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800924c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800924e:	f102 0308 	add.w	r3, r2, #8
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925a:	3208      	adds	r2, #8
 800925c:	e842 3100 	strex	r1, r3, [r2]
 8009260:	2900      	cmp	r1, #0
 8009262:	d1f3      	bne.n	800924c <HAL_UART_IRQHandler+0x244>
          huart->RxState = HAL_UART_STATE_READY;
 8009264:	2320      	movs	r3, #32
 8009266:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800926a:	2300      	movs	r3, #0
 800926c:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800926e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009270:	e852 3f00 	ldrex	r3, [r2]
 8009274:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009278:	e842 3100 	strex	r1, r3, [r2]
 800927c:	2900      	cmp	r1, #0
 800927e:	d1f6      	bne.n	800926e <HAL_UART_IRQHandler+0x266>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009280:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8009284:	f7fb fe90 	bl	8004fa8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009288:	2302      	movs	r3, #2
 800928a:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800928c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 8009290:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8009294:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8009298:	b29b      	uxth	r3, r3
 800929a:	1ac9      	subs	r1, r1, r3
 800929c:	b289      	uxth	r1, r1
 800929e:	4620      	mov	r0, r4
 80092a0:	4790      	blx	r2
      return;
 80092a2:	e6c9      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
 80092a4:	10000001 	.word	0x10000001
 80092a8:	04000120 	.word	0x04000120
 80092ac:	080089d7 	.word	0x080089d7
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80092b0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80092b4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	1ac9      	subs	r1, r1, r3
 80092bc:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80092be:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f43f aeb7 	beq.w	8009038 <HAL_UART_IRQHandler+0x30>
          && (nb_rx_data > 0U))
 80092ca:	2900      	cmp	r1, #0
 80092cc:	f43f aeb4 	beq.w	8009038 <HAL_UART_IRQHandler+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	e852 3f00 	ldrex	r3, [r2]
 80092d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	e842 3000 	strex	r0, r3, [r2]
 80092de:	2800      	cmp	r0, #0
 80092e0:	d1f6      	bne.n	80092d0 <HAL_UART_IRQHandler+0x2c8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	f102 0308 	add.w	r3, r2, #8
 80092e8:	e853 3f00 	ldrex	r3, [r3]
 80092ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	3208      	adds	r2, #8
 80092f6:	e842 3000 	strex	r0, r3, [r2]
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d1f1      	bne.n	80092e2 <HAL_UART_IRQHandler+0x2da>
        huart->RxState = HAL_UART_STATE_READY;
 80092fe:	2320      	movs	r3, #32
 8009300:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009304:	2300      	movs	r3, #0
 8009306:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8009308:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800930a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	e852 3f00 	ldrex	r3, [r2]
 8009310:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	e842 3000 	strex	r0, r3, [r2]
 8009318:	2800      	cmp	r0, #0
 800931a:	d1f6      	bne.n	800930a <HAL_UART_IRQHandler+0x302>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800931c:	2302      	movs	r3, #2
 800931e:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, nb_rx_data);
 8009320:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8009324:	4620      	mov	r0, r4
 8009326:	4798      	blx	r3
      return;
 8009328:	e686      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800932a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800932e:	6213      	str	r3, [r2, #32]
    huart->WakeupCallback(huart);
 8009330:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8009334:	4620      	mov	r0, r4
 8009336:	4798      	blx	r3
    return;
 8009338:	e67e      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
    if (huart->TxISR != NULL)
 800933a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800933c:	2b00      	cmp	r3, #0
 800933e:	f43f ae7b 	beq.w	8009038 <HAL_UART_IRQHandler+0x30>
      huart->TxISR(huart);
 8009342:	4620      	mov	r0, r4
 8009344:	4798      	blx	r3
    return;
 8009346:	e677      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
    UART_EndTransmit_IT(huart);
 8009348:	4620      	mov	r0, r4
 800934a:	f7ff fb4f 	bl	80089ec <UART_EndTransmit_IT>
    return;
 800934e:	e673      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
    huart->TxFifoEmptyCallback(huart);
 8009350:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8009354:	4620      	mov	r0, r4
 8009356:	4798      	blx	r3
    return;
 8009358:	e66e      	b.n	8009038 <HAL_UART_IRQHandler+0x30>
 800935a:	bf00      	nop

0800935c <UART_InitCallbacksToDefault>:
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800935c:	4b12      	ldr	r3, [pc, #72]	@ (80093a8 <UART_InitCallbacksToDefault+0x4c>)
 800935e:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009362:	4b12      	ldr	r3, [pc, #72]	@ (80093ac <UART_InitCallbacksToDefault+0x50>)
 8009364:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009368:	4b11      	ldr	r3, [pc, #68]	@ (80093b0 <UART_InitCallbacksToDefault+0x54>)
 800936a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800936e:	4b11      	ldr	r3, [pc, #68]	@ (80093b4 <UART_InitCallbacksToDefault+0x58>)
 8009370:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009374:	4b10      	ldr	r3, [pc, #64]	@ (80093b8 <UART_InitCallbacksToDefault+0x5c>)
 8009376:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800937a:	4b10      	ldr	r3, [pc, #64]	@ (80093bc <UART_InitCallbacksToDefault+0x60>)
 800937c:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009380:	4b0f      	ldr	r3, [pc, #60]	@ (80093c0 <UART_InitCallbacksToDefault+0x64>)
 8009382:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009386:	4b0f      	ldr	r3, [pc, #60]	@ (80093c4 <UART_InitCallbacksToDefault+0x68>)
 8009388:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800938c:	4b0e      	ldr	r3, [pc, #56]	@ (80093c8 <UART_InitCallbacksToDefault+0x6c>)
 800938e:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009392:	4b0e      	ldr	r3, [pc, #56]	@ (80093cc <UART_InitCallbacksToDefault+0x70>)
 8009394:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009398:	4b0d      	ldr	r3, [pc, #52]	@ (80093d0 <UART_InitCallbacksToDefault+0x74>)
 800939a:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800939e:	4b0d      	ldr	r3, [pc, #52]	@ (80093d4 <UART_InitCallbacksToDefault+0x78>)
 80093a0:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
}
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	08008891 	.word	0x08008891
 80093ac:	080031e5 	.word	0x080031e5
 80093b0:	08008893 	.word	0x08008893
 80093b4:	08003205 	.word	0x08003205
 80093b8:	08008895 	.word	0x08008895
 80093bc:	08008897 	.word	0x08008897
 80093c0:	08008899 	.word	0x08008899
 80093c4:	0800889b 	.word	0x0800889b
 80093c8:	08009c09 	.word	0x08009c09
 80093cc:	08009c0b 	.word	0x08009c0b
 80093d0:	08009c0d 	.word	0x08009c0d
 80093d4:	0800889d 	.word	0x0800889d

080093d8 <UART_SetConfig>:
{
 80093d8:	b570      	push	{r4, r5, r6, lr}
 80093da:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80093dc:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80093de:	6883      	ldr	r3, [r0, #8]
 80093e0:	6902      	ldr	r2, [r0, #16]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	6942      	ldr	r2, [r0, #20]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	69c2      	ldr	r2, [r0, #28]
 80093ea:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80093ec:	6808      	ldr	r0, [r1, #0]
 80093ee:	4a9d      	ldr	r2, [pc, #628]	@ (8009664 <UART_SetConfig+0x28c>)
 80093f0:	4002      	ands	r2, r0
 80093f2:	431a      	orrs	r2, r3
 80093f4:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093f6:	6822      	ldr	r2, [r4, #0]
 80093f8:	6853      	ldr	r3, [r2, #4]
 80093fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80093fe:	68e1      	ldr	r1, [r4, #12]
 8009400:	430b      	orrs	r3, r1
 8009402:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009404:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	4b97      	ldr	r3, [pc, #604]	@ (8009668 <UART_SetConfig+0x290>)
 800940a:	429a      	cmp	r2, r3
 800940c:	d001      	beq.n	8009412 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800940e:	6a23      	ldr	r3, [r4, #32]
 8009410:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009412:	6893      	ldr	r3, [r2, #8]
 8009414:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009418:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800941c:	430b      	orrs	r3, r1
 800941e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009420:	6822      	ldr	r2, [r4, #0]
 8009422:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009424:	f023 030f 	bic.w	r3, r3, #15
 8009428:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800942a:	430b      	orrs	r3, r1
 800942c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	4a8e      	ldr	r2, [pc, #568]	@ (800966c <UART_SetConfig+0x294>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d01c      	beq.n	8009470 <UART_SetConfig+0x98>
 8009436:	4a8e      	ldr	r2, [pc, #568]	@ (8009670 <UART_SetConfig+0x298>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d031      	beq.n	80094a0 <UART_SetConfig+0xc8>
 800943c:	4a8a      	ldr	r2, [pc, #552]	@ (8009668 <UART_SetConfig+0x290>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d04b      	beq.n	80094da <UART_SetConfig+0x102>
 8009442:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8009444:	4988      	ldr	r1, [pc, #544]	@ (8009668 <UART_SetConfig+0x290>)
 8009446:	428b      	cmp	r3, r1
 8009448:	d068      	beq.n	800951c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800944a:	69e0      	ldr	r0, [r4, #28]
 800944c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009450:	f000 80a5 	beq.w	800959e <UART_SetConfig+0x1c6>
    switch (clocksource)
 8009454:	2a08      	cmp	r2, #8
 8009456:	f200 811f 	bhi.w	8009698 <UART_SetConfig+0x2c0>
 800945a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800945e:	00d3      	.short	0x00d3
 8009460:	00d100f5 	.word	0x00d100f5
 8009464:	00f8011d 	.word	0x00f8011d
 8009468:	011d011d 	.word	0x011d011d
 800946c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8009470:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009474:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8009478:	f002 0203 	and.w	r2, r2, #3
 800947c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009480:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8009484:	2a03      	cmp	r2, #3
 8009486:	d809      	bhi.n	800949c <UART_SetConfig+0xc4>
 8009488:	e8df f002 	tbb	[pc, r2]
 800948c:	063c0402 	.word	0x063c0402
 8009490:	2201      	movs	r2, #1
 8009492:	e7d7      	b.n	8009444 <UART_SetConfig+0x6c>
 8009494:	2204      	movs	r2, #4
 8009496:	e7d5      	b.n	8009444 <UART_SetConfig+0x6c>
 8009498:	2208      	movs	r2, #8
 800949a:	e7d3      	b.n	8009444 <UART_SetConfig+0x6c>
 800949c:	2210      	movs	r2, #16
 800949e:	e7d1      	b.n	8009444 <UART_SetConfig+0x6c>
 80094a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094a4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80094a8:	f002 020c 	and.w	r2, r2, #12
 80094ac:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 80094b0:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 80094b4:	2a0c      	cmp	r2, #12
 80094b6:	d80e      	bhi.n	80094d6 <UART_SetConfig+0xfe>
 80094b8:	e8df f002 	tbb	[pc, r2]
 80094bc:	0d0d0d07 	.word	0x0d0d0d07
 80094c0:	0d0d0d09 	.word	0x0d0d0d09
 80094c4:	0d0d0d26 	.word	0x0d0d0d26
 80094c8:	0b          	.byte	0x0b
 80094c9:	00          	.byte	0x00
 80094ca:	2200      	movs	r2, #0
 80094cc:	e7ba      	b.n	8009444 <UART_SetConfig+0x6c>
 80094ce:	2204      	movs	r2, #4
 80094d0:	e7b8      	b.n	8009444 <UART_SetConfig+0x6c>
 80094d2:	2208      	movs	r2, #8
 80094d4:	e7b6      	b.n	8009444 <UART_SetConfig+0x6c>
 80094d6:	2210      	movs	r2, #16
 80094d8:	e7b4      	b.n	8009444 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80094da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094de:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80094e2:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 80094e6:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80094ea:	d00f      	beq.n	800950c <UART_SetConfig+0x134>
 80094ec:	d805      	bhi.n	80094fa <UART_SetConfig+0x122>
 80094ee:	b17a      	cbz	r2, 8009510 <UART_SetConfig+0x138>
 80094f0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80094f4:	d10e      	bne.n	8009514 <UART_SetConfig+0x13c>
 80094f6:	2204      	movs	r2, #4
 80094f8:	e7a4      	b.n	8009444 <UART_SetConfig+0x6c>
 80094fa:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 80094fe:	d10b      	bne.n	8009518 <UART_SetConfig+0x140>
 8009500:	2208      	movs	r2, #8
 8009502:	e79f      	b.n	8009444 <UART_SetConfig+0x6c>
 8009504:	2202      	movs	r2, #2
 8009506:	e79d      	b.n	8009444 <UART_SetConfig+0x6c>
 8009508:	2202      	movs	r2, #2
 800950a:	e79b      	b.n	8009444 <UART_SetConfig+0x6c>
 800950c:	2202      	movs	r2, #2
 800950e:	e799      	b.n	8009444 <UART_SetConfig+0x6c>
 8009510:	2200      	movs	r2, #0
 8009512:	e797      	b.n	8009444 <UART_SetConfig+0x6c>
 8009514:	2210      	movs	r2, #16
 8009516:	e795      	b.n	8009444 <UART_SetConfig+0x6c>
 8009518:	2210      	movs	r2, #16
 800951a:	e793      	b.n	8009444 <UART_SetConfig+0x6c>
    switch (clocksource)
 800951c:	2a08      	cmp	r2, #8
 800951e:	f200 809c 	bhi.w	800965a <UART_SetConfig+0x282>
 8009522:	e8df f002 	tbb	[pc, r2]
 8009526:	9a08      	.short	0x9a08
 8009528:	9a379a3a 	.word	0x9a379a3a
 800952c:	9a9a      	.short	0x9a9a
 800952e:	05          	.byte	0x05
 800952f:	00          	.byte	0x00
 8009530:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009534:	e004      	b.n	8009540 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009536:	f7fd fa19 	bl	800696c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800953a:	2800      	cmp	r0, #0
 800953c:	f000 808f 	beq.w	800965e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009540:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009542:	4b4c      	ldr	r3, [pc, #304]	@ (8009674 <UART_SetConfig+0x29c>)
 8009544:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8009548:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800954c:	6865      	ldr	r5, [r4, #4]
 800954e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8009552:	4299      	cmp	r1, r3
 8009554:	f200 8094 	bhi.w	8009680 <UART_SetConfig+0x2a8>
 8009558:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800955c:	f200 8092 	bhi.w	8009684 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009560:	2600      	movs	r6, #0
 8009562:	4633      	mov	r3, r6
 8009564:	4631      	mov	r1, r6
 8009566:	f7f7 fe61 	bl	800122c <__aeabi_uldivmod>
 800956a:	0209      	lsls	r1, r1, #8
 800956c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8009570:	0200      	lsls	r0, r0, #8
 8009572:	086b      	lsrs	r3, r5, #1
 8009574:	18c0      	adds	r0, r0, r3
 8009576:	462a      	mov	r2, r5
 8009578:	4633      	mov	r3, r6
 800957a:	f141 0100 	adc.w	r1, r1, #0
 800957e:	f7f7 fe55 	bl	800122c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009582:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8009586:	4b3c      	ldr	r3, [pc, #240]	@ (8009678 <UART_SetConfig+0x2a0>)
 8009588:	429a      	cmp	r2, r3
 800958a:	d87d      	bhi.n	8009688 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	60d8      	str	r0, [r3, #12]
 8009590:	4630      	mov	r0, r6
 8009592:	e050      	b.n	8009636 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8009594:	f7fc fcec 	bl	8005f70 <HAL_RCC_GetSysClockFreq>
        break;
 8009598:	e7cf      	b.n	800953a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800959a:	4838      	ldr	r0, [pc, #224]	@ (800967c <UART_SetConfig+0x2a4>)
 800959c:	e7d0      	b.n	8009540 <UART_SetConfig+0x168>
    switch (clocksource)
 800959e:	2a08      	cmp	r2, #8
 80095a0:	d874      	bhi.n	800968c <UART_SetConfig+0x2b4>
 80095a2:	e8df f002 	tbb	[pc, r2]
 80095a6:	2707      	.short	0x2707
 80095a8:	732a7305 	.word	0x732a7305
 80095ac:	7373      	.short	0x7373
 80095ae:	0b          	.byte	0x0b
 80095af:	00          	.byte	0x00
 80095b0:	4832      	ldr	r0, [pc, #200]	@ (800967c <UART_SetConfig+0x2a4>)
 80095b2:	e003      	b.n	80095bc <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b4:	f7fd f9da 	bl	800696c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d069      	beq.n	8009690 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80095be:	4b2d      	ldr	r3, [pc, #180]	@ (8009674 <UART_SetConfig+0x29c>)
 80095c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80095c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80095c8:	6862      	ldr	r2, [r4, #4]
 80095ca:	0853      	lsrs	r3, r2, #1
 80095cc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80095d0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095d4:	f1a3 0110 	sub.w	r1, r3, #16
 80095d8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80095dc:	4291      	cmp	r1, r2
 80095de:	d859      	bhi.n	8009694 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80095e6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80095ea:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80095ec:	6822      	ldr	r2, [r4, #0]
 80095ee:	60d3      	str	r3, [r2, #12]
 80095f0:	2000      	movs	r0, #0
 80095f2:	e020      	b.n	8009636 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80095f4:	f7fd f9ca 	bl	800698c <HAL_RCC_GetPCLK2Freq>
        break;
 80095f8:	e7de      	b.n	80095b8 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80095fa:	f7fc fcb9 	bl	8005f70 <HAL_RCC_GetSysClockFreq>
        break;
 80095fe:	e7db      	b.n	80095b8 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8009600:	481e      	ldr	r0, [pc, #120]	@ (800967c <UART_SetConfig+0x2a4>)
 8009602:	e003      	b.n	800960c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009604:	f7fd f9b2 	bl	800696c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009608:	2800      	cmp	r0, #0
 800960a:	d047      	beq.n	800969c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800960c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800960e:	4b19      	ldr	r3, [pc, #100]	@ (8009674 <UART_SetConfig+0x29c>)
 8009610:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8009614:	fbb0 f0f3 	udiv	r0, r0, r3
 8009618:	6863      	ldr	r3, [r4, #4]
 800961a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800961e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009622:	f1a0 0210 	sub.w	r2, r0, #16
 8009626:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 800962a:	429a      	cmp	r2, r3
 800962c:	d838      	bhi.n	80096a0 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	b280      	uxth	r0, r0
 8009632:	60d8      	str	r0, [r3, #12]
 8009634:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8009636:	2301      	movs	r3, #1
 8009638:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800963c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8009640:	2300      	movs	r3, #0
 8009642:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8009644:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8009646:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8009648:	f7fd f9a0 	bl	800698c <HAL_RCC_GetPCLK2Freq>
        break;
 800964c:	e7dc      	b.n	8009608 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800964e:	f7fc fc8f 	bl	8005f70 <HAL_RCC_GetSysClockFreq>
        break;
 8009652:	e7d9      	b.n	8009608 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8009654:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8009658:	e7d8      	b.n	800960c <UART_SetConfig+0x234>
    switch (clocksource)
 800965a:	2001      	movs	r0, #1
 800965c:	e7eb      	b.n	8009636 <UART_SetConfig+0x25e>
 800965e:	2000      	movs	r0, #0
 8009660:	e7e9      	b.n	8009636 <UART_SetConfig+0x25e>
 8009662:	bf00      	nop
 8009664:	cfff69f3 	.word	0xcfff69f3
 8009668:	40008000 	.word	0x40008000
 800966c:	40013800 	.word	0x40013800
 8009670:	40004400 	.word	0x40004400
 8009674:	08011bac 	.word	0x08011bac
 8009678:	000ffcff 	.word	0x000ffcff
 800967c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8009680:	2001      	movs	r0, #1
 8009682:	e7d8      	b.n	8009636 <UART_SetConfig+0x25e>
 8009684:	2001      	movs	r0, #1
 8009686:	e7d6      	b.n	8009636 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8009688:	2001      	movs	r0, #1
 800968a:	e7d4      	b.n	8009636 <UART_SetConfig+0x25e>
    switch (clocksource)
 800968c:	2001      	movs	r0, #1
 800968e:	e7d2      	b.n	8009636 <UART_SetConfig+0x25e>
 8009690:	2000      	movs	r0, #0
 8009692:	e7d0      	b.n	8009636 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8009694:	2001      	movs	r0, #1
 8009696:	e7ce      	b.n	8009636 <UART_SetConfig+0x25e>
    switch (clocksource)
 8009698:	2001      	movs	r0, #1
 800969a:	e7cc      	b.n	8009636 <UART_SetConfig+0x25e>
 800969c:	2000      	movs	r0, #0
 800969e:	e7ca      	b.n	8009636 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80096a0:	2001      	movs	r0, #1
 80096a2:	e7c8      	b.n	8009636 <UART_SetConfig+0x25e>

080096a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096a4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096a6:	f013 0f01 	tst.w	r3, #1
 80096aa:	d006      	beq.n	80096ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096ac:	6802      	ldr	r2, [r0, #0]
 80096ae:	6853      	ldr	r3, [r2, #4]
 80096b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80096b4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80096b6:	430b      	orrs	r3, r1
 80096b8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096ba:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096bc:	f013 0f02 	tst.w	r3, #2
 80096c0:	d006      	beq.n	80096d0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096c2:	6802      	ldr	r2, [r0, #0]
 80096c4:	6853      	ldr	r3, [r2, #4]
 80096c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80096ca:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80096cc:	430b      	orrs	r3, r1
 80096ce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096d2:	f013 0f04 	tst.w	r3, #4
 80096d6:	d006      	beq.n	80096e6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096d8:	6802      	ldr	r2, [r0, #0]
 80096da:	6853      	ldr	r3, [r2, #4]
 80096dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80096e0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80096e2:	430b      	orrs	r3, r1
 80096e4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096e6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096e8:	f013 0f08 	tst.w	r3, #8
 80096ec:	d006      	beq.n	80096fc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096ee:	6802      	ldr	r2, [r0, #0]
 80096f0:	6853      	ldr	r3, [r2, #4]
 80096f2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80096f6:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80096f8:	430b      	orrs	r3, r1
 80096fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096fc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80096fe:	f013 0f10 	tst.w	r3, #16
 8009702:	d006      	beq.n	8009712 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009704:	6802      	ldr	r2, [r0, #0]
 8009706:	6893      	ldr	r3, [r2, #8]
 8009708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800970c:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 800970e:	430b      	orrs	r3, r1
 8009710:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009712:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009714:	f013 0f20 	tst.w	r3, #32
 8009718:	d006      	beq.n	8009728 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800971a:	6802      	ldr	r2, [r0, #0]
 800971c:	6893      	ldr	r3, [r2, #8]
 800971e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009722:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8009724:	430b      	orrs	r3, r1
 8009726:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009728:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800972a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800972e:	d00a      	beq.n	8009746 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009730:	6802      	ldr	r2, [r0, #0]
 8009732:	6853      	ldr	r3, [r2, #4]
 8009734:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009738:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800973a:	430b      	orrs	r3, r1
 800973c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800973e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8009740:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009744:	d00b      	beq.n	800975e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009746:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009748:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800974c:	d006      	beq.n	800975c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800974e:	6802      	ldr	r2, [r0, #0]
 8009750:	6853      	ldr	r3, [r2, #4]
 8009752:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8009756:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009758:	430b      	orrs	r3, r1
 800975a:	6053      	str	r3, [r2, #4]
}
 800975c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800975e:	6802      	ldr	r2, [r0, #0]
 8009760:	6853      	ldr	r3, [r2, #4]
 8009762:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8009766:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8009768:	430b      	orrs	r3, r1
 800976a:	6053      	str	r3, [r2, #4]
 800976c:	e7eb      	b.n	8009746 <UART_AdvFeatureConfig+0xa2>

0800976e <UART_WaitOnFlagUntilTimeout>:
{
 800976e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009772:	4605      	mov	r5, r0
 8009774:	460f      	mov	r7, r1
 8009776:	4616      	mov	r6, r2
 8009778:	4699      	mov	r9, r3
 800977a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977e:	682b      	ldr	r3, [r5, #0]
 8009780:	69dc      	ldr	r4, [r3, #28]
 8009782:	ea37 0404 	bics.w	r4, r7, r4
 8009786:	bf0c      	ite	eq
 8009788:	2401      	moveq	r4, #1
 800978a:	2400      	movne	r4, #0
 800978c:	42b4      	cmp	r4, r6
 800978e:	d157      	bne.n	8009840 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8009790:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009794:	d0f3      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009796:	f7f9 f98b 	bl	8002ab0 <HAL_GetTick>
 800979a:	eba0 0009 	sub.w	r0, r0, r9
 800979e:	4540      	cmp	r0, r8
 80097a0:	d82f      	bhi.n	8009802 <UART_WaitOnFlagUntilTimeout+0x94>
 80097a2:	f1b8 0f00 	cmp.w	r8, #0
 80097a6:	d02c      	beq.n	8009802 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f012 0f04 	tst.w	r2, #4
 80097b0:	d0e5      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097b2:	69da      	ldr	r2, [r3, #28]
 80097b4:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80097b8:	d0e1      	beq.n	800977e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097be:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80097c0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	e852 3f00 	ldrex	r3, [r2]
 80097c6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ca:	e842 3100 	strex	r1, r3, [r2]
 80097ce:	2900      	cmp	r1, #0
 80097d0:	d1f6      	bne.n	80097c0 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097d2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097d4:	f102 0308 	add.w	r3, r2, #8
 80097d8:	e853 3f00 	ldrex	r3, [r3]
 80097dc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e0:	3208      	adds	r2, #8
 80097e2:	e842 3100 	strex	r1, r3, [r2]
 80097e6:	2900      	cmp	r1, #0
 80097e8:	d1f3      	bne.n	80097d2 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 80097ea:	2320      	movs	r3, #32
 80097ec:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80097f0:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097f4:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 80097f8:	2300      	movs	r3, #0
 80097fa:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 80097fe:	2003      	movs	r0, #3
 8009800:	e01f      	b.n	8009842 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009802:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009804:	e852 3f00 	ldrex	r3, [r2]
 8009808:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	e842 3100 	strex	r1, r3, [r2]
 8009810:	2900      	cmp	r1, #0
 8009812:	d1f6      	bne.n	8009802 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009814:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009816:	f102 0308 	add.w	r3, r2, #8
 800981a:	e853 3f00 	ldrex	r3, [r3]
 800981e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	3208      	adds	r2, #8
 8009824:	e842 3100 	strex	r1, r3, [r2]
 8009828:	2900      	cmp	r1, #0
 800982a:	d1f3      	bne.n	8009814 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800982c:	2320      	movs	r3, #32
 800982e:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009832:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 8009836:	2300      	movs	r3, #0
 8009838:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 800983c:	2003      	movs	r0, #3
 800983e:	e000      	b.n	8009842 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8009840:	2000      	movs	r0, #0
}
 8009842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009846 <HAL_UART_Transmit>:
{
 8009846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800984e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8009852:	2b20      	cmp	r3, #32
 8009854:	d14f      	bne.n	80098f6 <HAL_UART_Transmit+0xb0>
 8009856:	4604      	mov	r4, r0
 8009858:	460d      	mov	r5, r1
 800985a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800985c:	2900      	cmp	r1, #0
 800985e:	d04e      	beq.n	80098fe <HAL_UART_Transmit+0xb8>
 8009860:	b90a      	cbnz	r2, 8009866 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8009862:	2001      	movs	r0, #1
 8009864:	e048      	b.n	80098f8 <HAL_UART_Transmit+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009866:	2300      	movs	r3, #0
 8009868:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800986c:	2321      	movs	r3, #33	@ 0x21
 800986e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8009872:	f7f9 f91d 	bl	8002ab0 <HAL_GetTick>
 8009876:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8009878:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 800987c:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009886:	d002      	beq.n	800988e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8009888:	f04f 0800 	mov.w	r8, #0
 800988c:	e011      	b.n	80098b2 <HAL_UART_Transmit+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800988e:	6923      	ldr	r3, [r4, #16]
 8009890:	b313      	cbz	r3, 80098d8 <HAL_UART_Transmit+0x92>
      pdata16bits = NULL;
 8009892:	f04f 0800 	mov.w	r8, #0
 8009896:	e00c      	b.n	80098b2 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009898:	f838 3b02 	ldrh.w	r3, [r8], #2
 800989c:	6822      	ldr	r2, [r4, #0]
 800989e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a2:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80098a4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80098a8:	b292      	uxth	r2, r2
 80098aa:	3a01      	subs	r2, #1
 80098ac:	b292      	uxth	r2, r2
 80098ae:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80098b2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	b18b      	cbz	r3, 80098de <HAL_UART_Transmit+0x98>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098ba:	9600      	str	r6, [sp, #0]
 80098bc:	463b      	mov	r3, r7
 80098be:	2200      	movs	r2, #0
 80098c0:	2180      	movs	r1, #128	@ 0x80
 80098c2:	4620      	mov	r0, r4
 80098c4:	f7ff ff53 	bl	800976e <UART_WaitOnFlagUntilTimeout>
 80098c8:	b9d8      	cbnz	r0, 8009902 <HAL_UART_Transmit+0xbc>
      if (pdata8bits == NULL)
 80098ca:	2d00      	cmp	r5, #0
 80098cc:	d0e4      	beq.n	8009898 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80098ce:	f815 2b01 	ldrb.w	r2, [r5], #1
 80098d2:	6823      	ldr	r3, [r4, #0]
 80098d4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80098d6:	e7e5      	b.n	80098a4 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 80098d8:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80098da:	2500      	movs	r5, #0
 80098dc:	e7e9      	b.n	80098b2 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098de:	9600      	str	r6, [sp, #0]
 80098e0:	463b      	mov	r3, r7
 80098e2:	2200      	movs	r2, #0
 80098e4:	2140      	movs	r1, #64	@ 0x40
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7ff ff41 	bl	800976e <UART_WaitOnFlagUntilTimeout>
 80098ec:	b958      	cbnz	r0, 8009906 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 80098ee:	2320      	movs	r3, #32
 80098f0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80098f4:	e000      	b.n	80098f8 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 80098f6:	2002      	movs	r0, #2
}
 80098f8:	b002      	add	sp, #8
 80098fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 80098fe:	2001      	movs	r0, #1
 8009900:	e7fa      	b.n	80098f8 <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 8009902:	2003      	movs	r0, #3
 8009904:	e7f8      	b.n	80098f8 <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 8009906:	2003      	movs	r0, #3
 8009908:	e7f6      	b.n	80098f8 <HAL_UART_Transmit+0xb2>

0800990a <UART_CheckIdleState>:
{
 800990a:	b530      	push	{r4, r5, lr}
 800990c:	b083      	sub	sp, #12
 800990e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009910:	2300      	movs	r3, #0
 8009912:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8009916:	f7f9 f8cb 	bl	8002ab0 <HAL_GetTick>
 800991a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800991c:	6822      	ldr	r2, [r4, #0]
 800991e:	6812      	ldr	r2, [r2, #0]
 8009920:	f012 0f08 	tst.w	r2, #8
 8009924:	d110      	bne.n	8009948 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009926:	6823      	ldr	r3, [r4, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f013 0f04 	tst.w	r3, #4
 800992e:	d119      	bne.n	8009964 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8009930:	2320      	movs	r3, #32
 8009932:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009936:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993a:	2000      	movs	r0, #0
 800993c:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800993e:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8009940:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8009944:	b003      	add	sp, #12
 8009946:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009948:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	4603      	mov	r3, r0
 8009950:	2200      	movs	r2, #0
 8009952:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009956:	4620      	mov	r0, r4
 8009958:	f7ff ff09 	bl	800976e <UART_WaitOnFlagUntilTimeout>
 800995c:	2800      	cmp	r0, #0
 800995e:	d0e2      	beq.n	8009926 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8009960:	2003      	movs	r0, #3
 8009962:	e7ef      	b.n	8009944 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	462b      	mov	r3, r5
 800996c:	2200      	movs	r2, #0
 800996e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009972:	4620      	mov	r0, r4
 8009974:	f7ff fefb 	bl	800976e <UART_WaitOnFlagUntilTimeout>
 8009978:	2800      	cmp	r0, #0
 800997a:	d0d9      	beq.n	8009930 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800997c:	2003      	movs	r0, #3
 800997e:	e7e1      	b.n	8009944 <UART_CheckIdleState+0x3a>

08009980 <HAL_UART_Init>:
  if (huart == NULL)
 8009980:	2800      	cmp	r0, #0
 8009982:	d03a      	beq.n	80099fa <HAL_UART_Init+0x7a>
{
 8009984:	b510      	push	{r4, lr}
 8009986:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009988:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800998c:	b30b      	cbz	r3, 80099d2 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 800998e:	2324      	movs	r3, #36	@ 0x24
 8009990:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8009994:	6822      	ldr	r2, [r4, #0]
 8009996:	6813      	ldr	r3, [r2, #0]
 8009998:	f023 0301 	bic.w	r3, r3, #1
 800999c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800999e:	4620      	mov	r0, r4
 80099a0:	f7ff fd1a 	bl	80093d8 <UART_SetConfig>
 80099a4:	2801      	cmp	r0, #1
 80099a6:	d013      	beq.n	80099d0 <HAL_UART_Init+0x50>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80099aa:	bb13      	cbnz	r3, 80099f2 <HAL_UART_Init+0x72>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099ac:	6822      	ldr	r2, [r4, #0]
 80099ae:	6853      	ldr	r3, [r2, #4]
 80099b0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 80099b4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	6893      	ldr	r3, [r2, #8]
 80099ba:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 80099be:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80099c0:	6822      	ldr	r2, [r4, #0]
 80099c2:	6813      	ldr	r3, [r2, #0]
 80099c4:	f043 0301 	orr.w	r3, r3, #1
 80099c8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80099ca:	4620      	mov	r0, r4
 80099cc:	f7ff ff9d 	bl	800990a <UART_CheckIdleState>
}
 80099d0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80099d2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    UART_InitCallbacksToDefault(huart);
 80099d6:	f7ff fcc1 	bl	800935c <UART_InitCallbacksToDefault>
    if (huart->MspInitCallback == NULL)
 80099da:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80099de:	b123      	cbz	r3, 80099ea <HAL_UART_Init+0x6a>
    huart->MspInitCallback(huart);
 80099e0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 80099e4:	4620      	mov	r0, r4
 80099e6:	4798      	blx	r3
 80099e8:	e7d1      	b.n	800998e <HAL_UART_Init+0xe>
      huart->MspInitCallback = HAL_UART_MspInit;
 80099ea:	4b05      	ldr	r3, [pc, #20]	@ (8009a00 <HAL_UART_Init+0x80>)
 80099ec:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 80099f0:	e7f6      	b.n	80099e0 <HAL_UART_Init+0x60>
    UART_AdvFeatureConfig(huart);
 80099f2:	4620      	mov	r0, r4
 80099f4:	f7ff fe56 	bl	80096a4 <UART_AdvFeatureConfig>
 80099f8:	e7d8      	b.n	80099ac <HAL_UART_Init+0x2c>
    return HAL_ERROR;
 80099fa:	2001      	movs	r0, #1
}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	08002fdd 	.word	0x08002fdd

08009a04 <UART_Start_Receive_IT>:
{
 8009a04:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8009a06:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8009a08:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8009a0c:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8009a10:	2300      	movs	r3, #0
 8009a12:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8009a14:	6883      	ldr	r3, [r0, #8]
 8009a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a1a:	d006      	beq.n	8009a2a <UART_Start_Receive_IT+0x26>
 8009a1c:	b9a3      	cbnz	r3, 8009a48 <UART_Start_Receive_IT+0x44>
 8009a1e:	6903      	ldr	r3, [r0, #16]
 8009a20:	b973      	cbnz	r3, 8009a40 <UART_Start_Receive_IT+0x3c>
 8009a22:	23ff      	movs	r3, #255	@ 0xff
 8009a24:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8009a28:	e014      	b.n	8009a54 <UART_Start_Receive_IT+0x50>
 8009a2a:	6903      	ldr	r3, [r0, #16]
 8009a2c:	b923      	cbnz	r3, 8009a38 <UART_Start_Receive_IT+0x34>
 8009a2e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8009a32:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8009a36:	e00d      	b.n	8009a54 <UART_Start_Receive_IT+0x50>
 8009a38:	23ff      	movs	r3, #255	@ 0xff
 8009a3a:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8009a3e:	e009      	b.n	8009a54 <UART_Start_Receive_IT+0x50>
 8009a40:	237f      	movs	r3, #127	@ 0x7f
 8009a42:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8009a46:	e005      	b.n	8009a54 <UART_Start_Receive_IT+0x50>
 8009a48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a4c:	d02d      	beq.n	8009aaa <UART_Start_Receive_IT+0xa6>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a54:	2300      	movs	r3, #0
 8009a56:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a5a:	2322      	movs	r3, #34	@ 0x22
 8009a5c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a60:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a62:	f101 0308 	add.w	r3, r1, #8
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	3108      	adds	r1, #8
 8009a70:	e841 3400 	strex	r4, r3, [r1]
 8009a74:	2c00      	cmp	r4, #0
 8009a76:	d1f3      	bne.n	8009a60 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009a78:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8009a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a7e:	d01e      	beq.n	8009abe <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a80:	6883      	ldr	r3, [r0, #8]
 8009a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a86:	d042      	beq.n	8009b0e <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8009a88:	4b29      	ldr	r3, [pc, #164]	@ (8009b30 <UART_Start_Receive_IT+0x12c>)
 8009a8a:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009a8c:	6903      	ldr	r3, [r0, #16]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d043      	beq.n	8009b1a <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009a92:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	e852 3f00 	ldrex	r3, [r2]
 8009a98:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	e842 3100 	strex	r1, r3, [r2]
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	d1f6      	bne.n	8009a92 <UART_Start_Receive_IT+0x8e>
}
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	bc10      	pop	{r4}
 8009aa8:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8009aaa:	6903      	ldr	r3, [r0, #16]
 8009aac:	b91b      	cbnz	r3, 8009ab6 <UART_Start_Receive_IT+0xb2>
 8009aae:	237f      	movs	r3, #127	@ 0x7f
 8009ab0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8009ab4:	e7ce      	b.n	8009a54 <UART_Start_Receive_IT+0x50>
 8009ab6:	233f      	movs	r3, #63	@ 0x3f
 8009ab8:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8009abc:	e7ca      	b.n	8009a54 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009abe:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d8dc      	bhi.n	8009a80 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ac6:	6883      	ldr	r3, [r0, #8]
 8009ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009acc:	d019      	beq.n	8009b02 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009ace:	4b19      	ldr	r3, [pc, #100]	@ (8009b34 <UART_Start_Receive_IT+0x130>)
 8009ad0:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009ad2:	6903      	ldr	r3, [r0, #16]
 8009ad4:	b143      	cbz	r3, 8009ae8 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ad6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad8:	e852 3f00 	ldrex	r3, [r2]
 8009adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	e842 3100 	strex	r1, r3, [r2]
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	d1f6      	bne.n	8009ad6 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ae8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aea:	f102 0308 	add.w	r3, r2, #8
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	3208      	adds	r2, #8
 8009af8:	e842 3100 	strex	r1, r3, [r2]
 8009afc:	2900      	cmp	r1, #0
 8009afe:	d1f3      	bne.n	8009ae8 <UART_Start_Receive_IT+0xe4>
 8009b00:	e7d0      	b.n	8009aa4 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b02:	6903      	ldr	r3, [r0, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e2      	bne.n	8009ace <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009b08:	4b0b      	ldr	r3, [pc, #44]	@ (8009b38 <UART_Start_Receive_IT+0x134>)
 8009b0a:	6743      	str	r3, [r0, #116]	@ 0x74
 8009b0c:	e7e1      	b.n	8009ad2 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b0e:	6903      	ldr	r3, [r0, #16]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1b9      	bne.n	8009a88 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8009b14:	4b09      	ldr	r3, [pc, #36]	@ (8009b3c <UART_Start_Receive_IT+0x138>)
 8009b16:	6743      	str	r3, [r0, #116]	@ 0x74
 8009b18:	e7b8      	b.n	8009a8c <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b1a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1c:	e852 3f00 	ldrex	r3, [r2]
 8009b20:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	e842 3100 	strex	r1, r3, [r2]
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	d1f6      	bne.n	8009b1a <UART_Start_Receive_IT+0x116>
 8009b2c:	e7ba      	b.n	8009aa4 <UART_Start_Receive_IT+0xa0>
 8009b2e:	bf00      	nop
 8009b30:	08008a15 	.word	0x08008a15
 8009b34:	08008bd1 	.word	0x08008bd1
 8009b38:	08008d9d 	.word	0x08008d9d
 8009b3c:	08008af5 	.word	0x08008af5

08009b40 <HAL_UART_Receive_IT>:
{
 8009b40:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8009b42:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8009b46:	2b20      	cmp	r3, #32
 8009b48:	d117      	bne.n	8009b7a <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8009b4a:	b1c1      	cbz	r1, 8009b7e <HAL_UART_Receive_IT+0x3e>
 8009b4c:	b1ca      	cbz	r2, 8009b82 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009b52:	6803      	ldr	r3, [r0, #0]
 8009b54:	4c0c      	ldr	r4, [pc, #48]	@ (8009b88 <HAL_UART_Receive_IT+0x48>)
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	d00c      	beq.n	8009b74 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8009b60:	d008      	beq.n	8009b74 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b62:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	e854 3f00 	ldrex	r3, [r4]
 8009b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6c:	e844 3500 	strex	r5, r3, [r4]
 8009b70:	2d00      	cmp	r5, #0
 8009b72:	d1f6      	bne.n	8009b62 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8009b74:	f7ff ff46 	bl	8009a04 <UART_Start_Receive_IT>
 8009b78:	e000      	b.n	8009b7c <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8009b7a:	2002      	movs	r0, #2
}
 8009b7c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8009b7e:	2001      	movs	r0, #1
 8009b80:	e7fc      	b.n	8009b7c <HAL_UART_Receive_IT+0x3c>
 8009b82:	2001      	movs	r0, #1
 8009b84:	e7fa      	b.n	8009b7c <HAL_UART_Receive_IT+0x3c>
 8009b86:	bf00      	nop
 8009b88:	40008000 	.word	0x40008000

08009b8c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	ab02      	add	r3, sp, #8
 8009b90:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009b94:	6802      	ldr	r2, [r0, #0]
 8009b96:	6853      	ldr	r3, [r2, #4]
 8009b98:	f023 0310 	bic.w	r3, r3, #16
 8009b9c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009ba4:	6802      	ldr	r2, [r0, #0]
 8009ba6:	6853      	ldr	r3, [r2, #4]
 8009ba8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009bac:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8009bb0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009bb4:	6053      	str	r3, [r2, #4]
}
 8009bb6:	b002      	add	sp, #8
 8009bb8:	4770      	bx	lr
	...

08009bbc <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bbc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8009bbe:	b92b      	cbnz	r3, 8009bcc <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009bc6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8009bca:	4770      	bx	lr
{
 8009bcc:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009bce:	6803      	ldr	r3, [r0, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009bd6:	6899      	ldr	r1, [r3, #8]
 8009bd8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009bda:	4d09      	ldr	r5, [pc, #36]	@ (8009c00 <UARTEx_SetNbDataToProcess+0x44>)
 8009bdc:	5c6b      	ldrb	r3, [r5, r1]
 8009bde:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009be0:	4c08      	ldr	r4, [pc, #32]	@ (8009c04 <UARTEx_SetNbDataToProcess+0x48>)
 8009be2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009be4:	fb93 f3f1 	sdiv	r3, r3, r1
 8009be8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bec:	5cab      	ldrb	r3, [r5, r2]
 8009bee:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009bf0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009bf2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bf6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8009bfa:	bc30      	pop	{r4, r5}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	08011bcc 	.word	0x08011bcc
 8009c04:	08011bc4 	.word	0x08011bc4

08009c08 <HAL_UARTEx_WakeupCallback>:
}
 8009c08:	4770      	bx	lr

08009c0a <HAL_UARTEx_RxFifoFullCallback>:
}
 8009c0a:	4770      	bx	lr

08009c0c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8009c0c:	4770      	bx	lr

08009c0e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	b084      	sub	sp, #16
 8009c12:	ab04      	add	r3, sp, #16
 8009c14:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8009c18:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d035      	beq.n	8009c8c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8009c20:	4604      	mov	r4, r0
 8009c22:	2301      	movs	r3, #1
 8009c24:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009c28:	2324      	movs	r3, #36	@ 0x24
 8009c2a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8009c2e:	6802      	ldr	r2, [r0, #0]
 8009c30:	6813      	ldr	r3, [r2, #0]
 8009c32:	f023 0301 	bic.w	r3, r3, #1
 8009c36:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009c38:	6801      	ldr	r1, [r0, #0]
 8009c3a:	688b      	ldr	r3, [r1, #8]
 8009c3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009c40:	9a02      	ldr	r2, [sp, #8]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009c46:	b1aa      	cbz	r2, 8009c74 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8009c48:	6822      	ldr	r2, [r4, #0]
 8009c4a:	6813      	ldr	r3, [r2, #0]
 8009c4c:	f043 0301 	orr.w	r3, r3, #1
 8009c50:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8009c52:	f7f8 ff2d 	bl	8002ab0 <HAL_GetTick>
 8009c56:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c58:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 8009c5c:	9200      	str	r2, [sp, #0]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c64:	4620      	mov	r0, r4
 8009c66:	f7ff fd82 	bl	800976e <UART_WaitOnFlagUntilTimeout>
 8009c6a:	b948      	cbnz	r0, 8009c80 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8009c6c:	2320      	movs	r3, #32
 8009c6e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8009c72:	e006      	b.n	8009c82 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009c74:	ab04      	add	r3, sp, #16
 8009c76:	e913 0006 	ldmdb	r3, {r1, r2}
 8009c7a:	f7ff ff87 	bl	8009b8c <UARTEx_Wakeup_AddressConfig>
 8009c7e:	e7e3      	b.n	8009c48 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8009c80:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8009c82:	2300      	movs	r3, #0
 8009c84:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8009c88:	b004      	add	sp, #16
 8009c8a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8009c8c:	2002      	movs	r0, #2
 8009c8e:	e7fb      	b.n	8009c88 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08009c90 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8009c90:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d010      	beq.n	8009cba <HAL_UARTEx_EnableStopMode+0x2a>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009c9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca0:	e852 3f00 	ldrex	r3, [r2]
 8009ca4:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	e842 3100 	strex	r1, r3, [r2]
 8009cac:	2900      	cmp	r1, #0
 8009cae:	d1f6      	bne.n	8009c9e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009cba:	2002      	movs	r0, #2
}
 8009cbc:	4770      	bx	lr

08009cbe <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8009cbe:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d018      	beq.n	8009cf8 <HAL_UARTEx_DisableFifoMode+0x3a>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009ccc:	2324      	movs	r3, #36	@ 0x24
 8009cce:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cd2:	6803      	ldr	r3, [r0, #0]
 8009cd4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009cd6:	6819      	ldr	r1, [r3, #0]
 8009cd8:	f021 0101 	bic.w	r1, r1, #1
 8009cdc:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cde:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ce6:	6801      	ldr	r1, [r0, #0]
 8009ce8:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009cf0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009cf8:	2002      	movs	r0, #2
}
 8009cfa:	4770      	bx	lr

08009cfc <HAL_UARTEx_SetTxFifoThreshold>:
{
 8009cfc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009cfe:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d01d      	beq.n	8009d42 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8009d06:	4604      	mov	r4, r0
 8009d08:	2301      	movs	r3, #1
 8009d0a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009d0e:	2324      	movs	r3, #36	@ 0x24
 8009d10:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d14:	6803      	ldr	r3, [r0, #0]
 8009d16:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	f022 0201 	bic.w	r2, r2, #1
 8009d1e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d20:	6802      	ldr	r2, [r0, #0]
 8009d22:	6893      	ldr	r3, [r2, #8]
 8009d24:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8009d28:	4319      	orrs	r1, r3
 8009d2a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009d2c:	f7ff ff46 	bl	8009bbc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009d34:	2320      	movs	r3, #32
 8009d36:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8009d40:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009d42:	2002      	movs	r0, #2
 8009d44:	e7fc      	b.n	8009d40 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08009d46 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009d46:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009d48:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d01d      	beq.n	8009d8c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8009d50:	4604      	mov	r4, r0
 8009d52:	2301      	movs	r3, #1
 8009d54:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009d58:	2324      	movs	r3, #36	@ 0x24
 8009d5a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d5e:	6803      	ldr	r3, [r0, #0]
 8009d60:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	f022 0201 	bic.w	r2, r2, #1
 8009d68:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d6a:	6802      	ldr	r2, [r0, #0]
 8009d6c:	6893      	ldr	r3, [r2, #8]
 8009d6e:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8009d72:	4319      	orrs	r1, r3
 8009d74:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009d76:	f7ff ff21 	bl	8009bbc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009d7e:	2320      	movs	r3, #32
 8009d80:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8009d84:	2000      	movs	r0, #0
 8009d86:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8009d8a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009d8c:	2002      	movs	r0, #2
 8009d8e:	e7fc      	b.n	8009d8a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08009d90 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8009d90:	b508      	push	{r3, lr}
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8009d92:	4906      	ldr	r1, [pc, #24]	@ (8009dac <MX_FATFS_Init+0x1c>)
 8009d94:	4806      	ldr	r0, [pc, #24]	@ (8009db0 <MX_FATFS_Init+0x20>)
 8009d96:	f000 fbd3 	bl	800a540 <FATFS_LinkDriver>
 8009d9a:	b918      	cbnz	r0, 8009da4 <MX_FATFS_Init+0x14>
  {
    return APP_ERROR;
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 8009d9c:	4b05      	ldr	r3, [pc, #20]	@ (8009db4 <MX_FATFS_Init+0x24>)
 8009d9e:	2201      	movs	r2, #1
 8009da0:	701a      	strb	r2, [r3, #0]
    return APP_OK;
  }
  /* USER CODE END FATFS_Init */
}
 8009da2:	bd08      	pop	{r3, pc}
    return APP_ERROR;
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	e7fb      	b.n	8009da2 <MX_FATFS_Init+0x12>
 8009daa:	bf00      	nop
 8009dac:	20000810 	.word	0x20000810
 8009db0:	20000068 	.word	0x20000068
 8009db4:	2000080c 	.word	0x2000080c

08009db8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009db8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 8009dba:	f000 f925 	bl	800a008 <USER_SPI_initialize>
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 8009dbe:	bd08      	pop	{r3, pc}

08009dc0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009dc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 8009dc2:	f000 f9d9 	bl	800a178 <USER_SPI_status>
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 8009dc6:	bd08      	pop	{r3, pc}

08009dc8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009dc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 8009dca:	f000 f9df 	bl	800a18c <USER_SPI_read>
	//    return RES_OK;
  /* USER CODE END READ */
}
 8009dce:	bd08      	pop	{r3, pc}

08009dd0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009dd0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 8009dd2:	f000 fa21 	bl	800a218 <USER_SPI_write>
	//    return RES_OK;
  /* USER CODE END WRITE */
}
 8009dd6:	bd08      	pop	{r3, pc}

08009dd8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009dd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 8009dda:	f000 fa75 	bl	800a2c8 <USER_SPI_ioctl>
	//    DRESULT res = RES_ERROR;
	//    return res;
  /* USER CODE END IOCTL */
}
 8009dde:	bd08      	pop	{r3, pc}

08009de0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8009de0:	b500      	push	{lr}
 8009de2:	b087      	sub	sp, #28
 8009de4:	f88d 000f 	strb.w	r0, [sp, #15]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009de8:	2332      	movs	r3, #50	@ 0x32
 8009dea:	9300      	str	r3, [sp, #0]
 8009dec:	2301      	movs	r3, #1
 8009dee:	f10d 0217 	add.w	r2, sp, #23
 8009df2:	f10d 010f 	add.w	r1, sp, #15
 8009df6:	4804      	ldr	r0, [pc, #16]	@ (8009e08 <xchg_spi+0x28>)
 8009df8:	f7fd fdac 	bl	8007954 <HAL_SPI_TransmitReceive>
    return rxDat;
}
 8009dfc:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8009e00:	b007      	add	sp, #28
 8009e02:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e06:	bf00      	nop
 8009e08:	200004e8 	.word	0x200004e8

08009e0c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	4606      	mov	r6, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009e10:	f7f8 fe4e 	bl	8002ab0 <HAL_GetTick>
 8009e14:	4605      	mov	r5, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
	do {
		d = xchg_spi(0xFF);
 8009e16:	20ff      	movs	r0, #255	@ 0xff
 8009e18:	f7ff ffe2 	bl	8009de0 <xchg_spi>
 8009e1c:	4604      	mov	r4, r0
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009e1e:	28ff      	cmp	r0, #255	@ 0xff
 8009e20:	d004      	beq.n	8009e2c <wait_ready+0x20>
 8009e22:	f7f8 fe45 	bl	8002ab0 <HAL_GetTick>
 8009e26:	1b40      	subs	r0, r0, r5
 8009e28:	42b0      	cmp	r0, r6
 8009e2a:	d3f4      	bcc.n	8009e16 <wait_ready+0xa>

	return (d == 0xFF) ? 1 : 0;
}
 8009e2c:	2cff      	cmp	r4, #255	@ 0xff
 8009e2e:	bf14      	ite	ne
 8009e30:	2000      	movne	r0, #0
 8009e32:	2001      	moveq	r0, #1
 8009e34:	bd70      	pop	{r4, r5, r6, pc}

08009e36 <rcvr_spi_multi>:
{
 8009e36:	b570      	push	{r4, r5, r6, lr}
 8009e38:	4606      	mov	r6, r0
 8009e3a:	460d      	mov	r5, r1
	for(UINT i=0; i<btr; i++) {
 8009e3c:	2400      	movs	r4, #0
 8009e3e:	e004      	b.n	8009e4a <rcvr_spi_multi+0x14>
		*(buff+i) = xchg_spi(0xFF);
 8009e40:	20ff      	movs	r0, #255	@ 0xff
 8009e42:	f7ff ffcd 	bl	8009de0 <xchg_spi>
 8009e46:	5530      	strb	r0, [r6, r4]
	for(UINT i=0; i<btr; i++) {
 8009e48:	3401      	adds	r4, #1
 8009e4a:	42ac      	cmp	r4, r5
 8009e4c:	d3f8      	bcc.n	8009e40 <rcvr_spi_multi+0xa>
}
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}

08009e50 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8009e50:	b508      	push	{r3, lr}
	CS_HIGH();		/* Set CS# high */
 8009e52:	2201      	movs	r2, #1
 8009e54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009e58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009e5c:	f7fb faf7 	bl	800544e <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8009e60:	20ff      	movs	r0, #255	@ 0xff
 8009e62:	f7ff ffbd 	bl	8009de0 <xchg_spi>

}
 8009e66:	bd08      	pop	{r3, pc}

08009e68 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009e68:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009e70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009e74:	f7fb faeb 	bl	800544e <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009e78:	20ff      	movs	r0, #255	@ 0xff
 8009e7a:	f7ff ffb1 	bl	8009de0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8009e7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009e82:	f7ff ffc3 	bl	8009e0c <wait_ready>
 8009e86:	b110      	cbz	r0, 8009e8e <spiselect+0x26>
 8009e88:	2401      	movs	r4, #1

	despiselect();
	return 0;	/* Timeout */
}
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	bd10      	pop	{r4, pc}
 8009e8e:	4604      	mov	r4, r0
	despiselect();
 8009e90:	f7ff ffde 	bl	8009e50 <despiselect>
	return 0;	/* Timeout */
 8009e94:	e7f9      	b.n	8009e8a <spiselect+0x22>

08009e96 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8009e96:	b538      	push	{r3, r4, r5, lr}
 8009e98:	4604      	mov	r4, r0
 8009e9a:	460d      	mov	r5, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8009e9c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8009ea0:	d11d      	bne.n	8009ede <send_cmd+0x48>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009ea2:	2c0c      	cmp	r4, #12
 8009ea4:	d004      	beq.n	8009eb0 <send_cmd+0x1a>
		despiselect();
 8009ea6:	f7ff ffd3 	bl	8009e50 <despiselect>
		if (!spiselect()) return 0xFF;
 8009eaa:	f7ff ffdd 	bl	8009e68 <spiselect>
 8009eae:	b3b0      	cbz	r0, 8009f1e <send_cmd+0x88>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009eb0:	f044 0040 	orr.w	r0, r4, #64	@ 0x40
 8009eb4:	f7ff ff94 	bl	8009de0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009eb8:	0e28      	lsrs	r0, r5, #24
 8009eba:	f7ff ff91 	bl	8009de0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009ebe:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8009ec2:	f7ff ff8d 	bl	8009de0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8009ec6:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8009eca:	f7ff ff89 	bl	8009de0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8009ece:	b2e8      	uxtb	r0, r5
 8009ed0:	f7ff ff86 	bl	8009de0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009ed4:	b164      	cbz	r4, 8009ef0 <send_cmd+0x5a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009ed6:	2c08      	cmp	r4, #8
 8009ed8:	d01b      	beq.n	8009f12 <send_cmd+0x7c>
	n = 0x01;							/* Dummy CRC + Stop */
 8009eda:	2001      	movs	r0, #1
 8009edc:	e009      	b.n	8009ef2 <send_cmd+0x5c>
		cmd &= 0x7F;
 8009ede:	f000 047f 	and.w	r4, r0, #127	@ 0x7f
		res = send_cmd(CMD55, 0);
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	2037      	movs	r0, #55	@ 0x37
 8009ee6:	f7ff ffd6 	bl	8009e96 <send_cmd>
		if (res > 1) return res;
 8009eea:	2801      	cmp	r0, #1
 8009eec:	d9d9      	bls.n	8009ea2 <send_cmd+0xc>
 8009eee:	e00f      	b.n	8009f10 <send_cmd+0x7a>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009ef0:	2095      	movs	r0, #149	@ 0x95
	xchg_spi(n);
 8009ef2:	f7ff ff75 	bl	8009de0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009ef6:	2c0c      	cmp	r4, #12
 8009ef8:	d00d      	beq.n	8009f16 <send_cmd+0x80>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009efa:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 8009efc:	20ff      	movs	r0, #255	@ 0xff
 8009efe:	f7ff ff6f 	bl	8009de0 <xchg_spi>
	} while ((res & 0x80) && --n);
 8009f02:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8009f06:	d003      	beq.n	8009f10 <send_cmd+0x7a>
 8009f08:	1e63      	subs	r3, r4, #1
 8009f0a:	f013 04ff 	ands.w	r4, r3, #255	@ 0xff
 8009f0e:	d1f5      	bne.n	8009efc <send_cmd+0x66>

	return res;							/* Return received response */
}
 8009f10:	bd38      	pop	{r3, r4, r5, pc}
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009f12:	2087      	movs	r0, #135	@ 0x87
 8009f14:	e7ed      	b.n	8009ef2 <send_cmd+0x5c>
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009f16:	20ff      	movs	r0, #255	@ 0xff
 8009f18:	f7ff ff62 	bl	8009de0 <xchg_spi>
 8009f1c:	e7ed      	b.n	8009efa <send_cmd+0x64>
		if (!spiselect()) return 0xFF;
 8009f1e:	20ff      	movs	r0, #255	@ 0xff
 8009f20:	e7f6      	b.n	8009f10 <send_cmd+0x7a>
	...

08009f24 <xmit_spi_multi>:
{
 8009f24:	b508      	push	{r3, lr}
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8009f26:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2a:	b28a      	uxth	r2, r1
 8009f2c:	4601      	mov	r1, r0
 8009f2e:	4802      	ldr	r0, [pc, #8]	@ (8009f38 <xmit_spi_multi+0x14>)
 8009f30:	f7fd fbf6 	bl	8007720 <HAL_SPI_Transmit>
}
 8009f34:	bd08      	pop	{r3, pc}
 8009f36:	bf00      	nop
 8009f38:	200004e8 	.word	0x200004e8

08009f3c <xmit_datablock>:
{
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4605      	mov	r5, r0
 8009f40:	460c      	mov	r4, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009f42:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009f46:	f7ff ff61 	bl	8009e0c <wait_ready>
 8009f4a:	b900      	cbnz	r0, 8009f4e <xmit_datablock+0x12>
}
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
	xchg_spi(token);					/* Send token */
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f7ff ff46 	bl	8009de0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009f54:	2cfd      	cmp	r4, #253	@ 0xfd
 8009f56:	d101      	bne.n	8009f5c <xmit_datablock+0x20>
	return 1;
 8009f58:	2001      	movs	r0, #1
 8009f5a:	e7f7      	b.n	8009f4c <xmit_datablock+0x10>
		xmit_spi_multi(buff, 512);		/* Data */
 8009f5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f60:	4628      	mov	r0, r5
 8009f62:	f7ff ffdf 	bl	8009f24 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009f66:	20ff      	movs	r0, #255	@ 0xff
 8009f68:	f7ff ff3a 	bl	8009de0 <xchg_spi>
 8009f6c:	20ff      	movs	r0, #255	@ 0xff
 8009f6e:	f7ff ff37 	bl	8009de0 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 8009f72:	20ff      	movs	r0, #255	@ 0xff
 8009f74:	f7ff ff34 	bl	8009de0 <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009f78:	f000 001f 	and.w	r0, r0, #31
 8009f7c:	2805      	cmp	r0, #5
 8009f7e:	d101      	bne.n	8009f84 <xmit_datablock+0x48>
	return 1;
 8009f80:	2001      	movs	r0, #1
 8009f82:	e7e3      	b.n	8009f4c <xmit_datablock+0x10>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8009f84:	2000      	movs	r0, #0
 8009f86:	e7e1      	b.n	8009f4c <xmit_datablock+0x10>

08009f88 <SPI_Timer_On>:
void SPI_Timer_On(uint32_t waitTicks) {
 8009f88:	b510      	push	{r4, lr}
 8009f8a:	4604      	mov	r4, r0
    spiTimerTickStart = HAL_GetTick();
 8009f8c:	f7f8 fd90 	bl	8002ab0 <HAL_GetTick>
 8009f90:	4b02      	ldr	r3, [pc, #8]	@ (8009f9c <SPI_Timer_On+0x14>)
 8009f92:	6018      	str	r0, [r3, #0]
    spiTimerTickDelay = waitTicks;
 8009f94:	4b02      	ldr	r3, [pc, #8]	@ (8009fa0 <SPI_Timer_On+0x18>)
 8009f96:	601c      	str	r4, [r3, #0]
}
 8009f98:	bd10      	pop	{r4, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20000818 	.word	0x20000818
 8009fa0:	20000814 	.word	0x20000814

08009fa4 <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 8009fa4:	b508      	push	{r3, lr}
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8009fa6:	f7f8 fd83 	bl	8002ab0 <HAL_GetTick>
 8009faa:	4b05      	ldr	r3, [pc, #20]	@ (8009fc0 <SPI_Timer_Status+0x1c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	1ac0      	subs	r0, r0, r3
 8009fb0:	4b04      	ldr	r3, [pc, #16]	@ (8009fc4 <SPI_Timer_Status+0x20>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
}
 8009fb4:	4298      	cmp	r0, r3
 8009fb6:	bf2c      	ite	cs
 8009fb8:	2000      	movcs	r0, #0
 8009fba:	2001      	movcc	r0, #1
 8009fbc:	bd08      	pop	{r3, pc}
 8009fbe:	bf00      	nop
 8009fc0:	20000818 	.word	0x20000818
 8009fc4:	20000814 	.word	0x20000814

08009fc8 <rcvr_datablock>:
{
 8009fc8:	b570      	push	{r4, r5, r6, lr}
 8009fca:	4605      	mov	r5, r0
 8009fcc:	460e      	mov	r6, r1
	SPI_Timer_On(200);
 8009fce:	20c8      	movs	r0, #200	@ 0xc8
 8009fd0:	f7ff ffda 	bl	8009f88 <SPI_Timer_On>
		token = xchg_spi(0xFF);
 8009fd4:	20ff      	movs	r0, #255	@ 0xff
 8009fd6:	f7ff ff03 	bl	8009de0 <xchg_spi>
 8009fda:	4604      	mov	r4, r0
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009fdc:	28ff      	cmp	r0, #255	@ 0xff
 8009fde:	d103      	bne.n	8009fe8 <rcvr_datablock+0x20>
 8009fe0:	f7ff ffe0 	bl	8009fa4 <SPI_Timer_Status>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d1f5      	bne.n	8009fd4 <rcvr_datablock+0xc>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009fe8:	2cfe      	cmp	r4, #254	@ 0xfe
 8009fea:	d001      	beq.n	8009ff0 <rcvr_datablock+0x28>
 8009fec:	2000      	movs	r0, #0
}
 8009fee:	bd70      	pop	{r4, r5, r6, pc}
	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8009ff0:	4631      	mov	r1, r6
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f7ff ff1f 	bl	8009e36 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009ff8:	20ff      	movs	r0, #255	@ 0xff
 8009ffa:	f7ff fef1 	bl	8009de0 <xchg_spi>
 8009ffe:	20ff      	movs	r0, #255	@ 0xff
 800a000:	f7ff feee 	bl	8009de0 <xchg_spi>
	return 1;						/* Function succeeded */
 800a004:	2001      	movs	r0, #1
 800a006:	e7f2      	b.n	8009fee <rcvr_datablock+0x26>

0800a008 <USER_SPI_initialize>:
	BYTE drv		/* Physical drive number (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a008:	2800      	cmp	r0, #0
 800a00a:	f040 80ad 	bne.w	800a168 <USER_SPI_initialize+0x160>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a00e:	4b57      	ldr	r3, [pc, #348]	@ (800a16c <USER_SPI_initialize+0x164>)
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	f013 0f02 	tst.w	r3, #2
 800a016:	d10b      	bne.n	800a030 <USER_SPI_initialize+0x28>
{
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	b082      	sub	sp, #8

	FCLK_SLOW();
 800a01c:	4b54      	ldr	r3, [pc, #336]	@ (800a170 <USER_SPI_initialize+0x168>)
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	6813      	ldr	r3, [r2, #0]
 800a022:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a026:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800a02a:	6013      	str	r3, [r2, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a02c:	240a      	movs	r4, #10
 800a02e:	e008      	b.n	800a042 <USER_SPI_initialize+0x3a>
	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800a030:	4b4e      	ldr	r3, [pc, #312]	@ (800a16c <USER_SPI_initialize+0x164>)
 800a032:	7818      	ldrb	r0, [r3, #0]
 800a034:	b2c0      	uxtb	r0, r0
 800a036:	4770      	bx	lr
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800a038:	20ff      	movs	r0, #255	@ 0xff
 800a03a:	f7ff fed1 	bl	8009de0 <xchg_spi>
 800a03e:	3c01      	subs	r4, #1
 800a040:	b2e4      	uxtb	r4, r4
 800a042:	2c00      	cmp	r4, #0
 800a044:	d1f8      	bne.n	800a038 <USER_SPI_initialize+0x30>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800a046:	2100      	movs	r1, #0
 800a048:	4608      	mov	r0, r1
 800a04a:	f7ff ff24 	bl	8009e96 <send_cmd>
 800a04e:	4605      	mov	r5, r0
 800a050:	2801      	cmp	r0, #1
 800a052:	d017      	beq.n	800a084 <USER_SPI_initialize+0x7c>
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
				ty = 0;
		}
	}
	CardType = ty;	/* Card type */
 800a054:	4b47      	ldr	r3, [pc, #284]	@ (800a174 <USER_SPI_initialize+0x16c>)
 800a056:	701c      	strb	r4, [r3, #0]
	despiselect();
 800a058:	f7ff fefa 	bl	8009e50 <despiselect>

	if (ty) {			/* OK */
 800a05c:	2c00      	cmp	r4, #0
 800a05e:	d07f      	beq.n	800a160 <USER_SPI_initialize+0x158>
		FCLK_FAST();			/* Set fast clock */
 800a060:	4b43      	ldr	r3, [pc, #268]	@ (800a170 <USER_SPI_initialize+0x168>)
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	6813      	ldr	r3, [r2, #0]
 800a066:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a06a:	f043 0310 	orr.w	r3, r3, #16
 800a06e:	6013      	str	r3, [r2, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800a070:	4a3e      	ldr	r2, [pc, #248]	@ (800a16c <USER_SPI_initialize+0x164>)
 800a072:	7813      	ldrb	r3, [r2, #0]
 800a074:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800a078:	7013      	strb	r3, [r2, #0]
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 800a07a:	4b3c      	ldr	r3, [pc, #240]	@ (800a16c <USER_SPI_initialize+0x164>)
 800a07c:	7818      	ldrb	r0, [r3, #0]
 800a07e:	b2c0      	uxtb	r0, r0
}
 800a080:	b002      	add	sp, #8
 800a082:	bd70      	pop	{r4, r5, r6, pc}
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800a084:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a088:	f7ff ff7e 	bl	8009f88 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800a08c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800a090:	2008      	movs	r0, #8
 800a092:	f7ff ff00 	bl	8009e96 <send_cmd>
 800a096:	2801      	cmp	r0, #1
 800a098:	d13e      	bne.n	800a118 <USER_SPI_initialize+0x110>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800a09a:	4625      	mov	r5, r4
 800a09c:	e009      	b.n	800a0b2 <USER_SPI_initialize+0xaa>
 800a09e:	20ff      	movs	r0, #255	@ 0xff
 800a0a0:	f7ff fe9e 	bl	8009de0 <xchg_spi>
 800a0a4:	f105 0308 	add.w	r3, r5, #8
 800a0a8:	446b      	add	r3, sp
 800a0aa:	f803 0c04 	strb.w	r0, [r3, #-4]
 800a0ae:	3501      	adds	r5, #1
 800a0b0:	b2ed      	uxtb	r5, r5
 800a0b2:	2d03      	cmp	r5, #3
 800a0b4:	d9f3      	bls.n	800a09e <USER_SPI_initialize+0x96>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800a0b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d1ca      	bne.n	800a054 <USER_SPI_initialize+0x4c>
 800a0be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a0c2:	2baa      	cmp	r3, #170	@ 0xaa
 800a0c4:	d1c6      	bne.n	800a054 <USER_SPI_initialize+0x4c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800a0c6:	f7ff ff6d 	bl	8009fa4 <SPI_Timer_Status>
 800a0ca:	b130      	cbz	r0, 800a0da <USER_SPI_initialize+0xd2>
 800a0cc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800a0d0:	20a9      	movs	r0, #169	@ 0xa9
 800a0d2:	f7ff fee0 	bl	8009e96 <send_cmd>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d1f5      	bne.n	800a0c6 <USER_SPI_initialize+0xbe>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a0da:	f7ff ff63 	bl	8009fa4 <SPI_Timer_Status>
 800a0de:	b908      	cbnz	r0, 800a0e4 <USER_SPI_initialize+0xdc>
	ty = 0;
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	e7b7      	b.n	800a054 <USER_SPI_initialize+0x4c>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	203a      	movs	r0, #58	@ 0x3a
 800a0e8:	f7ff fed5 	bl	8009e96 <send_cmd>
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	b150      	cbz	r0, 800a106 <USER_SPI_initialize+0xfe>
 800a0f0:	e7b0      	b.n	800a054 <USER_SPI_initialize+0x4c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800a0f2:	20ff      	movs	r0, #255	@ 0xff
 800a0f4:	f7ff fe74 	bl	8009de0 <xchg_spi>
 800a0f8:	f105 0308 	add.w	r3, r5, #8
 800a0fc:	446b      	add	r3, sp
 800a0fe:	f803 0c04 	strb.w	r0, [r3, #-4]
 800a102:	3501      	adds	r5, #1
 800a104:	b2ed      	uxtb	r5, r5
 800a106:	2d03      	cmp	r5, #3
 800a108:	d9f3      	bls.n	800a0f2 <USER_SPI_initialize+0xea>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a10a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a10e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a112:	d023      	beq.n	800a15c <USER_SPI_initialize+0x154>
 800a114:	240c      	movs	r4, #12
 800a116:	e79d      	b.n	800a054 <USER_SPI_initialize+0x4c>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800a118:	2100      	movs	r1, #0
 800a11a:	20a9      	movs	r0, #169	@ 0xa9
 800a11c:	f7ff febb 	bl	8009e96 <send_cmd>
 800a120:	2801      	cmp	r0, #1
 800a122:	d90e      	bls.n	800a142 <USER_SPI_initialize+0x13a>
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800a124:	462e      	mov	r6, r5
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800a126:	f7ff ff3d 	bl	8009fa4 <SPI_Timer_Status>
 800a12a:	b128      	cbz	r0, 800a138 <USER_SPI_initialize+0x130>
 800a12c:	2100      	movs	r1, #0
 800a12e:	4628      	mov	r0, r5
 800a130:	f7ff feb1 	bl	8009e96 <send_cmd>
 800a134:	2800      	cmp	r0, #0
 800a136:	d1f6      	bne.n	800a126 <USER_SPI_initialize+0x11e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a138:	f7ff ff34 	bl	8009fa4 <SPI_Timer_Status>
 800a13c:	b920      	cbnz	r0, 800a148 <USER_SPI_initialize+0x140>
				ty = 0;
 800a13e:	4604      	mov	r4, r0
 800a140:	e788      	b.n	800a054 <USER_SPI_initialize+0x4c>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800a142:	2602      	movs	r6, #2
 800a144:	25a9      	movs	r5, #169	@ 0xa9
 800a146:	e7ee      	b.n	800a126 <USER_SPI_initialize+0x11e>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800a148:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a14c:	2010      	movs	r0, #16
 800a14e:	f7ff fea2 	bl	8009e96 <send_cmd>
 800a152:	2800      	cmp	r0, #0
 800a154:	f47f af7e 	bne.w	800a054 <USER_SPI_initialize+0x4c>
 800a158:	4634      	mov	r4, r6
 800a15a:	e77b      	b.n	800a054 <USER_SPI_initialize+0x4c>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800a15c:	2404      	movs	r4, #4
 800a15e:	e779      	b.n	800a054 <USER_SPI_initialize+0x4c>
		Stat = STA_NOINIT;
 800a160:	4b02      	ldr	r3, [pc, #8]	@ (800a16c <USER_SPI_initialize+0x164>)
 800a162:	2201      	movs	r2, #1
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	e788      	b.n	800a07a <USER_SPI_initialize+0x72>
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800a168:	2001      	movs	r0, #1
}
 800a16a:	4770      	bx	lr
 800a16c:	2000007c 	.word	0x2000007c
 800a170:	200004e8 	.word	0x200004e8
 800a174:	2000081c 	.word	0x2000081c

0800a178 <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a178:	b918      	cbnz	r0, 800a182 <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 800a17a:	4b03      	ldr	r3, [pc, #12]	@ (800a188 <USER_SPI_status+0x10>)
 800a17c:	7818      	ldrb	r0, [r3, #0]
 800a17e:	b2c0      	uxtb	r0, r0
 800a180:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800a182:	2001      	movs	r0, #1
}
 800a184:	4770      	bx	lr
 800a186:	bf00      	nop
 800a188:	2000007c 	.word	0x2000007c

0800a18c <USER_SPI_read>:
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d139      	bne.n	800a204 <USER_SPI_read+0x78>
{
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	460d      	mov	r5, r1
 800a194:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a196:	2b00      	cmp	r3, #0
 800a198:	d036      	beq.n	800a208 <USER_SPI_read+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a19a:	4b1d      	ldr	r3, [pc, #116]	@ (800a210 <USER_SPI_read+0x84>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	f013 0f01 	tst.w	r3, #1
 800a1a2:	d133      	bne.n	800a20c <USER_SPI_read+0x80>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800a1a4:	4b1b      	ldr	r3, [pc, #108]	@ (800a214 <USER_SPI_read+0x88>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	f013 0f08 	tst.w	r3, #8
 800a1ac:	d100      	bne.n	800a1b0 <USER_SPI_read+0x24>
 800a1ae:	0252      	lsls	r2, r2, #9

	if (count == 1) {	/* Single sector read */
 800a1b0:	2c01      	cmp	r4, #1
 800a1b2:	d018      	beq.n	800a1e6 <USER_SPI_read+0x5a>
			&& rcvr_datablock(buff, 512)) {
			count = 0;
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	2012      	movs	r0, #18
 800a1b8:	f7ff fe6d 	bl	8009e96 <send_cmd>
 800a1bc:	b968      	cbnz	r0, 800a1da <USER_SPI_read+0x4e>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800a1be:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	f7ff ff00 	bl	8009fc8 <rcvr_datablock>
 800a1c8:	b118      	cbz	r0, 800a1d2 <USER_SPI_read+0x46>
				buff += 512;
 800a1ca:	f505 7500 	add.w	r5, r5, #512	@ 0x200
			} while (--count);
 800a1ce:	3c01      	subs	r4, #1
 800a1d0:	d1f5      	bne.n	800a1be <USER_SPI_read+0x32>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	200c      	movs	r0, #12
 800a1d6:	f7ff fe5e 	bl	8009e96 <send_cmd>
		}
	}
	despiselect();
 800a1da:	f7ff fe39 	bl	8009e50 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a1de:	1e20      	subs	r0, r4, #0
 800a1e0:	bf18      	it	ne
 800a1e2:	2001      	movne	r0, #1
}
 800a1e4:	bd38      	pop	{r3, r4, r5, pc}
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	2011      	movs	r0, #17
 800a1ea:	f7ff fe54 	bl	8009e96 <send_cmd>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d1f3      	bne.n	800a1da <USER_SPI_read+0x4e>
			&& rcvr_datablock(buff, 512)) {
 800a1f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f7ff fee6 	bl	8009fc8 <rcvr_datablock>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d0ec      	beq.n	800a1da <USER_SPI_read+0x4e>
			count = 0;
 800a200:	2400      	movs	r4, #0
 800a202:	e7ea      	b.n	800a1da <USER_SPI_read+0x4e>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a204:	2004      	movs	r0, #4
}
 800a206:	4770      	bx	lr
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a208:	2004      	movs	r0, #4
 800a20a:	e7eb      	b.n	800a1e4 <USER_SPI_read+0x58>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a20c:	2003      	movs	r0, #3
 800a20e:	e7e9      	b.n	800a1e4 <USER_SPI_read+0x58>
 800a210:	2000007c 	.word	0x2000007c
 800a214:	2000081c 	.word	0x2000081c

0800a218 <USER_SPI_write>:
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a218:	2800      	cmp	r0, #0
 800a21a:	d148      	bne.n	800a2ae <USER_SPI_write+0x96>
{
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	460d      	mov	r5, r1
 800a220:	4616      	mov	r6, r2
 800a222:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a224:	2b00      	cmp	r3, #0
 800a226:	d044      	beq.n	800a2b2 <USER_SPI_write+0x9a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a228:	4b25      	ldr	r3, [pc, #148]	@ (800a2c0 <USER_SPI_write+0xa8>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	f013 0f01 	tst.w	r3, #1
 800a230:	d141      	bne.n	800a2b6 <USER_SPI_write+0x9e>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a232:	4b23      	ldr	r3, [pc, #140]	@ (800a2c0 <USER_SPI_write+0xa8>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	f013 0f04 	tst.w	r3, #4
 800a23a:	d13e      	bne.n	800a2ba <USER_SPI_write+0xa2>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800a23c:	4b21      	ldr	r3, [pc, #132]	@ (800a2c4 <USER_SPI_write+0xac>)
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f013 0f08 	tst.w	r3, #8
 800a244:	d100      	bne.n	800a248 <USER_SPI_write+0x30>
 800a246:	0256      	lsls	r6, r2, #9

	if (count == 1) {	/* Single sector write */
 800a248:	2c01      	cmp	r4, #1
 800a24a:	d01b      	beq.n	800a284 <USER_SPI_write+0x6c>
			&& xmit_datablock(buff, 0xFE)) {
			count = 0;
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a24c:	f013 0f06 	tst.w	r3, #6
 800a250:	d126      	bne.n	800a2a0 <USER_SPI_write+0x88>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800a252:	4631      	mov	r1, r6
 800a254:	2019      	movs	r0, #25
 800a256:	f7ff fe1e 	bl	8009e96 <send_cmd>
 800a25a:	b968      	cbnz	r0, 800a278 <USER_SPI_write+0x60>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800a25c:	21fc      	movs	r1, #252	@ 0xfc
 800a25e:	4628      	mov	r0, r5
 800a260:	f7ff fe6c 	bl	8009f3c <xmit_datablock>
 800a264:	b118      	cbz	r0, 800a26e <USER_SPI_write+0x56>
				buff += 512;
 800a266:	f505 7500 	add.w	r5, r5, #512	@ 0x200
			} while (--count);
 800a26a:	3c01      	subs	r4, #1
 800a26c:	d1f6      	bne.n	800a25c <USER_SPI_write+0x44>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a26e:	21fd      	movs	r1, #253	@ 0xfd
 800a270:	2000      	movs	r0, #0
 800a272:	f7ff fe63 	bl	8009f3c <xmit_datablock>
 800a276:	b1c0      	cbz	r0, 800a2aa <USER_SPI_write+0x92>
		}
	}
	despiselect();
 800a278:	f7ff fdea 	bl	8009e50 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800a27c:	1e20      	subs	r0, r4, #0
 800a27e:	bf18      	it	ne
 800a280:	2001      	movne	r0, #1
}
 800a282:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800a284:	4631      	mov	r1, r6
 800a286:	2018      	movs	r0, #24
 800a288:	f7ff fe05 	bl	8009e96 <send_cmd>
 800a28c:	2800      	cmp	r0, #0
 800a28e:	d1f3      	bne.n	800a278 <USER_SPI_write+0x60>
			&& xmit_datablock(buff, 0xFE)) {
 800a290:	21fe      	movs	r1, #254	@ 0xfe
 800a292:	4628      	mov	r0, r5
 800a294:	f7ff fe52 	bl	8009f3c <xmit_datablock>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d0ed      	beq.n	800a278 <USER_SPI_write+0x60>
			count = 0;
 800a29c:	2400      	movs	r4, #0
 800a29e:	e7eb      	b.n	800a278 <USER_SPI_write+0x60>
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	2097      	movs	r0, #151	@ 0x97
 800a2a4:	f7ff fdf7 	bl	8009e96 <send_cmd>
 800a2a8:	e7d3      	b.n	800a252 <USER_SPI_write+0x3a>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800a2aa:	2401      	movs	r4, #1
 800a2ac:	e7e4      	b.n	800a278 <USER_SPI_write+0x60>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a2ae:	2004      	movs	r0, #4
}
 800a2b0:	4770      	bx	lr
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800a2b2:	2004      	movs	r0, #4
 800a2b4:	e7e5      	b.n	800a282 <USER_SPI_write+0x6a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800a2b6:	2003      	movs	r0, #3
 800a2b8:	e7e3      	b.n	800a282 <USER_SPI_write+0x6a>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800a2ba:	2002      	movs	r0, #2
 800a2bc:	e7e1      	b.n	800a282 <USER_SPI_write+0x6a>
 800a2be:	bf00      	nop
 800a2c0:	2000007c 	.word	0x2000007c
 800a2c4:	2000081c 	.word	0x2000081c

0800a2c8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	b084      	sub	sp, #16
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	f040 8104 	bne.w	800a4da <USER_SPI_ioctl+0x212>
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	4616      	mov	r6, r2
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a2d6:	4b83      	ldr	r3, [pc, #524]	@ (800a4e4 <USER_SPI_ioctl+0x21c>)
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	f013 0f01 	tst.w	r3, #1
 800a2de:	f040 80fe 	bne.w	800a4de <USER_SPI_ioctl+0x216>

	res = RES_ERROR;

	switch (cmd) {
 800a2e2:	2904      	cmp	r1, #4
 800a2e4:	f200 80ed 	bhi.w	800a4c2 <USER_SPI_ioctl+0x1fa>
 800a2e8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800a2ec:	000c0005 	.word	0x000c0005
 800a2f0:	005400eb 	.word	0x005400eb
 800a2f4:	00af      	.short	0x00af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800a2f6:	f7ff fdb7 	bl	8009e68 <spiselect>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f040 80e3 	bne.w	800a4c6 <USER_SPI_ioctl+0x1fe>
	res = RES_ERROR;
 800a300:	2401      	movs	r4, #1
 800a302:	e006      	b.n	800a312 <USER_SPI_ioctl+0x4a>
		break;

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a304:	2100      	movs	r1, #0
 800a306:	2009      	movs	r0, #9
 800a308:	f7ff fdc5 	bl	8009e96 <send_cmd>
 800a30c:	4604      	mov	r4, r0
 800a30e:	b128      	cbz	r0, 800a31c <USER_SPI_ioctl+0x54>
	res = RES_ERROR;
 800a310:	462c      	mov	r4, r5

	default:
		res = RES_PARERR;
	}

	despiselect();
 800a312:	f7ff fd9d 	bl	8009e50 <despiselect>

	return res;
}
 800a316:	4620      	mov	r0, r4
 800a318:	b004      	add	sp, #16
 800a31a:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800a31c:	2110      	movs	r1, #16
 800a31e:	4668      	mov	r0, sp
 800a320:	f7ff fe52 	bl	8009fc8 <rcvr_datablock>
 800a324:	2800      	cmp	r0, #0
 800a326:	f000 80d0 	beq.w	800a4ca <USER_SPI_ioctl+0x202>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800a32a:	f89d 3000 	ldrb.w	r3, [sp]
 800a32e:	099b      	lsrs	r3, r3, #6
 800a330:	2b01      	cmp	r3, #1
 800a332:	d01f      	beq.n	800a374 <USER_SPI_ioctl+0xac>
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800a334:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800a338:	f002 020f 	and.w	r2, r2, #15
 800a33c:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a340:	eb02 12d3 	add.w	r2, r2, r3, lsr #7
 800a344:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	f003 0306 	and.w	r3, r3, #6
 800a34e:	441a      	add	r2, r3
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800a350:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800a354:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	eb03 1391 	add.w	r3, r3, r1, lsr #6
 800a35e:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800a362:	0289      	lsls	r1, r1, #10
 800a364:	f401 6140 	and.w	r1, r1, #3072	@ 0xc00
 800a368:	440b      	add	r3, r1
 800a36a:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << (n - 9);
 800a36c:	3a07      	subs	r2, #7
 800a36e:	4093      	lsls	r3, r2
 800a370:	6033      	str	r3, [r6, #0]
 800a372:	e7ce      	b.n	800a312 <USER_SPI_ioctl+0x4a>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800a374:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a378:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800a37c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800a380:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800a384:	0412      	lsls	r2, r2, #16
 800a386:	f402 127c 	and.w	r2, r2, #4128768	@ 0x3f0000
 800a38a:	4413      	add	r3, r2
 800a38c:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << 10;
 800a38e:	029b      	lsls	r3, r3, #10
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	e7be      	b.n	800a312 <USER_SPI_ioctl+0x4a>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800a394:	4b54      	ldr	r3, [pc, #336]	@ (800a4e8 <USER_SPI_ioctl+0x220>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	f013 0f04 	tst.w	r3, #4
 800a39c:	d020      	beq.n	800a3e0 <USER_SPI_ioctl+0x118>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800a39e:	2100      	movs	r1, #0
 800a3a0:	208d      	movs	r0, #141	@ 0x8d
 800a3a2:	f7ff fd78 	bl	8009e96 <send_cmd>
 800a3a6:	b108      	cbz	r0, 800a3ac <USER_SPI_ioctl+0xe4>
	res = RES_ERROR;
 800a3a8:	2401      	movs	r4, #1
 800a3aa:	e7b2      	b.n	800a312 <USER_SPI_ioctl+0x4a>
				xchg_spi(0xFF);
 800a3ac:	20ff      	movs	r0, #255	@ 0xff
 800a3ae:	f7ff fd17 	bl	8009de0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800a3b2:	2110      	movs	r1, #16
 800a3b4:	4668      	mov	r0, sp
 800a3b6:	f7ff fe07 	bl	8009fc8 <rcvr_datablock>
 800a3ba:	b978      	cbnz	r0, 800a3dc <USER_SPI_ioctl+0x114>
	res = RES_ERROR;
 800a3bc:	2401      	movs	r4, #1
 800a3be:	e7a8      	b.n	800a312 <USER_SPI_ioctl+0x4a>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a3c0:	20ff      	movs	r0, #255	@ 0xff
 800a3c2:	f7ff fd0d 	bl	8009de0 <xchg_spi>
 800a3c6:	3c01      	subs	r4, #1
 800a3c8:	b2e4      	uxtb	r4, r4
 800a3ca:	2c00      	cmp	r4, #0
 800a3cc:	d1f8      	bne.n	800a3c0 <USER_SPI_ioctl+0xf8>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800a3ce:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800a3d2:	0912      	lsrs	r2, r2, #4
 800a3d4:	2310      	movs	r3, #16
 800a3d6:	4093      	lsls	r3, r2
 800a3d8:	6033      	str	r3, [r6, #0]
					res = RES_OK;
 800a3da:	e79a      	b.n	800a312 <USER_SPI_ioctl+0x4a>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800a3dc:	2430      	movs	r4, #48	@ 0x30
 800a3de:	e7f4      	b.n	800a3ca <USER_SPI_ioctl+0x102>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	2009      	movs	r0, #9
 800a3e4:	f7ff fd57 	bl	8009e96 <send_cmd>
 800a3e8:	4605      	mov	r5, r0
 800a3ea:	b108      	cbz	r0, 800a3f0 <USER_SPI_ioctl+0x128>
	res = RES_ERROR;
 800a3ec:	2401      	movs	r4, #1
 800a3ee:	e790      	b.n	800a312 <USER_SPI_ioctl+0x4a>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800a3f0:	2110      	movs	r1, #16
 800a3f2:	4668      	mov	r0, sp
 800a3f4:	f7ff fde8 	bl	8009fc8 <rcvr_datablock>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	d068      	beq.n	800a4ce <USER_SPI_ioctl+0x206>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800a3fc:	4b3a      	ldr	r3, [pc, #232]	@ (800a4e8 <USER_SPI_ioctl+0x220>)
 800a3fe:	781c      	ldrb	r4, [r3, #0]
 800a400:	f014 0402 	ands.w	r4, r4, #2
 800a404:	d011      	beq.n	800a42a <USER_SPI_ioctl+0x162>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800a406:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800a410:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800a414:	eb03 13d2 	add.w	r3, r3, r2, lsr #7
 800a418:	3301      	adds	r3, #1
 800a41a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800a41e:	0992      	lsrs	r2, r2, #6
 800a420:	3a01      	subs	r2, #1
 800a422:	4093      	lsls	r3, r2
 800a424:	6033      	str	r3, [r6, #0]
				res = RES_OK;
 800a426:	462c      	mov	r4, r5
 800a428:	e773      	b.n	800a312 <USER_SPI_ioctl+0x4a>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800a42a:	f89d 200a 	ldrb.w	r2, [sp, #10]
 800a42e:	f3c2 0284 	ubfx	r2, r2, #2, #5
 800a432:	f89d 100b 	ldrb.w	r1, [sp, #11]
 800a436:	00cb      	lsls	r3, r1, #3
 800a438:	f003 0318 	and.w	r3, r3, #24
 800a43c:	eb03 1351 	add.w	r3, r3, r1, lsr #5
 800a440:	3301      	adds	r3, #1
 800a442:	fb02 3303 	mla	r3, r2, r3, r3
 800a446:	6033      	str	r3, [r6, #0]
 800a448:	e763      	b.n	800a312 <USER_SPI_ioctl+0x4a>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800a44a:	4b27      	ldr	r3, [pc, #156]	@ (800a4e8 <USER_SPI_ioctl+0x220>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f013 0f06 	tst.w	r3, #6
 800a452:	d101      	bne.n	800a458 <USER_SPI_ioctl+0x190>
	res = RES_ERROR;
 800a454:	2401      	movs	r4, #1
 800a456:	e75c      	b.n	800a312 <USER_SPI_ioctl+0x4a>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800a458:	466a      	mov	r2, sp
 800a45a:	210b      	movs	r1, #11
 800a45c:	f7ff ff34 	bl	800a2c8 <USER_SPI_ioctl>
 800a460:	bbb8      	cbnz	r0, 800a4d2 <USER_SPI_ioctl+0x20a>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800a462:	f89d 3000 	ldrb.w	r3, [sp]
 800a466:	099b      	lsrs	r3, r3, #6
 800a468:	d104      	bne.n	800a474 <USER_SPI_ioctl+0x1ac>
 800a46a:	f89d 300a 	ldrb.w	r3, [sp, #10]
 800a46e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a472:	d030      	beq.n	800a4d6 <USER_SPI_ioctl+0x20e>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800a474:	6831      	ldr	r1, [r6, #0]
 800a476:	6874      	ldr	r4, [r6, #4]
		if (!(CardType & CT_BLOCK)) {
 800a478:	4b1b      	ldr	r3, [pc, #108]	@ (800a4e8 <USER_SPI_ioctl+0x220>)
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	f013 0f08 	tst.w	r3, #8
 800a480:	d101      	bne.n	800a486 <USER_SPI_ioctl+0x1be>
			st *= 512; ed *= 512;
 800a482:	0249      	lsls	r1, r1, #9
 800a484:	0264      	lsls	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a486:	2020      	movs	r0, #32
 800a488:	f7ff fd05 	bl	8009e96 <send_cmd>
 800a48c:	b108      	cbz	r0, 800a492 <USER_SPI_ioctl+0x1ca>
	res = RES_ERROR;
 800a48e:	2401      	movs	r4, #1
 800a490:	e73f      	b.n	800a312 <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a492:	4621      	mov	r1, r4
 800a494:	2021      	movs	r0, #33	@ 0x21
 800a496:	f7ff fcfe 	bl	8009e96 <send_cmd>
 800a49a:	b108      	cbz	r0, 800a4a0 <USER_SPI_ioctl+0x1d8>
	res = RES_ERROR;
 800a49c:	2401      	movs	r4, #1
 800a49e:	e738      	b.n	800a312 <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	2026      	movs	r0, #38	@ 0x26
 800a4a4:	f7ff fcf7 	bl	8009e96 <send_cmd>
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	b108      	cbz	r0, 800a4b0 <USER_SPI_ioctl+0x1e8>
	res = RES_ERROR;
 800a4ac:	2401      	movs	r4, #1
 800a4ae:	e730      	b.n	800a312 <USER_SPI_ioctl+0x4a>
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800a4b0:	f247 5030 	movw	r0, #30000	@ 0x7530
 800a4b4:	f7ff fcaa 	bl	8009e0c <wait_ready>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	f47f af2a 	bne.w	800a312 <USER_SPI_ioctl+0x4a>
	res = RES_ERROR;
 800a4be:	2401      	movs	r4, #1
 800a4c0:	e727      	b.n	800a312 <USER_SPI_ioctl+0x4a>
	switch (cmd) {
 800a4c2:	2404      	movs	r4, #4
 800a4c4:	e725      	b.n	800a312 <USER_SPI_ioctl+0x4a>
		if (spiselect()) res = RES_OK;
 800a4c6:	462c      	mov	r4, r5
 800a4c8:	e723      	b.n	800a312 <USER_SPI_ioctl+0x4a>
	res = RES_ERROR;
 800a4ca:	462c      	mov	r4, r5
 800a4cc:	e721      	b.n	800a312 <USER_SPI_ioctl+0x4a>
 800a4ce:	2401      	movs	r4, #1
 800a4d0:	e71f      	b.n	800a312 <USER_SPI_ioctl+0x4a>
 800a4d2:	2401      	movs	r4, #1
 800a4d4:	e71d      	b.n	800a312 <USER_SPI_ioctl+0x4a>
 800a4d6:	2401      	movs	r4, #1
 800a4d8:	e71b      	b.n	800a312 <USER_SPI_ioctl+0x4a>
	if (drv) return RES_PARERR;					/* Check parameter */
 800a4da:	2404      	movs	r4, #4
 800a4dc:	e71b      	b.n	800a316 <USER_SPI_ioctl+0x4e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800a4de:	2403      	movs	r4, #3
 800a4e0:	e719      	b.n	800a316 <USER_SPI_ioctl+0x4e>
 800a4e2:	bf00      	nop
 800a4e4:	2000007c 	.word	0x2000007c
 800a4e8:	2000081c 	.word	0x2000081c

0800a4ec <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800a4ec:	4b13      	ldr	r3, [pc, #76]	@ (800a53c <FATFS_LinkDriverEx+0x50>)
 800a4ee:	7a5b      	ldrb	r3, [r3, #9]
 800a4f0:	bb13      	cbnz	r3, 800a538 <FATFS_LinkDriverEx+0x4c>
{
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800a4fa:	4b10      	ldr	r3, [pc, #64]	@ (800a53c <FATFS_LinkDriverEx+0x50>)
 800a4fc:	f893 c009 	ldrb.w	ip, [r3, #9]
 800a500:	fa5f fc8c 	uxtb.w	ip, ip
 800a504:	f04f 0e00 	mov.w	lr, #0
 800a508:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800a50c:	f893 c009 	ldrb.w	ip, [r3, #9]
 800a510:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a514:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800a518:	7a5c      	ldrb	r4, [r3, #9]
 800a51a:	441c      	add	r4, r3
 800a51c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800a51e:	7a5a      	ldrb	r2, [r3, #9]
 800a520:	1c54      	adds	r4, r2, #1
 800a522:	b2e4      	uxtb	r4, r4
 800a524:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800a526:	3230      	adds	r2, #48	@ 0x30
 800a528:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800a52a:	233a      	movs	r3, #58	@ 0x3a
 800a52c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800a52e:	232f      	movs	r3, #47	@ 0x2f
 800a530:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800a532:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800a536:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800a538:	2001      	movs	r0, #1
}
 800a53a:	4770      	bx	lr
 800a53c:	20000820 	.word	0x20000820

0800a540 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a540:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800a542:	2200      	movs	r2, #0
 800a544:	f7ff ffd2 	bl	800a4ec <FATFS_LinkDriverEx>
}
 800a548:	bd08      	pop	{r3, pc}

0800a54a <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800a54a:	2001      	movs	r0, #1
 800a54c:	4770      	bx	lr
	...

0800a550 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 800a550:	280a      	cmp	r0, #10
 800a552:	d807      	bhi.n	800a564 <RadioGetLoRaBandwidthInHz+0x14>
 800a554:	e8df f000 	tbb	[pc, r0]
 800a558:	17110b20 	.word	0x17110b20
 800a55c:	061e1c1a 	.word	0x061e1c1a
 800a560:	0e08      	.short	0x0e08
 800a562:	14          	.byte	0x14
 800a563:	00          	.byte	0x00
 800a564:	2000      	movs	r0, #0
 800a566:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800a568:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 800a56c:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800a56e:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 800a572:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800a574:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 800a578:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800a57a:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 800a57e:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800a580:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 800a584:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800a586:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 800a58a:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800a58c:	4804      	ldr	r0, [pc, #16]	@ (800a5a0 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 800a58e:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800a590:	4804      	ldr	r0, [pc, #16]	@ (800a5a4 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 800a592:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800a594:	4804      	ldr	r0, [pc, #16]	@ (800a5a8 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 800a596:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 800a598:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	0001e848 	.word	0x0001e848
 800a5a4:	0003d090 	.word	0x0003d090
 800a5a8:	0007a120 	.word	0x0007a120

0800a5ac <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a5ac:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 800a5b0:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a5b2:	b953      	cbnz	r3, 800a5ca <RadioGetGfskTimeOnAirNumerator+0x1e>
 800a5b4:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 800a5b6:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a5b8:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800a5ba:	b141      	cbz	r1, 800a5ce <RadioGetGfskTimeOnAirNumerator+0x22>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	f89d 0000 	ldrb.w	r0, [sp]
 800a5c2:	4418      	add	r0, r3
}
 800a5c4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 800a5c8:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	e7f3      	b.n	800a5b6 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e7f5      	b.n	800a5be <RadioGetGfskTimeOnAirNumerator+0x12>

0800a5d2 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800a5d2:	b570      	push	{r4, r5, r6, lr}
 800a5d4:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800a5d8:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 800a5dc:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800a5de:	f1a1 0c05 	sub.w	ip, r1, #5
 800a5e2:	f1bc 0f01 	cmp.w	ip, #1
 800a5e6:	d931      	bls.n	800a64c <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800a5e8:	b918      	cbnz	r0, 800a5f2 <RadioGetLoRaTimeOnAirNumerator+0x20>
 800a5ea:	f1a1 060b 	sub.w	r6, r1, #11
 800a5ee:	2e01      	cmp	r6, #1
 800a5f0:	d934      	bls.n	800a65c <RadioGetLoRaTimeOnAirNumerator+0x8a>
 800a5f2:	2801      	cmp	r0, #1
 800a5f4:	d02e      	beq.n	800a654 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800a5f6:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a5f8:	f89d c014 	ldrb.w	ip, [sp, #20]
 800a5fc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 800a600:	b385      	cbz	r5, 800a664 <RadioGetLoRaTimeOnAirNumerator+0x92>
 800a602:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800a604:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800a606:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800a608:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 800a60c:	b364      	cbz	r4, 800a668 <RadioGetLoRaTimeOnAirNumerator+0x96>
 800a60e:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 800a612:	44f4      	add	ip, lr

    if( datarate <= 6 )
 800a614:	2906      	cmp	r1, #6
 800a616:	d904      	bls.n	800a622 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800a618:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 800a61c:	b10e      	cbz	r6, 800a622 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800a61e:	1e88      	subs	r0, r1, #2
 800a620:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800a622:	f1bc 0f00 	cmp.w	ip, #0
 800a626:	db22      	blt.n	800a66e <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800a628:	4484      	add	ip, r0
 800a62a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a62e:	fb9c fcf0 	sdiv	ip, ip, r0
 800a632:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800a636:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800a63a:	2906      	cmp	r1, #6
 800a63c:	d801      	bhi.n	800a642 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 800a63e:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800a642:	0080      	lsls	r0, r0, #2
 800a644:	3001      	adds	r0, #1
 800a646:	3902      	subs	r1, #2
}
 800a648:	4088      	lsls	r0, r1
 800a64a:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 800a64c:	2b0b      	cmp	r3, #11
 800a64e:	d8cb      	bhi.n	800a5e8 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 800a650:	230c      	movs	r3, #12
 800a652:	e7c9      	b.n	800a5e8 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800a654:	290c      	cmp	r1, #12
 800a656:	d003      	beq.n	800a660 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800a658:	2600      	movs	r6, #0
 800a65a:	e7cd      	b.n	800a5f8 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 800a65c:	2601      	movs	r6, #1
 800a65e:	e7cb      	b.n	800a5f8 <RadioGetLoRaTimeOnAirNumerator+0x26>
 800a660:	2601      	movs	r6, #1
 800a662:	e7c9      	b.n	800a5f8 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 800a664:	2000      	movs	r0, #0
 800a666:	e7cd      	b.n	800a604 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800a668:	f04f 0e14 	mov.w	lr, #20
 800a66c:	e7d1      	b.n	800a612 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 800a66e:	f04f 0c00 	mov.w	ip, #0
 800a672:	e7d9      	b.n	800a628 <RadioGetLoRaTimeOnAirNumerator+0x56>

0800a674 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800a674:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a676:	b085      	sub	sp, #20
 800a678:	460e      	mov	r6, r1
 800a67a:	4615      	mov	r5, r2
 800a67c:	4619      	mov	r1, r3
 800a67e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 800a682:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 800a686:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 800a68a:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 800a68e:	b148      	cbz	r0, 800a6a4 <RadioTimeOnAir+0x30>
 800a690:	2801      	cmp	r0, #1
 800a692:	d012      	beq.n	800a6ba <RadioTimeOnAir+0x46>
 800a694:	2501      	movs	r5, #1
 800a696:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800a698:	442c      	add	r4, r5
 800a69a:	1e60      	subs	r0, r4, #1
}
 800a69c:	fbb0 f0f5 	udiv	r0, r0, r5
 800a6a0:	b005      	add	sp, #20
 800a6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800a6a4:	f8cd c004 	str.w	ip, [sp, #4]
 800a6a8:	9700      	str	r7, [sp, #0]
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f7ff ff7e 	bl	800a5ac <RadioGetGfskTimeOnAirNumerator>
 800a6b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6b4:	fb03 f400 	mul.w	r4, r3, r0
        break;
 800a6b8:	e7ee      	b.n	800a698 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800a6ba:	f8cd c008 	str.w	ip, [sp, #8]
 800a6be:	9701      	str	r7, [sp, #4]
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	460a      	mov	r2, r1
 800a6c6:	4629      	mov	r1, r5
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f7ff ff82 	bl	800a5d2 <RadioGetLoRaTimeOnAirNumerator>
 800a6ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6d2:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800a6d6:	4b03      	ldr	r3, [pc, #12]	@ (800a6e4 <RadioTimeOnAir+0x70>)
 800a6d8:	5d98      	ldrb	r0, [r3, r6]
 800a6da:	f7ff ff39 	bl	800a550 <RadioGetLoRaBandwidthInHz>
 800a6de:	4605      	mov	r5, r0
        break;
 800a6e0:	e7da      	b.n	800a698 <RadioTimeOnAir+0x24>
 800a6e2:	bf00      	nop
 800a6e4:	08011c40 	.word	0x08011c40

0800a6e8 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800a6e8:	b508      	push	{r3, lr}
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800a6ea:	4b03      	ldr	r3, [pc, #12]	@ (800a6f8 <RadioOnTxTimeoutProcess+0x10>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	b113      	cbz	r3, 800a6f6 <RadioOnTxTimeoutProcess+0xe>
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	b103      	cbz	r3, 800a6f6 <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 800a6f4:	4798      	blx	r3
    }
}
 800a6f6:	bd08      	pop	{r3, pc}
 800a6f8:	200008b8 	.word	0x200008b8

0800a6fc <RadioOnTxTimeoutIrq>:
{
 800a6fc:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 800a6fe:	f7ff fff3 	bl	800a6e8 <RadioOnTxTimeoutProcess>
}
 800a702:	bd08      	pop	{r3, pc}

0800a704 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800a704:	b508      	push	{r3, lr}
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a706:	4b03      	ldr	r3, [pc, #12]	@ (800a714 <RadioOnRxTimeoutProcess+0x10>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	b113      	cbz	r3, 800a712 <RadioOnRxTimeoutProcess+0xe>
 800a70c:	68db      	ldr	r3, [r3, #12]
 800a70e:	b103      	cbz	r3, 800a712 <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 800a710:	4798      	blx	r3
    }
}
 800a712:	bd08      	pop	{r3, pc}
 800a714:	200008b8 	.word	0x200008b8

0800a718 <RadioOnRxTimeoutIrq>:
{
 800a718:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800a71a:	f7ff fff3 	bl	800a704 <RadioOnRxTimeoutProcess>
}
 800a71e:	bd08      	pop	{r3, pc}

0800a720 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800a720:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 800a722:	2300      	movs	r3, #0
 800a724:	e005      	b.n	800a732 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800a726:	5ccc      	ldrb	r4, [r1, r3]
 800a728:	43e4      	mvns	r4, r4
 800a72a:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 800a72c:	2400      	movs	r4, #0
 800a72e:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 800a730:	3301      	adds	r3, #1
 800a732:	429a      	cmp	r2, r3
 800a734:	dcf7      	bgt.n	800a726 <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800a736:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800a738:	461c      	mov	r4, r3
 800a73a:	e012      	b.n	800a762 <payload_integration+0x42>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 800a73c:	f103 0c07 	add.w	ip, r3, #7
 800a740:	e023      	b.n	800a78a <payload_integration+0x6a>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800a742:	b2ed      	uxtb	r5, r5
 800a744:	5d4d      	ldrb	r5, [r1, r5]
 800a746:	fa45 f50e 	asr.w	r5, r5, lr
 800a74a:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 800a74e:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800a750:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 800a754:	5d46      	ldrb	r6, [r0, r5]
 800a756:	fa04 fc0c 	lsl.w	ip, r4, ip
 800a75a:	ea46 0c0c 	orr.w	ip, r6, ip
 800a75e:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 800a762:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a766:	da26      	bge.n	800a7b6 <payload_integration+0x96>
        index_bit = 7 - ( i % 8 );
 800a768:	425d      	negs	r5, r3
 800a76a:	f003 0c07 	and.w	ip, r3, #7
 800a76e:	f005 0507 	and.w	r5, r5, #7
 800a772:	bf58      	it	pl
 800a774:	f1c5 0c00 	rsbpl	ip, r5, #0
 800a778:	fa5f fe8c 	uxtb.w	lr, ip
 800a77c:	f1ce 0e07 	rsb	lr, lr, #7
 800a780:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 800a784:	469c      	mov	ip, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	dbd8      	blt.n	800a73c <payload_integration+0x1c>
 800a78a:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800a78e:	3301      	adds	r3, #1
 800a790:	425e      	negs	r6, r3
 800a792:	f003 0c07 	and.w	ip, r3, #7
 800a796:	f006 0607 	and.w	r6, r6, #7
 800a79a:	bf58      	it	pl
 800a79c:	f1c6 0c00 	rsbpl	ip, r6, #0
 800a7a0:	fa5f fc8c 	uxtb.w	ip, ip
 800a7a4:	f1cc 0c07 	rsb	ip, ip, #7
 800a7a8:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 800a7ac:	461e      	mov	r6, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	dac7      	bge.n	800a742 <payload_integration+0x22>
 800a7b2:	1dde      	adds	r6, r3, #7
 800a7b4:	e7c5      	b.n	800a742 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a7b6:	01a3      	lsls	r3, r4, #6
 800a7b8:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 800a7bc:	b25b      	sxtb	r3, r3
 800a7be:	b91c      	cbnz	r4, 800a7c8 <payload_integration+0xa8>
 800a7c0:	2120      	movs	r1, #32
 800a7c2:	430b      	orrs	r3, r1
 800a7c4:	5483      	strb	r3, [r0, r2]
}
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	e7fa      	b.n	800a7c2 <payload_integration+0xa2>

0800a7cc <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 800a7cc:	2001      	movs	r0, #1
 800a7ce:	4770      	bx	lr

0800a7d0 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 800a7d0:	2001      	movs	r0, #1
 800a7d2:	4770      	bx	lr

0800a7d4 <RadioSetMaxPayloadLength>:
{
 800a7d4:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800a7d6:	2801      	cmp	r0, #1
 800a7d8:	d004      	beq.n	800a7e4 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800a7da:	4b0a      	ldr	r3, [pc, #40]	@ (800a804 <RadioSetMaxPayloadLength+0x30>)
 800a7dc:	7d5b      	ldrb	r3, [r3, #21]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d008      	beq.n	800a7f4 <RadioSetMaxPayloadLength+0x20>
}
 800a7e2:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800a7e4:	4b08      	ldr	r3, [pc, #32]	@ (800a808 <RadioSetMaxPayloadLength+0x34>)
 800a7e6:	7019      	strb	r1, [r3, #0]
 800a7e8:	4806      	ldr	r0, [pc, #24]	@ (800a804 <RadioSetMaxPayloadLength+0x30>)
 800a7ea:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a7ec:	300e      	adds	r0, #14
 800a7ee:	f001 fe15 	bl	800c41c <SUBGRF_SetPacketParams>
 800a7f2:	e7f6      	b.n	800a7e2 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800a7f4:	4b04      	ldr	r3, [pc, #16]	@ (800a808 <RadioSetMaxPayloadLength+0x34>)
 800a7f6:	7019      	strb	r1, [r3, #0]
 800a7f8:	4802      	ldr	r0, [pc, #8]	@ (800a804 <RadioSetMaxPayloadLength+0x30>)
 800a7fa:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800a7fc:	300e      	adds	r0, #14
 800a7fe:	f001 fe0d 	bl	800c41c <SUBGRF_SetPacketParams>
}
 800a802:	e7ee      	b.n	800a7e2 <RadioSetMaxPayloadLength+0xe>
 800a804:	2000085c 	.word	0x2000085c
 800a808:	2000007d 	.word	0x2000007d

0800a80c <RadioRead>:
{
 800a80c:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 800a80e:	f001 f9a3 	bl	800bb58 <SUBGRF_ReadRegister>
}
 800a812:	bd08      	pop	{r3, pc}

0800a814 <RadioWrite>:
{
 800a814:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800a816:	f001 f98f 	bl	800bb38 <SUBGRF_WriteRegister>
}
 800a81a:	bd08      	pop	{r3, pc}

0800a81c <RadioTxCw>:
{
 800a81c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800a81e:	f001 ff27 	bl	800c670 <SUBGRF_SetRfTxPower>
 800a822:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800a824:	210e      	movs	r1, #14
 800a826:	f640 101f 	movw	r0, #2335	@ 0x91f
 800a82a:	f001 f985 	bl	800bb38 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800a82e:	2101      	movs	r1, #1
 800a830:	4620      	mov	r0, r4
 800a832:	f001 ff09 	bl	800c648 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800a836:	f001 fb4f 	bl	800bed8 <SUBGRF_SetTxContinuousWave>
}
 800a83a:	bd10      	pop	{r4, pc}

0800a83c <RadioTxPrbs>:
{
 800a83c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800a83e:	2101      	movs	r1, #1
 800a840:	4b07      	ldr	r3, [pc, #28]	@ (800a860 <RadioTxPrbs+0x24>)
 800a842:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800a846:	f001 feff 	bl	800c648 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800a84a:	212d      	movs	r1, #45	@ 0x2d
 800a84c:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800a850:	f7ff ffe0 	bl	800a814 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 800a854:	f001 fb47 	bl	800bee6 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800a858:	4802      	ldr	r0, [pc, #8]	@ (800a864 <RadioTxPrbs+0x28>)
 800a85a:	f001 fa7d 	bl	800bd58 <SUBGRF_SetTx>
}
 800a85e:	bd08      	pop	{r3, pc}
 800a860:	2000085c 	.word	0x2000085c
 800a864:	000fffff 	.word	0x000fffff

0800a868 <RadioSetRxDutyCycle>:
{
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	4604      	mov	r4, r0
 800a86c:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800a86e:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 800a872:	4e09      	ldr	r6, [pc, #36]	@ (800a898 <RadioSetRxDutyCycle+0x30>)
 800a874:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800a876:	2300      	movs	r3, #0
 800a878:	461a      	mov	r2, r3
 800a87a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800a87e:	4608      	mov	r0, r1
 800a880:	f001 fbfd 	bl	800c07e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a884:	2100      	movs	r1, #0
 800a886:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800a88a:	f001 fedd 	bl	800c648 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800a88e:	4629      	mov	r1, r5
 800a890:	4620      	mov	r0, r4
 800a892:	f001 faf1 	bl	800be78 <SUBGRF_SetRxDutyCycle>
}
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	2000085c 	.word	0x2000085c

0800a89c <RadioRxBoosted>:
{
 800a89c:	b538      	push	{r3, r4, r5, lr}
 800a89e:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 800a8a0:	f001 ffc4 	bl	800c82c <RFW_Is_Init>
 800a8a4:	2801      	cmp	r0, #1
 800a8a6:	d015      	beq.n	800a8d4 <RadioRxBoosted+0x38>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	f240 2162 	movw	r1, #610	@ 0x262
 800a8b0:	4608      	mov	r0, r1
 800a8b2:	f001 fbe4 	bl	800c07e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800a8b6:	b984      	cbnz	r4, 800a8da <RadioRxBoosted+0x3e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800a8b8:	4c0f      	ldr	r4, [pc, #60]	@ (800a8f8 <RadioRxBoosted+0x5c>)
 800a8ba:	2100      	movs	r1, #0
 800a8bc:	65a1      	str	r1, [r4, #88]	@ 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800a8be:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800a8c2:	f001 fec1 	bl	800c648 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800a8c6:	7863      	ldrb	r3, [r4, #1]
 800a8c8:	b183      	cbz	r3, 800a8ec <RadioRxBoosted+0x50>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800a8ca:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800a8ce:	f001 fab5 	bl	800be3c <SUBGRF_SetRxBoosted>
}
 800a8d2:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 800a8d4:	f001 ffb2 	bl	800c83c <RFW_ReceiveInit>
 800a8d8:	e7ed      	b.n	800a8b6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800a8da:	4d08      	ldr	r5, [pc, #32]	@ (800a8fc <RadioRxBoosted+0x60>)
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f003 f858 	bl	800d994 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	f003 f80f 	bl	800d908 <UTIL_TIMER_Start>
 800a8ea:	e7e5      	b.n	800a8b8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800a8ec:	4b02      	ldr	r3, [pc, #8]	@ (800a8f8 <RadioRxBoosted+0x5c>)
 800a8ee:	6898      	ldr	r0, [r3, #8]
 800a8f0:	0180      	lsls	r0, r0, #6
 800a8f2:	f001 faa3 	bl	800be3c <SUBGRF_SetRxBoosted>
}
 800a8f6:	e7ec      	b.n	800a8d2 <RadioRxBoosted+0x36>
 800a8f8:	2000085c 	.word	0x2000085c
 800a8fc:	2000082c 	.word	0x2000082c

0800a900 <RadioStandby>:
{
 800a900:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 800a902:	2000      	movs	r0, #0
 800a904:	f001 fa0e 	bl	800bd24 <SUBGRF_SetStandby>
}
 800a908:	bd08      	pop	{r3, pc}

0800a90a <RadioGetStatus>:
{
 800a90a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800a90c:	f001 f908 	bl	800bb20 <SUBGRF_GetOperatingMode>
 800a910:	2805      	cmp	r0, #5
 800a912:	d007      	beq.n	800a924 <RadioGetStatus+0x1a>
 800a914:	2807      	cmp	r0, #7
 800a916:	d007      	beq.n	800a928 <RadioGetStatus+0x1e>
 800a918:	2804      	cmp	r0, #4
 800a91a:	d001      	beq.n	800a920 <RadioGetStatus+0x16>
            return RF_IDLE;
 800a91c:	2000      	movs	r0, #0
}
 800a91e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 800a920:	2002      	movs	r0, #2
 800a922:	e7fc      	b.n	800a91e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 800a924:	2001      	movs	r0, #1
 800a926:	e7fa      	b.n	800a91e <RadioGetStatus+0x14>
            return RF_CAD;
 800a928:	2003      	movs	r0, #3
 800a92a:	e7f8      	b.n	800a91e <RadioGetStatus+0x14>

0800a92c <RadioIrqProcess>:
{
 800a92c:	b530      	push	{r4, r5, lr}
 800a92e:	b083      	sub	sp, #12
    uint8_t size = 0;
 800a930:	2300      	movs	r3, #0
 800a932:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800a936:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800a938:	4ba9      	ldr	r3, [pc, #676]	@ (800abe0 <RadioIrqProcess+0x2b4>)
 800a93a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a93e:	2b20      	cmp	r3, #32
 800a940:	d829      	bhi.n	800a996 <RadioIrqProcess+0x6a>
 800a942:	b21a      	sxth	r2, r3
 800a944:	2a00      	cmp	r2, #0
 800a946:	f000 8130 	beq.w	800abaa <RadioIrqProcess+0x27e>
 800a94a:	3b01      	subs	r3, #1
 800a94c:	2b1f      	cmp	r3, #31
 800a94e:	f200 812c 	bhi.w	800abaa <RadioIrqProcess+0x27e>
 800a952:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a956:	005f      	.short	0x005f
 800a958:	012a0077 	.word	0x012a0077
 800a95c:	012a00e7 	.word	0x012a00e7
 800a960:	012a012a 	.word	0x012a012a
 800a964:	012a0117 	.word	0x012a0117
 800a968:	012a012a 	.word	0x012a012a
 800a96c:	012a012a 	.word	0x012a012a
 800a970:	012a012a 	.word	0x012a012a
 800a974:	012a0124 	.word	0x012a0124
 800a978:	012a012a 	.word	0x012a012a
 800a97c:	012a012a 	.word	0x012a012a
 800a980:	012a012a 	.word	0x012a012a
 800a984:	012a012a 	.word	0x012a012a
 800a988:	012a012a 	.word	0x012a012a
 800a98c:	012a012a 	.word	0x012a012a
 800a990:	012a012a 	.word	0x012a012a
 800a994:	012c      	.short	0x012c
 800a996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a99a:	f000 80a7 	beq.w	800aaec <RadioIrqProcess+0x1c0>
 800a99e:	d924      	bls.n	800a9ea <RadioIrqProcess+0xbe>
 800a9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9a4:	f040 8101 	bne.w	800abaa <RadioIrqProcess+0x27e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800a9a8:	4b8e      	ldr	r3, [pc, #568]	@ (800abe4 <RadioIrqProcess+0x2b8>)
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	2002      	movs	r0, #2
 800a9b0:	f003 f928 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800a9b4:	f001 f8b4 	bl	800bb20 <SUBGRF_GetOperatingMode>
 800a9b8:	2804      	cmp	r0, #4
 800a9ba:	f000 80a4 	beq.w	800ab06 <RadioIrqProcess+0x1da>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800a9be:	f001 f8af 	bl	800bb20 <SUBGRF_GetOperatingMode>
 800a9c2:	2805      	cmp	r0, #5
 800a9c4:	f040 80f1 	bne.w	800abaa <RadioIrqProcess+0x27e>
            TimerStop( &RxTimeoutTimer );
 800a9c8:	4887      	ldr	r0, [pc, #540]	@ (800abe8 <RadioIrqProcess+0x2bc>)
 800a9ca:	f002 ff43 	bl	800d854 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	f001 f9a8 	bl	800bd24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800a9d4:	4b85      	ldr	r3, [pc, #532]	@ (800abec <RadioIrqProcess+0x2c0>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f000 80e6 	beq.w	800abaa <RadioIrqProcess+0x27e>
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 80e2 	beq.w	800abaa <RadioIrqProcess+0x27e>
                RadioEvents->RxTimeout( );
 800a9e6:	4798      	blx	r3
 800a9e8:	e0df      	b.n	800abaa <RadioIrqProcess+0x27e>
    switch( SubgRf.RadioIrq )
 800a9ea:	2b40      	cmp	r3, #64	@ 0x40
 800a9ec:	f000 8110 	beq.w	800ac10 <RadioIrqProcess+0x2e4>
 800a9f0:	2b80      	cmp	r3, #128	@ 0x80
 800a9f2:	f040 80da 	bne.w	800abaa <RadioIrqProcess+0x27e>
        SUBGRF_SetStandby( STDBY_RC );
 800a9f6:	2000      	movs	r0, #0
 800a9f8:	f001 f994 	bl	800bd24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800a9fc:	4b7b      	ldr	r3, [pc, #492]	@ (800abec <RadioIrqProcess+0x2c0>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	f000 80d2 	beq.w	800abaa <RadioIrqProcess+0x27e>
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f000 80ce 	beq.w	800abaa <RadioIrqProcess+0x27e>
            RadioEvents->CadDone( false );
 800aa0e:	2000      	movs	r0, #0
 800aa10:	4798      	blx	r3
 800aa12:	e0ca      	b.n	800abaa <RadioIrqProcess+0x27e>
        TimerStop( &TxTimeoutTimer );
 800aa14:	4876      	ldr	r0, [pc, #472]	@ (800abf0 <RadioIrqProcess+0x2c4>)
 800aa16:	f002 ff1d 	bl	800d854 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	f001 f982 	bl	800bd24 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800aa20:	f001 ff06 	bl	800c830 <RFW_Is_LongPacketModeEnabled>
 800aa24:	2801      	cmp	r0, #1
 800aa26:	d00a      	beq.n	800aa3e <RadioIrqProcess+0x112>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800aa28:	4b70      	ldr	r3, [pc, #448]	@ (800abec <RadioIrqProcess+0x2c0>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 80bc 	beq.w	800abaa <RadioIrqProcess+0x27e>
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 80b8 	beq.w	800abaa <RadioIrqProcess+0x27e>
            RadioEvents->TxDone( );
 800aa3a:	4798      	blx	r3
 800aa3c:	e0b5      	b.n	800abaa <RadioIrqProcess+0x27e>
            RFW_DeInit_TxLongPacket( );
 800aa3e:	f001 ff00 	bl	800c842 <RFW_DeInit_TxLongPacket>
 800aa42:	e7f1      	b.n	800aa28 <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 800aa44:	4868      	ldr	r0, [pc, #416]	@ (800abe8 <RadioIrqProcess+0x2bc>)
 800aa46:	f002 ff05 	bl	800d854 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800aa4a:	4b65      	ldr	r3, [pc, #404]	@ (800abe0 <RadioIrqProcess+0x2b4>)
 800aa4c:	785b      	ldrb	r3, [r3, #1]
 800aa4e:	b303      	cbz	r3, 800aa92 <RadioIrqProcess+0x166>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800aa50:	22ff      	movs	r2, #255	@ 0xff
 800aa52:	f10d 0107 	add.w	r1, sp, #7
 800aa56:	4867      	ldr	r0, [pc, #412]	@ (800abf4 <RadioIrqProcess+0x2c8>)
 800aa58:	f001 fda0 	bl	800c59c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800aa5c:	4866      	ldr	r0, [pc, #408]	@ (800abf8 <RadioIrqProcess+0x2cc>)
 800aa5e:	f001 fdb7 	bl	800c5d0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800aa62:	4b62      	ldr	r3, [pc, #392]	@ (800abec <RadioIrqProcess+0x2c0>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	f000 809f 	beq.w	800abaa <RadioIrqProcess+0x27e>
 800aa6c:	689c      	ldr	r4, [r3, #8]
 800aa6e:	2c00      	cmp	r4, #0
 800aa70:	f000 809b 	beq.w	800abaa <RadioIrqProcess+0x27e>
            switch( SubgRf.PacketStatus.packetType )
 800aa74:	4b5a      	ldr	r3, [pc, #360]	@ (800abe0 <RadioIrqProcess+0x2b4>)
 800aa76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d11d      	bne.n	800aaba <RadioIrqProcess+0x18e>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800aa7e:	4a58      	ldr	r2, [pc, #352]	@ (800abe0 <RadioIrqProcess+0x2b4>)
 800aa80:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 800aa84:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 800aa88:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800aa8c:	4859      	ldr	r0, [pc, #356]	@ (800abf4 <RadioIrqProcess+0x2c8>)
 800aa8e:	47a0      	blx	r4
                break;
 800aa90:	e08b      	b.n	800abaa <RadioIrqProcess+0x27e>
            SUBGRF_SetStandby( STDBY_RC );
 800aa92:	2000      	movs	r0, #0
 800aa94:	f001 f946 	bl	800bd24 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800aa98:	2100      	movs	r1, #0
 800aa9a:	f640 1002 	movw	r0, #2306	@ 0x902
 800aa9e:	f001 f84b 	bl	800bb38 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800aaa2:	f640 1044 	movw	r0, #2372	@ 0x944
 800aaa6:	f001 f857 	bl	800bb58 <SUBGRF_ReadRegister>
 800aaaa:	f040 0102 	orr.w	r1, r0, #2
 800aaae:	b2c9      	uxtb	r1, r1
 800aab0:	f640 1044 	movw	r0, #2372	@ 0x944
 800aab4:	f001 f840 	bl	800bb38 <SUBGRF_WriteRegister>
 800aab8:	e7ca      	b.n	800aa50 <RadioIrqProcess+0x124>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800aaba:	4c49      	ldr	r4, [pc, #292]	@ (800abe0 <RadioIrqProcess+0x2b4>)
 800aabc:	4669      	mov	r1, sp
 800aabe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800aac0:	f001 fe66 	bl	800c790 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800aac4:	4b49      	ldr	r3, [pc, #292]	@ (800abec <RadioIrqProcess+0x2c0>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689d      	ldr	r5, [r3, #8]
 800aaca:	9b00      	ldr	r3, [sp, #0]
 800aacc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800aad0:	4a4a      	ldr	r2, [pc, #296]	@ (800abfc <RadioIrqProcess+0x2d0>)
 800aad2:	fb82 1203 	smull	r1, r2, r2, r3
 800aad6:	17db      	asrs	r3, r3, #31
 800aad8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800aadc:	b25b      	sxtb	r3, r3
 800aade:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 800aae2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800aae6:	4843      	ldr	r0, [pc, #268]	@ (800abf4 <RadioIrqProcess+0x2c8>)
 800aae8:	47a8      	blx	r5
                break;
 800aaea:	e05e      	b.n	800abaa <RadioIrqProcess+0x27e>
        SUBGRF_SetStandby( STDBY_RC );
 800aaec:	2000      	movs	r0, #0
 800aaee:	f001 f919 	bl	800bd24 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800aaf2:	4b3e      	ldr	r3, [pc, #248]	@ (800abec <RadioIrqProcess+0x2c0>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d057      	beq.n	800abaa <RadioIrqProcess+0x27e>
 800aafa:	699b      	ldr	r3, [r3, #24]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d054      	beq.n	800abaa <RadioIrqProcess+0x27e>
            RadioEvents->CadDone( true );
 800ab00:	2001      	movs	r0, #1
 800ab02:	4798      	blx	r3
 800ab04:	e051      	b.n	800abaa <RadioIrqProcess+0x27e>
            TimerStop( &TxTimeoutTimer );
 800ab06:	483a      	ldr	r0, [pc, #232]	@ (800abf0 <RadioIrqProcess+0x2c4>)
 800ab08:	f002 fea4 	bl	800d854 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f001 f909 	bl	800bd24 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ab12:	4b36      	ldr	r3, [pc, #216]	@ (800abec <RadioIrqProcess+0x2c0>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d047      	beq.n	800abaa <RadioIrqProcess+0x27e>
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d044      	beq.n	800abaa <RadioIrqProcess+0x27e>
                RadioEvents->TxTimeout( );
 800ab20:	4798      	blx	r3
 800ab22:	e042      	b.n	800abaa <RadioIrqProcess+0x27e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800ab24:	4b36      	ldr	r3, [pc, #216]	@ (800ac00 <RadioIrqProcess+0x2d4>)
 800ab26:	2201      	movs	r2, #1
 800ab28:	2100      	movs	r1, #0
 800ab2a:	2002      	movs	r0, #2
 800ab2c:	f003 f86a 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800ab30:	4b2b      	ldr	r3, [pc, #172]	@ (800abe0 <RadioIrqProcess+0x2b4>)
 800ab32:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800ab34:	b3c9      	cbz	r1, 800abaa <RadioIrqProcess+0x27e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800ab36:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800ab3a:	f640 1003 	movw	r0, #2307	@ 0x903
 800ab3e:	f7ff fe69 	bl	800a814 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800ab42:	4c27      	ldr	r4, [pc, #156]	@ (800abe0 <RadioIrqProcess+0x2b4>)
 800ab44:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800ab48:	f640 1004 	movw	r0, #2308	@ 0x904
 800ab4c:	f7ff fe62 	bl	800a814 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800ab50:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 800ab54:	f640 1005 	movw	r0, #2309	@ 0x905
 800ab58:	f7ff fe5c 	bl	800a814 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800ab5c:	f640 1002 	movw	r0, #2306	@ 0x902
 800ab60:	f7ff fe54 	bl	800a80c <RadioRead>
 800ab64:	f040 0101 	orr.w	r1, r0, #1
 800ab68:	b2c9      	uxtb	r1, r1
 800ab6a:	f640 1002 	movw	r0, #2306	@ 0x902
 800ab6e:	f7ff fe51 	bl	800a814 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800ab72:	2200      	movs	r2, #0
 800ab74:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ab76:	4613      	mov	r3, r2
 800ab78:	f240 2162 	movw	r1, #610	@ 0x262
 800ab7c:	4608      	mov	r0, r1
 800ab7e:	f001 fa7e 	bl	800c07e <SUBGRF_SetDioIrqParams>
 800ab82:	e012      	b.n	800abaa <RadioIrqProcess+0x27e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800ab84:	4b1f      	ldr	r3, [pc, #124]	@ (800ac04 <RadioIrqProcess+0x2d8>)
 800ab86:	2201      	movs	r2, #1
 800ab88:	2100      	movs	r1, #0
 800ab8a:	2002      	movs	r0, #2
 800ab8c:	f003 f83a 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800ab90:	f001 fe4c 	bl	800c82c <RFW_Is_Init>
 800ab94:	2801      	cmp	r0, #1
 800ab96:	d108      	bne.n	800abaa <RadioIrqProcess+0x27e>
            RFW_ReceivePayload( );
 800ab98:	f001 fe54 	bl	800c844 <RFW_ReceivePayload>
 800ab9c:	e005      	b.n	800abaa <RadioIrqProcess+0x27e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800ab9e:	4b1a      	ldr	r3, [pc, #104]	@ (800ac08 <RadioIrqProcess+0x2dc>)
 800aba0:	2201      	movs	r2, #1
 800aba2:	2100      	movs	r1, #0
 800aba4:	2002      	movs	r0, #2
 800aba6:	f003 f82d 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
}
 800abaa:	b003      	add	sp, #12
 800abac:	bd30      	pop	{r4, r5, pc}
        TimerStop( &RxTimeoutTimer );
 800abae:	480e      	ldr	r0, [pc, #56]	@ (800abe8 <RadioIrqProcess+0x2bc>)
 800abb0:	f002 fe50 	bl	800d854 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800abb4:	4b0a      	ldr	r3, [pc, #40]	@ (800abe0 <RadioIrqProcess+0x2b4>)
 800abb6:	785b      	ldrb	r3, [r3, #1]
 800abb8:	b173      	cbz	r3, 800abd8 <RadioIrqProcess+0x2ac>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800abba:	4b0c      	ldr	r3, [pc, #48]	@ (800abec <RadioIrqProcess+0x2c0>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0f3      	beq.n	800abaa <RadioIrqProcess+0x27e>
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d0f0      	beq.n	800abaa <RadioIrqProcess+0x27e>
            RadioEvents->RxTimeout( );
 800abc8:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800abca:	4b10      	ldr	r3, [pc, #64]	@ (800ac0c <RadioIrqProcess+0x2e0>)
 800abcc:	2201      	movs	r2, #1
 800abce:	2100      	movs	r1, #0
 800abd0:	2002      	movs	r0, #2
 800abd2:	f003 f817 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 800abd6:	e7e8      	b.n	800abaa <RadioIrqProcess+0x27e>
            SUBGRF_SetStandby( STDBY_RC );
 800abd8:	2000      	movs	r0, #0
 800abda:	f001 f8a3 	bl	800bd24 <SUBGRF_SetStandby>
 800abde:	e7ec      	b.n	800abba <RadioIrqProcess+0x28e>
 800abe0:	2000085c 	.word	0x2000085c
 800abe4:	08011bd4 	.word	0x08011bd4
 800abe8:	2000082c 	.word	0x2000082c
 800abec:	200008b8 	.word	0x200008b8
 800abf0:	20000844 	.word	0x20000844
 800abf4:	200008bc 	.word	0x200008bc
 800abf8:	20000880 	.word	0x20000880
 800abfc:	10624dd3 	.word	0x10624dd3
 800ac00:	08011be8 	.word	0x08011be8
 800ac04:	08011bf4 	.word	0x08011bf4
 800ac08:	08011c00 	.word	0x08011c00
 800ac0c:	08011c0c 	.word	0x08011c0c
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800ac10:	4b0a      	ldr	r3, [pc, #40]	@ (800ac3c <RadioIrqProcess+0x310>)
 800ac12:	2201      	movs	r2, #1
 800ac14:	2100      	movs	r1, #0
 800ac16:	2002      	movs	r0, #2
 800ac18:	f002 fff4 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800ac1c:	4b08      	ldr	r3, [pc, #32]	@ (800ac40 <RadioIrqProcess+0x314>)
 800ac1e:	785b      	ldrb	r3, [r3, #1]
 800ac20:	b143      	cbz	r3, 800ac34 <RadioIrqProcess+0x308>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ac22:	4b08      	ldr	r3, [pc, #32]	@ (800ac44 <RadioIrqProcess+0x318>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d0bf      	beq.n	800abaa <RadioIrqProcess+0x27e>
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0bc      	beq.n	800abaa <RadioIrqProcess+0x27e>
            RadioEvents->RxError( );
 800ac30:	4798      	blx	r3
}
 800ac32:	e7ba      	b.n	800abaa <RadioIrqProcess+0x27e>
            SUBGRF_SetStandby( STDBY_RC );
 800ac34:	2000      	movs	r0, #0
 800ac36:	f001 f875 	bl	800bd24 <SUBGRF_SetStandby>
 800ac3a:	e7f2      	b.n	800ac22 <RadioIrqProcess+0x2f6>
 800ac3c:	08011c18 	.word	0x08011c18
 800ac40:	2000085c 	.word	0x2000085c
 800ac44:	200008b8 	.word	0x200008b8

0800ac48 <RadioOnDioIrq>:
{
 800ac48:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800ac4a:	4b03      	ldr	r3, [pc, #12]	@ (800ac58 <RadioOnDioIrq+0x10>)
 800ac4c:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 800ac50:	f7ff fe6c 	bl	800a92c <RadioIrqProcess>
}
 800ac54:	bd08      	pop	{r3, pc}
 800ac56:	bf00      	nop
 800ac58:	2000085c 	.word	0x2000085c

0800ac5c <RadioGetWakeupTime>:
{
 800ac5c:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800ac5e:	f001 fd1e 	bl	800c69e <SUBGRF_GetRadioWakeUpTime>
}
 800ac62:	3003      	adds	r0, #3
 800ac64:	bd08      	pop	{r3, pc}

0800ac66 <RadioReadRegisters>:
{
 800ac66:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800ac68:	f000 fff4 	bl	800bc54 <SUBGRF_ReadRegisters>
}
 800ac6c:	bd08      	pop	{r3, pc}

0800ac6e <RadioWriteRegisters>:
{
 800ac6e:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 800ac70:	f000 ffae 	bl	800bbd0 <SUBGRF_WriteRegisters>
}
 800ac74:	bd08      	pop	{r3, pc}

0800ac76 <RadioRssi>:
{
 800ac76:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 800ac78:	f001 fc60 	bl	800c53c <SUBGRF_GetRssiInst>
}
 800ac7c:	bd08      	pop	{r3, pc}
	...

0800ac80 <RadioSetTxContinuousWave>:
{
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 800ac84:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ac88:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 800ac8c:	f001 fa6a 	bl	800c164 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 800ac90:	4628      	mov	r0, r5
 800ac92:	f001 fced 	bl	800c670 <SUBGRF_SetRfTxPower>
 800ac96:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800ac98:	210e      	movs	r1, #14
 800ac9a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800ac9e:	f000 ff4b 	bl	800bb38 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800aca2:	2101      	movs	r1, #1
 800aca4:	4628      	mov	r0, r5
 800aca6:	f001 fccf 	bl	800c648 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800acaa:	f001 f915 	bl	800bed8 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800acae:	4d04      	ldr	r5, [pc, #16]	@ (800acc0 <RadioSetTxContinuousWave+0x40>)
 800acb0:	4621      	mov	r1, r4
 800acb2:	4628      	mov	r0, r5
 800acb4:	f002 fe6e 	bl	800d994 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800acb8:	4628      	mov	r0, r5
 800acba:	f002 fe25 	bl	800d908 <UTIL_TIMER_Start>
}
 800acbe:	bd38      	pop	{r3, r4, r5, pc}
 800acc0:	20000844 	.word	0x20000844

0800acc4 <RadioSetChannel>:
{
 800acc4:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 800acc6:	f001 fa4d 	bl	800c164 <SUBGRF_SetRfFrequency>
}
 800acca:	bd08      	pop	{r3, pc}

0800accc <RadioStartCad>:
{
 800accc:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800acce:	2100      	movs	r1, #0
 800acd0:	4b07      	ldr	r3, [pc, #28]	@ (800acf0 <RadioStartCad+0x24>)
 800acd2:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800acd6:	f001 fcb7 	bl	800c648 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800acda:	2300      	movs	r3, #0
 800acdc:	461a      	mov	r2, r3
 800acde:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800ace2:	4608      	mov	r0, r1
 800ace4:	f001 f9cb 	bl	800c07e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800ace8:	f001 f8ea 	bl	800bec0 <SUBGRF_SetCad>
}
 800acec:	bd08      	pop	{r3, pc}
 800acee:	bf00      	nop
 800acf0:	2000085c 	.word	0x2000085c

0800acf4 <RadioRx>:
{
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800acf8:	f001 fd98 	bl	800c82c <RFW_Is_Init>
 800acfc:	2801      	cmp	r0, #1
 800acfe:	d015      	beq.n	800ad2c <RadioRx+0x38>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ad00:	2300      	movs	r3, #0
 800ad02:	461a      	mov	r2, r3
 800ad04:	f240 2162 	movw	r1, #610	@ 0x262
 800ad08:	4608      	mov	r0, r1
 800ad0a:	f001 f9b8 	bl	800c07e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800ad0e:	b984      	cbnz	r4, 800ad32 <RadioRx+0x3e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800ad10:	4c0f      	ldr	r4, [pc, #60]	@ (800ad50 <RadioRx+0x5c>)
 800ad12:	2100      	movs	r1, #0
 800ad14:	65a1      	str	r1, [r4, #88]	@ 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800ad16:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800ad1a:	f001 fc95 	bl	800c648 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 800ad1e:	7863      	ldrb	r3, [r4, #1]
 800ad20:	b183      	cbz	r3, 800ad44 <RadioRx+0x50>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800ad22:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800ad26:	f001 f839 	bl	800bd9c <SUBGRF_SetRx>
}
 800ad2a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 800ad2c:	f001 fd86 	bl	800c83c <RFW_ReceiveInit>
 800ad30:	e7ed      	b.n	800ad0e <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800ad32:	4d08      	ldr	r5, [pc, #32]	@ (800ad54 <RadioRx+0x60>)
 800ad34:	4621      	mov	r1, r4
 800ad36:	4628      	mov	r0, r5
 800ad38:	f002 fe2c 	bl	800d994 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	f002 fde3 	bl	800d908 <UTIL_TIMER_Start>
 800ad42:	e7e5      	b.n	800ad10 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800ad44:	4b02      	ldr	r3, [pc, #8]	@ (800ad50 <RadioRx+0x5c>)
 800ad46:	6898      	ldr	r0, [r3, #8]
 800ad48:	0180      	lsls	r0, r0, #6
 800ad4a:	f001 f827 	bl	800bd9c <SUBGRF_SetRx>
}
 800ad4e:	e7ec      	b.n	800ad2a <RadioRx+0x36>
 800ad50:	2000085c 	.word	0x2000085c
 800ad54:	2000082c 	.word	0x2000082c

0800ad58 <RadioSleep>:
{
 800ad58:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800ad5a:	f04f 0004 	mov.w	r0, #4
 800ad5e:	f000 ffc1 	bl	800bce4 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 800ad62:	2002      	movs	r0, #2
 800ad64:	f7f7 feb0 	bl	8002ac8 <HAL_Delay>
}
 800ad68:	bd08      	pop	{r3, pc}
	...

0800ad6c <RadioSend>:
{
 800ad6c:	b570      	push	{r4, r5, r6, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	4605      	mov	r5, r0
 800ad72:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800ad74:	2300      	movs	r3, #0
 800ad76:	461a      	mov	r2, r3
 800ad78:	f240 2101 	movw	r1, #513	@ 0x201
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	f001 f97e 	bl	800c07e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800ad82:	4e5c      	ldr	r6, [pc, #368]	@ (800aef4 <RadioSend+0x188>)
 800ad84:	2101      	movs	r1, #1
 800ad86:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 800ad8a:	f001 fc5d 	bl	800c648 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800ad8e:	7833      	ldrb	r3, [r6, #0]
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d103      	bne.n	800ad9c <RadioSend+0x30>
 800ad94:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 800ad98:	2b06      	cmp	r3, #6
 800ad9a:	d013      	beq.n	800adc4 <RadioSend+0x58>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800ad9c:	f640 0089 	movw	r0, #2185	@ 0x889
 800ada0:	f000 feda 	bl	800bb58 <SUBGRF_ReadRegister>
 800ada4:	f040 0104 	orr.w	r1, r0, #4
 800ada8:	b2c9      	uxtb	r1, r1
 800adaa:	f640 0089 	movw	r0, #2185	@ 0x889
 800adae:	f000 fec3 	bl	800bb38 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 800adb2:	4b50      	ldr	r3, [pc, #320]	@ (800aef4 <RadioSend+0x188>)
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d819      	bhi.n	800adee <RadioSend+0x82>
 800adba:	e8df f003 	tbb	[pc, r3]
 800adbe:	0e24      	.short	0x0e24
 800adc0:	5024      	.short	0x5024
 800adc2:	5d          	.byte	0x5d
 800adc3:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800adc4:	f640 0089 	movw	r0, #2185	@ 0x889
 800adc8:	f000 fec6 	bl	800bb58 <SUBGRF_ReadRegister>
 800adcc:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800add0:	f640 0089 	movw	r0, #2185	@ 0x889
 800add4:	f000 feb0 	bl	800bb38 <SUBGRF_WriteRegister>
 800add8:	e7eb      	b.n	800adb2 <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800adda:	4846      	ldr	r0, [pc, #280]	@ (800aef4 <RadioSend+0x188>)
 800addc:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800adde:	300e      	adds	r0, #14
 800ade0:	f001 fb1c 	bl	800c41c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ade4:	2200      	movs	r2, #0
 800ade6:	4621      	mov	r1, r4
 800ade8:	4628      	mov	r0, r5
 800adea:	f000 ffcf 	bl	800bd8c <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800adee:	4c42      	ldr	r4, [pc, #264]	@ (800aef8 <RadioSend+0x18c>)
 800adf0:	4b40      	ldr	r3, [pc, #256]	@ (800aef4 <RadioSend+0x188>)
 800adf2:	6859      	ldr	r1, [r3, #4]
 800adf4:	4620      	mov	r0, r4
 800adf6:	f002 fdcd 	bl	800d994 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800adfa:	4620      	mov	r0, r4
 800adfc:	f002 fd84 	bl	800d908 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 800ae00:	2000      	movs	r0, #0
}
 800ae02:	b002      	add	sp, #8
 800ae04:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 800ae06:	f001 fd11 	bl	800c82c <RFW_Is_Init>
 800ae0a:	2801      	cmp	r0, #1
 800ae0c:	d00a      	beq.n	800ae24 <RadioSend+0xb8>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800ae0e:	4839      	ldr	r0, [pc, #228]	@ (800aef4 <RadioSend+0x188>)
 800ae10:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ae12:	300e      	adds	r0, #14
 800ae14:	f001 fb02 	bl	800c41c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800ae18:	2200      	movs	r2, #0
 800ae1a:	4621      	mov	r1, r4
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	f000 ffb5 	bl	800bd8c <SUBGRF_SendPayload>
 800ae22:	e7e4      	b.n	800adee <RadioSend+0x82>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800ae24:	f10d 0207 	add.w	r2, sp, #7
 800ae28:	4621      	mov	r1, r4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	f001 fd03 	bl	800c836 <RFW_TransmitInit>
 800ae30:	b968      	cbnz	r0, 800ae4e <RadioSend+0xe2>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800ae32:	4830      	ldr	r0, [pc, #192]	@ (800aef4 <RadioSend+0x188>)
 800ae34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ae38:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ae3a:	300e      	adds	r0, #14
 800ae3c:	f001 faee 	bl	800c41c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800ae40:	2200      	movs	r2, #0
 800ae42:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ae46:	4628      	mov	r0, r5
 800ae48:	f000 ffa0 	bl	800bd8c <SUBGRF_SendPayload>
 800ae4c:	e7cf      	b.n	800adee <RadioSend+0x82>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800ae4e:	4b2b      	ldr	r3, [pc, #172]	@ (800aefc <RadioSend+0x190>)
 800ae50:	2201      	movs	r2, #1
 800ae52:	2100      	movs	r1, #0
 800ae54:	2002      	movs	r0, #2
 800ae56:	f002 fed5 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800ae5a:	2003      	movs	r0, #3
 800ae5c:	e7d1      	b.n	800ae02 <RadioSend+0x96>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ae5e:	4825      	ldr	r0, [pc, #148]	@ (800aef4 <RadioSend+0x188>)
 800ae60:	2302      	movs	r3, #2
 800ae62:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800ae64:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ae66:	300e      	adds	r0, #14
 800ae68:	f001 fad8 	bl	800c41c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4628      	mov	r0, r5
 800ae72:	f000 ff8b 	bl	800bd8c <SUBGRF_SendPayload>
            break;
 800ae76:	e7ba      	b.n	800adee <RadioSend+0x82>
            payload_integration( RadioBuffer, buffer, size );
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4629      	mov	r1, r5
 800ae7c:	4820      	ldr	r0, [pc, #128]	@ (800af00 <RadioSend+0x194>)
 800ae7e:	f7ff fc4f 	bl	800a720 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800ae82:	4e1c      	ldr	r6, [pc, #112]	@ (800aef4 <RadioSend+0x188>)
 800ae84:	2302      	movs	r3, #2
 800ae86:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800ae88:	1c65      	adds	r5, r4, #1
 800ae8a:	b2ed      	uxtb	r5, r5
 800ae8c:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800ae8e:	f106 000e 	add.w	r0, r6, #14
 800ae92:	f001 fac3 	bl	800c41c <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800ae96:	2100      	movs	r1, #0
 800ae98:	20f1      	movs	r0, #241	@ 0xf1
 800ae9a:	f7ff fcbb 	bl	800a814 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800ae9e:	2100      	movs	r1, #0
 800aea0:	20f0      	movs	r0, #240	@ 0xf0
 800aea2:	f7ff fcb7 	bl	800a814 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800aea6:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800aea8:	2b64      	cmp	r3, #100	@ 0x64
 800aeaa:	d019      	beq.n	800aee0 <RadioSend+0x174>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800aeac:	21e1      	movs	r1, #225	@ 0xe1
 800aeae:	20f3      	movs	r0, #243	@ 0xf3
 800aeb0:	f7ff fcb0 	bl	800a814 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800aeb4:	2104      	movs	r1, #4
 800aeb6:	20f2      	movs	r0, #242	@ 0xf2
 800aeb8:	f7ff fcac 	bl	800a814 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800aebc:	00e1      	lsls	r1, r4, #3
 800aebe:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800aec0:	0a09      	lsrs	r1, r1, #8
 800aec2:	20f4      	movs	r0, #244	@ 0xf4
 800aec4:	f7ff fca6 	bl	800a814 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800aec8:	f004 01fe 	and.w	r1, r4, #254	@ 0xfe
 800aecc:	20f5      	movs	r0, #245	@ 0xf5
 800aece:	f7ff fca1 	bl	800a814 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800aed2:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800aed6:	4629      	mov	r1, r5
 800aed8:	4809      	ldr	r0, [pc, #36]	@ (800af00 <RadioSend+0x194>)
 800aeda:	f000 ff57 	bl	800bd8c <SUBGRF_SendPayload>
            break;
 800aede:	e786      	b.n	800adee <RadioSend+0x82>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800aee0:	2170      	movs	r1, #112	@ 0x70
 800aee2:	20f3      	movs	r0, #243	@ 0xf3
 800aee4:	f7ff fc96 	bl	800a814 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800aee8:	211d      	movs	r1, #29
 800aeea:	20f2      	movs	r0, #242	@ 0xf2
 800aeec:	f7ff fc92 	bl	800a814 <RadioWrite>
 800aef0:	e7e4      	b.n	800aebc <RadioSend+0x150>
 800aef2:	bf00      	nop
 800aef4:	2000085c 	.word	0x2000085c
 800aef8:	20000844 	.word	0x20000844
 800aefc:	08011c28 	.word	0x08011c28
 800af00:	200008bc 	.word	0x200008bc

0800af04 <RadioRandom>:
{
 800af04:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800af06:	2300      	movs	r3, #0
 800af08:	461a      	mov	r2, r3
 800af0a:	4619      	mov	r1, r3
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 f8b6 	bl	800c07e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 800af12:	f000 ff5d 	bl	800bdd0 <SUBGRF_GetRandom>
}
 800af16:	bd08      	pop	{r3, pc}

0800af18 <RadioSetModem>:
{
 800af18:	b510      	push	{r4, lr}
 800af1a:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 800af1c:	4b1c      	ldr	r3, [pc, #112]	@ (800af90 <RadioSetModem+0x78>)
 800af1e:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 800af20:	f001 fc91 	bl	800c846 <RFW_SetRadioModem>
    switch( modem )
 800af24:	2c05      	cmp	r4, #5
 800af26:	d804      	bhi.n	800af32 <RadioSetModem+0x1a>
 800af28:	e8df f004 	tbb	[pc, r4]
 800af2c:	1d03110a 	.word	0x1d03110a
 800af30:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800af32:	2003      	movs	r0, #3
 800af34:	f001 f942 	bl	800c1bc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800af38:	4b15      	ldr	r3, [pc, #84]	@ (800af90 <RadioSetModem+0x78>)
 800af3a:	2200      	movs	r2, #0
 800af3c:	735a      	strb	r2, [r3, #13]
}
 800af3e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800af40:	2000      	movs	r0, #0
 800af42:	f001 f93b 	bl	800c1bc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800af46:	4b12      	ldr	r3, [pc, #72]	@ (800af90 <RadioSetModem+0x78>)
 800af48:	2200      	movs	r2, #0
 800af4a:	735a      	strb	r2, [r3, #13]
        break;
 800af4c:	e7f7      	b.n	800af3e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800af4e:	2001      	movs	r0, #1
 800af50:	f001 f934 	bl	800c1bc <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800af54:	4b0e      	ldr	r3, [pc, #56]	@ (800af90 <RadioSetModem+0x78>)
 800af56:	7b5a      	ldrb	r2, [r3, #13]
 800af58:	7b18      	ldrb	r0, [r3, #12]
 800af5a:	4282      	cmp	r2, r0
 800af5c:	d0ef      	beq.n	800af3e <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800af5e:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800af60:	f000 fae0 	bl	800b524 <RadioSetPublicNetwork>
 800af64:	e7eb      	b.n	800af3e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800af66:	2002      	movs	r0, #2
 800af68:	f001 f928 	bl	800c1bc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800af6c:	4b08      	ldr	r3, [pc, #32]	@ (800af90 <RadioSetModem+0x78>)
 800af6e:	2200      	movs	r2, #0
 800af70:	735a      	strb	r2, [r3, #13]
        break;
 800af72:	e7e4      	b.n	800af3e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800af74:	2002      	movs	r0, #2
 800af76:	f001 f921 	bl	800c1bc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800af7a:	4b05      	ldr	r3, [pc, #20]	@ (800af90 <RadioSetModem+0x78>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	735a      	strb	r2, [r3, #13]
        break;
 800af80:	e7dd      	b.n	800af3e <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800af82:	2000      	movs	r0, #0
 800af84:	f001 f91a 	bl	800c1bc <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800af88:	4b01      	ldr	r3, [pc, #4]	@ (800af90 <RadioSetModem+0x78>)
 800af8a:	2200      	movs	r2, #0
 800af8c:	735a      	strb	r2, [r3, #13]
}
 800af8e:	e7d6      	b.n	800af3e <RadioSetModem+0x26>
 800af90:	2000085c 	.word	0x2000085c

0800af94 <RadioSetTxGenericConfig>:
{
 800af94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af98:	b086      	sub	sp, #24
 800af9a:	4605      	mov	r5, r0
 800af9c:	460c      	mov	r4, r1
 800af9e:	4617      	mov	r7, r2
 800afa0:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 800afa2:	2100      	movs	r1, #0
 800afa4:	9104      	str	r1, [sp, #16]
 800afa6:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800afa8:	f001 fc3f 	bl	800c82a <RFW_DeInit>
    switch( modem )
 800afac:	2d03      	cmp	r5, #3
 800afae:	f200 8154 	bhi.w	800b25a <RadioSetTxGenericConfig+0x2c6>
 800afb2:	e8df f015 	tbh	[pc, r5, lsl #1]
 800afb6:	0079      	.short	0x0079
 800afb8:	013e00db 	.word	0x013e00db
 800afbc:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 800afbe:	7ca2      	ldrb	r2, [r4, #18]
 800afc0:	2a08      	cmp	r2, #8
 800afc2:	f200 8157 	bhi.w	800b274 <RadioSetTxGenericConfig+0x2e0>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800afc6:	68a1      	ldr	r1, [r4, #8]
 800afc8:	a804      	add	r0, sp, #16
 800afca:	f002 f94b 	bl	800d264 <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 8152 	beq.w	800b27a <RadioSetTxGenericConfig+0x2e6>
        else if( config->msk.BitRate <= 10000 )
 800afd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800afda:	4293      	cmp	r3, r2
 800afdc:	d823      	bhi.n	800b026 <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800afde:	4bad      	ldr	r3, [pc, #692]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800afe0:	2203      	movs	r2, #3
 800afe2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800afe4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800afe8:	6822      	ldr	r2, [r4, #0]
 800afea:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800afec:	7ce2      	ldrb	r2, [r4, #19]
 800afee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            radio_modem = MODEM_MSK;
 800aff2:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800aff4:	6863      	ldr	r3, [r4, #4]
 800aff6:	00da      	lsls	r2, r3, #3
 800aff8:	4ba6      	ldr	r3, [pc, #664]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800affa:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800affc:	2204      	movs	r2, #4
 800affe:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800b000:	7ca2      	ldrb	r2, [r4, #18]
 800b002:	00d2      	lsls	r2, r2, #3
 800b004:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800b006:	2200      	movs	r2, #0
 800b008:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800b00a:	7da3      	ldrb	r3, [r4, #22]
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d018      	beq.n	800b042 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b010:	7d23      	ldrb	r3, [r4, #20]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d015      	beq.n	800b042 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800b016:	7d62      	ldrb	r2, [r4, #21]
 800b018:	4b9e      	ldr	r3, [pc, #632]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b01a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800b01c:	7da2      	ldrb	r2, [r4, #22]
 800b01e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800b020:	7d22      	ldrb	r2, [r4, #20]
 800b022:	755a      	strb	r2, [r3, #21]
 800b024:	e026      	b.n	800b074 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b026:	4b9b      	ldr	r3, [pc, #620]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b028:	2500      	movs	r5, #0
 800b02a:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b02c:	f883 5038 	strb.w	r5, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800b030:	6822      	ldr	r2, [r4, #0]
 800b032:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800b034:	7ce2      	ldrb	r2, [r4, #19]
 800b036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800b03a:	6822      	ldr	r2, [r4, #0]
 800b03c:	0892      	lsrs	r2, r2, #2
 800b03e:	641a      	str	r2, [r3, #64]	@ 0x40
 800b040:	e7d8      	b.n	800aff4 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800b042:	7d62      	ldrb	r2, [r4, #21]
 800b044:	f102 030f 	add.w	r3, r2, #15
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d901      	bls.n	800b052 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b04e:	2a01      	cmp	r2, #1
 800b050:	d127      	bne.n	800b0a2 <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig = config;
 800b052:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 800b054:	2301      	movs	r3, #1
 800b056:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800b05a:	4a8f      	ldr	r2, [pc, #572]	@ (800b298 <RadioSetTxGenericConfig+0x304>)
 800b05c:	4b8f      	ldr	r3, [pc, #572]	@ (800b29c <RadioSetTxGenericConfig+0x308>)
 800b05e:	6819      	ldr	r1, [r3, #0]
 800b060:	a801      	add	r0, sp, #4
 800b062:	f001 fbdf 	bl	800c824 <RFW_Init>
 800b066:	b9e0      	cbnz	r0, 800b0a2 <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b068:	4b8a      	ldr	r3, [pc, #552]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b06e:	2101      	movs	r1, #1
 800b070:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b072:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b074:	f7ff fc44 	bl	800a900 <RadioStandby>
        RadioSetModem( radio_modem );
 800b078:	4628      	mov	r0, r5
 800b07a:	f7ff ff4d 	bl	800af18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b07e:	4d88      	ldr	r5, [pc, #544]	@ (800b2a0 <RadioSetTxGenericConfig+0x30c>)
 800b080:	4628      	mov	r0, r5
 800b082:	f001 f943 	bl	800c30c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b086:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800b08a:	f001 f9c7 	bl	800c41c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b08e:	a804      	add	r0, sp, #16
 800b090:	f000 fdae 	bl	800bbf0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800b094:	8a20      	ldrh	r0, [r4, #16]
 800b096:	f000 fd82 	bl	800bb9e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800b09a:	89a0      	ldrh	r0, [r4, #12]
 800b09c:	f000 fdc5 	bl	800bc2a <SUBGRF_SetCrcPolynomial>
        break;
 800b0a0:	e0db      	b.n	800b25a <RadioSetTxGenericConfig+0x2c6>
                return -1;
 800b0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a6:	e0e2      	b.n	800b26e <RadioSetTxGenericConfig+0x2da>
        if( config->fsk.BitRate == 0 )
 800b0a8:	6823      	ldr	r3, [r4, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f000 80e8 	beq.w	800b280 <RadioSetTxGenericConfig+0x2ec>
        if( config->fsk.SyncWordLength > 8 )
 800b0b0:	7ca2      	ldrb	r2, [r4, #18]
 800b0b2:	2a08      	cmp	r2, #8
 800b0b4:	f200 80e7 	bhi.w	800b286 <RadioSetTxGenericConfig+0x2f2>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800b0b8:	68a1      	ldr	r1, [r4, #8]
 800b0ba:	a804      	add	r0, sp, #16
 800b0bc:	f002 f8d2 	bl	800d264 <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b0c0:	4b74      	ldr	r3, [pc, #464]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800b0c8:	6821      	ldr	r1, [r4, #0]
 800b0ca:	63d9      	str	r1, [r3, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800b0cc:	7ce1      	ldrb	r1, [r4, #19]
 800b0ce:	f883 1044 	strb.w	r1, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800b0d2:	69a1      	ldr	r1, [r4, #24]
 800b0d4:	6419      	str	r1, [r3, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b0d6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800b0d8:	6861      	ldr	r1, [r4, #4]
 800b0da:	00c9      	lsls	r1, r1, #3
 800b0dc:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800b0de:	2104      	movs	r1, #4
 800b0e0:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800b0e2:	7ca1      	ldrb	r1, [r4, #18]
 800b0e4:	00c9      	lsls	r1, r1, #3
 800b0e6:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800b0e8:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800b0ea:	7da3      	ldrb	r3, [r4, #22]
 800b0ec:	2b02      	cmp	r3, #2
 800b0ee:	d00a      	beq.n	800b106 <RadioSetTxGenericConfig+0x172>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b0f0:	7d23      	ldrb	r3, [r4, #20]
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d007      	beq.n	800b106 <RadioSetTxGenericConfig+0x172>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b0f6:	7d62      	ldrb	r2, [r4, #21]
 800b0f8:	4b66      	ldr	r3, [pc, #408]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b0fa:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b0fc:	7da2      	ldrb	r2, [r4, #22]
 800b0fe:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800b100:	7d22      	ldrb	r2, [r4, #20]
 800b102:	755a      	strb	r2, [r3, #21]
 800b104:	e018      	b.n	800b138 <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800b106:	7d62      	ldrb	r2, [r4, #21]
 800b108:	f102 030f 	add.w	r3, r2, #15
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d901      	bls.n	800b116 <RadioSetTxGenericConfig+0x182>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b112:	2a01      	cmp	r2, #1
 800b114:	d127      	bne.n	800b166 <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 800b116:	2301      	movs	r3, #1
 800b118:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 800b11c:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800b11e:	4a5e      	ldr	r2, [pc, #376]	@ (800b298 <RadioSetTxGenericConfig+0x304>)
 800b120:	4b5e      	ldr	r3, [pc, #376]	@ (800b29c <RadioSetTxGenericConfig+0x308>)
 800b122:	6819      	ldr	r1, [r3, #0]
 800b124:	a801      	add	r0, sp, #4
 800b126:	f001 fb7d 	bl	800c824 <RFW_Init>
 800b12a:	b9e0      	cbnz	r0, 800b166 <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b12c:	4b59      	ldr	r3, [pc, #356]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b12e:	2200      	movs	r2, #0
 800b130:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b132:	2101      	movs	r1, #1
 800b134:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b136:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b138:	f7ff fbe2 	bl	800a900 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b13c:	2000      	movs	r0, #0
 800b13e:	f7ff feeb 	bl	800af18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b142:	4d57      	ldr	r5, [pc, #348]	@ (800b2a0 <RadioSetTxGenericConfig+0x30c>)
 800b144:	4628      	mov	r0, r5
 800b146:	f001 f8e1 	bl	800c30c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b14a:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800b14e:	f001 f965 	bl	800c41c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b152:	a804      	add	r0, sp, #16
 800b154:	f000 fd4c 	bl	800bbf0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b158:	8a20      	ldrh	r0, [r4, #16]
 800b15a:	f000 fd20 	bl	800bb9e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800b15e:	89a0      	ldrh	r0, [r4, #12]
 800b160:	f000 fd63 	bl	800bc2a <SUBGRF_SetCrcPolynomial>
        break;
 800b164:	e079      	b.n	800b25a <RadioSetTxGenericConfig+0x2c6>
                return -1;
 800b166:	f04f 30ff 	mov.w	r0, #4294967295
 800b16a:	e080      	b.n	800b26e <RadioSetTxGenericConfig+0x2da>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b16c:	4b49      	ldr	r3, [pc, #292]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b174:	7822      	ldrb	r2, [r4, #0]
 800b176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b17a:	7862      	ldrb	r2, [r4, #1]
 800b17c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b180:	78a2      	ldrb	r2, [r4, #2]
 800b182:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800b186:	78e3      	ldrb	r3, [r4, #3]
 800b188:	2b01      	cmp	r3, #1
 800b18a:	d033      	beq.n	800b1f4 <RadioSetTxGenericConfig+0x260>
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d036      	beq.n	800b1fe <RadioSetTxGenericConfig+0x26a>
 800b190:	b35b      	cbz	r3, 800b1ea <RadioSetTxGenericConfig+0x256>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b192:	4d40      	ldr	r5, [pc, #256]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b194:	f04f 0801 	mov.w	r8, #1
 800b198:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b19c:	88a3      	ldrh	r3, [r4, #4]
 800b19e:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b1a0:	79a3      	ldrb	r3, [r4, #6]
 800b1a2:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b1a4:	79e3      	ldrb	r3, [r4, #7]
 800b1a6:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b1aa:	7a23      	ldrb	r3, [r4, #8]
 800b1ac:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 800b1b0:	f7ff fba6 	bl	800a900 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b1b4:	4640      	mov	r0, r8
 800b1b6:	f7ff feaf 	bl	800af18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b1ba:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800b1be:	f001 f8a5 	bl	800c30c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b1c2:	f105 000e 	add.w	r0, r5, #14
 800b1c6:	f001 f929 	bl	800c41c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800b1ca:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 800b1ce:	2b06      	cmp	r3, #6
 800b1d0:	d024      	beq.n	800b21c <RadioSetTxGenericConfig+0x288>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800b1d2:	f640 0089 	movw	r0, #2185	@ 0x889
 800b1d6:	f000 fcbf 	bl	800bb58 <SUBGRF_ReadRegister>
 800b1da:	f040 0104 	orr.w	r1, r0, #4
 800b1de:	b2c9      	uxtb	r1, r1
 800b1e0:	f640 0089 	movw	r0, #2185	@ 0x889
 800b1e4:	f000 fca8 	bl	800bb38 <SUBGRF_WriteRegister>
 800b1e8:	e037      	b.n	800b25a <RadioSetTxGenericConfig+0x2c6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b1ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b1f2:	e7ce      	b.n	800b192 <RadioSetTxGenericConfig+0x1fe>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b1f4:	4b27      	ldr	r3, [pc, #156]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b1fc:	e7c9      	b.n	800b192 <RadioSetTxGenericConfig+0x1fe>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b1fe:	7823      	ldrb	r3, [r4, #0]
 800b200:	3b0b      	subs	r3, #11
 800b202:	b2db      	uxtb	r3, r3
 800b204:	2b01      	cmp	r3, #1
 800b206:	d904      	bls.n	800b212 <RadioSetTxGenericConfig+0x27e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b208:	4b22      	ldr	r3, [pc, #136]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b210:	e7bf      	b.n	800b192 <RadioSetTxGenericConfig+0x1fe>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b212:	4b20      	ldr	r3, [pc, #128]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b214:	2201      	movs	r2, #1
 800b216:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b21a:	e7ba      	b.n	800b192 <RadioSetTxGenericConfig+0x1fe>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800b21c:	f640 0089 	movw	r0, #2185	@ 0x889
 800b220:	f000 fc9a 	bl	800bb58 <SUBGRF_ReadRegister>
 800b224:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800b228:	f640 0089 	movw	r0, #2185	@ 0x889
 800b22c:	f000 fc84 	bl	800bb38 <SUBGRF_WriteRegister>
 800b230:	e013      	b.n	800b25a <RadioSetTxGenericConfig+0x2c6>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800b232:	6823      	ldr	r3, [r4, #0]
 800b234:	3b01      	subs	r3, #1
 800b236:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b23a:	d227      	bcs.n	800b28c <RadioSetTxGenericConfig+0x2f8>
        RadioSetModem( MODEM_BPSK );
 800b23c:	2003      	movs	r0, #3
 800b23e:	f7ff fe6b 	bl	800af18 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800b242:	4814      	ldr	r0, [pc, #80]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b244:	2302      	movs	r3, #2
 800b246:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	6483      	str	r3, [r0, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800b24e:	2316      	movs	r3, #22
 800b250:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b254:	3038      	adds	r0, #56	@ 0x38
 800b256:	f001 f859 	bl	800c30c <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b25a:	4638      	mov	r0, r7
 800b25c:	f001 fa08 	bl	800c670 <SUBGRF_SetRfTxPower>
 800b260:	4c0c      	ldr	r4, [pc, #48]	@ (800b294 <RadioSetTxGenericConfig+0x300>)
 800b262:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b266:	f001 fae5 	bl	800c834 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b26a:	6066      	str	r6, [r4, #4]
    return 0;
 800b26c:	2000      	movs	r0, #0
}
 800b26e:	b006      	add	sp, #24
 800b270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	e7f9      	b.n	800b26e <RadioSetTxGenericConfig+0x2da>
            return -1;
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295
 800b27e:	e7f6      	b.n	800b26e <RadioSetTxGenericConfig+0x2da>
            return -1;
 800b280:	f04f 30ff 	mov.w	r0, #4294967295
 800b284:	e7f3      	b.n	800b26e <RadioSetTxGenericConfig+0x2da>
            return -1;
 800b286:	f04f 30ff 	mov.w	r0, #4294967295
 800b28a:	e7f0      	b.n	800b26e <RadioSetTxGenericConfig+0x2da>
            return -1;
 800b28c:	f04f 30ff 	mov.w	r0, #4294967295
 800b290:	e7ed      	b.n	800b26e <RadioSetTxGenericConfig+0x2da>
 800b292:	bf00      	nop
 800b294:	2000085c 	.word	0x2000085c
 800b298:	20000844 	.word	0x20000844
 800b29c:	200008b8 	.word	0x200008b8
 800b2a0:	20000894 	.word	0x20000894

0800b2a4 <RadioSetRxGenericConfig>:
{
 800b2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a8:	b086      	sub	sp, #24
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460c      	mov	r4, r1
 800b2ae:	4615      	mov	r5, r2
 800b2b0:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800b2b8:	f001 fab7 	bl	800c82a <RFW_DeInit>
    if( rxContinuous != 0 )
 800b2bc:	b105      	cbz	r5, 800b2c0 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 800b2be:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800b2c0:	3d00      	subs	r5, #0
 800b2c2:	bf18      	it	ne
 800b2c4:	2501      	movne	r5, #1
 800b2c6:	4b93      	ldr	r3, [pc, #588]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b2c8:	705d      	strb	r5, [r3, #1]
    switch( modem )
 800b2ca:	b136      	cbz	r6, 800b2da <RadioSetRxGenericConfig+0x36>
 800b2cc:	2e01      	cmp	r6, #1
 800b2ce:	f000 808f 	beq.w	800b3f0 <RadioSetRxGenericConfig+0x14c>
 800b2d2:	2000      	movs	r0, #0
}
 800b2d4:	b006      	add	sp, #24
 800b2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800b2da:	68a3      	ldr	r3, [r4, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 810d 	beq.w	800b4fc <RadioSetRxGenericConfig+0x258>
 800b2e2:	68e3      	ldr	r3, [r4, #12]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 810c 	beq.w	800b502 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 800b2ea:	7fa2      	ldrb	r2, [r4, #30]
 800b2ec:	2a08      	cmp	r2, #8
 800b2ee:	f200 810b 	bhi.w	800b508 <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800b2f2:	6921      	ldr	r1, [r4, #16]
 800b2f4:	a804      	add	r0, sp, #16
 800b2f6:	f001 ffb5 	bl	800d264 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b2fa:	6820      	ldr	r0, [r4, #0]
 800b2fc:	3800      	subs	r0, #0
 800b2fe:	bf18      	it	ne
 800b300:	2001      	movne	r0, #1
 800b302:	f000 fdf7 	bl	800bef4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b306:	4d83      	ldr	r5, [pc, #524]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b308:	2600      	movs	r6, #0
 800b30a:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800b312:	f894 3020 	ldrb.w	r3, [r4, #32]
 800b316:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800b31a:	6860      	ldr	r0, [r4, #4]
 800b31c:	f001 fa20 	bl	800c760 <SUBGRF_GetFskBandwidthRegValue>
 800b320:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b324:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800b326:	68e3      	ldr	r3, [r4, #12]
 800b328:	00db      	lsls	r3, r3, #3
 800b32a:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800b32c:	7fe3      	ldrb	r3, [r4, #31]
 800b32e:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800b330:	7fa3      	ldrb	r3, [r4, #30]
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800b336:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800b33a:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800b33c:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 800b340:	b973      	cbnz	r3, 800b360 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800b342:	6961      	ldr	r1, [r4, #20]
 800b344:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800b346:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 800b34a:	2a02      	cmp	r2, #2
 800b34c:	d012      	beq.n	800b374 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800b34e:	2b02      	cmp	r3, #2
 800b350:	d010      	beq.n	800b374 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800b352:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 800b356:	496f      	ldr	r1, [pc, #444]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b358:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800b35a:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800b35c:	754b      	strb	r3, [r1, #21]
 800b35e:	e023      	b.n	800b3a8 <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800b360:	2b02      	cmp	r3, #2
 800b362:	d003      	beq.n	800b36c <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b364:	4a6b      	ldr	r2, [pc, #428]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b366:	21ff      	movs	r1, #255	@ 0xff
 800b368:	7591      	strb	r1, [r2, #22]
 800b36a:	e7ec      	b.n	800b346 <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800b36c:	4a69      	ldr	r2, [pc, #420]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b36e:	21ff      	movs	r1, #255	@ 0xff
 800b370:	7591      	strb	r1, [r2, #22]
 800b372:	e7e8      	b.n	800b346 <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800b374:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 800b378:	f102 030f 	add.w	r3, r2, #15
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d901      	bls.n	800b386 <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800b382:	2a01      	cmp	r2, #1
 800b384:	d131      	bne.n	800b3ea <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 800b386:	2300      	movs	r3, #0
 800b388:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 800b38c:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800b38e:	4a62      	ldr	r2, [pc, #392]	@ (800b518 <RadioSetRxGenericConfig+0x274>)
 800b390:	4b62      	ldr	r3, [pc, #392]	@ (800b51c <RadioSetRxGenericConfig+0x278>)
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	a801      	add	r0, sp, #4
 800b396:	f001 fa45 	bl	800c824 <RFW_Init>
 800b39a:	bb30      	cbnz	r0, 800b3ea <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800b39c:	4b5d      	ldr	r3, [pc, #372]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b39e:	2200      	movs	r2, #0
 800b3a0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800b3a2:	2101      	movs	r1, #1
 800b3a4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800b3a6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800b3a8:	f7ff faaa 	bl	800a900 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	f7ff fdb3 	bl	800af18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b3b2:	4d5b      	ldr	r5, [pc, #364]	@ (800b520 <RadioSetRxGenericConfig+0x27c>)
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f000 ffa9 	bl	800c30c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b3ba:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 800b3be:	f001 f82d 	bl	800c41c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800b3c2:	a804      	add	r0, sp, #16
 800b3c4:	f000 fc14 	bl	800bbf0 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800b3c8:	8ba0      	ldrh	r0, [r4, #28]
 800b3ca:	f000 fbe8 	bl	800bb9e <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800b3ce:	8b20      	ldrh	r0, [r4, #24]
 800b3d0:	f000 fc2b 	bl	800bc2a <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800b3d4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800b3d8:	fb07 f303 	mul.w	r3, r7, r3
 800b3dc:	68a2      	ldr	r2, [r4, #8]
 800b3de:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3e2:	f845 3c30 	str.w	r3, [r5, #-48]
    return status;
 800b3e6:	2000      	movs	r0, #0
        break;
 800b3e8:	e774      	b.n	800b2d4 <RadioSetRxGenericConfig+0x30>
                return -1;
 800b3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ee:	e771      	b.n	800b2d4 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 800b3f0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f000 808b 	beq.w	800b50e <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800b3f8:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d055      	beq.n	800b4ac <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 800b400:	f04f 08ff 	mov.w	r8, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800b404:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b406:	3800      	subs	r0, #0
 800b408:	bf18      	it	ne
 800b40a:	2001      	movne	r0, #1
 800b40c:	f000 fd72 	bl	800bef4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800b410:	b2f8      	uxtb	r0, r7
 800b412:	f000 fd7c 	bl	800bf0e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b416:	4b3f      	ldr	r3, [pc, #252]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b418:	2201      	movs	r2, #1
 800b41a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800b41e:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 800b422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800b426:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800b42a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800b42e:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 800b432:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800b436:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d03e      	beq.n	800b4bc <RadioSetRxGenericConfig+0x218>
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d041      	beq.n	800b4c6 <RadioSetRxGenericConfig+0x222>
 800b442:	b3b3      	cbz	r3, 800b4b2 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b444:	4d33      	ldr	r5, [pc, #204]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b446:	2601      	movs	r6, #1
 800b448:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800b44a:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800b44c:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800b44e:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 800b452:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800b454:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800b458:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 800b45c:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800b460:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800b464:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 800b468:	f7ff fa4a 	bl	800a900 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7ff fd53 	bl	800af18 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b472:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 800b476:	f000 ff49 	bl	800c30c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b47a:	f105 000e 	add.w	r0, r5, #14
 800b47e:	f000 ffcd 	bl	800c41c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800b482:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800b486:	42b3      	cmp	r3, r6
 800b488:	d02d      	beq.n	800b4e6 <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800b48a:	f240 7036 	movw	r0, #1846	@ 0x736
 800b48e:	f000 fb63 	bl	800bb58 <SUBGRF_ReadRegister>
 800b492:	f040 0104 	orr.w	r1, r0, #4
 800b496:	b2c9      	uxtb	r1, r1
 800b498:	f240 7036 	movw	r0, #1846	@ 0x736
 800b49c:	f000 fb4c 	bl	800bb38 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800b4a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b4a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4a6:	609a      	str	r2, [r3, #8]
    return status;
 800b4a8:	2000      	movs	r0, #0
        break;
 800b4aa:	e713      	b.n	800b2d4 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800b4ac:	f894 8014 	ldrb.w	r8, [r4, #20]
 800b4b0:	e7a8      	b.n	800b404 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b4b2:	4b18      	ldr	r3, [pc, #96]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b4ba:	e7c3      	b.n	800b444 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b4bc:	4b15      	ldr	r3, [pc, #84]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 800b4c4:	e7be      	b.n	800b444 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800b4c6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800b4ca:	3b0b      	subs	r3, #11
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d904      	bls.n	800b4dc <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800b4d2:	4b10      	ldr	r3, [pc, #64]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b4da:	e7b3      	b.n	800b444 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800b4dc:	4b0d      	ldr	r3, [pc, #52]	@ (800b514 <RadioSetRxGenericConfig+0x270>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800b4e4:	e7ae      	b.n	800b444 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800b4e6:	f240 7036 	movw	r0, #1846	@ 0x736
 800b4ea:	f000 fb35 	bl	800bb58 <SUBGRF_ReadRegister>
 800b4ee:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800b4f2:	f240 7036 	movw	r0, #1846	@ 0x736
 800b4f6:	f000 fb1f 	bl	800bb38 <SUBGRF_WriteRegister>
 800b4fa:	e7d1      	b.n	800b4a0 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 800b4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b500:	e6e8      	b.n	800b2d4 <RadioSetRxGenericConfig+0x30>
 800b502:	f04f 30ff 	mov.w	r0, #4294967295
 800b506:	e6e5      	b.n	800b2d4 <RadioSetRxGenericConfig+0x30>
            return -1;
 800b508:	f04f 30ff 	mov.w	r0, #4294967295
 800b50c:	e6e2      	b.n	800b2d4 <RadioSetRxGenericConfig+0x30>
            return -1;
 800b50e:	f04f 30ff 	mov.w	r0, #4294967295
 800b512:	e6df      	b.n	800b2d4 <RadioSetRxGenericConfig+0x30>
 800b514:	2000085c 	.word	0x2000085c
 800b518:	2000082c 	.word	0x2000082c
 800b51c:	200008b8 	.word	0x200008b8
 800b520:	20000894 	.word	0x20000894

0800b524 <RadioSetPublicNetwork>:
{
 800b524:	b510      	push	{r4, lr}
 800b526:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800b528:	4b0e      	ldr	r3, [pc, #56]	@ (800b564 <RadioSetPublicNetwork+0x40>)
 800b52a:	7318      	strb	r0, [r3, #12]
 800b52c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 800b52e:	2001      	movs	r0, #1
 800b530:	f7ff fcf2 	bl	800af18 <RadioSetModem>
    if( enable == true )
 800b534:	b154      	cbz	r4, 800b54c <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800b536:	2134      	movs	r1, #52	@ 0x34
 800b538:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800b53c:	f000 fafc 	bl	800bb38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800b540:	2144      	movs	r1, #68	@ 0x44
 800b542:	f240 7041 	movw	r0, #1857	@ 0x741
 800b546:	f000 faf7 	bl	800bb38 <SUBGRF_WriteRegister>
}
 800b54a:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800b54c:	2114      	movs	r1, #20
 800b54e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800b552:	f000 faf1 	bl	800bb38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800b556:	2124      	movs	r1, #36	@ 0x24
 800b558:	f240 7041 	movw	r0, #1857	@ 0x741
 800b55c:	f000 faec 	bl	800bb38 <SUBGRF_WriteRegister>
}
 800b560:	e7f3      	b.n	800b54a <RadioSetPublicNetwork+0x26>
 800b562:	bf00      	nop
 800b564:	2000085c 	.word	0x2000085c

0800b568 <RadioSetTxConfig>:
{
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	b083      	sub	sp, #12
 800b56e:	4604      	mov	r4, r0
 800b570:	460d      	mov	r5, r1
 800b572:	4691      	mov	r9, r2
 800b574:	461f      	mov	r7, r3
 800b576:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 800b57a:	f89d 803c 	ldrb.w	r8, [sp, #60]	@ 0x3c
 800b57e:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 800b582:	f001 f952 	bl	800c82a <RFW_DeInit>
    switch( modem )
 800b586:	2c01      	cmp	r4, #1
 800b588:	d05d      	beq.n	800b646 <RadioSetTxConfig+0xde>
 800b58a:	2c04      	cmp	r4, #4
 800b58c:	f000 80aa 	beq.w	800b6e4 <RadioSetTxConfig+0x17c>
 800b590:	b19c      	cbz	r4, 800b5ba <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800b592:	4628      	mov	r0, r5
 800b594:	f001 f86c 	bl	800c670 <SUBGRF_SetRfTxPower>
 800b598:	4c5a      	ldr	r4, [pc, #360]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b59a:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800b59e:	210e      	movs	r1, #14
 800b5a0:	f640 101f 	movw	r0, #2335	@ 0x91f
 800b5a4:	f000 fac8 	bl	800bb38 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800b5a8:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800b5ac:	f001 f942 	bl	800c834 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800b5b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b5b2:	6063      	str	r3, [r4, #4]
}
 800b5b4:	b003      	add	sp, #12
 800b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b5ba:	4c52      	ldr	r4, [pc, #328]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b5bc:	f04f 0b00 	mov.w	fp, #0
 800b5c0:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800b5c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b5c6:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800b5c8:	230b      	movs	r3, #11
 800b5ca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800b5ce:	4638      	mov	r0, r7
 800b5d0:	f001 f8c6 	bl	800c760 <SUBGRF_GetFskBandwidthRegValue>
 800b5d4:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800b5d8:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b5dc:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800b5e0:	00f6      	lsls	r6, r6, #3
 800b5e2:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800b5e8:	2318      	movs	r3, #24
 800b5ea:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800b5ec:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800b5f0:	f088 0801 	eor.w	r8, r8, #1
 800b5f4:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 800b5f8:	f1ba 0f00 	cmp.w	sl, #0
 800b5fc:	d01f      	beq.n	800b63e <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800b5fe:	22f2      	movs	r2, #242	@ 0xf2
 800b600:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800b602:	4c40      	ldr	r4, [pc, #256]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b604:	2301      	movs	r3, #1
 800b606:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800b608:	f7ff f97a 	bl	800a900 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800b60c:	2000      	movs	r0, #0
 800b60e:	f7ff fc83 	bl	800af18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b612:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800b616:	f000 fe79 	bl	800c30c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b61a:	f104 000e 	add.w	r0, r4, #14
 800b61e:	f000 fefd 	bl	800c41c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800b622:	4a39      	ldr	r2, [pc, #228]	@ (800b708 <RadioSetTxConfig+0x1a0>)
 800b624:	466b      	mov	r3, sp
 800b626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b62a:	e883 0003 	stmia.w	r3, {r0, r1}
 800b62e:	4618      	mov	r0, r3
 800b630:	f000 fade 	bl	800bbf0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800b634:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800b638:	f000 fab1 	bl	800bb9e <SUBGRF_SetWhiteningSeed>
            break;
 800b63c:	e7a9      	b.n	800b592 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800b63e:	4b31      	ldr	r3, [pc, #196]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b640:	2201      	movs	r2, #1
 800b642:	75da      	strb	r2, [r3, #23]
 800b644:	e7dd      	b.n	800b602 <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b646:	4a2f      	ldr	r2, [pc, #188]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b648:	2301      	movs	r3, #1
 800b64a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800b64e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b650:	b2db      	uxtb	r3, r3
 800b652:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800b656:	492d      	ldr	r1, [pc, #180]	@ (800b70c <RadioSetTxConfig+0x1a4>)
 800b658:	5dc9      	ldrb	r1, [r1, r7]
 800b65a:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800b65e:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 800b662:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800b666:	b91f      	cbnz	r7, 800b670 <RadioSetTxConfig+0x108>
 800b668:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b66a:	3a0b      	subs	r2, #11
 800b66c:	2a01      	cmp	r2, #1
 800b66e:	d92b      	bls.n	800b6c8 <RadioSetTxConfig+0x160>
 800b670:	2f01      	cmp	r7, #1
 800b672:	d026      	beq.n	800b6c2 <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800b674:	4a23      	ldr	r2, [pc, #140]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b676:	2100      	movs	r1, #0
 800b678:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b67c:	4a21      	ldr	r2, [pc, #132]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b67e:	2101      	movs	r1, #1
 800b680:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800b682:	3b05      	subs	r3, #5
 800b684:	b2db      	uxtb	r3, r3
 800b686:	428b      	cmp	r3, r1
 800b688:	d923      	bls.n	800b6d2 <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800b68a:	4b1e      	ldr	r3, [pc, #120]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b68c:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800b68e:	4c1d      	ldr	r4, [pc, #116]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b690:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800b694:	4b1e      	ldr	r3, [pc, #120]	@ (800b710 <RadioSetTxConfig+0x1a8>)
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800b69a:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800b69e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800b6a2:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800b6a6:	f7ff f92b 	bl	800a900 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800b6aa:	2001      	movs	r0, #1
 800b6ac:	f7ff fc34 	bl	800af18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b6b0:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800b6b4:	f000 fe2a 	bl	800c30c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b6b8:	f104 000e 	add.w	r0, r4, #14
 800b6bc:	f000 feae 	bl	800c41c <SUBGRF_SetPacketParams>
            break;
 800b6c0:	e767      	b.n	800b592 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800b6c2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b6c4:	2a0c      	cmp	r2, #12
 800b6c6:	d1d5      	bne.n	800b674 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800b6c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b6ca:	2101      	movs	r1, #1
 800b6cc:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800b6d0:	e7d4      	b.n	800b67c <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 800b6d2:	2e0b      	cmp	r6, #11
 800b6d4:	d803      	bhi.n	800b6de <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	220c      	movs	r2, #12
 800b6da:	839a      	strh	r2, [r3, #28]
 800b6dc:	e7d7      	b.n	800b68e <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800b6de:	4b09      	ldr	r3, [pc, #36]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b6e0:	839e      	strh	r6, [r3, #28]
 800b6e2:	e7d4      	b.n	800b68e <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 800b6e4:	2004      	movs	r0, #4
 800b6e6:	f7ff fc17 	bl	800af18 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800b6ea:	4806      	ldr	r0, [pc, #24]	@ (800b704 <RadioSetTxConfig+0x19c>)
 800b6ec:	2302      	movs	r3, #2
 800b6ee:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800b6f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b6f4:	6483      	str	r3, [r0, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800b6f6:	2316      	movs	r3, #22
 800b6f8:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b6fc:	3038      	adds	r0, #56	@ 0x38
 800b6fe:	f000 fe05 	bl	800c30c <SUBGRF_SetModulationParams>
            break;
 800b702:	e746      	b.n	800b592 <RadioSetTxConfig+0x2a>
 800b704:	2000085c 	.word	0x2000085c
 800b708:	0801104c 	.word	0x0801104c
 800b70c:	08011c40 	.word	0x08011c40
 800b710:	2000007d 	.word	0x2000007d

0800b714 <RadioSetRxConfig>:
{
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	b087      	sub	sp, #28
 800b71a:	4604      	mov	r4, r0
 800b71c:	460e      	mov	r6, r1
 800b71e:	4615      	mov	r5, r2
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 800b726:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 800b72a:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 800b72e:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 800b732:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
    SubgRf.RxContinuous = rxContinuous;
 800b736:	4bb0      	ldr	r3, [pc, #704]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b738:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 800b73c:	f001 f875 	bl	800c82a <RFW_DeInit>
    if( rxContinuous == true )
 800b740:	f1b8 0f00 	cmp.w	r8, #0
 800b744:	d001      	beq.n	800b74a <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800b746:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800b74a:	b16f      	cbz	r7, 800b768 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 800b74c:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 800b750:	4baa      	ldr	r3, [pc, #680]	@ (800b9fc <RadioSetRxConfig+0x2e8>)
 800b752:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800b754:	2c01      	cmp	r4, #1
 800b756:	f000 80d2 	beq.w	800b8fe <RadioSetRxConfig+0x1ea>
 800b75a:	2c05      	cmp	r4, #5
 800b75c:	d008      	beq.n	800b770 <RadioSetRxConfig+0x5c>
 800b75e:	2c00      	cmp	r4, #0
 800b760:	d07c      	beq.n	800b85c <RadioSetRxConfig+0x148>
}
 800b762:	b007      	add	sp, #28
 800b764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800b768:	4ba4      	ldr	r3, [pc, #656]	@ (800b9fc <RadioSetRxConfig+0x2e8>)
 800b76a:	22ff      	movs	r2, #255	@ 0xff
 800b76c:	701a      	strb	r2, [r3, #0]
 800b76e:	e7f1      	b.n	800b754 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800b770:	2001      	movs	r0, #1
 800b772:	f000 fbbf 	bl	800bef4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b776:	4ca0      	ldr	r4, [pc, #640]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b778:	2700      	movs	r7, #0
 800b77a:	f884 7038 	strb.w	r7, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800b77e:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800b780:	2309      	movs	r3, #9
 800b782:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800b786:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800b78a:	6423      	str	r3, [r4, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800b78c:	4630      	mov	r0, r6
 800b78e:	f000 ffe7 	bl	800c760 <SUBGRF_GetFskBandwidthRegValue>
 800b792:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b796:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800b798:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800b79c:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800b7a0:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800b7a2:	2310      	movs	r3, #16
 800b7a4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800b7a6:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800b7a8:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800b7aa:	4b94      	ldr	r3, [pc, #592]	@ (800b9fc <RadioSetRxConfig+0x2e8>)
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800b7b4:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800b7b6:	2005      	movs	r0, #5
 800b7b8:	f7ff fbae 	bl	800af18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b7bc:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800b7c0:	f000 fda4 	bl	800c30c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b7c4:	f104 000e 	add.w	r0, r4, #14
 800b7c8:	f000 fe28 	bl	800c41c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800b7cc:	ab02      	add	r3, sp, #8
 800b7ce:	4a8c      	ldr	r2, [pc, #560]	@ (800ba00 <RadioSetRxConfig+0x2ec>)
 800b7d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b7d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f000 fa09 	bl	800bbf0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800b7de:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800b7e2:	f000 f9dc 	bl	800bb9e <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800b7e6:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800b7ea:	f7ff f80f 	bl	800a80c <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800b7ee:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 800b7f2:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800b7f6:	f7ff f80d 	bl	800a814 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800b7fa:	2104      	movs	r1, #4
 800b7fc:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 800b800:	f7ff f808 	bl	800a814 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800b804:	f640 009b 	movw	r0, #2203	@ 0x89b
 800b808:	f7ff f800 	bl	800a80c <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800b80c:	f000 01e3 	and.w	r1, r0, #227	@ 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800b810:	f041 0108 	orr.w	r1, r1, #8
 800b814:	f640 009b 	movw	r0, #2203	@ 0x89b
 800b818:	f7fe fffc 	bl	800a814 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800b81c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800b820:	f7fe fff4 	bl	800a80c <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800b824:	f000 01e7 	and.w	r1, r0, #231	@ 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800b828:	f041 0118 	orr.w	r1, r1, #24
 800b82c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 800b830:	f7fe fff0 	bl	800a814 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800b834:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800b838:	f7fe ffe8 	bl	800a80c <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800b83c:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800b840:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 800b844:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800b848:	f7fe ffe4 	bl	800a814 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800b84c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800b850:	fb03 f30a 	mul.w	r3, r3, sl
 800b854:	fbb3 f3f5 	udiv	r3, r3, r5
 800b858:	60a3      	str	r3, [r4, #8]
            break;
 800b85a:	e782      	b.n	800b762 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800b85c:	2000      	movs	r0, #0
 800b85e:	f000 fb49 	bl	800bef4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800b862:	4c65      	ldr	r4, [pc, #404]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b864:	f04f 0800 	mov.w	r8, #0
 800b868:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800b86c:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800b86e:	230b      	movs	r3, #11
 800b870:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800b874:	4630      	mov	r0, r6
 800b876:	f000 ff73 	bl	800c760 <SUBGRF_GetFskBandwidthRegValue>
 800b87a:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800b87e:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800b882:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800b886:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800b88a:	2304      	movs	r3, #4
 800b88c:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800b88e:	2318      	movs	r3, #24
 800b890:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800b892:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800b896:	f087 0701 	eor.w	r7, r7, #1
 800b89a:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800b89c:	4b57      	ldr	r3, [pc, #348]	@ (800b9fc <RadioSetRxConfig+0x2e8>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 800b8a2:	f1bb 0f00 	cmp.w	fp, #0
 800b8a6:	d026      	beq.n	800b8f6 <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800b8a8:	22f2      	movs	r2, #242	@ 0xf2
 800b8aa:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800b8ac:	4c52      	ldr	r4, [pc, #328]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800b8b2:	f7ff f825 	bl	800a900 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800b8b6:	2000      	movs	r0, #0
 800b8b8:	f7ff fb2e 	bl	800af18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b8bc:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800b8c0:	f000 fd24 	bl	800c30c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b8c4:	f104 000e 	add.w	r0, r4, #14
 800b8c8:	f000 fda8 	bl	800c41c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800b8cc:	4a4d      	ldr	r2, [pc, #308]	@ (800ba04 <RadioSetRxConfig+0x2f0>)
 800b8ce:	ab04      	add	r3, sp, #16
 800b8d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b8d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 f989 	bl	800bbf0 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800b8de:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800b8e2:	f000 f95c 	bl	800bb9e <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800b8e6:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800b8ea:	fb03 f30a 	mul.w	r3, r3, sl
 800b8ee:	fbb3 f3f5 	udiv	r3, r3, r5
 800b8f2:	60a3      	str	r3, [r4, #8]
            break;
 800b8f4:	e735      	b.n	800b762 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800b8f6:	4b40      	ldr	r3, [pc, #256]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	75da      	strb	r2, [r3, #23]
 800b8fc:	e7d6      	b.n	800b8ac <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800b8fe:	2000      	movs	r0, #0
 800b900:	f000 faf8 	bl	800bef4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800b904:	4a3c      	ldr	r2, [pc, #240]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b906:	2301      	movs	r3, #1
 800b908:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800b90c:	b2eb      	uxtb	r3, r5
 800b90e:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800b912:	493d      	ldr	r1, [pc, #244]	@ (800ba08 <RadioSetRxConfig+0x2f4>)
 800b914:	5d89      	ldrb	r1, [r1, r6]
 800b916:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800b91a:	9901      	ldr	r1, [sp, #4]
 800b91c:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800b920:	b91e      	cbnz	r6, 800b92a <RadioSetRxConfig+0x216>
 800b922:	f1a5 020b 	sub.w	r2, r5, #11
 800b926:	2a01      	cmp	r2, #1
 800b928:	d94b      	bls.n	800b9c2 <RadioSetRxConfig+0x2ae>
 800b92a:	2e01      	cmp	r6, #1
 800b92c:	d047      	beq.n	800b9be <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800b92e:	4a32      	ldr	r2, [pc, #200]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b930:	2100      	movs	r1, #0
 800b932:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800b936:	4a30      	ldr	r2, [pc, #192]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b938:	2101      	movs	r1, #1
 800b93a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800b93c:	3b05      	subs	r3, #5
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	428b      	cmp	r3, r1
 800b942:	d943      	bls.n	800b9cc <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800b944:	4b2c      	ldr	r3, [pc, #176]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b946:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800b94a:	4c2b      	ldr	r4, [pc, #172]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b94c:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800b94e:	4b2b      	ldr	r3, [pc, #172]	@ (800b9fc <RadioSetRxConfig+0x2e8>)
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800b954:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800b958:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 800b95c:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 800b960:	f7fe ffce 	bl	800a900 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800b964:	2001      	movs	r0, #1
 800b966:	f7ff fad7 	bl	800af18 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800b96a:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800b96e:	f000 fccd 	bl	800c30c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800b972:	f104 000e 	add.w	r0, r4, #14
 800b976:	f000 fd51 	bl	800c41c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800b97a:	fa5f f08a 	uxtb.w	r0, sl
 800b97e:	f000 fac6 	bl	800bf0e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800b982:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800b986:	f000 f8e7 	bl	800bb58 <SUBGRF_ReadRegister>
 800b98a:	f000 0101 	and.w	r1, r0, #1
 800b98e:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 800b992:	f000 f8d1 	bl	800bb38 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800b996:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d021      	beq.n	800b9e2 <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800b99e:	f240 7036 	movw	r0, #1846	@ 0x736
 800b9a2:	f000 f8d9 	bl	800bb58 <SUBGRF_ReadRegister>
 800b9a6:	f040 0104 	orr.w	r1, r0, #4
 800b9aa:	b2c9      	uxtb	r1, r1
 800b9ac:	f240 7036 	movw	r0, #1846	@ 0x736
 800b9b0:	f000 f8c2 	bl	800bb38 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800b9b4:	4b10      	ldr	r3, [pc, #64]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b9b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b9ba:	609a      	str	r2, [r3, #8]
}
 800b9bc:	e6d1      	b.n	800b762 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800b9be:	2d0c      	cmp	r5, #12
 800b9c0:	d1b5      	bne.n	800b92e <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800b9c2:	4a0d      	ldr	r2, [pc, #52]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b9c4:	2101      	movs	r1, #1
 800b9c6:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 800b9ca:	e7b4      	b.n	800b936 <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 800b9cc:	f1b9 0f0b 	cmp.w	r9, #11
 800b9d0:	d803      	bhi.n	800b9da <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	220c      	movs	r2, #12
 800b9d6:	839a      	strh	r2, [r3, #28]
 800b9d8:	e7b7      	b.n	800b94a <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800b9da:	4b07      	ldr	r3, [pc, #28]	@ (800b9f8 <RadioSetRxConfig+0x2e4>)
 800b9dc:	f8a3 901c 	strh.w	r9, [r3, #28]
 800b9e0:	e7b3      	b.n	800b94a <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800b9e2:	f240 7036 	movw	r0, #1846	@ 0x736
 800b9e6:	f000 f8b7 	bl	800bb58 <SUBGRF_ReadRegister>
 800b9ea:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 800b9ee:	f240 7036 	movw	r0, #1846	@ 0x736
 800b9f2:	f000 f8a1 	bl	800bb38 <SUBGRF_WriteRegister>
 800b9f6:	e7dd      	b.n	800b9b4 <RadioSetRxConfig+0x2a0>
 800b9f8:	2000085c 	.word	0x2000085c
 800b9fc:	2000007d 	.word	0x2000007d
 800ba00:	08011054 	.word	0x08011054
 800ba04:	0801104c 	.word	0x0801104c
 800ba08:	08011c40 	.word	0x08011c40

0800ba0c <RadioIsChannelFree>:
{
 800ba0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba0e:	b08b      	sub	sp, #44	@ 0x2c
 800ba10:	4604      	mov	r4, r0
 800ba12:	460f      	mov	r7, r1
 800ba14:	4616      	mov	r6, r2
 800ba16:	461d      	mov	r5, r3
    RadioStandby( );
 800ba18:	f7fe ff72 	bl	800a900 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	f7ff fa7b 	bl	800af18 <RadioSetModem>
    RadioSetChannel( freq );
 800ba22:	4620      	mov	r0, r4
 800ba24:	f7ff f94e 	bl	800acc4 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800ba28:	2301      	movs	r3, #1
 800ba2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba2c:	2400      	movs	r4, #0
 800ba2e:	9408      	str	r4, [sp, #32]
 800ba30:	9407      	str	r4, [sp, #28]
 800ba32:	9406      	str	r4, [sp, #24]
 800ba34:	9405      	str	r4, [sp, #20]
 800ba36:	9404      	str	r4, [sp, #16]
 800ba38:	9403      	str	r4, [sp, #12]
 800ba3a:	9402      	str	r4, [sp, #8]
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	9700      	str	r7, [sp, #0]
 800ba42:	4623      	mov	r3, r4
 800ba44:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800ba48:	4639      	mov	r1, r7
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f7ff fe62 	bl	800b714 <RadioSetRxConfig>
    RadioRx( 0 );
 800ba50:	4620      	mov	r0, r4
 800ba52:	f7ff f94f 	bl	800acf4 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800ba56:	f7ff f901 	bl	800ac5c <RadioGetWakeupTime>
 800ba5a:	f7f7 f835 	bl	8002ac8 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800ba5e:	f001 feb9 	bl	800d7d4 <UTIL_TIMER_GetCurrentTime>
 800ba62:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800ba64:	4620      	mov	r0, r4
 800ba66:	f001 febf 	bl	800d7e8 <UTIL_TIMER_GetElapsedTime>
 800ba6a:	42a8      	cmp	r0, r5
 800ba6c:	d206      	bcs.n	800ba7c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 800ba6e:	2000      	movs	r0, #0
 800ba70:	f7ff f901 	bl	800ac76 <RadioRssi>
        if( rssi > rssiThresh )
 800ba74:	42b0      	cmp	r0, r6
 800ba76:	ddf5      	ble.n	800ba64 <RadioIsChannelFree+0x58>
            status = false;
 800ba78:	2400      	movs	r4, #0
 800ba7a:	e000      	b.n	800ba7e <RadioIsChannelFree+0x72>
    bool status = true;
 800ba7c:	2401      	movs	r4, #1
    RadioStandby( );
 800ba7e:	f7fe ff3f 	bl	800a900 <RadioStandby>
}
 800ba82:	4620      	mov	r0, r4
 800ba84:	b00b      	add	sp, #44	@ 0x2c
 800ba86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ba88 <RadioInit>:
{
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	b082      	sub	sp, #8
    RadioEvents = events;
 800ba8c:	4b1d      	ldr	r3, [pc, #116]	@ (800bb04 <RadioInit+0x7c>)
 800ba8e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 800ba90:	4d1d      	ldr	r5, [pc, #116]	@ (800bb08 <RadioInit+0x80>)
 800ba92:	2400      	movs	r4, #0
 800ba94:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 800ba96:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 800ba98:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800ba9a:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 800ba9c:	481b      	ldr	r0, [pc, #108]	@ (800bb0c <RadioInit+0x84>)
 800ba9e:	f000 fb27 	bl	800c0f0 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 800baa2:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 800baa4:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 800baa6:	f000 fa53 	bl	800bf50 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800baaa:	4621      	mov	r1, r4
 800baac:	4620      	mov	r0, r4
 800baae:	f000 fd27 	bl	800c500 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800bab2:	2204      	movs	r2, #4
 800bab4:	4621      	mov	r1, r4
 800bab6:	2001      	movs	r0, #1
 800bab8:	f000 fb9a 	bl	800c1f0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800babc:	4623      	mov	r3, r4
 800babe:	4622      	mov	r2, r4
 800bac0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800bac4:	4608      	mov	r0, r1
 800bac6:	f000 fada 	bl	800c07e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800baca:	f7ff f945 	bl	800ad58 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800bace:	4e10      	ldr	r6, [pc, #64]	@ (800bb10 <RadioInit+0x88>)
 800bad0:	9400      	str	r4, [sp, #0]
 800bad2:	4b10      	ldr	r3, [pc, #64]	@ (800bb14 <RadioInit+0x8c>)
 800bad4:	4622      	mov	r2, r4
 800bad6:	f04f 31ff 	mov.w	r1, #4294967295
 800bada:	4630      	mov	r0, r6
 800badc:	f001 fe5c 	bl	800d798 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800bae0:	4d0d      	ldr	r5, [pc, #52]	@ (800bb18 <RadioInit+0x90>)
 800bae2:	9400      	str	r4, [sp, #0]
 800bae4:	4b0d      	ldr	r3, [pc, #52]	@ (800bb1c <RadioInit+0x94>)
 800bae6:	4622      	mov	r2, r4
 800bae8:	f04f 31ff 	mov.w	r1, #4294967295
 800baec:	4628      	mov	r0, r5
 800baee:	f001 fe53 	bl	800d798 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800baf2:	4630      	mov	r0, r6
 800baf4:	f001 feae 	bl	800d854 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800baf8:	4628      	mov	r0, r5
 800bafa:	f001 feab 	bl	800d854 <UTIL_TIMER_Stop>
}
 800bafe:	b002      	add	sp, #8
 800bb00:	bd70      	pop	{r4, r5, r6, pc}
 800bb02:	bf00      	nop
 800bb04:	200008b8 	.word	0x200008b8
 800bb08:	2000085c 	.word	0x2000085c
 800bb0c:	0800ac49 	.word	0x0800ac49
 800bb10:	20000844 	.word	0x20000844
 800bb14:	0800a6fd 	.word	0x0800a6fd
 800bb18:	2000082c 	.word	0x2000082c
 800bb1c:	0800a719 	.word	0x0800a719

0800bb20 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 800bb20:	4b01      	ldr	r3, [pc, #4]	@ (800bb28 <SUBGRF_GetOperatingMode+0x8>)
 800bb22:	7818      	ldrb	r0, [r3, #0]
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	200009ca 	.word	0x200009ca

0800bb2c <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 800bb2c:	4b01      	ldr	r3, [pc, #4]	@ (800bb34 <SUBGRF_GetPacketType+0x8>)
 800bb2e:	7818      	ldrb	r0, [r3, #0]
 800bb30:	4770      	bx	lr
 800bb32:	bf00      	nop
 800bb34:	200009c9 	.word	0x200009c9

0800bb38 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800bb38:	b500      	push	{lr}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800bb40:	2301      	movs	r3, #1
 800bb42:	f10d 0207 	add.w	r2, sp, #7
 800bb46:	4601      	mov	r1, r0
 800bb48:	4802      	ldr	r0, [pc, #8]	@ (800bb54 <SUBGRF_WriteRegister+0x1c>)
 800bb4a:	f7fc fa8b 	bl	8008064 <HAL_SUBGHZ_WriteRegisters>
}
 800bb4e:	b003      	add	sp, #12
 800bb50:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb54:	20000574 	.word	0x20000574

0800bb58 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800bb58:	b500      	push	{lr}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800bb5e:	2301      	movs	r3, #1
 800bb60:	f10d 0207 	add.w	r2, sp, #7
 800bb64:	4803      	ldr	r0, [pc, #12]	@ (800bb74 <SUBGRF_ReadRegister+0x1c>)
 800bb66:	f7fc facd 	bl	8008104 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 800bb6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800bb6e:	b003      	add	sp, #12
 800bb70:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb74:	20000574 	.word	0x20000574

0800bb78 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 800bb78:	b510      	push	{r4, lr}
 800bb7a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 800bb7c:	f001 fb10 	bl	800d1a0 <RBI_IsDCDC>
 800bb80:	2801      	cmp	r0, #1
 800bb82:	d000      	beq.n	800bb86 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 800bb84:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 800bb86:	f640 1023 	movw	r0, #2339	@ 0x923
 800bb8a:	f7ff ffe5 	bl	800bb58 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 800bb8e:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 800bb92:	4321      	orrs	r1, r4
 800bb94:	f640 1023 	movw	r0, #2339	@ 0x923
 800bb98:	f7ff ffce 	bl	800bb38 <SUBGRF_WriteRegister>
}
 800bb9c:	e7f2      	b.n	800bb84 <Radio_SMPS_Set+0xc>

0800bb9e <SUBGRF_SetWhiteningSeed>:
{
 800bb9e:	b510      	push	{r4, lr}
 800bba0:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 800bba2:	f7ff ffc3 	bl	800bb2c <SUBGRF_GetPacketType>
 800bba6:	b100      	cbz	r0, 800bbaa <SUBGRF_SetWhiteningSeed+0xc>
}
 800bba8:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800bbaa:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800bbae:	f7ff ffd3 	bl	800bb58 <SUBGRF_ReadRegister>
 800bbb2:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800bbb6:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800bbba:	4301      	orrs	r1, r0
 800bbbc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 800bbc0:	f7ff ffba 	bl	800bb38 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800bbc4:	b2e1      	uxtb	r1, r4
 800bbc6:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 800bbca:	f7ff ffb5 	bl	800bb38 <SUBGRF_WriteRegister>
}
 800bbce:	e7eb      	b.n	800bba8 <SUBGRF_SetWhiteningSeed+0xa>

0800bbd0 <SUBGRF_WriteRegisters>:
{
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbd4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bbd8:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800bbda:	460a      	mov	r2, r1
 800bbdc:	4601      	mov	r1, r0
 800bbde:	4803      	ldr	r0, [pc, #12]	@ (800bbec <SUBGRF_WriteRegisters+0x1c>)
 800bbe0:	f7fc fa40 	bl	8008064 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbe4:	f384 8810 	msr	PRIMASK, r4
}
 800bbe8:	bd10      	pop	{r4, pc}
 800bbea:	bf00      	nop
 800bbec:	20000574 	.word	0x20000574

0800bbf0 <SUBGRF_SetSyncWord>:
{
 800bbf0:	b508      	push	{r3, lr}
 800bbf2:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800bbf4:	2208      	movs	r2, #8
 800bbf6:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800bbfa:	f7ff ffe9 	bl	800bbd0 <SUBGRF_WriteRegisters>
}
 800bbfe:	2000      	movs	r0, #0
 800bc00:	bd08      	pop	{r3, pc}

0800bc02 <SUBGRF_SetCrcSeed>:
{
 800bc02:	b500      	push	{lr}
 800bc04:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800bc06:	0a03      	lsrs	r3, r0, #8
 800bc08:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800bc0c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800bc10:	f7ff ff8c 	bl	800bb2c <SUBGRF_GetPacketType>
 800bc14:	b110      	cbz	r0, 800bc1c <SUBGRF_SetCrcSeed+0x1a>
}
 800bc16:	b003      	add	sp, #12
 800bc18:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800bc1c:	2202      	movs	r2, #2
 800bc1e:	a901      	add	r1, sp, #4
 800bc20:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800bc24:	f7ff ffd4 	bl	800bbd0 <SUBGRF_WriteRegisters>
}
 800bc28:	e7f5      	b.n	800bc16 <SUBGRF_SetCrcSeed+0x14>

0800bc2a <SUBGRF_SetCrcPolynomial>:
{
 800bc2a:	b500      	push	{lr}
 800bc2c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800bc2e:	0a03      	lsrs	r3, r0, #8
 800bc30:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800bc34:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800bc38:	f7ff ff78 	bl	800bb2c <SUBGRF_GetPacketType>
 800bc3c:	b110      	cbz	r0, 800bc44 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800bc3e:	b003      	add	sp, #12
 800bc40:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800bc44:	2202      	movs	r2, #2
 800bc46:	a901      	add	r1, sp, #4
 800bc48:	f240 60be 	movw	r0, #1726	@ 0x6be
 800bc4c:	f7ff ffc0 	bl	800bbd0 <SUBGRF_WriteRegisters>
}
 800bc50:	e7f5      	b.n	800bc3e <SUBGRF_SetCrcPolynomial+0x14>
	...

0800bc54 <SUBGRF_ReadRegisters>:
{
 800bc54:	b510      	push	{r4, lr}
 800bc56:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc58:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bc5c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 800bc5e:	460a      	mov	r2, r1
 800bc60:	4601      	mov	r1, r0
 800bc62:	4803      	ldr	r0, [pc, #12]	@ (800bc70 <SUBGRF_ReadRegisters+0x1c>)
 800bc64:	f7fc fa4e 	bl	8008104 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc68:	f384 8810 	msr	PRIMASK, r4
}
 800bc6c:	bd10      	pop	{r4, pc}
 800bc6e:	bf00      	nop
 800bc70:	20000574 	.word	0x20000574

0800bc74 <SUBGRF_WriteBuffer>:
{
 800bc74:	b510      	push	{r4, lr}
 800bc76:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc78:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bc7c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 800bc7e:	460a      	mov	r2, r1
 800bc80:	4601      	mov	r1, r0
 800bc82:	4803      	ldr	r0, [pc, #12]	@ (800bc90 <SUBGRF_WriteBuffer+0x1c>)
 800bc84:	f7fc fb94 	bl	80083b0 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc88:	f384 8810 	msr	PRIMASK, r4
}
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	bf00      	nop
 800bc90:	20000574 	.word	0x20000574

0800bc94 <SUBGRF_SetPayload>:
{
 800bc94:	b508      	push	{r3, lr}
 800bc96:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800bc98:	4601      	mov	r1, r0
 800bc9a:	2000      	movs	r0, #0
 800bc9c:	f7ff ffea 	bl	800bc74 <SUBGRF_WriteBuffer>
}
 800bca0:	bd08      	pop	{r3, pc}
	...

0800bca4 <SUBGRF_ReadBuffer>:
{
 800bca4:	b510      	push	{r4, lr}
 800bca6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bca8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bcac:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800bcae:	460a      	mov	r2, r1
 800bcb0:	4601      	mov	r1, r0
 800bcb2:	4803      	ldr	r0, [pc, #12]	@ (800bcc0 <SUBGRF_ReadBuffer+0x1c>)
 800bcb4:	f7fc fbc6 	bl	8008444 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcb8:	f384 8810 	msr	PRIMASK, r4
}
 800bcbc:	bd10      	pop	{r4, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20000574 	.word	0x20000574

0800bcc4 <SUBGRF_WriteCommand>:
{
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcc8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800bccc:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800bcce:	460a      	mov	r2, r1
 800bcd0:	4601      	mov	r1, r0
 800bcd2:	4803      	ldr	r0, [pc, #12]	@ (800bce0 <SUBGRF_WriteCommand+0x1c>)
 800bcd4:	f7fc fa6a 	bl	80081ac <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcd8:	f384 8810 	msr	PRIMASK, r4
}
 800bcdc:	bd10      	pop	{r4, pc}
 800bcde:	bf00      	nop
 800bce0:	20000574 	.word	0x20000574

0800bce4 <SUBGRF_SetSleep>:
{
 800bce4:	b510      	push	{r4, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800bcea:	2000      	movs	r0, #0
 800bcec:	f001 fa4c 	bl	800d188 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800bcf0:	2002      	movs	r0, #2
 800bcf2:	f7ff ff41 	bl	800bb78 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800bcf6:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800bcfa:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800bcfe:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800bd00:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800bd04:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800bd06:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f10d 0107 	add.w	r1, sp, #7
 800bd10:	2084      	movs	r0, #132	@ 0x84
 800bd12:	f7ff ffd7 	bl	800bcc4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800bd16:	4b02      	ldr	r3, [pc, #8]	@ (800bd20 <SUBGRF_SetSleep+0x3c>)
 800bd18:	2200      	movs	r2, #0
 800bd1a:	701a      	strb	r2, [r3, #0]
}
 800bd1c:	b002      	add	sp, #8
 800bd1e:	bd10      	pop	{r4, pc}
 800bd20:	200009ca 	.word	0x200009ca

0800bd24 <SUBGRF_SetStandby>:
{
 800bd24:	b500      	push	{lr}
 800bd26:	b083      	sub	sp, #12
 800bd28:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	f10d 0107 	add.w	r1, sp, #7
 800bd32:	2080      	movs	r0, #128	@ 0x80
 800bd34:	f7ff ffc6 	bl	800bcc4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800bd38:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bd3c:	b92b      	cbnz	r3, 800bd4a <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800bd3e:	4b05      	ldr	r3, [pc, #20]	@ (800bd54 <SUBGRF_SetStandby+0x30>)
 800bd40:	2201      	movs	r2, #1
 800bd42:	701a      	strb	r2, [r3, #0]
}
 800bd44:	b003      	add	sp, #12
 800bd46:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800bd4a:	4b02      	ldr	r3, [pc, #8]	@ (800bd54 <SUBGRF_SetStandby+0x30>)
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	701a      	strb	r2, [r3, #0]
}
 800bd50:	e7f8      	b.n	800bd44 <SUBGRF_SetStandby+0x20>
 800bd52:	bf00      	nop
 800bd54:	200009ca 	.word	0x200009ca

0800bd58 <SUBGRF_SetTx>:
{
 800bd58:	b500      	push	{lr}
 800bd5a:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 800bd5c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd88 <SUBGRF_SetTx+0x30>)
 800bd5e:	2204      	movs	r2, #4
 800bd60:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800bd62:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bd66:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800bd6a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bd6e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800bd72:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800bd76:	2203      	movs	r2, #3
 800bd78:	a901      	add	r1, sp, #4
 800bd7a:	2083      	movs	r0, #131	@ 0x83
 800bd7c:	f7ff ffa2 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800bd80:	b003      	add	sp, #12
 800bd82:	f85d fb04 	ldr.w	pc, [sp], #4
 800bd86:	bf00      	nop
 800bd88:	200009ca 	.word	0x200009ca

0800bd8c <SUBGRF_SendPayload>:
{
 800bd8c:	b510      	push	{r4, lr}
 800bd8e:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 800bd90:	f7ff ff80 	bl	800bc94 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800bd94:	4620      	mov	r0, r4
 800bd96:	f7ff ffdf 	bl	800bd58 <SUBGRF_SetTx>
}
 800bd9a:	bd10      	pop	{r4, pc}

0800bd9c <SUBGRF_SetRx>:
{
 800bd9c:	b500      	push	{lr}
 800bd9e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 800bda0:	4b0a      	ldr	r3, [pc, #40]	@ (800bdcc <SUBGRF_SetRx+0x30>)
 800bda2:	2205      	movs	r2, #5
 800bda4:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800bda6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800bdaa:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800bdae:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800bdb2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800bdb6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800bdba:	2203      	movs	r2, #3
 800bdbc:	a901      	add	r1, sp, #4
 800bdbe:	2082      	movs	r0, #130	@ 0x82
 800bdc0:	f7ff ff80 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800bdc4:	b003      	add	sp, #12
 800bdc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdca:	bf00      	nop
 800bdcc:	200009ca 	.word	0x200009ca

0800bdd0 <SUBGRF_GetRandom>:
{
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	b082      	sub	sp, #8
    uint32_t number = 0;
 800bdd4:	2600      	movs	r6, #0
 800bdd6:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800bdd8:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800bddc:	f7ff febc 	bl	800bb58 <SUBGRF_ReadRegister>
 800bde0:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800bde2:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 800bde6:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800bdea:	f7ff fea5 	bl	800bb38 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800bdee:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800bdf2:	f7ff feb1 	bl	800bb58 <SUBGRF_ReadRegister>
 800bdf6:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800bdf8:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 800bdfc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800be00:	f7ff fe9a 	bl	800bb38 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800be04:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800be08:	f7ff ffc8 	bl	800bd9c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800be0c:	2204      	movs	r2, #4
 800be0e:	eb0d 0102 	add.w	r1, sp, r2
 800be12:	f640 0019 	movw	r0, #2073	@ 0x819
 800be16:	f7ff ff1d 	bl	800bc54 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7ff ff82 	bl	800bd24 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800be20:	4629      	mov	r1, r5
 800be22:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 800be26:	f7ff fe87 	bl	800bb38 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800be2a:	4621      	mov	r1, r4
 800be2c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 800be30:	f7ff fe82 	bl	800bb38 <SUBGRF_WriteRegister>
}
 800be34:	9801      	ldr	r0, [sp, #4]
 800be36:	b002      	add	sp, #8
 800be38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800be3c <SUBGRF_SetRxBoosted>:
{
 800be3c:	b510      	push	{r4, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 800be42:	4b0c      	ldr	r3, [pc, #48]	@ (800be74 <SUBGRF_SetRxBoosted+0x38>)
 800be44:	2205      	movs	r2, #5
 800be46:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800be48:	2197      	movs	r1, #151	@ 0x97
 800be4a:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 800be4e:	f7ff fe73 	bl	800bb38 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800be52:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800be56:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800be5a:	f3c4 2307 	ubfx	r3, r4, #8, #8
 800be5e:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800be62:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800be66:	2203      	movs	r2, #3
 800be68:	a901      	add	r1, sp, #4
 800be6a:	2082      	movs	r0, #130	@ 0x82
 800be6c:	f7ff ff2a 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800be70:	b002      	add	sp, #8
 800be72:	bd10      	pop	{r4, pc}
 800be74:	200009ca 	.word	0x200009ca

0800be78 <SUBGRF_SetRxDutyCycle>:
{
 800be78:	b500      	push	{lr}
 800be7a:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800be7c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800be80:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800be84:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800be88:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800be8c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800be90:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800be94:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800be98:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800be9c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800bea0:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800bea4:	2206      	movs	r2, #6
 800bea6:	4669      	mov	r1, sp
 800bea8:	2094      	movs	r0, #148	@ 0x94
 800beaa:	f7ff ff0b 	bl	800bcc4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800beae:	4b03      	ldr	r3, [pc, #12]	@ (800bebc <SUBGRF_SetRxDutyCycle+0x44>)
 800beb0:	2206      	movs	r2, #6
 800beb2:	701a      	strb	r2, [r3, #0]
}
 800beb4:	b003      	add	sp, #12
 800beb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800beba:	bf00      	nop
 800bebc:	200009ca 	.word	0x200009ca

0800bec0 <SUBGRF_SetCad>:
{
 800bec0:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800bec2:	2200      	movs	r2, #0
 800bec4:	4611      	mov	r1, r2
 800bec6:	20c5      	movs	r0, #197	@ 0xc5
 800bec8:	f7ff fefc 	bl	800bcc4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800becc:	4b01      	ldr	r3, [pc, #4]	@ (800bed4 <SUBGRF_SetCad+0x14>)
 800bece:	2207      	movs	r2, #7
 800bed0:	701a      	strb	r2, [r3, #0]
}
 800bed2:	bd08      	pop	{r3, pc}
 800bed4:	200009ca 	.word	0x200009ca

0800bed8 <SUBGRF_SetTxContinuousWave>:
{
 800bed8:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800beda:	2200      	movs	r2, #0
 800bedc:	4611      	mov	r1, r2
 800bede:	20d1      	movs	r0, #209	@ 0xd1
 800bee0:	f7ff fef0 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800bee4:	bd08      	pop	{r3, pc}

0800bee6 <SUBGRF_SetTxInfinitePreamble>:
{
 800bee6:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800bee8:	2200      	movs	r2, #0
 800beea:	4611      	mov	r1, r2
 800beec:	20d2      	movs	r0, #210	@ 0xd2
 800beee:	f7ff fee9 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800bef2:	bd08      	pop	{r3, pc}

0800bef4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 800bef4:	b500      	push	{lr}
 800bef6:	b083      	sub	sp, #12
 800bef8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800befc:	2201      	movs	r2, #1
 800befe:	f10d 0107 	add.w	r1, sp, #7
 800bf02:	209f      	movs	r0, #159	@ 0x9f
 800bf04:	f7ff fede 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800bf08:	b003      	add	sp, #12
 800bf0a:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf0e <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800bf0e:	b500      	push	{lr}
 800bf10:	b083      	sub	sp, #12
 800bf12:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800bf16:	2201      	movs	r2, #1
 800bf18:	f10d 0107 	add.w	r1, sp, #7
 800bf1c:	20a0      	movs	r0, #160	@ 0xa0
 800bf1e:	f7ff fed1 	bl	800bcc4 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 800bf22:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bf26:	2b3f      	cmp	r3, #63	@ 0x3f
 800bf28:	d90f      	bls.n	800bf4a <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800bf2a:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800bf2c:	2200      	movs	r2, #0
        while( mant > 31 )
 800bf2e:	e002      	b.n	800bf36 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 800bf30:	089b      	lsrs	r3, r3, #2
            exp++;
 800bf32:	3201      	adds	r2, #1
 800bf34:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 800bf36:	2b1f      	cmp	r3, #31
 800bf38:	d8fa      	bhi.n	800bf30 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800bf3a:	00d9      	lsls	r1, r3, #3
 800bf3c:	b2c9      	uxtb	r1, r1
 800bf3e:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800bf40:	b2c9      	uxtb	r1, r1
 800bf42:	f240 7006 	movw	r0, #1798	@ 0x706
 800bf46:	f7ff fdf7 	bl	800bb38 <SUBGRF_WriteRegister>
}
 800bf4a:	b003      	add	sp, #12
 800bf4c:	f85d fb04 	ldr.w	pc, [sp], #4

0800bf50 <SUBGRF_SetRegulatorMode>:
{
 800bf50:	b500      	push	{lr}
 800bf52:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800bf54:	f001 f924 	bl	800d1a0 <RBI_IsDCDC>
 800bf58:	2801      	cmp	r0, #1
 800bf5a:	d00b      	beq.n	800bf74 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800bf62:	2201      	movs	r2, #1
 800bf64:	f10d 0107 	add.w	r1, sp, #7
 800bf68:	2096      	movs	r0, #150	@ 0x96
 800bf6a:	f7ff feab 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800bf6e:	b003      	add	sp, #12
 800bf70:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 800bf74:	2301      	movs	r3, #1
 800bf76:	f88d 3007 	strb.w	r3, [sp, #7]
 800bf7a:	e7f2      	b.n	800bf62 <SUBGRF_SetRegulatorMode+0x12>

0800bf7c <SUBGRF_Calibrate>:
{
 800bf7c:	b500      	push	{lr}
 800bf7e:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bf80:	f000 0340 	and.w	r3, r0, #64	@ 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800bf84:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bf88:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800bf8a:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800bf8e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800bf90:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800bf94:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800bf96:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800bf9a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800bf9c:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800bfa0:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800bfa2:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800bfa6:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800bfa8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800bfac:	2201      	movs	r2, #1
 800bfae:	f10d 0107 	add.w	r1, sp, #7
 800bfb2:	2089      	movs	r0, #137	@ 0x89
 800bfb4:	f7ff fe86 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800bfb8:	b003      	add	sp, #12
 800bfba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bfc0 <SUBGRF_CalibrateImage>:
{
 800bfc0:	b500      	push	{lr}
 800bfc2:	b083      	sub	sp, #12
    if( freq > 900000000 )
 800bfc4:	4b1f      	ldr	r3, [pc, #124]	@ (800c044 <SUBGRF_CalibrateImage+0x84>)
 800bfc6:	4298      	cmp	r0, r3
 800bfc8:	d90d      	bls.n	800bfe6 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800bfca:	23e1      	movs	r3, #225	@ 0xe1
 800bfcc:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 800bfd0:	23e9      	movs	r3, #233	@ 0xe9
 800bfd2:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800bfd6:	2202      	movs	r2, #2
 800bfd8:	a901      	add	r1, sp, #4
 800bfda:	2098      	movs	r0, #152	@ 0x98
 800bfdc:	f7ff fe72 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800bfe0:	b003      	add	sp, #12
 800bfe2:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 800bfe6:	4b18      	ldr	r3, [pc, #96]	@ (800c048 <SUBGRF_CalibrateImage+0x88>)
 800bfe8:	4298      	cmp	r0, r3
 800bfea:	d906      	bls.n	800bffa <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800bfec:	23d7      	movs	r3, #215	@ 0xd7
 800bfee:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 800bff2:	23db      	movs	r3, #219	@ 0xdb
 800bff4:	f88d 3005 	strb.w	r3, [sp, #5]
 800bff8:	e7ed      	b.n	800bfd6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800bffa:	4b14      	ldr	r3, [pc, #80]	@ (800c04c <SUBGRF_CalibrateImage+0x8c>)
 800bffc:	4298      	cmp	r0, r3
 800bffe:	d906      	bls.n	800c00e <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 800c000:	23c1      	movs	r3, #193	@ 0xc1
 800c002:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 800c006:	23c5      	movs	r3, #197	@ 0xc5
 800c008:	f88d 3005 	strb.w	r3, [sp, #5]
 800c00c:	e7e3      	b.n	800bfd6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800c00e:	4b10      	ldr	r3, [pc, #64]	@ (800c050 <SUBGRF_CalibrateImage+0x90>)
 800c010:	4298      	cmp	r0, r3
 800c012:	d906      	bls.n	800c022 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 800c014:	2375      	movs	r3, #117	@ 0x75
 800c016:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800c01a:	2381      	movs	r3, #129	@ 0x81
 800c01c:	f88d 3005 	strb.w	r3, [sp, #5]
 800c020:	e7d9      	b.n	800bfd6 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 800c022:	4b0c      	ldr	r3, [pc, #48]	@ (800c054 <SUBGRF_CalibrateImage+0x94>)
 800c024:	4298      	cmp	r0, r3
 800c026:	d906      	bls.n	800c036 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 800c028:	236b      	movs	r3, #107	@ 0x6b
 800c02a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800c02e:	236f      	movs	r3, #111	@ 0x6f
 800c030:	f88d 3005 	strb.w	r3, [sp, #5]
 800c034:	e7cf      	b.n	800bfd6 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 800c036:	2329      	movs	r3, #41	@ 0x29
 800c038:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 800c03c:	232b      	movs	r3, #43	@ 0x2b
 800c03e:	f88d 3005 	strb.w	r3, [sp, #5]
 800c042:	e7c8      	b.n	800bfd6 <SUBGRF_CalibrateImage+0x16>
 800c044:	35a4e900 	.word	0x35a4e900
 800c048:	32a9f880 	.word	0x32a9f880
 800c04c:	2de54480 	.word	0x2de54480
 800c050:	1b6b0b00 	.word	0x1b6b0b00
 800c054:	1954fc40 	.word	0x1954fc40

0800c058 <SUBGRF_SetPaConfig>:
{
 800c058:	b500      	push	{lr}
 800c05a:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 800c05c:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 800c060:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 800c064:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 800c068:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800c06c:	2204      	movs	r2, #4
 800c06e:	eb0d 0102 	add.w	r1, sp, r2
 800c072:	2095      	movs	r0, #149	@ 0x95
 800c074:	f7ff fe26 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c078:	b003      	add	sp, #12
 800c07a:	f85d fb04 	ldr.w	pc, [sp], #4

0800c07e <SUBGRF_SetDioIrqParams>:
{
 800c07e:	b500      	push	{lr}
 800c080:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800c082:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 800c086:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800c08a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800c08e:	0a08      	lsrs	r0, r1, #8
 800c090:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800c094:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800c098:	0a11      	lsrs	r1, r2, #8
 800c09a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800c09e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800c0a2:	0a1a      	lsrs	r2, r3, #8
 800c0a4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800c0a8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800c0ac:	2208      	movs	r2, #8
 800c0ae:	4669      	mov	r1, sp
 800c0b0:	4610      	mov	r0, r2
 800c0b2:	f7ff fe07 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c0b6:	b003      	add	sp, #12
 800c0b8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c0bc <SUBGRF_SetTcxoMode>:
{
 800c0bc:	b500      	push	{lr}
 800c0be:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 800c0c0:	f000 0007 	and.w	r0, r0, #7
 800c0c4:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800c0c8:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800c0cc:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800c0d0:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800c0d4:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800c0d8:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800c0dc:	2204      	movs	r2, #4
 800c0de:	eb0d 0102 	add.w	r1, sp, r2
 800c0e2:	2097      	movs	r0, #151	@ 0x97
 800c0e4:	f7ff fdee 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c0e8:	b003      	add	sp, #12
 800c0ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800c0f0 <SUBGRF_Init>:
{
 800c0f0:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 800c0f2:	b108      	cbz	r0, 800c0f8 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 800c0f4:	4a18      	ldr	r2, [pc, #96]	@ (800c158 <SUBGRF_Init+0x68>)
 800c0f6:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 800c0f8:	f7f6 fc58 	bl	80029ac <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800c0fc:	2002      	movs	r0, #2
 800c0fe:	f7ff fd3b 	bl	800bb78 <Radio_SMPS_Set>
    ImageCalibrated = false;
 800c102:	2000      	movs	r0, #0
 800c104:	4b15      	ldr	r3, [pc, #84]	@ (800c15c <SUBGRF_Init+0x6c>)
 800c106:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 800c108:	f7ff fe0c 	bl	800bd24 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800c10c:	f001 f844 	bl	800d198 <RBI_IsTCXO>
 800c110:	2801      	cmp	r0, #1
 800c112:	d014      	beq.n	800c13e <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800c114:	2120      	movs	r1, #32
 800c116:	f640 1011 	movw	r0, #2321	@ 0x911
 800c11a:	f7ff fd0d 	bl	800bb38 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800c11e:	2120      	movs	r1, #32
 800c120:	f640 1012 	movw	r0, #2322	@ 0x912
 800c124:	f7ff fd08 	bl	800bb38 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800c128:	210e      	movs	r1, #14
 800c12a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800c12e:	f7ff fd03 	bl	800bb38 <SUBGRF_WriteRegister>
    RBI_Init();
 800c132:	f001 f825 	bl	800d180 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 800c136:	4b0a      	ldr	r3, [pc, #40]	@ (800c160 <SUBGRF_Init+0x70>)
 800c138:	2201      	movs	r2, #1
 800c13a:	701a      	strb	r2, [r3, #0]
}
 800c13c:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800c13e:	2140      	movs	r1, #64	@ 0x40
 800c140:	f7ff ffbc 	bl	800c0bc <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800c144:	2100      	movs	r1, #0
 800c146:	f640 1011 	movw	r0, #2321	@ 0x911
 800c14a:	f7ff fcf5 	bl	800bb38 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 800c14e:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 800c152:	f7ff ff13 	bl	800bf7c <SUBGRF_Calibrate>
 800c156:	e7e7      	b.n	800c128 <SUBGRF_Init+0x38>
 800c158:	200009bc 	.word	0x200009bc
 800c15c:	200009c0 	.word	0x200009c0
 800c160:	200009ca 	.word	0x200009ca

0800c164 <SUBGRF_SetRfFrequency>:
{
 800c164:	b510      	push	{r4, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 800c16a:	4b12      	ldr	r3, [pc, #72]	@ (800c1b4 <SUBGRF_SetRfFrequency+0x50>)
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	b1d3      	cbz	r3, 800c1a6 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 800c170:	4a11      	ldr	r2, [pc, #68]	@ (800c1b8 <SUBGRF_SetRfFrequency+0x54>)
 800c172:	2300      	movs	r3, #0
 800c174:	0660      	lsls	r0, r4, #25
 800c176:	09e1      	lsrs	r1, r4, #7
 800c178:	f7f5 f858 	bl	800122c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 800c17c:	0e03      	lsrs	r3, r0, #24
 800c17e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 800c182:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c186:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 800c18a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c18e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 800c192:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800c196:	2204      	movs	r2, #4
 800c198:	eb0d 0102 	add.w	r1, sp, r2
 800c19c:	2086      	movs	r0, #134	@ 0x86
 800c19e:	f7ff fd91 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c1a2:	b002      	add	sp, #8
 800c1a4:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 800c1a6:	f7ff ff0b 	bl	800bfc0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 800c1aa:	4b02      	ldr	r3, [pc, #8]	@ (800c1b4 <SUBGRF_SetRfFrequency+0x50>)
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	701a      	strb	r2, [r3, #0]
 800c1b0:	e7de      	b.n	800c170 <SUBGRF_SetRfFrequency+0xc>
 800c1b2:	bf00      	nop
 800c1b4:	200009c0 	.word	0x200009c0
 800c1b8:	01e84800 	.word	0x01e84800

0800c1bc <SUBGRF_SetPacketType>:
{
 800c1bc:	b500      	push	{lr}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 800c1c4:	b2c3      	uxtb	r3, r0
 800c1c6:	4a09      	ldr	r2, [pc, #36]	@ (800c1ec <SUBGRF_SetPacketType+0x30>)
 800c1c8:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 800c1ca:	b143      	cbz	r3, 800c1de <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	f10d 0107 	add.w	r1, sp, #7
 800c1d2:	208a      	movs	r0, #138	@ 0x8a
 800c1d4:	f7ff fd76 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c1d8:	b003      	add	sp, #12
 800c1da:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 800c1de:	2100      	movs	r1, #0
 800c1e0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800c1e4:	f7ff fca8 	bl	800bb38 <SUBGRF_WriteRegister>
 800c1e8:	e7f0      	b.n	800c1cc <SUBGRF_SetPacketType+0x10>
 800c1ea:	bf00      	nop
 800c1ec:	200009c9 	.word	0x200009c9

0800c1f0 <SUBGRF_SetTxParams>:
{
 800c1f0:	b570      	push	{r4, r5, r6, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 800c1f8:	2801      	cmp	r0, #1
 800c1fa:	d035      	beq.n	800c268 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 800c1fc:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800c200:	f7ff fcaa 	bl	800bb58 <SUBGRF_ReadRegister>
 800c204:	f040 011e 	orr.w	r1, r0, #30
 800c208:	b2c9      	uxtb	r1, r1
 800c20a:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 800c20e:	f7ff fc93 	bl	800bb38 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 800c212:	2001      	movs	r0, #1
 800c214:	f000 ffc8 	bl	800d1a8 <RBI_GetRFOMaxPowerConfig>
 800c218:	4605      	mov	r5, r0
        if (power > max_power)
 800c21a:	4284      	cmp	r4, r0
 800c21c:	dd00      	ble.n	800c220 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 800c21e:	b244      	sxtb	r4, r0
        if (max_power == 20)
 800c220:	2d14      	cmp	r5, #20
 800c222:	d054      	beq.n	800c2ce <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 800c224:	2d11      	cmp	r5, #17
 800c226:	d05c      	beq.n	800c2e2 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 800c228:	2d0e      	cmp	r5, #14
 800c22a:	d064      	beq.n	800c2f6 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 800c22c:	2301      	movs	r3, #1
 800c22e:	2200      	movs	r2, #0
 800c230:	2107      	movs	r1, #7
 800c232:	2004      	movs	r0, #4
 800c234:	f7ff ff10 	bl	800c058 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c238:	1b64      	subs	r4, r4, r5
 800c23a:	3416      	adds	r4, #22
 800c23c:	b265      	sxtb	r5, r4
        if (power < -9)
 800c23e:	f115 0f09 	cmn.w	r5, #9
 800c242:	da01      	bge.n	800c248 <SUBGRF_SetTxParams+0x58>
            power = -9;
 800c244:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800c248:	2138      	movs	r1, #56	@ 0x38
 800c24a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800c24e:	f7ff fc73 	bl	800bb38 <SUBGRF_WriteRegister>
    buf[0] = power;
 800c252:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 800c256:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800c25a:	2202      	movs	r2, #2
 800c25c:	a901      	add	r1, sp, #4
 800c25e:	208e      	movs	r0, #142	@ 0x8e
 800c260:	f7ff fd30 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c264:	b002      	add	sp, #8
 800c266:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 800c268:	2000      	movs	r0, #0
 800c26a:	f000 ff9d 	bl	800d1a8 <RBI_GetRFOMaxPowerConfig>
 800c26e:	4605      	mov	r5, r0
        if (power >  max_power)
 800c270:	4284      	cmp	r4, r0
 800c272:	dd00      	ble.n	800c276 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 800c274:	b244      	sxtb	r4, r0
        if (max_power == 14)
 800c276:	2d0e      	cmp	r5, #14
 800c278:	d015      	beq.n	800c2a6 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 800c27a:	2d0a      	cmp	r5, #10
 800c27c:	d01d      	beq.n	800c2ba <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 800c27e:	2301      	movs	r3, #1
 800c280:	461a      	mov	r2, r3
 800c282:	2100      	movs	r1, #0
 800c284:	2007      	movs	r0, #7
 800c286:	f7ff fee7 	bl	800c058 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800c28a:	1b65      	subs	r5, r4, r5
 800c28c:	350e      	adds	r5, #14
 800c28e:	b26d      	sxtb	r5, r5
        if (power < -17)
 800c290:	f115 0f11 	cmn.w	r5, #17
 800c294:	da01      	bge.n	800c29a <SUBGRF_SetTxParams+0xaa>
            power = -17;
 800c296:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 800c29a:	2118      	movs	r1, #24
 800c29c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 800c2a0:	f7ff fc4a 	bl	800bb38 <SUBGRF_WriteRegister>
 800c2a4:	e7d5      	b.n	800c252 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	2004      	movs	r0, #4
 800c2ae:	f7ff fed3 	bl	800c058 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800c2b2:	1b65      	subs	r5, r4, r5
 800c2b4:	350e      	adds	r5, #14
 800c2b6:	b26d      	sxtb	r5, r5
 800c2b8:	e7ea      	b.n	800c290 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	461a      	mov	r2, r3
 800c2be:	2100      	movs	r1, #0
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff fec9 	bl	800c058 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 800c2c6:	1b65      	subs	r5, r4, r5
 800c2c8:	350d      	adds	r5, #13
 800c2ca:	b26d      	sxtb	r5, r5
 800c2cc:	e7e0      	b.n	800c290 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	2105      	movs	r1, #5
 800c2d4:	2003      	movs	r0, #3
 800c2d6:	f7ff febf 	bl	800c058 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c2da:	1b65      	subs	r5, r4, r5
 800c2dc:	3516      	adds	r5, #22
 800c2de:	b26d      	sxtb	r5, r5
 800c2e0:	e7ad      	b.n	800c23e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2103      	movs	r1, #3
 800c2e8:	2002      	movs	r0, #2
 800c2ea:	f7ff feb5 	bl	800c058 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800c2ee:	1b65      	subs	r5, r4, r5
 800c2f0:	3516      	adds	r5, #22
 800c2f2:	b26d      	sxtb	r5, r5
 800c2f4:	e7a3      	b.n	800c23e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2102      	movs	r1, #2
 800c2fc:	4608      	mov	r0, r1
 800c2fe:	f7ff feab 	bl	800c058 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800c302:	1b65      	subs	r5, r4, r5
 800c304:	350e      	adds	r5, #14
 800c306:	b26d      	sxtb	r5, r5
 800c308:	e799      	b.n	800c23e <SUBGRF_SetTxParams+0x4e>
	...

0800c30c <SUBGRF_SetModulationParams>:
{
 800c30c:	b510      	push	{r4, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c312:	4b3e      	ldr	r3, [pc, #248]	@ (800c40c <SUBGRF_SetModulationParams+0x100>)
 800c314:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c318:	ab02      	add	r3, sp, #8
 800c31a:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 800c31e:	7820      	ldrb	r0, [r4, #0]
 800c320:	4b3b      	ldr	r3, [pc, #236]	@ (800c410 <SUBGRF_SetModulationParams+0x104>)
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	4298      	cmp	r0, r3
 800c326:	d106      	bne.n	800c336 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 800c328:	7823      	ldrb	r3, [r4, #0]
 800c32a:	2b03      	cmp	r3, #3
 800c32c:	d82c      	bhi.n	800c388 <SUBGRF_SetModulationParams+0x7c>
 800c32e:	e8df f003 	tbb	[pc, r3]
 800c332:	4205      	.short	0x4205
 800c334:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800c336:	f7ff ff41 	bl	800c1bc <SUBGRF_SetPacketType>
 800c33a:	e7f5      	b.n	800c328 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800c33c:	6862      	ldr	r2, [r4, #4]
 800c33e:	4b35      	ldr	r3, [pc, #212]	@ (800c414 <SUBGRF_SetModulationParams+0x108>)
 800c340:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c344:	0c1a      	lsrs	r2, r3, #16
 800c346:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c34a:	0a1a      	lsrs	r2, r3, #8
 800c34c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800c350:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c354:	7b23      	ldrb	r3, [r4, #12]
 800c356:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c35a:	7b63      	ldrb	r3, [r4, #13]
 800c35c:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800c360:	68a1      	ldr	r1, [r4, #8]
 800c362:	4a2d      	ldr	r2, [pc, #180]	@ (800c418 <SUBGRF_SetModulationParams+0x10c>)
 800c364:	2300      	movs	r3, #0
 800c366:	0648      	lsls	r0, r1, #25
 800c368:	09c9      	lsrs	r1, r1, #7
 800c36a:	f7f4 ff5f 	bl	800122c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800c36e:	0c03      	lsrs	r3, r0, #16
 800c370:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800c374:	0a03      	lsrs	r3, r0, #8
 800c376:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 800c37a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c37e:	2208      	movs	r2, #8
 800c380:	4669      	mov	r1, sp
 800c382:	208b      	movs	r0, #139	@ 0x8b
 800c384:	f7ff fc9e 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c388:	b002      	add	sp, #8
 800c38a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800c38c:	6922      	ldr	r2, [r4, #16]
 800c38e:	4b21      	ldr	r3, [pc, #132]	@ (800c414 <SUBGRF_SetModulationParams+0x108>)
 800c390:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c394:	0c1a      	lsrs	r2, r3, #16
 800c396:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c39a:	0a1a      	lsrs	r2, r3, #8
 800c39c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800c3a0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800c3a4:	7d23      	ldrb	r3, [r4, #20]
 800c3a6:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c3aa:	2204      	movs	r2, #4
 800c3ac:	4669      	mov	r1, sp
 800c3ae:	208b      	movs	r0, #139	@ 0x8b
 800c3b0:	f7ff fc88 	bl	800bcc4 <SUBGRF_WriteCommand>
        break;
 800c3b4:	e7e8      	b.n	800c388 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800c3b6:	7e23      	ldrb	r3, [r4, #24]
 800c3b8:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800c3bc:	7e63      	ldrb	r3, [r4, #25]
 800c3be:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 800c3c2:	7ea3      	ldrb	r3, [r4, #26]
 800c3c4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800c3c8:	7ee3      	ldrb	r3, [r4, #27]
 800c3ca:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c3ce:	2204      	movs	r2, #4
 800c3d0:	4669      	mov	r1, sp
 800c3d2:	208b      	movs	r0, #139	@ 0x8b
 800c3d4:	f7ff fc76 	bl	800bcc4 <SUBGRF_WriteCommand>
        break;
 800c3d8:	e7d6      	b.n	800c388 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800c3da:	6862      	ldr	r2, [r4, #4]
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c414 <SUBGRF_SetModulationParams+0x108>)
 800c3de:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800c3e2:	0c1a      	lsrs	r2, r3, #16
 800c3e4:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800c3e8:	0a1a      	lsrs	r2, r3, #8
 800c3ea:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800c3ee:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800c3f2:	7b23      	ldrb	r3, [r4, #12]
 800c3f4:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800c3f8:	7b63      	ldrb	r3, [r4, #13]
 800c3fa:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800c3fe:	2205      	movs	r2, #5
 800c400:	4669      	mov	r1, sp
 800c402:	208b      	movs	r0, #139	@ 0x8b
 800c404:	f7ff fc5e 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c408:	e7be      	b.n	800c388 <SUBGRF_SetModulationParams+0x7c>
 800c40a:	bf00      	nop
 800c40c:	0801105c 	.word	0x0801105c
 800c410:	200009c9 	.word	0x200009c9
 800c414:	3d090000 	.word	0x3d090000
 800c418:	01e84800 	.word	0x01e84800

0800c41c <SUBGRF_SetPacketParams>:
{
 800c41c:	b510      	push	{r4, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800c422:	ab01      	add	r3, sp, #4
 800c424:	4a33      	ldr	r2, [pc, #204]	@ (800c4f4 <SUBGRF_SetPacketParams+0xd8>)
 800c426:	ca07      	ldmia	r2, {r0, r1, r2}
 800c428:	c303      	stmia	r3!, {r0, r1}
 800c42a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800c42c:	7820      	ldrb	r0, [r4, #0]
 800c42e:	4b32      	ldr	r3, [pc, #200]	@ (800c4f8 <SUBGRF_SetPacketParams+0xdc>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	4298      	cmp	r0, r3
 800c434:	d106      	bne.n	800c444 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800c436:	7823      	ldrb	r3, [r4, #0]
 800c438:	2b03      	cmp	r3, #3
 800c43a:	d82a      	bhi.n	800c492 <SUBGRF_SetPacketParams+0x76>
 800c43c:	e8df f003 	tbb	[pc, r3]
 800c440:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 800c444:	f7ff feba 	bl	800c1bc <SUBGRF_SetPacketType>
 800c448:	e7f5      	b.n	800c436 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800c44a:	7a63      	ldrb	r3, [r4, #9]
 800c44c:	2bf1      	cmp	r3, #241	@ 0xf1
 800c44e:	d022      	beq.n	800c496 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800c450:	2bf2      	cmp	r3, #242	@ 0xf2
 800c452:	d02a      	beq.n	800c4aa <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800c454:	8862      	ldrh	r2, [r4, #2]
 800c456:	0a11      	lsrs	r1, r2, #8
 800c458:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800c45c:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800c460:	7922      	ldrb	r2, [r4, #4]
 800c462:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800c466:	7962      	ldrb	r2, [r4, #5]
 800c468:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800c46c:	79a2      	ldrb	r2, [r4, #6]
 800c46e:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800c472:	79e2      	ldrb	r2, [r4, #7]
 800c474:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800c478:	7a22      	ldrb	r2, [r4, #8]
 800c47a:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800c47e:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800c482:	7aa3      	ldrb	r3, [r4, #10]
 800c484:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800c488:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800c48a:	a901      	add	r1, sp, #4
 800c48c:	208c      	movs	r0, #140	@ 0x8c
 800c48e:	f7ff fc19 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c492:	b004      	add	sp, #16
 800c494:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800c496:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800c49a:	f7ff fbb2 	bl	800bc02 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800c49e:	f248 0005 	movw	r0, #32773	@ 0x8005
 800c4a2:	f7ff fbc2 	bl	800bc2a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	e7d4      	b.n	800c454 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800c4aa:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800c4ae:	f7ff fba8 	bl	800bc02 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800c4b2:	f241 0021 	movw	r0, #4129	@ 0x1021
 800c4b6:	f7ff fbb8 	bl	800bc2a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800c4ba:	2306      	movs	r3, #6
 800c4bc:	e7ca      	b.n	800c454 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800c4be:	7b23      	ldrb	r3, [r4, #12]
 800c4c0:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 800c4c4:	2201      	movs	r2, #1
        break;
 800c4c6:	e7e0      	b.n	800c48a <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800c4c8:	89e3      	ldrh	r3, [r4, #14]
 800c4ca:	0a1a      	lsrs	r2, r3, #8
 800c4cc:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800c4d0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800c4d4:	7c23      	ldrb	r3, [r4, #16]
 800c4d6:	4a09      	ldr	r2, [pc, #36]	@ (800c4fc <SUBGRF_SetPacketParams+0xe0>)
 800c4d8:	7013      	strb	r3, [r2, #0]
 800c4da:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800c4de:	7c63      	ldrb	r3, [r4, #17]
 800c4e0:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800c4e4:	7ca3      	ldrb	r3, [r4, #18]
 800c4e6:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800c4ea:	7ce3      	ldrb	r3, [r4, #19]
 800c4ec:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800c4f0:	2206      	movs	r2, #6
        break;
 800c4f2:	e7ca      	b.n	800c48a <SUBGRF_SetPacketParams+0x6e>
 800c4f4:	08011064 	.word	0x08011064
 800c4f8:	200009c9 	.word	0x200009c9
 800c4fc:	200009c8 	.word	0x200009c8

0800c500 <SUBGRF_SetBufferBaseAddress>:
{
 800c500:	b500      	push	{lr}
 800c502:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800c504:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800c508:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800c50c:	2202      	movs	r2, #2
 800c50e:	a901      	add	r1, sp, #4
 800c510:	208f      	movs	r0, #143	@ 0x8f
 800c512:	f7ff fbd7 	bl	800bcc4 <SUBGRF_WriteCommand>
}
 800c516:	b003      	add	sp, #12
 800c518:	f85d fb04 	ldr.w	pc, [sp], #4

0800c51c <SUBGRF_ReadCommand>:
{
 800c51c:	b510      	push	{r4, lr}
 800c51e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c520:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800c524:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800c526:	460a      	mov	r2, r1
 800c528:	4601      	mov	r1, r0
 800c52a:	4803      	ldr	r0, [pc, #12]	@ (800c538 <SUBGRF_ReadCommand+0x1c>)
 800c52c:	f7fb fe94 	bl	8008258 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c530:	f384 8810 	msr	PRIMASK, r4
}
 800c534:	bd10      	pop	{r4, pc}
 800c536:	bf00      	nop
 800c538:	20000574 	.word	0x20000574

0800c53c <SUBGRF_GetRssiInst>:
{
 800c53c:	b500      	push	{lr}
 800c53e:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800c540:	2201      	movs	r2, #1
 800c542:	a901      	add	r1, sp, #4
 800c544:	2015      	movs	r0, #21
 800c546:	f7ff ffe9 	bl	800c51c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800c54a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800c54e:	4240      	negs	r0, r0
}
 800c550:	1040      	asrs	r0, r0, #1
 800c552:	b003      	add	sp, #12
 800c554:	f85d fb04 	ldr.w	pc, [sp], #4

0800c558 <SUBGRF_GetRxBufferStatus>:
{
 800c558:	b530      	push	{r4, r5, lr}
 800c55a:	b083      	sub	sp, #12
 800c55c:	4605      	mov	r5, r0
 800c55e:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800c560:	2202      	movs	r2, #2
 800c562:	a901      	add	r1, sp, #4
 800c564:	2013      	movs	r0, #19
 800c566:	f7ff ffd9 	bl	800c51c <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800c56a:	f7ff fadf 	bl	800bb2c <SUBGRF_GetPacketType>
 800c56e:	2801      	cmp	r0, #1
 800c570:	d007      	beq.n	800c582 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800c572:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c576:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800c578:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c57c:	7023      	strb	r3, [r4, #0]
}
 800c57e:	b003      	add	sp, #12
 800c580:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800c582:	4b05      	ldr	r3, [pc, #20]	@ (800c598 <SUBGRF_GetRxBufferStatus+0x40>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	b2db      	uxtb	r3, r3
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d1f2      	bne.n	800c572 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800c58c:	f240 7002 	movw	r0, #1794	@ 0x702
 800c590:	f7ff fae2 	bl	800bb58 <SUBGRF_ReadRegister>
 800c594:	7028      	strb	r0, [r5, #0]
 800c596:	e7ef      	b.n	800c578 <SUBGRF_GetRxBufferStatus+0x20>
 800c598:	200009c8 	.word	0x200009c8

0800c59c <SUBGRF_GetPayload>:
{
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	4615      	mov	r5, r2
    uint8_t offset = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 800c5ac:	f10d 0107 	add.w	r1, sp, #7
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f7ff ffd1 	bl	800c558 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800c5b6:	7822      	ldrb	r2, [r4, #0]
 800c5b8:	42aa      	cmp	r2, r5
 800c5ba:	d902      	bls.n	800c5c2 <SUBGRF_GetPayload+0x26>
        return 1;
 800c5bc:	2001      	movs	r0, #1
}
 800c5be:	b002      	add	sp, #8
 800c5c0:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800c5c8:	f7ff fb6c 	bl	800bca4 <SUBGRF_ReadBuffer>
    return 0;
 800c5cc:	2000      	movs	r0, #0
 800c5ce:	e7f6      	b.n	800c5be <SUBGRF_GetPayload+0x22>

0800c5d0 <SUBGRF_GetPacketStatus>:
{
 800c5d0:	b510      	push	{r4, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800c5d6:	2203      	movs	r2, #3
 800c5d8:	a901      	add	r1, sp, #4
 800c5da:	2014      	movs	r0, #20
 800c5dc:	f7ff ff9e 	bl	800c51c <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800c5e0:	f7ff faa4 	bl	800bb2c <SUBGRF_GetPacketType>
 800c5e4:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800c5e6:	b148      	cbz	r0, 800c5fc <SUBGRF_GetPacketStatus+0x2c>
 800c5e8:	2801      	cmp	r0, #1
 800c5ea:	d018      	beq.n	800c61e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800c5ec:	2214      	movs	r2, #20
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f000 fe42 	bl	800d27a <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800c5f6:	230f      	movs	r3, #15
 800c5f8:	7023      	strb	r3, [r4, #0]
}
 800c5fa:	e00e      	b.n	800c61a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800c5fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c600:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800c602:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c606:	425b      	negs	r3, r3
 800c608:	105b      	asrs	r3, r3, #1
 800c60a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800c60c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c610:	425b      	negs	r3, r3
 800c612:	105b      	asrs	r3, r3, #1
 800c614:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	60a3      	str	r3, [r4, #8]
}
 800c61a:	b002      	add	sp, #8
 800c61c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800c61e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c622:	425b      	negs	r3, r3
 800c624:	105b      	asrs	r3, r3, #1
 800c626:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800c628:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800c62c:	3302      	adds	r3, #2
 800c62e:	109b      	asrs	r3, r3, #2
 800c630:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800c632:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800c636:	425b      	negs	r3, r3
 800c638:	105b      	asrs	r3, r3, #1
 800c63a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800c63c:	4b01      	ldr	r3, [pc, #4]	@ (800c644 <SUBGRF_GetPacketStatus+0x74>)
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6123      	str	r3, [r4, #16]
            break;
 800c642:	e7ea      	b.n	800c61a <SUBGRF_GetPacketStatus+0x4a>
 800c644:	200009c4 	.word	0x200009c4

0800c648 <SUBGRF_SetSwitch>:
{
 800c648:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 800c64a:	2901      	cmp	r1, #1
 800c64c:	d003      	beq.n	800c656 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800c64e:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 800c650:	f000 fd9a 	bl	800d188 <RBI_ConfigRFSwitch>
}
 800c654:	bd10      	pop	{r4, pc}
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 800c65a:	2c01      	cmp	r4, #1
 800c65c:	d003      	beq.n	800c666 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 800c65e:	2c02      	cmp	r4, #2
 800c660:	d1f6      	bne.n	800c650 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 800c662:	2003      	movs	r0, #3
 800c664:	e7f4      	b.n	800c650 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800c666:	2004      	movs	r0, #4
 800c668:	f7ff fa86 	bl	800bb78 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 800c66c:	2002      	movs	r0, #2
 800c66e:	e7f6      	b.n	800c65e <SUBGRF_SetSwitch+0x16>

0800c670 <SUBGRF_SetRfTxPower>:
{
 800c670:	b538      	push	{r3, r4, r5, lr}
 800c672:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 800c674:	f000 fd8c 	bl	800d190 <RBI_GetTxConfig>
    switch (TxConfig)
 800c678:	b148      	cbz	r0, 800c68e <SUBGRF_SetRfTxPower+0x1e>
 800c67a:	2802      	cmp	r0, #2
 800c67c:	d10d      	bne.n	800c69a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 800c67e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800c680:	2202      	movs	r2, #2
 800c682:	4621      	mov	r1, r4
 800c684:	4628      	mov	r0, r5
 800c686:	f7ff fdb3 	bl	800c1f0 <SUBGRF_SetTxParams>
}
 800c68a:	4628      	mov	r0, r5
 800c68c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 800c68e:	2c0f      	cmp	r4, #15
 800c690:	dc01      	bgt.n	800c696 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 800c692:	2501      	movs	r5, #1
 800c694:	e7f4      	b.n	800c680 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 800c696:	2502      	movs	r5, #2
 800c698:	e7f2      	b.n	800c680 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 800c69a:	2501      	movs	r5, #1
 800c69c:	e7f0      	b.n	800c680 <SUBGRF_SetRfTxPower+0x10>

0800c69e <SUBGRF_GetRadioWakeUpTime>:
}
 800c69e:	2001      	movs	r0, #1
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <HAL_SUBGHZ_TxCpltCallback>:
{
 800c6a4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800c6a6:	4b02      	ldr	r3, [pc, #8]	@ (800c6b0 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2001      	movs	r0, #1
 800c6ac:	4798      	blx	r3
}
 800c6ae:	bd08      	pop	{r3, pc}
 800c6b0:	200009bc 	.word	0x200009bc

0800c6b4 <HAL_SUBGHZ_RxCpltCallback>:
{
 800c6b4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800c6b6:	4b02      	ldr	r3, [pc, #8]	@ (800c6c0 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2002      	movs	r0, #2
 800c6bc:	4798      	blx	r3
}
 800c6be:	bd08      	pop	{r3, pc}
 800c6c0:	200009bc 	.word	0x200009bc

0800c6c4 <HAL_SUBGHZ_CRCErrorCallback>:
{
 800c6c4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800c6c6:	4b02      	ldr	r3, [pc, #8]	@ (800c6d0 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2040      	movs	r0, #64	@ 0x40
 800c6cc:	4798      	blx	r3
}
 800c6ce:	bd08      	pop	{r3, pc}
 800c6d0:	200009bc 	.word	0x200009bc

0800c6d4 <HAL_SUBGHZ_CADStatusCallback>:
{
 800c6d4:	b508      	push	{r3, lr}
    switch (cadstatus)
 800c6d6:	b111      	cbz	r1, 800c6de <HAL_SUBGHZ_CADStatusCallback+0xa>
 800c6d8:	2901      	cmp	r1, #1
 800c6da:	d005      	beq.n	800c6e8 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 800c6dc:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800c6de:	4b05      	ldr	r3, [pc, #20]	@ (800c6f4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2080      	movs	r0, #128	@ 0x80
 800c6e4:	4798      	blx	r3
            break;
 800c6e6:	e7f9      	b.n	800c6dc <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800c6e8:	4b02      	ldr	r3, [pc, #8]	@ (800c6f4 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800c6f0:	4798      	blx	r3
}
 800c6f2:	e7f3      	b.n	800c6dc <HAL_SUBGHZ_CADStatusCallback+0x8>
 800c6f4:	200009bc 	.word	0x200009bc

0800c6f8 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 800c6f8:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800c6fa:	4b03      	ldr	r3, [pc, #12]	@ (800c708 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800c702:	4798      	blx	r3
}
 800c704:	bd08      	pop	{r3, pc}
 800c706:	bf00      	nop
 800c708:	200009bc 	.word	0x200009bc

0800c70c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 800c70c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800c70e:	4b02      	ldr	r3, [pc, #8]	@ (800c718 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	2020      	movs	r0, #32
 800c714:	4798      	blx	r3
}
 800c716:	bd08      	pop	{r3, pc}
 800c718:	200009bc 	.word	0x200009bc

0800c71c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 800c71c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800c71e:	4b02      	ldr	r3, [pc, #8]	@ (800c728 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2004      	movs	r0, #4
 800c724:	4798      	blx	r3
}
 800c726:	bd08      	pop	{r3, pc}
 800c728:	200009bc 	.word	0x200009bc

0800c72c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 800c72c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800c72e:	4b02      	ldr	r3, [pc, #8]	@ (800c738 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2008      	movs	r0, #8
 800c734:	4798      	blx	r3
}
 800c736:	bd08      	pop	{r3, pc}
 800c738:	200009bc 	.word	0x200009bc

0800c73c <HAL_SUBGHZ_HeaderValidCallback>:
{
 800c73c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800c73e:	4b02      	ldr	r3, [pc, #8]	@ (800c748 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	2010      	movs	r0, #16
 800c744:	4798      	blx	r3
}
 800c746:	bd08      	pop	{r3, pc}
 800c748:	200009bc 	.word	0x200009bc

0800c74c <HAL_SUBGHZ_LrFhssHopCallback>:
{
 800c74c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800c74e:	4b03      	ldr	r3, [pc, #12]	@ (800c75c <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800c756:	4798      	blx	r3
}
 800c758:	bd08      	pop	{r3, pc}
 800c75a:	bf00      	nop
 800c75c:	200009bc 	.word	0x200009bc

0800c760 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 800c760:	4601      	mov	r1, r0
 800c762:	b180      	cbz	r0, 800c786 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c764:	2300      	movs	r3, #0
 800c766:	2b15      	cmp	r3, #21
 800c768:	d80c      	bhi.n	800c784 <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800c76a:	4a08      	ldr	r2, [pc, #32]	@ (800c78c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800c76c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800c770:	428a      	cmp	r2, r1
 800c772:	d802      	bhi.n	800c77a <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800c774:	3301      	adds	r3, #1
 800c776:	b2db      	uxtb	r3, r3
 800c778:	e7f5      	b.n	800c766 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 800c77a:	4a04      	ldr	r2, [pc, #16]	@ (800c78c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800c77c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c780:	7918      	ldrb	r0, [r3, #4]
 800c782:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c784:	e7fe      	b.n	800c784 <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 800c786:	201f      	movs	r0, #31
}
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	08011cd0 	.word	0x08011cd0

0800c790 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	b082      	sub	sp, #8
 800c794:	4605      	mov	r5, r0
 800c796:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 800c798:	4b1d      	ldr	r3, [pc, #116]	@ (800c810 <SUBGRF_GetCFO+0x80>)
 800c79a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800c79c:	f640 0007 	movw	r0, #2055	@ 0x807
 800c7a0:	f7ff f9da 	bl	800bb58 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800c7a4:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	446b      	add	r3, sp
 800c7ac:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 800c7b0:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ba:	4a16      	ldr	r2, [pc, #88]	@ (800c814 <SUBGRF_GetCFO+0x84>)
 800c7bc:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 800c7c0:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800c7c4:	2807      	cmp	r0, #7
 800c7c6:	d921      	bls.n	800c80c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 800c7c8:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800c7ca:	fb03 f000 	mul.w	r0, r3, r0
 800c7ce:	2803      	cmp	r0, #3
 800c7d0:	d800      	bhi.n	800c7d4 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 800c7d2:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800c7d4:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800c7d8:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800c7dc:	f7ff f9bc 	bl	800bb58 <SUBGRF_ReadRegister>
 800c7e0:	0206      	lsls	r6, r0, #8
 800c7e2:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800c7e6:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800c7ea:	f7ff f9b5 	bl	800bb58 <SUBGRF_ReadRegister>
 800c7ee:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800c7f0:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800c7f4:	d003      	beq.n	800c7fe <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 800c7f6:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 800c7fa:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800c7fe:	096b      	lsrs	r3, r5, #5
 800c800:	fb03 f000 	mul.w	r0, r3, r0
 800c804:	11c0      	asrs	r0, r0, #7
 800c806:	6020      	str	r0, [r4, #0]
}
 800c808:	b002      	add	sp, #8
 800c80a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 800c80c:	2302      	movs	r3, #2
 800c80e:	e7dc      	b.n	800c7ca <SUBGRF_GetCFO+0x3a>
 800c810:	0c0a0804 	.word	0x0c0a0804
 800c814:	01e84800 	.word	0x01e84800

0800c818 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800c818:	f04f 30ff 	mov.w	r0, #4294967295
 800c81c:	4770      	bx	lr

0800c81e <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800c81e:	f04f 30ff 	mov.w	r0, #4294967295
 800c822:	4770      	bx	lr

0800c824 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800c824:	f04f 30ff 	mov.w	r0, #4294967295
 800c828:	4770      	bx	lr

0800c82a <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800c82a:	4770      	bx	lr

0800c82c <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800c82c:	2000      	movs	r0, #0
 800c82e:	4770      	bx	lr

0800c830 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800c830:	2000      	movs	r0, #0
 800c832:	4770      	bx	lr

0800c834 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800c834:	4770      	bx	lr

0800c836 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 800c836:	f04f 30ff 	mov.w	r0, #4294967295
 800c83a:	4770      	bx	lr

0800c83c <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295
 800c840:	4770      	bx	lr

0800c842 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800c842:	4770      	bx	lr

0800c844 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800c844:	4770      	bx	lr

0800c846 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800c846:	4770      	bx	lr

0800c848 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 800c848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 800c84a:	f7f6 f8fb 	bl	8002a44 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 800c84e:	f000 f905 	bl	800ca5c <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 800c852:	bd08      	pop	{r3, pc}

0800c854 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 800c854:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800c856:	f04f 30ff 	mov.w	r0, #4294967295
 800c85a:	f000 feef 	bl	800d63c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 800c85e:	bd08      	pop	{r3, pc}

0800c860 <OnledEvent>:
  }

}

static void OnledEvent(void *context)
{
 800c860:	b508      	push	{r3, lr}
  UTIL_TIMER_Start(&timerLed);
 800c862:	4802      	ldr	r0, [pc, #8]	@ (800c86c <OnledEvent+0xc>)
 800c864:	f001 f850 	bl	800d908 <UTIL_TIMER_Start>
}
 800c868:	bd08      	pop	{r3, pc}
 800c86a:	bf00      	nop
 800c86c:	200009d8 	.word	0x200009d8

0800c870 <OnRxError>:
{
 800c870:	b508      	push	{r3, lr}
	State = RX_ERROR;
 800c872:	4b04      	ldr	r3, [pc, #16]	@ (800c884 <OnRxError+0x14>)
 800c874:	2202      	movs	r2, #2
 800c876:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800c878:	2100      	movs	r1, #0
 800c87a:	2001      	movs	r0, #1
 800c87c:	f000 feaa 	bl	800d5d4 <UTIL_SEQ_SetTask>
}
 800c880:	bd08      	pop	{r3, pc}
 800c882:	bf00      	nop
 800c884:	20000bf3 	.word	0x20000bf3

0800c888 <OnRxTimeout>:
{
 800c888:	b508      	push	{r3, lr}
	 State = RX_TIMEOUT;
 800c88a:	2001      	movs	r0, #1
 800c88c:	4b02      	ldr	r3, [pc, #8]	@ (800c898 <OnRxTimeout+0x10>)
 800c88e:	7018      	strb	r0, [r3, #0]
	 UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800c890:	2100      	movs	r1, #0
 800c892:	f000 fe9f 	bl	800d5d4 <UTIL_SEQ_SetTask>
}
 800c896:	bd08      	pop	{r3, pc}
 800c898:	20000bf3 	.word	0x20000bf3

0800c89c <OnTxTimeout>:
{
 800c89c:	b508      	push	{r3, lr}
	State = TX_TIMEOUT;
 800c89e:	4b04      	ldr	r3, [pc, #16]	@ (800c8b0 <OnTxTimeout+0x14>)
 800c8a0:	2204      	movs	r2, #4
 800c8a2:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800c8a4:	2100      	movs	r1, #0
 800c8a6:	2001      	movs	r0, #1
 800c8a8:	f000 fe94 	bl	800d5d4 <UTIL_SEQ_SetTask>
}
 800c8ac:	bd08      	pop	{r3, pc}
 800c8ae:	bf00      	nop
 800c8b0:	20000bf3 	.word	0x20000bf3

0800c8b4 <OnTxDone>:
{
 800c8b4:	b508      	push	{r3, lr}
	 State = TX;
 800c8b6:	4b04      	ldr	r3, [pc, #16]	@ (800c8c8 <OnTxDone+0x14>)
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	701a      	strb	r2, [r3, #0]
	 UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800c8bc:	2100      	movs	r1, #0
 800c8be:	2001      	movs	r0, #1
 800c8c0:	f000 fe88 	bl	800d5d4 <UTIL_SEQ_SetTask>
}
 800c8c4:	bd08      	pop	{r3, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20000bf3 	.word	0x20000bf3

0800c8cc <OnRxDone>:
{
 800c8cc:	b570      	push	{r4, r5, r6, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	4606      	mov	r6, r0
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	4615      	mov	r5, r2
	  	  SnrValue = 0; /*not applicable in GFSK*/
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	4b50      	ldr	r3, [pc, #320]	@ (800ca1c <OnRxDone+0x150>)
 800c8da:	7019      	strb	r1, [r3, #0]
	  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800c8dc:	22ff      	movs	r2, #255	@ 0xff
 800c8de:	4850      	ldr	r0, [pc, #320]	@ (800ca20 <OnRxDone+0x154>)
 800c8e0:	f002 f91d 	bl	800eb1e <memset>
	  RxBufferSize = size;
 800c8e4:	4b4f      	ldr	r3, [pc, #316]	@ (800ca24 <OnRxDone+0x158>)
 800c8e6:	801c      	strh	r4, [r3, #0]
	  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800c8e8:	2cff      	cmp	r4, #255	@ 0xff
 800c8ea:	d90a      	bls.n	800c902 <OnRxDone+0x36>
	  RssiValue = rssi;
 800c8ec:	4b4e      	ldr	r3, [pc, #312]	@ (800ca28 <OnRxDone+0x15c>)
 800c8ee:	701d      	strb	r5, [r3, #0]
	   APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800c8f0:	9400      	str	r4, [sp, #0]
 800c8f2:	4b4e      	ldr	r3, [pc, #312]	@ (800ca2c <OnRxDone+0x160>)
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	2003      	movs	r0, #3
 800c8fa:	f001 f983 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
	   for (int i = 0; i < PAYLOAD_LEN; i++)
 800c8fe:	2400      	movs	r4, #0
 800c900:	e006      	b.n	800c910 <OnRxDone+0x44>
		  memcpy(BufferRx, payload, RxBufferSize);
 800c902:	4622      	mov	r2, r4
 800c904:	4631      	mov	r1, r6
 800c906:	4846      	ldr	r0, [pc, #280]	@ (800ca20 <OnRxDone+0x154>)
 800c908:	f002 f999 	bl	800ec3e <memcpy>
 800c90c:	e7ee      	b.n	800c8ec <OnRxDone+0x20>
	   for (int i = 0; i < PAYLOAD_LEN; i++)
 800c90e:	3401      	adds	r4, #1
 800c910:	2c3f      	cmp	r4, #63	@ 0x3f
 800c912:	dc18      	bgt.n	800c946 <OnRxDone+0x7a>
		   APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800c914:	4b42      	ldr	r3, [pc, #264]	@ (800ca20 <OnRxDone+0x154>)
 800c916:	5d1b      	ldrb	r3, [r3, r4]
 800c918:	9300      	str	r3, [sp, #0]
 800c91a:	4b45      	ldr	r3, [pc, #276]	@ (800ca30 <OnRxDone+0x164>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	4611      	mov	r1, r2
 800c920:	2003      	movs	r0, #3
 800c922:	f001 f96f 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
		   if (i % 16 == 15)
 800c926:	4262      	negs	r2, r4
 800c928:	f004 030f 	and.w	r3, r4, #15
 800c92c:	f002 020f 	and.w	r2, r2, #15
 800c930:	bf58      	it	pl
 800c932:	4253      	negpl	r3, r2
 800c934:	2b0f      	cmp	r3, #15
 800c936:	d1ea      	bne.n	800c90e <OnRxDone+0x42>
			   APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800c938:	4b3e      	ldr	r3, [pc, #248]	@ (800ca34 <OnRxDone+0x168>)
 800c93a:	2200      	movs	r2, #0
 800c93c:	4611      	mov	r1, r2
 800c93e:	2003      	movs	r0, #3
 800c940:	f001 f960 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
 800c944:	e7e3      	b.n	800c90e <OnRxDone+0x42>
	   if(currentPairingState == Paired)
 800c946:	4b3c      	ldr	r3, [pc, #240]	@ (800ca38 <OnRxDone+0x16c>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	2b06      	cmp	r3, #6
 800c94c:	d007      	beq.n	800c95e <OnRxDone+0x92>
	   State = RX;
 800c94e:	2100      	movs	r1, #0
 800c950:	4b3a      	ldr	r3, [pc, #232]	@ (800ca3c <OnRxDone+0x170>)
 800c952:	7019      	strb	r1, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800c954:	2001      	movs	r0, #1
 800c956:	f000 fe3d 	bl	800d5d4 <UTIL_SEQ_SetTask>
}
 800c95a:	b002      	add	sp, #8
 800c95c:	bd70      	pop	{r4, r5, r6, pc}
		   if (BufferRx[0] != 0)
 800c95e:	4b30      	ldr	r3, [pc, #192]	@ (800ca20 <OnRxDone+0x154>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0f3      	beq.n	800c94e <OnRxDone+0x82>
				received5ByteData[0] = BufferRx[1];
 800c966:	482e      	ldr	r0, [pc, #184]	@ (800ca20 <OnRxDone+0x154>)
 800c968:	7845      	ldrb	r5, [r0, #1]
 800c96a:	4a35      	ldr	r2, [pc, #212]	@ (800ca40 <OnRxDone+0x174>)
 800c96c:	7015      	strb	r5, [r2, #0]
				received5ByteData[1] = BufferRx[0];
 800c96e:	7053      	strb	r3, [r2, #1]
				received5ByteData[2] = BufferRx[3];
 800c970:	78c4      	ldrb	r4, [r0, #3]
 800c972:	7094      	strb	r4, [r2, #2]
				received5ByteData[3] = BufferRx[2];
 800c974:	7881      	ldrb	r1, [r0, #2]
 800c976:	70d1      	strb	r1, [r2, #3]
				received5ByteData[4] = BufferRx[4];
 800c978:	7900      	ldrb	r0, [r0, #4]
 800c97a:	7110      	strb	r0, [r2, #4]
				combinedBytes1 = (received5ByteData[0] << 8) | received5ByteData[1];
 800c97c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800c980:	4a30      	ldr	r2, [pc, #192]	@ (800ca44 <OnRxDone+0x178>)
 800c982:	8013      	strh	r3, [r2, #0]
				combinedBytes2 = (received5ByteData[2] << 8) | received5ByteData[3];
 800c984:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 800c988:	4a2f      	ldr	r2, [pc, #188]	@ (800ca48 <OnRxDone+0x17c>)
 800c98a:	8011      	strh	r1, [r2, #0]
				if((combinedBytes1 == deviceIds.combinedDeviceID[0]) && (combinedBytes2 == deviceIds.combinedDeviceID[1]))
 800c98c:	4a2f      	ldr	r2, [pc, #188]	@ (800ca4c <OnRxDone+0x180>)
 800c98e:	8892      	ldrh	r2, [r2, #4]
 800c990:	4293      	cmp	r3, r2
 800c992:	d103      	bne.n	800c99c <OnRxDone+0xd0>
 800c994:	4b2d      	ldr	r3, [pc, #180]	@ (800ca4c <OnRxDone+0x180>)
 800c996:	88db      	ldrh	r3, [r3, #6]
 800c998:	4299      	cmp	r1, r3
 800c99a:	d003      	beq.n	800c9a4 <OnRxDone+0xd8>
					printf("The first two bytes DO NOT match\n\r");
 800c99c:	482c      	ldr	r0, [pc, #176]	@ (800ca50 <OnRxDone+0x184>)
 800c99e:	f002 f849 	bl	800ea34 <iprintf>
 800c9a2:	e7d4      	b.n	800c94e <OnRxDone+0x82>
					printf("The first two bytes match!!\n\r");
 800c9a4:	482b      	ldr	r0, [pc, #172]	@ (800ca54 <OnRxDone+0x188>)
 800c9a6:	f002 f845 	bl	800ea34 <iprintf>
					if(received5ByteData[4] == 0xF0)
 800c9aa:	4b25      	ldr	r3, [pc, #148]	@ (800ca40 <OnRxDone+0x174>)
 800c9ac:	791b      	ldrb	r3, [r3, #4]
 800c9ae:	2bf0      	cmp	r3, #240	@ 0xf0
 800c9b0:	d00d      	beq.n	800c9ce <OnRxDone+0x102>
					else if(received5ByteData[4] == 0x0F)
 800c9b2:	2b0f      	cmp	r3, #15
 800c9b4:	d018      	beq.n	800c9e8 <OnRxDone+0x11c>
					else if(received5ByteData[4] == 0xFF)
 800c9b6:	2bff      	cmp	r3, #255	@ 0xff
 800c9b8:	d023      	beq.n	800ca02 <OnRxDone+0x136>
					else if(received5ByteData[4] == 0x11)
 800c9ba:	2b11      	cmp	r3, #17
 800c9bc:	d1c7      	bne.n	800c94e <OnRxDone+0x82>
						sendIMUData_FLAG = true;
 800c9be:	4b26      	ldr	r3, [pc, #152]	@ (800ca58 <OnRxDone+0x18c>)
 800c9c0:	2201      	movs	r2, #1
 800c9c2:	701a      	strb	r2, [r3, #0]
					    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_Process_Data), CFG_SEQ_Prio_3);
 800c9c4:	2103      	movs	r1, #3
 800c9c6:	2002      	movs	r0, #2
 800c9c8:	f000 fe04 	bl	800d5d4 <UTIL_SEQ_SetTask>
 800c9cc:	e7bf      	b.n	800c94e <OnRxDone+0x82>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	4611      	mov	r1, r2
 800c9d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c9d6:	f7f8 fd3a 	bl	800544e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800c9da:	2200      	movs	r2, #0
 800c9dc:	2102      	movs	r1, #2
 800c9de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c9e2:	f7f8 fd34 	bl	800544e <HAL_GPIO_WritePin>
 800c9e6:	e7b2      	b.n	800c94e <OnRxDone+0x82>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c9f0:	f7f8 fd2d 	bl	800544e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	2102      	movs	r1, #2
 800c9f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800c9fc:	f7f8 fd27 	bl	800544e <HAL_GPIO_WritePin>
 800ca00:	e7a5      	b.n	800c94e <OnRxDone+0x82>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800ca02:	2200      	movs	r2, #0
 800ca04:	2101      	movs	r1, #1
 800ca06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ca0a:	f7f8 fd20 	bl	800544e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800ca0e:	2200      	movs	r2, #0
 800ca10:	2102      	movs	r1, #2
 800ca12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ca16:	f7f8 fd1a 	bl	800544e <HAL_GPIO_WritePin>
 800ca1a:	e798      	b.n	800c94e <OnRxDone+0x82>
 800ca1c:	200009f0 	.word	0x200009f0
 800ca20:	20000af4 	.word	0x20000af4
 800ca24:	200009f2 	.word	0x200009f2
 800ca28:	200009f1 	.word	0x200009f1
 800ca2c:	08011d80 	.word	0x08011d80
 800ca30:	08011d94 	.word	0x08011d94
 800ca34:	08011614 	.word	0x08011614
 800ca38:	20000476 	.word	0x20000476
 800ca3c:	20000bf3 	.word	0x20000bf3
 800ca40:	200009cc 	.word	0x200009cc
 800ca44:	20000c14 	.word	0x20000c14
 800ca48:	20000c12 	.word	0x20000c12
 800ca4c:	20000458 	.word	0x20000458
 800ca50:	08011dbc 	.word	0x08011dbc
 800ca54:	08011d9c 	.word	0x08011d9c
 800ca58:	200003d8 	.word	0x200003d8

0800ca5c <SubghzApp_Init>:
{
 800ca5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca60:	b08a      	sub	sp, #40	@ 0x28
  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 800ca62:	4b54      	ldr	r3, [pc, #336]	@ (800cbb4 <SubghzApp_Init+0x158>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	4611      	mov	r1, r2
 800ca68:	2002      	movs	r0, #2
 800ca6a:	f001 f8cb 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800ca6e:	2400      	movs	r4, #0
 800ca70:	9402      	str	r4, [sp, #8]
 800ca72:	2603      	movs	r6, #3
 800ca74:	9601      	str	r6, [sp, #4]
 800ca76:	2501      	movs	r5, #1
 800ca78:	9500      	str	r5, [sp, #0]
 800ca7a:	4b4f      	ldr	r3, [pc, #316]	@ (800cbb8 <SubghzApp_Init+0x15c>)
 800ca7c:	4622      	mov	r2, r4
 800ca7e:	4621      	mov	r1, r4
 800ca80:	2002      	movs	r0, #2
 800ca82:	f001 f8bf 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 800ca86:	9402      	str	r4, [sp, #8]
 800ca88:	9601      	str	r6, [sp, #4]
 800ca8a:	9500      	str	r5, [sp, #0]
 800ca8c:	4b4b      	ldr	r3, [pc, #300]	@ (800cbbc <SubghzApp_Init+0x160>)
 800ca8e:	4622      	mov	r2, r4
 800ca90:	4621      	mov	r1, r4
 800ca92:	2002      	movs	r0, #2
 800ca94:	f001 f8b6 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerLed, LED_PERIOD_MS, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 800ca98:	4e49      	ldr	r6, [pc, #292]	@ (800cbc0 <SubghzApp_Init+0x164>)
 800ca9a:	9400      	str	r4, [sp, #0]
 800ca9c:	4b49      	ldr	r3, [pc, #292]	@ (800cbc4 <SubghzApp_Init+0x168>)
 800ca9e:	4622      	mov	r2, r4
 800caa0:	21c8      	movs	r1, #200	@ 0xc8
 800caa2:	4630      	mov	r0, r6
 800caa4:	f000 fe78 	bl	800d798 <UTIL_TIMER_Create>
  UTIL_TIMER_Start(&timerLed);
 800caa8:	4630      	mov	r0, r6
 800caaa:	f000 ff2d 	bl	800d908 <UTIL_TIMER_Start>
  RadioEvents.TxDone = OnTxDone;
 800caae:	4846      	ldr	r0, [pc, #280]	@ (800cbc8 <SubghzApp_Init+0x16c>)
 800cab0:	4b46      	ldr	r3, [pc, #280]	@ (800cbcc <SubghzApp_Init+0x170>)
 800cab2:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 800cab4:	4b46      	ldr	r3, [pc, #280]	@ (800cbd0 <SubghzApp_Init+0x174>)
 800cab6:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800cab8:	4b46      	ldr	r3, [pc, #280]	@ (800cbd4 <SubghzApp_Init+0x178>)
 800caba:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800cabc:	4b46      	ldr	r3, [pc, #280]	@ (800cbd8 <SubghzApp_Init+0x17c>)
 800cabe:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 800cac0:	4b46      	ldr	r3, [pc, #280]	@ (800cbdc <SubghzApp_Init+0x180>)
 800cac2:	6103      	str	r3, [r0, #16]
  Radio.Init(&RadioEvents);
 800cac4:	4e46      	ldr	r6, [pc, #280]	@ (800cbe0 <SubghzApp_Init+0x184>)
 800cac6:	6833      	ldr	r3, [r6, #0]
 800cac8:	4798      	blx	r3
   random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800caca:	6973      	ldr	r3, [r6, #20]
 800cacc:	4798      	blx	r3
 800cace:	0d80      	lsrs	r0, r0, #22
 800cad0:	4f44      	ldr	r7, [pc, #272]	@ (800cbe4 <SubghzApp_Init+0x188>)
 800cad2:	6038      	str	r0, [r7, #0]
   Radio.SetChannel(RF_FREQUENCY);
 800cad4:	68f3      	ldr	r3, [r6, #12]
 800cad6:	4844      	ldr	r0, [pc, #272]	@ (800cbe8 <SubghzApp_Init+0x18c>)
 800cad8:	4798      	blx	r3
     APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800cada:	4b44      	ldr	r3, [pc, #272]	@ (800cbec <SubghzApp_Init+0x190>)
 800cadc:	4622      	mov	r2, r4
 800cade:	4621      	mov	r1, r4
 800cae0:	2002      	movs	r0, #2
 800cae2:	f001 f88f 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
     APP_LOG(TS_OFF, VLEVEL_M, "FSK_MODULATION\n\r");
 800cae6:	4b42      	ldr	r3, [pc, #264]	@ (800cbf0 <SubghzApp_Init+0x194>)
 800cae8:	4622      	mov	r2, r4
 800caea:	4621      	mov	r1, r4
 800caec:	2002      	movs	r0, #2
 800caee:	f001 f889 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
     APP_LOG(TS_OFF, VLEVEL_M, "FSK_BW=%d Hz\n\r", FSK_BANDWIDTH);
 800caf2:	f649 4940 	movw	r9, #40000	@ 0x9c40
 800caf6:	f8cd 9000 	str.w	r9, [sp]
 800cafa:	4b3e      	ldr	r3, [pc, #248]	@ (800cbf4 <SubghzApp_Init+0x198>)
 800cafc:	4622      	mov	r2, r4
 800cafe:	4621      	mov	r1, r4
 800cb00:	2002      	movs	r0, #2
 800cb02:	f001 f87f 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
     APP_LOG(TS_OFF, VLEVEL_M, "FSK_DR=%d bits/s\n\r", FSK_DATARATE);
 800cb06:	f644 6820 	movw	r8, #20000	@ 0x4e20
 800cb0a:	f8cd 8000 	str.w	r8, [sp]
 800cb0e:	4b3a      	ldr	r3, [pc, #232]	@ (800cbf8 <SubghzApp_Init+0x19c>)
 800cb10:	4622      	mov	r2, r4
 800cb12:	4621      	mov	r1, r4
 800cb14:	2002      	movs	r0, #2
 800cb16:	f001 f875 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
     Radio.SetTxConfig(MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 800cb1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cb1e:	9308      	str	r3, [sp, #32]
 800cb20:	9407      	str	r4, [sp, #28]
 800cb22:	9406      	str	r4, [sp, #24]
 800cb24:	9405      	str	r4, [sp, #20]
 800cb26:	9504      	str	r5, [sp, #16]
 800cb28:	9403      	str	r4, [sp, #12]
 800cb2a:	f04f 0a05 	mov.w	sl, #5
 800cb2e:	f8cd a008 	str.w	sl, [sp, #8]
 800cb32:	9401      	str	r4, [sp, #4]
 800cb34:	f8cd 8000 	str.w	r8, [sp]
 800cb38:	4623      	mov	r3, r4
 800cb3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800cb3e:	210e      	movs	r1, #14
 800cb40:	4620      	mov	r0, r4
 800cb42:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 800cb46:	47e0      	blx	ip
     Radio.SetRxConfig(MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 800cb48:	9509      	str	r5, [sp, #36]	@ 0x24
 800cb4a:	9408      	str	r4, [sp, #32]
 800cb4c:	9407      	str	r4, [sp, #28]
 800cb4e:	9406      	str	r4, [sp, #24]
 800cb50:	9505      	str	r5, [sp, #20]
 800cb52:	9404      	str	r4, [sp, #16]
 800cb54:	9403      	str	r4, [sp, #12]
 800cb56:	9402      	str	r4, [sp, #8]
 800cb58:	f8cd a004 	str.w	sl, [sp, #4]
 800cb5c:	4b27      	ldr	r3, [pc, #156]	@ (800cbfc <SubghzApp_Init+0x1a0>)
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	4623      	mov	r3, r4
 800cb62:	4642      	mov	r2, r8
 800cb64:	4649      	mov	r1, r9
 800cb66:	4620      	mov	r0, r4
 800cb68:	f8d6 c018 	ldr.w	ip, [r6, #24]
 800cb6c:	47e0      	blx	ip
     Radio.SetMaxPayloadLength(MODEM_FSK, MAX_APP_BUFFER_SIZE);
 800cb6e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800cb70:	21ff      	movs	r1, #255	@ 0xff
 800cb72:	4620      	mov	r0, r4
 800cb74:	4798      	blx	r3
   memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800cb76:	22ff      	movs	r2, #255	@ 0xff
 800cb78:	4621      	mov	r1, r4
 800cb7a:	4821      	ldr	r0, [pc, #132]	@ (800cc00 <SubghzApp_Init+0x1a4>)
 800cb7c:	f001 ffcf 	bl	800eb1e <memset>
   APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	9300      	str	r3, [sp, #0]
 800cb84:	4b1f      	ldr	r3, [pc, #124]	@ (800cc04 <SubghzApp_Init+0x1a8>)
 800cb86:	462a      	mov	r2, r5
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	f001 f83a 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
   Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800cb90:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800cb92:	6838      	ldr	r0, [r7, #0]
 800cb94:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 800cb98:	4798      	blx	r3
   UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800cb9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cc08 <SubghzApp_Init+0x1ac>)
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	4628      	mov	r0, r5
 800cba0:	f000 fdde 	bl	800d760 <UTIL_SEQ_RegTask>
   UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_Process_Data), UTIL_SEQ_RFU, ProcessData);
 800cba4:	4a19      	ldr	r2, [pc, #100]	@ (800cc0c <SubghzApp_Init+0x1b0>)
 800cba6:	4621      	mov	r1, r4
 800cba8:	2002      	movs	r0, #2
 800cbaa:	f000 fdd9 	bl	800d760 <UTIL_SEQ_RegTask>
}
 800cbae:	b00a      	add	sp, #40	@ 0x28
 800cbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbb4:	08011de0 	.word	0x08011de0
 800cbb8:	08011df0 	.word	0x08011df0
 800cbbc:	08011e14 	.word	0x08011e14
 800cbc0:	200009d8 	.word	0x200009d8
 800cbc4:	0800c861 	.word	0x0800c861
 800cbc8:	20000bf4 	.word	0x20000bf4
 800cbcc:	0800c8b5 	.word	0x0800c8b5
 800cbd0:	0800c8cd 	.word	0x0800c8cd
 800cbd4:	0800c89d 	.word	0x0800c89d
 800cbd8:	0800c889 	.word	0x0800c889
 800cbdc:	0800c871 	.word	0x0800c871
 800cbe0:	08011c44 	.word	0x08011c44
 800cbe4:	200009d4 	.word	0x200009d4
 800cbe8:	363d7f80 	.word	0x363d7f80
 800cbec:	08011e38 	.word	0x08011e38
 800cbf0:	08011e4c 	.word	0x08011e4c
 800cbf4:	08011e60 	.word	0x08011e60
 800cbf8:	08011e70 	.word	0x08011e70
 800cbfc:	00014585 	.word	0x00014585
 800cc00:	200009f4 	.word	0x200009f4
 800cc04:	08011e84 	.word	0x08011e84
 800cc08:	0800cc4d 	.word	0x0800cc4d
 800cc0c:	0800ccdd 	.word	0x0800ccdd

0800cc10 <radio_send_wrapper>:
{
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800cc14:	4d0a      	ldr	r5, [pc, #40]	@ (800cc40 <radio_send_wrapper+0x30>)
 800cc16:	2201      	movs	r2, #1
 800cc18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc1c:	4628      	mov	r0, r5
 800cc1e:	f7f8 fc16 	bl	800544e <HAL_GPIO_WritePin>
	Radio.Send(BufferTx, payloadSize);
 800cc22:	4b08      	ldr	r3, [pc, #32]	@ (800cc44 <radio_send_wrapper+0x34>)
 800cc24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc26:	4621      	mov	r1, r4
 800cc28:	4807      	ldr	r0, [pc, #28]	@ (800cc48 <radio_send_wrapper+0x38>)
 800cc2a:	4798      	blx	r3
	HAL_Delay(100);
 800cc2c:	2064      	movs	r0, #100	@ 0x64
 800cc2e:	f7f5 ff4b 	bl	8002ac8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800cc32:	2200      	movs	r2, #0
 800cc34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800cc38:	4628      	mov	r0, r5
 800cc3a:	f7f8 fc08 	bl	800544e <HAL_GPIO_WritePin>
}
 800cc3e:	bd38      	pop	{r3, r4, r5, pc}
 800cc40:	48000400 	.word	0x48000400
 800cc44:	08011c44 	.word	0x08011c44
 800cc48:	200009f4 	.word	0x200009f4

0800cc4c <PingPong_Process>:
{
 800cc4c:	b508      	push	{r3, lr}
  Radio.Sleep();
 800cc4e:	4b1e      	ldr	r3, [pc, #120]	@ (800ccc8 <PingPong_Process+0x7c>)
 800cc50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc52:	4798      	blx	r3
  switch (State)
 800cc54:	4b1d      	ldr	r3, [pc, #116]	@ (800cccc <PingPong_Process+0x80>)
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b04      	cmp	r3, #4
 800cc5a:	d809      	bhi.n	800cc70 <PingPong_Process+0x24>
 800cc5c:	e8df f003 	tbb	[pc, r3]
 800cc60:	090f0803 	.word	0x090f0803
 800cc64:	2d          	.byte	0x2d
 800cc65:	00          	.byte	0x00
    	Radio.Rx(RX_TIMEOUT_VALUE);
 800cc66:	4b18      	ldr	r3, [pc, #96]	@ (800ccc8 <PingPong_Process+0x7c>)
 800cc68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800cc6e:	4798      	blx	r3
}
 800cc70:	bd08      	pop	{r3, pc}
         Radio.Rx(RX_TIMEOUT_VALUE);
 800cc72:	4b15      	ldr	r3, [pc, #84]	@ (800ccc8 <PingPong_Process+0x7c>)
 800cc74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc76:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800cc7a:	4798      	blx	r3
         break;
 800cc7c:	e7f8      	b.n	800cc70 <PingPong_Process+0x24>
         if (isMaster == true)
 800cc7e:	4b14      	ldr	r3, [pc, #80]	@ (800ccd0 <PingPong_Process+0x84>)
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	b1a3      	cbz	r3, 800ccae <PingPong_Process+0x62>
        	 HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800cc84:	4b10      	ldr	r3, [pc, #64]	@ (800ccc8 <PingPong_Process+0x7c>)
 800cc86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cc88:	4798      	blx	r3
 800cc8a:	4b12      	ldr	r3, [pc, #72]	@ (800ccd4 <PingPong_Process+0x88>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4418      	add	r0, r3
 800cc90:	f7f5 ff1a 	bl	8002ac8 <HAL_Delay>
        	 memcpy(BufferTx, PING, sizeof(PING) - 1);
 800cc94:	4b10      	ldr	r3, [pc, #64]	@ (800ccd8 <PingPong_Process+0x8c>)
 800cc96:	f644 124e 	movw	r2, #18766	@ 0x494e
 800cc9a:	801a      	strh	r2, [r3, #0]
        	 radio_send_wrapper(PAYLOAD_LEN);
 800cc9c:	2040      	movs	r0, #64	@ 0x40
 800cc9e:	f7ff ffb7 	bl	800cc10 <radio_send_wrapper>
         Radio.Rx(RX_TIMEOUT_VALUE);
 800cca2:	4b09      	ldr	r3, [pc, #36]	@ (800ccc8 <PingPong_Process+0x7c>)
 800cca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cca6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ccaa:	4798      	blx	r3
         break;
 800ccac:	e7e0      	b.n	800cc70 <PingPong_Process+0x24>
        	 Radio.Rx(RX_TIMEOUT_VALUE);
 800ccae:	4b06      	ldr	r3, [pc, #24]	@ (800ccc8 <PingPong_Process+0x7c>)
 800ccb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ccb6:	4798      	blx	r3
 800ccb8:	e7f3      	b.n	800cca2 <PingPong_Process+0x56>
    	 Radio.Rx(RX_TIMEOUT_VALUE);
 800ccba:	4b03      	ldr	r3, [pc, #12]	@ (800ccc8 <PingPong_Process+0x7c>)
 800ccbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ccc2:	4798      	blx	r3
}
 800ccc4:	e7d4      	b.n	800cc70 <PingPong_Process+0x24>
 800ccc6:	bf00      	nop
 800ccc8:	08011c44 	.word	0x08011c44
 800cccc:	20000bf3 	.word	0x20000bf3
 800ccd0:	2000007e 	.word	0x2000007e
 800ccd4:	200009d4 	.word	0x200009d4
 800ccd8:	200009f4 	.word	0x200009f4

0800ccdc <ProcessData>:
{
 800ccdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce0:	b084      	sub	sp, #16
 800cce2:	af00      	add	r7, sp, #0
	if(currentPairingState == Paired)
 800cce4:	4b62      	ldr	r3, [pc, #392]	@ (800ce70 <ProcessData+0x194>)
 800cce6:	781c      	ldrb	r4, [r3, #0]
 800cce8:	2c06      	cmp	r4, #6
 800ccea:	d003      	beq.n	800ccf4 <ProcessData+0x18>
}
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (sendIMUData_FLAG)
 800ccf4:	4b5f      	ldr	r3, [pc, #380]	@ (800ce74 <ProcessData+0x198>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	b91b      	cbnz	r3, 800cd02 <ProcessData+0x26>
		sendIMUData_FLAG = false;
 800ccfa:	4b5e      	ldr	r3, [pc, #376]	@ (800ce74 <ProcessData+0x198>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	701a      	strb	r2, [r3, #0]
}
 800cd00:	e7f4      	b.n	800ccec <ProcessData+0x10>
		{
 800cd02:	466e      	mov	r6, sp
			uint16_t chargeLevel = MAX17261_ReadCharge();
 800cd04:	f7f5 fa68 	bl	80021d8 <MAX17261_ReadCharge>
			sprintf(hexBatteryString, "%02X", chargeHexInteger); // Cast chargeHexInteger as a string and save it in hexString
 800cd08:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800cd0c:	495a      	ldr	r1, [pc, #360]	@ (800ce78 <ProcessData+0x19c>)
 800cd0e:	4638      	mov	r0, r7
 800cd10:	f001 fea2 	bl	800ea58 <siprintf>
			long decimalBatteryValue = strtol(hexBatteryString, NULL, 16);
 800cd14:	2210      	movs	r2, #16
 800cd16:	2100      	movs	r1, #0
 800cd18:	4638      	mov	r0, r7
 800cd1a:	f001 f967 	bl	800dfec <strtol>
 800cd1e:	4605      	mov	r5, r0
			printf("Charge Decimal Value = %ld\n\r", decimalBatteryValue);
 800cd20:	4601      	mov	r1, r0
 800cd22:	4856      	ldr	r0, [pc, #344]	@ (800ce7c <ProcessData+0x1a0>)
 800cd24:	f001 fe86 	bl	800ea34 <iprintf>
			uint8_t batteryChargeTensPlace = (uint8_t)decimalBatteryValue / 10;
 800cd28:	b2ed      	uxtb	r5, r5
 800cd2a:	4b55      	ldr	r3, [pc, #340]	@ (800ce80 <ProcessData+0x1a4>)
 800cd2c:	fba3 3505 	umull	r3, r5, r3, r5
 800cd30:	08ed      	lsrs	r5, r5, #3
			sendIMUData = READ_IMU_DATA();
 800cd32:	f7f4 feb9 	bl	8001aa8 <READ_IMU_DATA>
 800cd36:	4b53      	ldr	r3, [pc, #332]	@ (800ce84 <ProcessData+0x1a8>)
 800cd38:	6018      	str	r0, [r3, #0]
			uint8_t imuData8Bit = (uint8_t)sendIMUData;///////////////////// May want to subtract 90 here
 800cd3a:	f7f4 fa57 	bl	80011ec <__aeabi_f2uiz>
 800cd3e:	fa5f f880 	uxtb.w	r8, r0
			printf("IMU Data to Send (uint8_t): %d\n\r", imuData8Bit);
 800cd42:	4641      	mov	r1, r8
 800cd44:	4850      	ldr	r0, [pc, #320]	@ (800ce88 <ProcessData+0x1ac>)
 800cd46:	f001 fe75 	bl	800ea34 <iprintf>
			sprintf(hexAngleString, "%02X", imuData8Bit);
 800cd4a:	4642      	mov	r2, r8
 800cd4c:	494a      	ldr	r1, [pc, #296]	@ (800ce78 <ProcessData+0x19c>)
 800cd4e:	1d38      	adds	r0, r7, #4
 800cd50:	f001 fe82 	bl	800ea58 <siprintf>
			long decimalAngleValue = strtol(hexAngleString, NULL, 16);
 800cd54:	2210      	movs	r2, #16
 800cd56:	2100      	movs	r1, #0
 800cd58:	1d38      	adds	r0, r7, #4
 800cd5a:	f001 f947 	bl	800dfec <strtol>
 800cd5e:	4680      	mov	r8, r0
			printf("Angle Decimal Value = %ld\n\r", decimalAngleValue);
 800cd60:	4601      	mov	r1, r0
 800cd62:	484a      	ldr	r0, [pc, #296]	@ (800ce8c <ProcessData+0x1b0>)
 800cd64:	f001 fe66 	bl	800ea34 <iprintf>
			if((decimalAngleValue >= 89) && (decimalAngleValue <= 91))
 800cd68:	f1a8 0359 	sub.w	r3, r8, #89	@ 0x59
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d942      	bls.n	800cdf6 <ProcessData+0x11a>
			else if((decimalAngleValue >= 86) && (decimalAngleValue <= 88))
 800cd70:	f1a8 0344 	sub.w	r3, r8, #68	@ 0x44
 800cd74:	2b14      	cmp	r3, #20
 800cd76:	d816      	bhi.n	800cda6 <ProcessData+0xca>
 800cd78:	e8df f003 	tbb	[pc, r3]
 800cd7c:	3e131313 	.word	0x3e131313
 800cd80:	11113e3e 	.word	0x11113e3e
 800cd84:	0f0f0f11 	.word	0x0f0f0f11
 800cd88:	5c0d0d0d 	.word	0x5c0d0d0d
 800cd8c:	0b0b5c5c 	.word	0x0b0b5c5c
 800cd90:	0b          	.byte	0x0b
 800cd91:	00          	.byte	0x00
			if((decimalAngleValue >= 89) && (decimalAngleValue <= 91))
 800cd92:	2401      	movs	r4, #1
 800cd94:	e030      	b.n	800cdf8 <ProcessData+0x11c>
 800cd96:	2403      	movs	r4, #3
 800cd98:	e02e      	b.n	800cdf8 <ProcessData+0x11c>
 800cd9a:	2404      	movs	r4, #4
 800cd9c:	e02c      	b.n	800cdf8 <ProcessData+0x11c>
 800cd9e:	2405      	movs	r4, #5
 800cda0:	e02a      	b.n	800cdf8 <ProcessData+0x11c>
 800cda2:	2407      	movs	r4, #7
 800cda4:	e028      	b.n	800cdf8 <ProcessData+0x11c>
			else if(decimalAngleValue < 68)
 800cda6:	4643      	mov	r3, r8
 800cda8:	2b43      	cmp	r3, #67	@ 0x43
 800cdaa:	dd45      	ble.n	800ce38 <ProcessData+0x15c>
			else if((decimalAngleValue >= 92) && (decimalAngleValue <= 94))
 800cdac:	f1a8 035c 	sub.w	r3, r8, #92	@ 0x5c
 800cdb0:	2b17      	cmp	r3, #23
 800cdb2:	d81b      	bhi.n	800cdec <ProcessData+0x110>
 800cdb4:	e8df f003 	tbb	[pc, r3]
 800cdb8:	420c0c0c 	.word	0x420c0c0c
 800cdbc:	0e0e4242 	.word	0x0e0e4242
 800cdc0:	1010100e 	.word	0x1010100e
 800cdc4:	14121212 	.word	0x14121212
 800cdc8:	16161414 	.word	0x16161414
 800cdcc:	18181816 	.word	0x18181816
			else if(decimalAngleValue < 68)
 800cdd0:	2408      	movs	r4, #8
 800cdd2:	e011      	b.n	800cdf8 <ProcessData+0x11c>
 800cdd4:	240a      	movs	r4, #10
 800cdd6:	e00f      	b.n	800cdf8 <ProcessData+0x11c>
 800cdd8:	240b      	movs	r4, #11
 800cdda:	e00d      	b.n	800cdf8 <ProcessData+0x11c>
 800cddc:	240c      	movs	r4, #12
 800cdde:	e00b      	b.n	800cdf8 <ProcessData+0x11c>
 800cde0:	240d      	movs	r4, #13
 800cde2:	e009      	b.n	800cdf8 <ProcessData+0x11c>
 800cde4:	240e      	movs	r4, #14
 800cde6:	e007      	b.n	800cdf8 <ProcessData+0x11c>
 800cde8:	240f      	movs	r4, #15
 800cdea:	e005      	b.n	800cdf8 <ProcessData+0x11c>
			else if(decimalAngleValue > 115)
 800cdec:	4643      	mov	r3, r8
 800cdee:	2b73      	cmp	r3, #115	@ 0x73
 800cdf0:	dc26      	bgt.n	800ce40 <ProcessData+0x164>
			uint8_t EncodedPayload = 0x00;
 800cdf2:	2400      	movs	r4, #0
 800cdf4:	e000      	b.n	800cdf8 <ProcessData+0x11c>
				EncodedPayload = 0x00;
 800cdf6:	2400      	movs	r4, #0
			EncodedPayload = (batteryChargeTensPlace << 4) | EncodedPayload;
 800cdf8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800cdfc:	b2e4      	uxtb	r4, r4
			HAL_Delay(10);
 800cdfe:	200a      	movs	r0, #10
 800ce00:	f7f5 fe62 	bl	8002ac8 <HAL_Delay>
			combinedPayload[1] = (deviceIds.swappedCombinedDeviceID[0] >> 8) & 0xFF;
 800ce04:	4b22      	ldr	r3, [pc, #136]	@ (800ce90 <ProcessData+0x1b4>)
 800ce06:	891a      	ldrh	r2, [r3, #8]
 800ce08:	0a11      	lsrs	r1, r2, #8
 800ce0a:	7279      	strb	r1, [r7, #9]
			combinedPayload[0] = deviceIds.swappedCombinedDeviceID[0] & 0xFF;
 800ce0c:	723a      	strb	r2, [r7, #8]
			combinedPayload[3] = (deviceIds.swappedCombinedDeviceID[1] >> 8) & 0xFF; // Shift right by 8 bits
 800ce0e:	895b      	ldrh	r3, [r3, #10]
 800ce10:	0a1a      	lsrs	r2, r3, #8
 800ce12:	72fa      	strb	r2, [r7, #11]
			combinedPayload[2] = deviceIds.swappedCombinedDeviceID[1] & 0xFF;
 800ce14:	72bb      	strb	r3, [r7, #10]
			combinedPayload[4] = EncodedPayload;
 800ce16:	733c      	strb	r4, [r7, #12]
			memset(BufferTx, 0, MAX_APP_BUFFER_SIZE);
 800ce18:	4c1e      	ldr	r4, [pc, #120]	@ (800ce94 <ProcessData+0x1b8>)
 800ce1a:	22ff      	movs	r2, #255	@ 0xff
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	4620      	mov	r0, r4
 800ce20:	f001 fe7d 	bl	800eb1e <memset>
			memcpy(BufferTx, combinedPayload, payloadSize);
 800ce24:	f107 0310 	add.w	r3, r7, #16
 800ce28:	e913 0003 	ldmdb	r3, {r0, r1}
 800ce2c:	6020      	str	r0, [r4, #0]
 800ce2e:	7121      	strb	r1, [r4, #4]
			for(int i = 0; i < payloadSize; i++) // Iterate up to payloadSize
 800ce30:	2400      	movs	r4, #0
 800ce32:	e00e      	b.n	800ce52 <ProcessData+0x176>
			if((decimalAngleValue >= 89) && (decimalAngleValue <= 91))
 800ce34:	2402      	movs	r4, #2
 800ce36:	e7df      	b.n	800cdf8 <ProcessData+0x11c>
				EncodedPayload = 0x07;
 800ce38:	2407      	movs	r4, #7
 800ce3a:	e7dd      	b.n	800cdf8 <ProcessData+0x11c>
			else if(decimalAngleValue < 68)
 800ce3c:	2409      	movs	r4, #9
 800ce3e:	e7db      	b.n	800cdf8 <ProcessData+0x11c>
				EncodedPayload = 0xF;
 800ce40:	240f      	movs	r4, #15
 800ce42:	e7d9      	b.n	800cdf8 <ProcessData+0x11c>
				printf("BufferTx[%d] = %02X\n\r", i, BufferTx[i]);
 800ce44:	4b13      	ldr	r3, [pc, #76]	@ (800ce94 <ProcessData+0x1b8>)
 800ce46:	5d1a      	ldrb	r2, [r3, r4]
 800ce48:	4621      	mov	r1, r4
 800ce4a:	4813      	ldr	r0, [pc, #76]	@ (800ce98 <ProcessData+0x1bc>)
 800ce4c:	f001 fdf2 	bl	800ea34 <iprintf>
			for(int i = 0; i < payloadSize; i++) // Iterate up to payloadSize
 800ce50:	3401      	adds	r4, #1
 800ce52:	2c04      	cmp	r4, #4
 800ce54:	d9f6      	bls.n	800ce44 <ProcessData+0x168>
			printf("\n\r");
 800ce56:	4811      	ldr	r0, [pc, #68]	@ (800ce9c <ProcessData+0x1c0>)
 800ce58:	f001 fdec 	bl	800ea34 <iprintf>
			radio_send_wrapper(payloadSize);
 800ce5c:	2005      	movs	r0, #5
 800ce5e:	f7ff fed7 	bl	800cc10 <radio_send_wrapper>
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800ce62:	2100      	movs	r1, #0
 800ce64:	2001      	movs	r0, #1
 800ce66:	f000 fbb5 	bl	800d5d4 <UTIL_SEQ_SetTask>
 800ce6a:	46b5      	mov	sp, r6
 800ce6c:	e745      	b.n	800ccfa <ProcessData+0x1e>
 800ce6e:	bf00      	nop
 800ce70:	20000476 	.word	0x20000476
 800ce74:	200003d8 	.word	0x200003d8
 800ce78:	08011d94 	.word	0x08011d94
 800ce7c:	08011e90 	.word	0x08011e90
 800ce80:	cccccccd 	.word	0xcccccccd
 800ce84:	200003dc 	.word	0x200003dc
 800ce88:	08011eb0 	.word	0x08011eb0
 800ce8c:	08011ed4 	.word	0x08011ed4
 800ce90:	20000458 	.word	0x20000458
 800ce94:	200009f4 	.word	0x200009f4
 800ce98:	08011ef0 	.word	0x08011ef0
 800ce9c:	08011614 	.word	0x08011614

0800cea0 <encodeDeviceId>:
{
 800cea0:	b530      	push	{r4, r5, lr}
 800cea2:	b083      	sub	sp, #12
 800cea4:	4604      	mov	r4, r0
 800cea6:	460d      	mov	r5, r1
	HAL_GPIO_WritePin(PAIR_LIGHT_PORT_2, GREEN_PIN, GPIO_PIN_RESET);
 800cea8:	2200      	movs	r2, #0
 800ceaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ceae:	4812      	ldr	r0, [pc, #72]	@ (800cef8 <encodeDeviceId+0x58>)
 800ceb0:	f7f8 facd 	bl	800544e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PAIR_LIGHT_PORT_1, RED_PIN, GPIO_PIN_RESET);
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	2110      	movs	r1, #16
 800ceb8:	4810      	ldr	r0, [pc, #64]	@ (800cefc <encodeDeviceId+0x5c>)
 800ceba:	f7f8 fac8 	bl	800544e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(BUTTON_PORT, BLUE_PIN, GPIO_PIN_SET);
 800cebe:	2201      	movs	r2, #1
 800cec0:	2140      	movs	r1, #64	@ 0x40
 800cec2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cec6:	f7f8 fac2 	bl	800544e <HAL_GPIO_WritePin>
    APP_LOG(TS_OFF, VLEVEL_M,"Entered encodeDeviceId function.\n\r");
 800ceca:	4b0d      	ldr	r3, [pc, #52]	@ (800cf00 <encodeDeviceId+0x60>)
 800cecc:	2200      	movs	r2, #0
 800cece:	4611      	mov	r1, r2
 800ced0:	2002      	movs	r0, #2
 800ced2:	f000 fe97 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
    payload[0] = (uint8_t)(deviceId & 0xFF);
 800ced6:	b2e3      	uxtb	r3, r4
 800ced8:	702b      	strb	r3, [r5, #0]
    payload[1] = (uint8_t)((deviceId >> 8) & 0xFF);
 800ceda:	0a24      	lsrs	r4, r4, #8
 800cedc:	706c      	strb	r4, [r5, #1]
    deviceIds.deviceID = (uint16_t)(payload[0] | (payload[1] << 8)); // assign this deviceID to the struct (use the encoded version)
 800cede:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800cee2:	4a08      	ldr	r2, [pc, #32]	@ (800cf04 <encodeDeviceId+0x64>)
 800cee4:	8013      	strh	r3, [r2, #0]
    APP_LOG(TS_OFF, VLEVEL_M,"This device ID is (struct): 0x%04X\n\r", deviceIds.deviceID);
 800cee6:	9300      	str	r3, [sp, #0]
 800cee8:	4b07      	ldr	r3, [pc, #28]	@ (800cf08 <encodeDeviceId+0x68>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	4611      	mov	r1, r2
 800ceee:	2002      	movs	r0, #2
 800cef0:	f000 fe88 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
}
 800cef4:	b003      	add	sp, #12
 800cef6:	bd30      	pop	{r4, r5, pc}
 800cef8:	48000800 	.word	0x48000800
 800cefc:	48000400 	.word	0x48000400
 800cf00:	08011f08 	.word	0x08011f08
 800cf04:	20000458 	.word	0x20000458
 800cf08:	080118e0 	.word	0x080118e0

0800cf0c <broadcastDeviceId>:
{
 800cf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf0e:	4607      	mov	r7, r0
	printf("Entered BroadcastDeviceID function.\n\r");
 800cf10:	487e      	ldr	r0, [pc, #504]	@ (800d10c <broadcastDeviceId+0x200>)
 800cf12:	f001 fd8f 	bl	800ea34 <iprintf>
	HAL_GPIO_WritePin(PAIR_LIGHT_PORT_2, GREEN_PIN, GPIO_PIN_RESET);
 800cf16:	2200      	movs	r2, #0
 800cf18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cf1c:	487c      	ldr	r0, [pc, #496]	@ (800d110 <broadcastDeviceId+0x204>)
 800cf1e:	f7f8 fa96 	bl	800544e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAIR_LIGHT_PORT_1, RED_PIN, GPIO_PIN_RESET);
 800cf22:	2200      	movs	r2, #0
 800cf24:	2110      	movs	r1, #16
 800cf26:	487b      	ldr	r0, [pc, #492]	@ (800d114 <broadcastDeviceId+0x208>)
 800cf28:	f7f8 fa91 	bl	800544e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BUTTON_PORT, BLUE_PIN, GPIO_PIN_SET);
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	2140      	movs	r1, #64	@ 0x40
 800cf30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cf34:	f7f8 fa8b 	bl	800544e <HAL_GPIO_WritePin>
	while(!isOtherDeviceIDReceived)
 800cf38:	e03b      	b.n	800cfb2 <broadcastDeviceId+0xa6>
			memcpy(&otherDeviceID, BufferRx, sizeof(uint16_t));
 800cf3a:	4b77      	ldr	r3, [pc, #476]	@ (800d118 <broadcastDeviceId+0x20c>)
 800cf3c:	8819      	ldrh	r1, [r3, #0]
 800cf3e:	4c77      	ldr	r4, [pc, #476]	@ (800d11c <broadcastDeviceId+0x210>)
 800cf40:	8021      	strh	r1, [r4, #0]
			printf("Received Payload is: 0x%04X\n\r", otherDeviceID);
 800cf42:	4877      	ldr	r0, [pc, #476]	@ (800d120 <broadcastDeviceId+0x214>)
 800cf44:	f001 fd76 	bl	800ea34 <iprintf>
			if(otherDeviceID != 0x0000)
 800cf48:	8822      	ldrh	r2, [r4, #0]
 800cf4a:	b91a      	cbnz	r2, 800cf54 <broadcastDeviceId+0x48>
				printf("received a packet with payload 0x0000, discarding it.\n\r");
 800cf4c:	4875      	ldr	r0, [pc, #468]	@ (800d124 <broadcastDeviceId+0x218>)
 800cf4e:	f001 fd71 	bl	800ea34 <iprintf>
 800cf52:	e048      	b.n	800cfe6 <broadcastDeviceId+0xda>
				deviceIds.otherDeviceID 				= otherDeviceID;
 800cf54:	4c74      	ldr	r4, [pc, #464]	@ (800d128 <broadcastDeviceId+0x21c>)
 800cf56:	8062      	strh	r2, [r4, #2]
				deviceIds.combinedDeviceID[0] 			= deviceIds.deviceID;
 800cf58:	8821      	ldrh	r1, [r4, #0]
 800cf5a:	80a1      	strh	r1, [r4, #4]
				deviceIds.combinedDeviceID[1] 			= deviceIds.otherDeviceID;
 800cf5c:	80e2      	strh	r2, [r4, #6]
				deviceIds.swappedCombinedDeviceID[0] 	= deviceIds.combinedDeviceID[1];
 800cf5e:	8122      	strh	r2, [r4, #8]
				deviceIds.swappedCombinedDeviceID[1] 	= deviceIds.combinedDeviceID[0];
 800cf60:	8161      	strh	r1, [r4, #10]
				saveIDsToEEPROM(&hi2c1, pairingId1, pairingId2, EEPROM_Start_Address);
 800cf62:	4b72      	ldr	r3, [pc, #456]	@ (800d12c <broadcastDeviceId+0x220>)
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	4872      	ldr	r0, [pc, #456]	@ (800d130 <broadcastDeviceId+0x224>)
 800cf68:	f7f4 fed0 	bl	8001d0c <saveIDsToEEPROM>
				printf("\n\r\n\rotherDeviceID is (struct): 0x%04X\n\r\n\r", deviceIds.otherDeviceID);
 800cf6c:	8861      	ldrh	r1, [r4, #2]
 800cf6e:	4871      	ldr	r0, [pc, #452]	@ (800d134 <broadcastDeviceId+0x228>)
 800cf70:	f001 fd60 	bl	800ea34 <iprintf>
				isOtherDeviceIDReceived = true;
 800cf74:	4b70      	ldr	r3, [pc, #448]	@ (800d138 <broadcastDeviceId+0x22c>)
 800cf76:	2201      	movs	r2, #1
 800cf78:	701a      	strb	r2, [r3, #0]
				HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800cf7a:	4b70      	ldr	r3, [pc, #448]	@ (800d13c <broadcastDeviceId+0x230>)
 800cf7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cf7e:	4798      	blx	r3
 800cf80:	f7f5 fda2 	bl	8002ac8 <HAL_Delay>
				for(int i = 0; i < 5; i++)
 800cf84:	2400      	movs	r4, #0
 800cf86:	e00f      	b.n	800cfa8 <broadcastDeviceId+0x9c>
					printf("Sending Ack1 x5\n\r");
 800cf88:	486d      	ldr	r0, [pc, #436]	@ (800d140 <broadcastDeviceId+0x234>)
 800cf8a:	f001 fd53 	bl	800ea34 <iprintf>
					memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);  // Clear the BufferTx array
 800cf8e:	4d6d      	ldr	r5, [pc, #436]	@ (800d144 <broadcastDeviceId+0x238>)
 800cf90:	22ff      	movs	r2, #255	@ 0xff
 800cf92:	2100      	movs	r1, #0
 800cf94:	4628      	mov	r0, r5
 800cf96:	f001 fdc2 	bl	800eb1e <memset>
					memcpy(BufferTx, (uint8_t *)Ack1, payloadSize);  // Copy the payload to BufferTx
 800cf9a:	4b6b      	ldr	r3, [pc, #428]	@ (800d148 <broadcastDeviceId+0x23c>)
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	702b      	strb	r3, [r5, #0]
					radio_send_wrapper(payloadSize);
 800cfa0:	2001      	movs	r0, #1
 800cfa2:	f7ff fe35 	bl	800cc10 <radio_send_wrapper>
				for(int i = 0; i < 5; i++)
 800cfa6:	3401      	adds	r4, #1
 800cfa8:	2c04      	cmp	r4, #4
 800cfaa:	dded      	ble.n	800cf88 <broadcastDeviceId+0x7c>
 800cfac:	e01b      	b.n	800cfe6 <broadcastDeviceId+0xda>
		lastButtonState = buttonState;
 800cfae:	4b67      	ldr	r3, [pc, #412]	@ (800d14c <broadcastDeviceId+0x240>)
 800cfb0:	701c      	strb	r4, [r3, #0]
	while(!isOtherDeviceIDReceived)
 800cfb2:	4b61      	ldr	r3, [pc, #388]	@ (800d138 <broadcastDeviceId+0x22c>)
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d146      	bne.n	800d048 <broadcastDeviceId+0x13c>
		printf("Plow PCB Listening.\n\r");
 800cfba:	4865      	ldr	r0, [pc, #404]	@ (800d150 <broadcastDeviceId+0x244>)
 800cfbc:	f001 fd3a 	bl	800ea34 <iprintf>
		memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800cfc0:	22ff      	movs	r2, #255	@ 0xff
 800cfc2:	2100      	movs	r1, #0
 800cfc4:	4854      	ldr	r0, [pc, #336]	@ (800d118 <broadcastDeviceId+0x20c>)
 800cfc6:	f001 fdaa 	bl	800eb1e <memset>
		Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800cfca:	4b5c      	ldr	r3, [pc, #368]	@ (800d13c <broadcastDeviceId+0x230>)
 800cfcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfce:	4a61      	ldr	r2, [pc, #388]	@ (800d154 <broadcastDeviceId+0x248>)
 800cfd0:	6810      	ldr	r0, [r2, #0]
 800cfd2:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 800cfd6:	4798      	blx	r3
		HAL_Delay(100);
 800cfd8:	2064      	movs	r0, #100	@ 0x64
 800cfda:	f7f5 fd75 	bl	8002ac8 <HAL_Delay>
		if(RxBufferSize >= sizeof(uint16_t))
 800cfde:	4b5e      	ldr	r3, [pc, #376]	@ (800d158 <broadcastDeviceId+0x24c>)
 800cfe0:	881b      	ldrh	r3, [r3, #0]
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d8a9      	bhi.n	800cf3a <broadcastDeviceId+0x2e>
		GPIO_PinState buttonState = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 800cfe6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800cfea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800cfee:	f7f8 fa27 	bl	8005440 <HAL_GPIO_ReadPin>
 800cff2:	4604      	mov	r4, r0
		uint32_t currentTime = HAL_GetTick(); // Get current time in milliseconds
 800cff4:	f7f5 fd5c 	bl	8002ab0 <HAL_GetTick>
 800cff8:	4605      	mov	r5, r0
		if(buttonState == GPIO_PIN_RESET && lastButtonState == GPIO_PIN_SET && (currentTime - lastButtonPressTime) >= DEBOUNCE_DELAY) // button is pressed (low voltage)  changed to high voltage
 800cffa:	2c00      	cmp	r4, #0
 800cffc:	d1d7      	bne.n	800cfae <broadcastDeviceId+0xa2>
 800cffe:	4b53      	ldr	r3, [pc, #332]	@ (800d14c <broadcastDeviceId+0x240>)
 800d000:	781b      	ldrb	r3, [r3, #0]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d1d3      	bne.n	800cfae <broadcastDeviceId+0xa2>
 800d006:	4b55      	ldr	r3, [pc, #340]	@ (800d15c <broadcastDeviceId+0x250>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	1ac3      	subs	r3, r0, r3
 800d00c:	2b31      	cmp	r3, #49	@ 0x31
 800d00e:	d9ce      	bls.n	800cfae <broadcastDeviceId+0xa2>
			APP_LOG(TS_OFF, VLEVEL_M,"1. Entered buttonState reset to Unknown!!!!\n\r");
 800d010:	4b53      	ldr	r3, [pc, #332]	@ (800d160 <broadcastDeviceId+0x254>)
 800d012:	2200      	movs	r2, #0
 800d014:	4611      	mov	r1, r2
 800d016:	2002      	movs	r0, #2
 800d018:	f000 fdf4 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
			isOtherDeviceIDReceived 	= false;
 800d01c:	2300      	movs	r3, #0
 800d01e:	4a46      	ldr	r2, [pc, #280]	@ (800d138 <broadcastDeviceId+0x22c>)
 800d020:	7013      	strb	r3, [r2, #0]
			isAck1Received 				= false;
 800d022:	4a50      	ldr	r2, [pc, #320]	@ (800d164 <broadcastDeviceId+0x258>)
 800d024:	7013      	strb	r3, [r2, #0]
			currentPairingState 		= Unknown;
 800d026:	4a50      	ldr	r2, [pc, #320]	@ (800d168 <broadcastDeviceId+0x25c>)
 800d028:	7013      	strb	r3, [r2, #0]
			lastButtonPressTime 		= currentTime;
 800d02a:	4b4c      	ldr	r3, [pc, #304]	@ (800d15c <broadcastDeviceId+0x250>)
 800d02c:	601d      	str	r5, [r3, #0]
			return;
 800d02e:	e008      	b.n	800d042 <broadcastDeviceId+0x136>
				printf("\n\r\n\rAck1 message received!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\r\n\r");
 800d030:	484e      	ldr	r0, [pc, #312]	@ (800d16c <broadcastDeviceId+0x260>)
 800d032:	f001 fcff 	bl	800ea34 <iprintf>
				isAck1Received = true;
 800d036:	4b4b      	ldr	r3, [pc, #300]	@ (800d164 <broadcastDeviceId+0x258>)
 800d038:	2201      	movs	r2, #1
 800d03a:	701a      	strb	r2, [r3, #0]
				currentPairingState = Paired;
 800d03c:	4b4a      	ldr	r3, [pc, #296]	@ (800d168 <broadcastDeviceId+0x25c>)
 800d03e:	2206      	movs	r2, #6
 800d040:	701a      	strb	r2, [r3, #0]
}
 800d042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		lastButtonState = buttonState;
 800d044:	4b41      	ldr	r3, [pc, #260]	@ (800d14c <broadcastDeviceId+0x240>)
 800d046:	701c      	strb	r4, [r3, #0]
	while(!isAck1Received)
 800d048:	4b46      	ldr	r3, [pc, #280]	@ (800d164 <broadcastDeviceId+0x258>)
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1f8      	bne.n	800d042 <broadcastDeviceId+0x136>
		printf("PLOW PCB transmitting.\n\r");
 800d050:	4847      	ldr	r0, [pc, #284]	@ (800d170 <broadcastDeviceId+0x264>)
 800d052:	f001 fcef 	bl	800ea34 <iprintf>
		memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800d056:	4e3b      	ldr	r6, [pc, #236]	@ (800d144 <broadcastDeviceId+0x238>)
 800d058:	25ff      	movs	r5, #255	@ 0xff
 800d05a:	462a      	mov	r2, r5
 800d05c:	2100      	movs	r1, #0
 800d05e:	4630      	mov	r0, r6
 800d060:	f001 fd5d 	bl	800eb1e <memset>
		size_t payloadSize = strlen((char *)payload);
 800d064:	4638      	mov	r0, r7
 800d066:	f7f3 f8db 	bl	8000220 <strlen>
 800d06a:	4604      	mov	r4, r0
		memcpy(BufferTx, payload, payloadSize);
 800d06c:	4602      	mov	r2, r0
 800d06e:	4639      	mov	r1, r7
 800d070:	4630      	mov	r0, r6
 800d072:	f001 fde4 	bl	800ec3e <memcpy>
		radio_send_wrapper(payloadSize);
 800d076:	b2e0      	uxtb	r0, r4
 800d078:	f7ff fdca 	bl	800cc10 <radio_send_wrapper>
		HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800d07c:	4c2f      	ldr	r4, [pc, #188]	@ (800d13c <broadcastDeviceId+0x230>)
 800d07e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800d080:	4798      	blx	r3
 800d082:	f7f5 fd21 	bl	8002ac8 <HAL_Delay>
		memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800d086:	462a      	mov	r2, r5
 800d088:	2100      	movs	r1, #0
 800d08a:	4823      	ldr	r0, [pc, #140]	@ (800d118 <broadcastDeviceId+0x20c>)
 800d08c:	f001 fd47 	bl	800eb1e <memset>
		Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800d090:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d092:	4a30      	ldr	r2, [pc, #192]	@ (800d154 <broadcastDeviceId+0x248>)
 800d094:	6810      	ldr	r0, [r2, #0]
 800d096:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 800d09a:	4798      	blx	r3
		HAL_Delay(100);
 800d09c:	2064      	movs	r0, #100	@ 0x64
 800d09e:	f7f5 fd13 	bl	8002ac8 <HAL_Delay>
		if(RxBufferSize >= sizeof(uint8_t))
 800d0a2:	4b2d      	ldr	r3, [pc, #180]	@ (800d158 <broadcastDeviceId+0x24c>)
 800d0a4:	881b      	ldrh	r3, [r3, #0]
 800d0a6:	b163      	cbz	r3, 800d0c2 <broadcastDeviceId+0x1b6>
			printf("Message received.\n\r");
 800d0a8:	4832      	ldr	r0, [pc, #200]	@ (800d174 <broadcastDeviceId+0x268>)
 800d0aa:	f001 fcc3 	bl	800ea34 <iprintf>
			memcpy(&receivedAck, BufferRx, sizeof(uint8_t));
 800d0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d118 <broadcastDeviceId+0x20c>)
 800d0b0:	7819      	ldrb	r1, [r3, #0]
 800d0b2:	4c31      	ldr	r4, [pc, #196]	@ (800d178 <broadcastDeviceId+0x26c>)
 800d0b4:	7021      	strb	r1, [r4, #0]
			printf("Received message is: 0x%02X\n\r", receivedAck);
 800d0b6:	4831      	ldr	r0, [pc, #196]	@ (800d17c <broadcastDeviceId+0x270>)
 800d0b8:	f001 fcbc 	bl	800ea34 <iprintf>
			if(receivedAck == 0x0F)
 800d0bc:	7823      	ldrb	r3, [r4, #0]
 800d0be:	2b0f      	cmp	r3, #15
 800d0c0:	d0b6      	beq.n	800d030 <broadcastDeviceId+0x124>
		GPIO_PinState buttonState 		= HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 800d0c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800d0c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800d0ca:	f7f8 f9b9 	bl	8005440 <HAL_GPIO_ReadPin>
 800d0ce:	4604      	mov	r4, r0
		uint32_t currentTime 			= HAL_GetTick(); // Get current time in milliseconds
 800d0d0:	f7f5 fcee 	bl	8002ab0 <HAL_GetTick>
 800d0d4:	4605      	mov	r5, r0
		if(buttonState == GPIO_PIN_RESET && lastButtonState == GPIO_PIN_SET && (currentTime - lastButtonPressTime) >= DEBOUNCE_DELAY) // button is pressed (low voltage)  changed to high voltage
 800d0d6:	2c00      	cmp	r4, #0
 800d0d8:	d1b4      	bne.n	800d044 <broadcastDeviceId+0x138>
 800d0da:	4b1c      	ldr	r3, [pc, #112]	@ (800d14c <broadcastDeviceId+0x240>)
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d1b0      	bne.n	800d044 <broadcastDeviceId+0x138>
 800d0e2:	4b1e      	ldr	r3, [pc, #120]	@ (800d15c <broadcastDeviceId+0x250>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	1ac3      	subs	r3, r0, r3
 800d0e8:	2b31      	cmp	r3, #49	@ 0x31
 800d0ea:	d9ab      	bls.n	800d044 <broadcastDeviceId+0x138>
			APP_LOG(TS_OFF, VLEVEL_M,"1. Entered buttonState reset to Unknown!!!!\n\r");
 800d0ec:	4b1c      	ldr	r3, [pc, #112]	@ (800d160 <broadcastDeviceId+0x254>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	4611      	mov	r1, r2
 800d0f2:	2002      	movs	r0, #2
 800d0f4:	f000 fd86 	bl	800dc04 <UTIL_ADV_TRACE_COND_FSend>
			isOtherDeviceIDReceived 	= false;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	4a0f      	ldr	r2, [pc, #60]	@ (800d138 <broadcastDeviceId+0x22c>)
 800d0fc:	7013      	strb	r3, [r2, #0]
			isAck1Received 				= false;
 800d0fe:	4a19      	ldr	r2, [pc, #100]	@ (800d164 <broadcastDeviceId+0x258>)
 800d100:	7013      	strb	r3, [r2, #0]
			currentPairingState 		= Unknown;
 800d102:	4a19      	ldr	r2, [pc, #100]	@ (800d168 <broadcastDeviceId+0x25c>)
 800d104:	7013      	strb	r3, [r2, #0]
			lastButtonPressTime 		= currentTime;
 800d106:	4b15      	ldr	r3, [pc, #84]	@ (800d15c <broadcastDeviceId+0x250>)
 800d108:	601d      	str	r5, [r3, #0]
			return;
 800d10a:	e79a      	b.n	800d042 <broadcastDeviceId+0x136>
 800d10c:	08011f2c 	.word	0x08011f2c
 800d110:	48000800 	.word	0x48000800
 800d114:	48000400 	.word	0x48000400
 800d118:	20000af4 	.word	0x20000af4
 800d11c:	20000470 	.word	0x20000470
 800d120:	08011f6c 	.word	0x08011f6c
 800d124:	08011fcc 	.word	0x08011fcc
 800d128:	20000458 	.word	0x20000458
 800d12c:	2000044c 	.word	0x2000044c
 800d130:	200002f4 	.word	0x200002f4
 800d134:	08011f8c 	.word	0x08011f8c
 800d138:	20000c11 	.word	0x20000c11
 800d13c:	08011c44 	.word	0x08011c44
 800d140:	08011fb8 	.word	0x08011fb8
 800d144:	200009f4 	.word	0x200009f4
 800d148:	20000080 	.word	0x20000080
 800d14c:	20000c10 	.word	0x20000c10
 800d150:	08011f54 	.word	0x08011f54
 800d154:	200009d4 	.word	0x200009d4
 800d158:	200009f2 	.word	0x200009f2
 800d15c:	20000468 	.word	0x20000468
 800d160:	08012004 	.word	0x08012004
 800d164:	20000c16 	.word	0x20000c16
 800d168:	20000476 	.word	0x20000476
 800d16c:	08012084 	.word	0x08012084
 800d170:	08012034 	.word	0x08012034
 800d174:	08012050 	.word	0x08012050
 800d178:	20000c17 	.word	0x20000c17
 800d17c:	08012064 	.word	0x08012064

0800d180 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800d180:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800d182:	f7f6 f885 	bl	8003290 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d186:	bd08      	pop	{r3, pc}

0800d188 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800d188:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800d18a:	f7f6 f8c3 	bl	8003314 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d18e:	bd08      	pop	{r3, pc}

0800d190 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800d190:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800d192:	f7f6 f90d 	bl	80033b0 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800d196:	bd08      	pop	{r3, pc}

0800d198 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800d198:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800d19a:	f7f6 f90b 	bl	80033b4 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d19e:	bd08      	pop	{r3, pc}

0800d1a0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800d1a0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800d1a2:	f7f6 f909 	bl	80033b8 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800d1a6:	bd08      	pop	{r3, pc}

0800d1a8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800d1a8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800d1aa:	f7f6 f907 	bl	80033bc <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800d1ae:	bd08      	pop	{r3, pc}

0800d1b0 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	4a02      	ldr	r2, [pc, #8]	@ (800d1bc <UTIL_LPM_Init+0xc>)
 800d1b4:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d1b6:	4a02      	ldr	r2, [pc, #8]	@ (800d1c0 <UTIL_LPM_Init+0x10>)
 800d1b8:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d1ba:	4770      	bx	lr
 800d1bc:	20000c1c 	.word	0x20000c1c
 800d1c0:	20000c18 	.word	0x20000c18

0800d1c4 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1c4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d1c8:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800d1ca:	b141      	cbz	r1, 800d1de <UTIL_LPM_SetStopMode+0x1a>
 800d1cc:	2901      	cmp	r1, #1
 800d1ce:	d103      	bne.n	800d1d8 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800d1d0:	4906      	ldr	r1, [pc, #24]	@ (800d1ec <UTIL_LPM_SetStopMode+0x28>)
 800d1d2:	680a      	ldr	r2, [r1, #0]
 800d1d4:	4302      	orrs	r2, r0
 800d1d6:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1d8:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d1dc:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800d1de:	4903      	ldr	r1, [pc, #12]	@ (800d1ec <UTIL_LPM_SetStopMode+0x28>)
 800d1e0:	680a      	ldr	r2, [r1, #0]
 800d1e2:	ea22 0200 	bic.w	r2, r2, r0
 800d1e6:	600a      	str	r2, [r1, #0]
      break;
 800d1e8:	e7f6      	b.n	800d1d8 <UTIL_LPM_SetStopMode+0x14>
 800d1ea:	bf00      	nop
 800d1ec:	20000c1c 	.word	0x20000c1c

0800d1f0 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1f0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d1f4:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800d1f6:	b141      	cbz	r1, 800d20a <UTIL_LPM_SetOffMode+0x1a>
 800d1f8:	2901      	cmp	r1, #1
 800d1fa:	d103      	bne.n	800d204 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d1fc:	4906      	ldr	r1, [pc, #24]	@ (800d218 <UTIL_LPM_SetOffMode+0x28>)
 800d1fe:	680a      	ldr	r2, [r1, #0]
 800d200:	4302      	orrs	r2, r0
 800d202:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d204:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d208:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800d20a:	4903      	ldr	r1, [pc, #12]	@ (800d218 <UTIL_LPM_SetOffMode+0x28>)
 800d20c:	680a      	ldr	r2, [r1, #0]
 800d20e:	ea22 0200 	bic.w	r2, r2, r0
 800d212:	600a      	str	r2, [r1, #0]
      break;
 800d214:	e7f6      	b.n	800d204 <UTIL_LPM_SetOffMode+0x14>
 800d216:	bf00      	nop
 800d218:	20000c18 	.word	0x20000c18

0800d21c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800d21c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d21e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d222:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800d224:	4b0c      	ldr	r3, [pc, #48]	@ (800d258 <UTIL_LPM_EnterLowPower+0x3c>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	b13b      	cbz	r3, 800d23a <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800d22a:	4d0c      	ldr	r5, [pc, #48]	@ (800d25c <UTIL_LPM_EnterLowPower+0x40>)
 800d22c:	682b      	ldr	r3, [r5, #0]
 800d22e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800d230:	686b      	ldr	r3, [r5, #4]
 800d232:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d234:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800d238:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800d23a:	4b09      	ldr	r3, [pc, #36]	@ (800d260 <UTIL_LPM_EnterLowPower+0x44>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	b12b      	cbz	r3, 800d24c <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 800d240:	4d06      	ldr	r5, [pc, #24]	@ (800d25c <UTIL_LPM_EnterLowPower+0x40>)
 800d242:	68ab      	ldr	r3, [r5, #8]
 800d244:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800d246:	68eb      	ldr	r3, [r5, #12]
 800d248:	4798      	blx	r3
 800d24a:	e7f3      	b.n	800d234 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800d24c:	4d03      	ldr	r5, [pc, #12]	@ (800d25c <UTIL_LPM_EnterLowPower+0x40>)
 800d24e:	692b      	ldr	r3, [r5, #16]
 800d250:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800d252:	696b      	ldr	r3, [r5, #20]
 800d254:	4798      	blx	r3
 800d256:	e7ed      	b.n	800d234 <UTIL_LPM_EnterLowPower+0x18>
 800d258:	20000c1c 	.word	0x20000c1c
 800d25c:	08011960 	.word	0x08011960
 800d260:	20000c18 	.word	0x20000c18

0800d264 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800d264:	e004      	b.n	800d270 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 800d266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d26a:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 800d26e:	461a      	mov	r2, r3
 800d270:	1e53      	subs	r3, r2, #1
 800d272:	b29b      	uxth	r3, r3
 800d274:	2a00      	cmp	r2, #0
 800d276:	d1f6      	bne.n	800d266 <UTIL_MEM_cpy_8+0x2>
    }
}
 800d278:	4770      	bx	lr

0800d27a <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800d27a:	e002      	b.n	800d282 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 800d27c:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 800d280:	461a      	mov	r2, r3
 800d282:	1e53      	subs	r3, r2, #1
 800d284:	b29b      	uxth	r3, r3
 800d286:	2a00      	cmp	r2, #0
 800d288:	d1f8      	bne.n	800d27c <UTIL_MEM_set_8+0x2>
  }
}
 800d28a:	4770      	bx	lr

0800d28c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800d28c:	b082      	sub	sp, #8
 800d28e:	b082      	sub	sp, #8
 800d290:	f10d 0c08 	add.w	ip, sp, #8
 800d294:	e90c 0006 	stmdb	ip, {r1, r2}
 800d298:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800d29a:	2200      	movs	r2, #0
 800d29c:	6002      	str	r2, [r0, #0]
 800d29e:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 800d2a0:	440b      	add	r3, r1
 800d2a2:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800d2a4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800d2a8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800d2ac:	440a      	add	r2, r1
 800d2ae:	b291      	uxth	r1, r2
 800d2b0:	b212      	sxth	r2, r2
 800d2b2:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 800d2b4:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800d2b8:	db04      	blt.n	800d2c4 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 800d2ba:	3301      	adds	r3, #1
 800d2bc:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 800d2be:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 800d2c2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 800d2c4:	b002      	add	sp, #8
 800d2c6:	b002      	add	sp, #8
 800d2c8:	4770      	bx	lr
	...

0800d2cc <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800d2cc:	b530      	push	{r4, r5, lr}
 800d2ce:	b087      	sub	sp, #28
 800d2d0:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	9304      	str	r3, [sp, #16]
 800d2d6:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800d2da:	6003      	str	r3, [r0, #0]
 800d2dc:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800d2de:	4d0b      	ldr	r5, [pc, #44]	@ (800d30c <SysTimeGet+0x40>)
 800d2e0:	692b      	ldr	r3, [r5, #16]
 800d2e2:	a805      	add	r0, sp, #20
 800d2e4:	4798      	blx	r3
 800d2e6:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800d2e8:	68eb      	ldr	r3, [r5, #12]
 800d2ea:	4798      	blx	r3
 800d2ec:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800d2f0:	686b      	ldr	r3, [r5, #4]
 800d2f2:	4798      	blx	r3
 800d2f4:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800d2f6:	9b05      	ldr	r3, [sp, #20]
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	9b04      	ldr	r3, [sp, #16]
 800d2fc:	aa02      	add	r2, sp, #8
 800d2fe:	ca06      	ldmia	r2, {r1, r2}
 800d300:	4620      	mov	r0, r4
 800d302:	f7ff ffc3 	bl	800d28c <SysTimeAdd>

  return sysTime;
}
 800d306:	4620      	mov	r0, r4
 800d308:	b007      	add	sp, #28
 800d30a:	bd30      	pop	{r4, r5, pc}
 800d30c:	08011a24 	.word	0x08011a24

0800d310 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800d310:	4601      	mov	r1, r0
  int i = 0;
 800d312:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800d314:	e008      	b.n	800d328 <ee_skip_atoi+0x18>
 800d316:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800d31a:	1c53      	adds	r3, r2, #1
 800d31c:	600b      	str	r3, [r1, #0]
 800d31e:	7813      	ldrb	r3, [r2, #0]
 800d320:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d324:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800d328:	680a      	ldr	r2, [r1, #0]
 800d32a:	7813      	ldrb	r3, [r2, #0]
 800d32c:	3b30      	subs	r3, #48	@ 0x30
 800d32e:	b2db      	uxtb	r3, r3
 800d330:	2b09      	cmp	r3, #9
 800d332:	d9f0      	bls.n	800d316 <ee_skip_atoi+0x6>
  return i;
}
 800d334:	4770      	bx	lr
	...

0800d338 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800d338:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 800d33c:	b093      	sub	sp, #76	@ 0x4c
 800d33e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d340:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800d342:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800d346:	d110      	bne.n	800d36a <ee_number+0x32>
  char *dig = lower_digits;
 800d348:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800d444 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800d34c:	1e9f      	subs	r7, r3, #2
 800d34e:	2f22      	cmp	r7, #34	@ 0x22
 800d350:	d875      	bhi.n	800d43e <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 800d352:	f016 0401 	ands.w	r4, r6, #1
 800d356:	d00b      	beq.n	800d370 <ee_number+0x38>
 800d358:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 800d35c:	f016 0f02 	tst.w	r6, #2
 800d360:	d00f      	beq.n	800d382 <ee_number+0x4a>
  {
    if (num < 0)
 800d362:	2a00      	cmp	r2, #0
 800d364:	db07      	blt.n	800d376 <ee_number+0x3e>
  sign = 0;
 800d366:	2700      	movs	r7, #0
 800d368:	e00c      	b.n	800d384 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 800d36a:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 800d448 <ee_number+0x110>
 800d36e:	e7ed      	b.n	800d34c <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 800d370:	f04f 0e20 	mov.w	lr, #32
 800d374:	e7f2      	b.n	800d35c <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 800d376:	4252      	negs	r2, r2
      size--;
 800d378:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800d37a:	3e01      	subs	r6, #1
 800d37c:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 800d37e:	272d      	movs	r7, #45	@ 0x2d
 800d380:	e000      	b.n	800d384 <ee_number+0x4c>
  sign = 0;
 800d382:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 800d384:	bb5a      	cbnz	r2, 800d3de <ee_number+0xa6>
    tmp[i++] = '0';
 800d386:	2330      	movs	r3, #48	@ 0x30
 800d388:	f88d 3004 	strb.w	r3, [sp, #4]
 800d38c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 800d390:	45ac      	cmp	ip, r5
 800d392:	dd00      	ble.n	800d396 <ee_number+0x5e>
 800d394:	4665      	mov	r5, ip
  size -= precision;
 800d396:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d398:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d39a:	b31c      	cbz	r4, 800d3e4 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 800d39c:	b11f      	cbz	r7, 800d3a6 <ee_number+0x6e>
 800d39e:	f800 7b01 	strb.w	r7, [r0], #1
 800d3a2:	3901      	subs	r1, #1
 800d3a4:	d007      	beq.n	800d3b6 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3ac:	dd24      	ble.n	800d3f8 <ee_number+0xc0>
 800d3ae:	f800 eb01 	strb.w	lr, [r0], #1
 800d3b2:	3901      	subs	r1, #1
 800d3b4:	d1f7      	bne.n	800d3a6 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 800d3b6:	b013      	add	sp, #76	@ 0x4c
 800d3b8:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800d3bc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3c0:	fb03 2216 	mls	r2, r3, r6, r2
 800d3c4:	f81a 8002 	ldrb.w	r8, [sl, r2]
 800d3c8:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 800d3cc:	446a      	add	r2, sp
 800d3ce:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 800d3d2:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800d3d4:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 800d3d8:	2a00      	cmp	r2, #0
 800d3da:	d1ef      	bne.n	800d3bc <ee_number+0x84>
 800d3dc:	e7d8      	b.n	800d390 <ee_number+0x58>
  i = 0;
 800d3de:	f04f 0c00 	mov.w	ip, #0
 800d3e2:	e7f9      	b.n	800d3d8 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d3ea:	ddd7      	ble.n	800d39c <ee_number+0x64>
 800d3ec:	2220      	movs	r2, #32
 800d3ee:	f800 2b01 	strb.w	r2, [r0], #1
 800d3f2:	3901      	subs	r1, #1
 800d3f4:	d1f6      	bne.n	800d3e4 <ee_number+0xac>
 800d3f6:	e7de      	b.n	800d3b6 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 800d3f8:	4565      	cmp	r5, ip
 800d3fa:	f105 35ff 	add.w	r5, r5, #4294967295
 800d3fe:	dd05      	ble.n	800d40c <ee_number+0xd4>
 800d400:	2230      	movs	r2, #48	@ 0x30
 800d402:	f800 2b01 	strb.w	r2, [r0], #1
 800d406:	3901      	subs	r1, #1
 800d408:	d1f6      	bne.n	800d3f8 <ee_number+0xc0>
 800d40a:	e7d4      	b.n	800d3b6 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800d40c:	4662      	mov	r2, ip
 800d40e:	2a00      	cmp	r2, #0
 800d410:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d414:	dd09      	ble.n	800d42a <ee_number+0xf2>
 800d416:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 800d41a:	446a      	add	r2, sp
 800d41c:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 800d420:	f800 2b01 	strb.w	r2, [r0], #1
 800d424:	3901      	subs	r1, #1
 800d426:	d1f1      	bne.n	800d40c <ee_number+0xd4>
 800d428:	e7c5      	b.n	800d3b6 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f103 33ff 	add.w	r3, r3, #4294967295
 800d430:	ddc1      	ble.n	800d3b6 <ee_number+0x7e>
 800d432:	2220      	movs	r2, #32
 800d434:	f800 2b01 	strb.w	r2, [r0], #1
 800d438:	3901      	subs	r1, #1
 800d43a:	d1f6      	bne.n	800d42a <ee_number+0xf2>
 800d43c:	e7bb      	b.n	800d3b6 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 800d43e:	2000      	movs	r0, #0
 800d440:	e7b9      	b.n	800d3b6 <ee_number+0x7e>
 800d442:	bf00      	nop
 800d444:	080120cc 	.word	0x080120cc
 800d448:	080120f4 	.word	0x080120f4

0800d44c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800d44c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d450:	b087      	sub	sp, #28
 800d452:	9205      	str	r2, [sp, #20]
 800d454:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800d456:	1e0f      	subs	r7, r1, #0
 800d458:	f340 80b8 	ble.w	800d5cc <tiny_vsnprintf_like+0x180>
 800d45c:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d45e:	4604      	mov	r4, r0
 800d460:	e004      	b.n	800d46c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 800d462:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800d466:	9b05      	ldr	r3, [sp, #20]
 800d468:	3301      	adds	r3, #1
 800d46a:	9305      	str	r3, [sp, #20]
 800d46c:	9905      	ldr	r1, [sp, #20]
 800d46e:	780a      	ldrb	r2, [r1, #0]
 800d470:	b922      	cbnz	r2, 800d47c <tiny_vsnprintf_like+0x30>
 800d472:	1ba3      	subs	r3, r4, r6
 800d474:	1e78      	subs	r0, r7, #1
 800d476:	4283      	cmp	r3, r0
 800d478:	f2c0 80a2 	blt.w	800d5c0 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 800d47c:	1ba3      	subs	r3, r4, r6
 800d47e:	f107 38ff 	add.w	r8, r7, #4294967295
 800d482:	4543      	cmp	r3, r8
 800d484:	f280 809c 	bge.w	800d5c0 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 800d488:	2a25      	cmp	r2, #37	@ 0x25
 800d48a:	d1ea      	bne.n	800d462 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800d48c:	1c4b      	adds	r3, r1, #1
 800d48e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 800d490:	784b      	ldrb	r3, [r1, #1]
 800d492:	2b30      	cmp	r3, #48	@ 0x30
 800d494:	d020      	beq.n	800d4d8 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 800d496:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 800d49a:	3b30      	subs	r3, #48	@ 0x30
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	2b09      	cmp	r3, #9
 800d4a0:	d91d      	bls.n	800d4de <tiny_vsnprintf_like+0x92>
    field_width = -1;
 800d4a2:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 800d4a6:	9b05      	ldr	r3, [sp, #20]
 800d4a8:	781a      	ldrb	r2, [r3, #0]
 800d4aa:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 800d4ae:	2b20      	cmp	r3, #32
 800d4b0:	d867      	bhi.n	800d582 <tiny_vsnprintf_like+0x136>
 800d4b2:	e8df f003 	tbb	[pc, r3]
 800d4b6:	664a      	.short	0x664a
 800d4b8:	66666666 	.word	0x66666666
 800d4bc:	66666666 	.word	0x66666666
 800d4c0:	66621e66 	.word	0x66621e66
 800d4c4:	62666666 	.word	0x62666666
 800d4c8:	66666666 	.word	0x66666666
 800d4cc:	66666666 	.word	0x66666666
 800d4d0:	19662866 	.word	0x19662866
 800d4d4:	6666      	.short	0x6666
 800d4d6:	7c          	.byte	0x7c
 800d4d7:	00          	.byte	0x00
      flags |= ZEROPAD;
 800d4d8:	f04f 0901 	mov.w	r9, #1
 800d4dc:	e7dd      	b.n	800d49a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 800d4de:	a805      	add	r0, sp, #20
 800d4e0:	f7ff ff16 	bl	800d310 <ee_skip_atoi>
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	e7de      	b.n	800d4a6 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 800d4e8:	230a      	movs	r3, #10
 800d4ea:	e031      	b.n	800d550 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800d4ec:	2320      	movs	r3, #32
 800d4ee:	f804 3b01 	strb.w	r3, [r4], #1
 800d4f2:	3d01      	subs	r5, #1
 800d4f4:	2d00      	cmp	r5, #0
 800d4f6:	dcf9      	bgt.n	800d4ec <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 800d4f8:	9b04      	ldr	r3, [sp, #16]
 800d4fa:	1d1a      	adds	r2, r3, #4
 800d4fc:	9204      	str	r2, [sp, #16]
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800d504:	e7af      	b.n	800d466 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 800d506:	9b04      	ldr	r3, [sp, #16]
 800d508:	1d1a      	adds	r2, r3, #4
 800d50a:	9204      	str	r2, [sp, #16]
 800d50c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 800d510:	f1b8 0f00 	cmp.w	r8, #0
 800d514:	d003      	beq.n	800d51e <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 800d516:	4640      	mov	r0, r8
 800d518:	f7f2 fe82 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800d51c:	e006      	b.n	800d52c <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 800d51e:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800d5d0 <tiny_vsnprintf_like+0x184>
 800d522:	e7f8      	b.n	800d516 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 800d524:	2220      	movs	r2, #32
 800d526:	f804 2b01 	strb.w	r2, [r4], #1
 800d52a:	461d      	mov	r5, r3
 800d52c:	1e6b      	subs	r3, r5, #1
 800d52e:	4285      	cmp	r5, r0
 800d530:	dcf8      	bgt.n	800d524 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800d532:	2200      	movs	r2, #0
 800d534:	e006      	b.n	800d544 <tiny_vsnprintf_like+0xf8>
 800d536:	4643      	mov	r3, r8
 800d538:	f813 1b01 	ldrb.w	r1, [r3], #1
 800d53c:	f804 1b01 	strb.w	r1, [r4], #1
 800d540:	3201      	adds	r2, #1
 800d542:	4698      	mov	r8, r3
 800d544:	4282      	cmp	r2, r0
 800d546:	dbf6      	blt.n	800d536 <tiny_vsnprintf_like+0xea>
 800d548:	e78d      	b.n	800d466 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800d54a:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 800d54e:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 800d550:	f019 0f02 	tst.w	r9, #2
 800d554:	d02f      	beq.n	800d5b6 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 800d556:	9a04      	ldr	r2, [sp, #16]
 800d558:	1d11      	adds	r1, r2, #4
 800d55a:	9104      	str	r1, [sp, #16]
 800d55c:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800d55e:	1ba1      	subs	r1, r4, r6
 800d560:	f8cd 9008 	str.w	r9, [sp, #8]
 800d564:	f04f 30ff 	mov.w	r0, #4294967295
 800d568:	9001      	str	r0, [sp, #4]
 800d56a:	9500      	str	r5, [sp, #0]
 800d56c:	eba8 0101 	sub.w	r1, r8, r1
 800d570:	4620      	mov	r0, r4
 800d572:	f7ff fee1 	bl	800d338 <ee_number>
 800d576:	4604      	mov	r4, r0
 800d578:	e775      	b.n	800d466 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 800d57a:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 800d57e:	230a      	movs	r3, #10
 800d580:	e7e6      	b.n	800d550 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800d582:	2a25      	cmp	r2, #37	@ 0x25
 800d584:	d002      	beq.n	800d58c <tiny_vsnprintf_like+0x140>
 800d586:	2325      	movs	r3, #37	@ 0x25
 800d588:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800d58c:	1ba3      	subs	r3, r4, r6
 800d58e:	4598      	cmp	r8, r3
 800d590:	dd0f      	ble.n	800d5b2 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 800d592:	9b05      	ldr	r3, [sp, #20]
 800d594:	781a      	ldrb	r2, [r3, #0]
 800d596:	b13a      	cbz	r2, 800d5a8 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 800d598:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800d59c:	1ba3      	subs	r3, r4, r6
 800d59e:	4598      	cmp	r8, r3
 800d5a0:	f73f af61 	bgt.w	800d466 <tiny_vsnprintf_like+0x1a>
    base = 10;
 800d5a4:	230a      	movs	r3, #10
 800d5a6:	e7d3      	b.n	800d550 <tiny_vsnprintf_like+0x104>
          --fmt;
 800d5a8:	3b01      	subs	r3, #1
 800d5aa:	9305      	str	r3, [sp, #20]
 800d5ac:	e7f6      	b.n	800d59c <tiny_vsnprintf_like+0x150>
        base = 16;
 800d5ae:	2310      	movs	r3, #16
 800d5b0:	e7ce      	b.n	800d550 <tiny_vsnprintf_like+0x104>
    base = 10;
 800d5b2:	230a      	movs	r3, #10
 800d5b4:	e7cc      	b.n	800d550 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 800d5b6:	9a04      	ldr	r2, [sp, #16]
 800d5b8:	1d11      	adds	r1, r2, #4
 800d5ba:	9104      	str	r1, [sp, #16]
 800d5bc:	6812      	ldr	r2, [r2, #0]
 800d5be:	e7ce      	b.n	800d55e <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800d5c4:	1ba0      	subs	r0, r4, r6
}
 800d5c6:	b007      	add	sp, #28
 800d5c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	e7fa      	b.n	800d5c6 <tiny_vsnprintf_like+0x17a>
 800d5d0:	0801211c 	.word	0x0801211c

0800d5d4 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5d4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d5d8:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800d5da:	4a06      	ldr	r2, [pc, #24]	@ (800d5f4 <UTIL_SEQ_SetTask+0x20>)
 800d5dc:	6813      	ldr	r3, [r2, #0]
 800d5de:	4303      	orrs	r3, r0
 800d5e0:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d5e2:	4a05      	ldr	r2, [pc, #20]	@ (800d5f8 <UTIL_SEQ_SetTask+0x24>)
 800d5e4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 800d5e8:	4303      	orrs	r3, r0
 800d5ea:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5ee:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800d5f2:	4770      	bx	lr
 800d5f4:	20000c54 	.word	0x20000c54
 800d5f8:	20000c20 	.word	0x20000c20

0800d5fc <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800d5fc:	4770      	bx	lr

0800d5fe <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800d5fe:	4770      	bx	lr

0800d600 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d600:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d604:	d216      	bcs.n	800d634 <SEQ_BitPosition+0x34>
 800d606:	0400      	lsls	r0, r0, #16
 800d608:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d60a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800d60e:	d202      	bcs.n	800d616 <SEQ_BitPosition+0x16>
 800d610:	3308      	adds	r3, #8
 800d612:	b2db      	uxtb	r3, r3
 800d614:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d616:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800d61a:	d202      	bcs.n	800d622 <SEQ_BitPosition+0x22>
 800d61c:	3304      	adds	r3, #4
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d622:	0f00      	lsrs	r0, r0, #28
 800d624:	4a04      	ldr	r2, [pc, #16]	@ (800d638 <SEQ_BitPosition+0x38>)
 800d626:	5c10      	ldrb	r0, [r2, r0]
 800d628:	4418      	add	r0, r3
 800d62a:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 800d62c:	f1c0 001f 	rsb	r0, r0, #31
}
 800d630:	b2c0      	uxtb	r0, r0
 800d632:	4770      	bx	lr
uint8_t n = 0U;
 800d634:	2300      	movs	r3, #0
 800d636:	e7e8      	b.n	800d60a <SEQ_BitPosition+0xa>
 800d638:	08012124 	.word	0x08012124

0800d63c <UTIL_SEQ_Run>:
{
 800d63c:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 800d63e:	4b40      	ldr	r3, [pc, #256]	@ (800d740 <UTIL_SEQ_Run+0x104>)
 800d640:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800d642:	4020      	ands	r0, r4
 800d644:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 800d646:	4b3f      	ldr	r3, [pc, #252]	@ (800d744 <UTIL_SEQ_Run+0x108>)
 800d648:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 800d64a:	4b3f      	ldr	r3, [pc, #252]	@ (800d748 <UTIL_SEQ_Run+0x10c>)
 800d64c:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 800d64e:	493f      	ldr	r1, [pc, #252]	@ (800d74c <UTIL_SEQ_Run+0x110>)
 800d650:	6809      	ldr	r1, [r1, #0]
  local_evtwaited =  EvtWaited;
 800d652:	483f      	ldr	r0, [pc, #252]	@ (800d750 <UTIL_SEQ_Run+0x114>)
 800d654:	6805      	ldr	r5, [r0, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d656:	e049      	b.n	800d6ec <UTIL_SEQ_Run+0xb0>
      counter++;
 800d658:	3301      	adds	r3, #1
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d65a:	4a3e      	ldr	r2, [pc, #248]	@ (800d754 <UTIL_SEQ_Run+0x118>)
 800d65c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d660:	400a      	ands	r2, r1
 800d662:	4202      	tst	r2, r0
 800d664:	d0f8      	beq.n	800d658 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d666:	4d3b      	ldr	r5, [pc, #236]	@ (800d754 <UTIL_SEQ_Run+0x118>)
 800d668:	f855 2033 	ldr.w	r2, [r5, r3, lsl #3]
 800d66c:	400a      	ands	r2, r1
 800d66e:	4002      	ands	r2, r0
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d670:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d674:	6869      	ldr	r1, [r5, #4]
 800d676:	4211      	tst	r1, r2
 800d678:	d102      	bne.n	800d680 <UTIL_SEQ_Run+0x44>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d67a:	f04f 30ff 	mov.w	r0, #4294967295
 800d67e:	6068      	str	r0, [r5, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d680:	4d34      	ldr	r5, [pc, #208]	@ (800d754 <UTIL_SEQ_Run+0x118>)
 800d682:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800d686:	6868      	ldr	r0, [r5, #4]
 800d688:	4010      	ands	r0, r2
 800d68a:	f7ff ffb9 	bl	800d600 <SEQ_BitPosition>
 800d68e:	4932      	ldr	r1, [pc, #200]	@ (800d758 <UTIL_SEQ_Run+0x11c>)
 800d690:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d692:	686a      	ldr	r2, [r5, #4]
 800d694:	2301      	movs	r3, #1
 800d696:	fa03 f000 	lsl.w	r0, r3, r0
 800d69a:	ea22 0200 	bic.w	r2, r2, r0
 800d69e:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6a0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d6a4:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d6a6:	680a      	ldr	r2, [r1, #0]
 800d6a8:	4093      	lsls	r3, r2
 800d6aa:	43d8      	mvns	r0, r3
 800d6ac:	4925      	ldr	r1, [pc, #148]	@ (800d744 <UTIL_SEQ_Run+0x108>)
 800d6ae:	680a      	ldr	r2, [r1, #0]
 800d6b0:	ea22 0303 	bic.w	r3, r2, r3
 800d6b4:	600b      	str	r3, [r1, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d6b6:	2304      	movs	r3, #4
 800d6b8:	e006      	b.n	800d6c8 <UTIL_SEQ_Run+0x8c>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	4925      	ldr	r1, [pc, #148]	@ (800d754 <UTIL_SEQ_Run+0x118>)
 800d6be:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800d6c2:	4002      	ands	r2, r0
 800d6c4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1f6      	bne.n	800d6ba <UTIL_SEQ_Run+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6cc:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 800d6d0:	4b21      	ldr	r3, [pc, #132]	@ (800d758 <UTIL_SEQ_Run+0x11c>)
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	4b21      	ldr	r3, [pc, #132]	@ (800d75c <UTIL_SEQ_Run+0x120>)
 800d6d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6da:	4798      	blx	r3
    local_taskset = TaskSet;
 800d6dc:	4b19      	ldr	r3, [pc, #100]	@ (800d744 <UTIL_SEQ_Run+0x108>)
 800d6de:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 800d6e0:	4b19      	ldr	r3, [pc, #100]	@ (800d748 <UTIL_SEQ_Run+0x10c>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 800d6e4:	4919      	ldr	r1, [pc, #100]	@ (800d74c <UTIL_SEQ_Run+0x110>)
 800d6e6:	6809      	ldr	r1, [r1, #0]
    local_evtwaited = EvtWaited;
 800d6e8:	4819      	ldr	r0, [pc, #100]	@ (800d750 <UTIL_SEQ_Run+0x114>)
 800d6ea:	6805      	ldr	r5, [r0, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d6ec:	400a      	ands	r2, r1
 800d6ee:	4814      	ldr	r0, [pc, #80]	@ (800d740 <UTIL_SEQ_Run+0x104>)
 800d6f0:	6800      	ldr	r0, [r0, #0]
 800d6f2:	4202      	tst	r2, r0
 800d6f4:	d001      	beq.n	800d6fa <UTIL_SEQ_Run+0xbe>
 800d6f6:	402b      	ands	r3, r5
 800d6f8:	d0af      	beq.n	800d65a <UTIL_SEQ_Run+0x1e>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d6fa:	4b17      	ldr	r3, [pc, #92]	@ (800d758 <UTIL_SEQ_Run+0x11c>)
 800d6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d700:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d702:	f7ff ff7b 	bl	800d5fc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d706:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d70a:	b672      	cpsid	i
  local_taskset = TaskSet;
 800d70c:	4b0d      	ldr	r3, [pc, #52]	@ (800d744 <UTIL_SEQ_Run+0x108>)
 800d70e:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 800d710:	4a0d      	ldr	r2, [pc, #52]	@ (800d748 <UTIL_SEQ_Run+0x10c>)
 800d712:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 800d714:	4a0d      	ldr	r2, [pc, #52]	@ (800d74c <UTIL_SEQ_Run+0x110>)
 800d716:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d718:	4013      	ands	r3, r2
 800d71a:	4a09      	ldr	r2, [pc, #36]	@ (800d740 <UTIL_SEQ_Run+0x104>)
 800d71c:	6812      	ldr	r2, [r2, #0]
 800d71e:	4213      	tst	r3, r2
 800d720:	d103      	bne.n	800d72a <UTIL_SEQ_Run+0xee>
    if ((local_evtset & EvtWaited)== 0U)
 800d722:	4b0b      	ldr	r3, [pc, #44]	@ (800d750 <UTIL_SEQ_Run+0x114>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	420b      	tst	r3, r1
 800d728:	d006      	beq.n	800d738 <UTIL_SEQ_Run+0xfc>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d72a:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800d72e:	f7ff ff66 	bl	800d5fe <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800d732:	4b03      	ldr	r3, [pc, #12]	@ (800d740 <UTIL_SEQ_Run+0x104>)
 800d734:	601c      	str	r4, [r3, #0]
}
 800d736:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 800d738:	f7f5 f9aa 	bl	8002a90 <UTIL_SEQ_Idle>
 800d73c:	e7f5      	b.n	800d72a <UTIL_SEQ_Run+0xee>
 800d73e:	bf00      	nop
 800d740:	20000084 	.word	0x20000084
 800d744:	20000c54 	.word	0x20000c54
 800d748:	20000c50 	.word	0x20000c50
 800d74c:	20000088 	.word	0x20000088
 800d750:	20000c4c 	.word	0x20000c4c
 800d754:	20000c20 	.word	0x20000c20
 800d758:	20000c48 	.word	0x20000c48
 800d75c:	20000c40 	.word	0x20000c40

0800d760 <UTIL_SEQ_RegTask>:
{
 800d760:	b538      	push	{r3, r4, r5, lr}
 800d762:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d764:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d768:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d76a:	f7ff ff49 	bl	800d600 <SEQ_BitPosition>
 800d76e:	4b03      	ldr	r3, [pc, #12]	@ (800d77c <UTIL_SEQ_RegTask+0x1c>)
 800d770:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d774:	f385 8810 	msr	PRIMASK, r5
}
 800d778:	bd38      	pop	{r3, r4, r5, pc}
 800d77a:	bf00      	nop
 800d77c:	20000c40 	.word	0x20000c40

0800d780 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800d780:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800d782:	4b03      	ldr	r3, [pc, #12]	@ (800d790 <UTIL_TIMER_Init+0x10>)
 800d784:	2200      	movs	r2, #0
 800d786:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800d788:	4b02      	ldr	r3, [pc, #8]	@ (800d794 <UTIL_TIMER_Init+0x14>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4798      	blx	r3
}
 800d78e:	bd08      	pop	{r3, pc}
 800d790:	20000c58 	.word	0x20000c58
 800d794:	08011a38 	.word	0x08011a38

0800d798 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 800d798:	b1a8      	cbz	r0, 800d7c6 <UTIL_TIMER_Create+0x2e>
{
 800d79a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79c:	4617      	mov	r7, r2
 800d79e:	461e      	mov	r6, r3
 800d7a0:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 800d7a2:	b193      	cbz	r3, 800d7ca <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 800d7a4:	2500      	movs	r5, #0
 800d7a6:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800d7a8:	4b09      	ldr	r3, [pc, #36]	@ (800d7d0 <UTIL_TIMER_Create+0x38>)
 800d7aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ac:	4608      	mov	r0, r1
 800d7ae:	4798      	blx	r3
 800d7b0:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800d7b2:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 800d7b4:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800d7b6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800d7b8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800d7ba:	9b06      	ldr	r3, [sp, #24]
 800d7bc:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800d7be:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800d7c0:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800d7c2:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 800d7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800d7c6:	2001      	movs	r0, #1
}
 800d7c8:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800d7ca:	2001      	movs	r0, #1
 800d7cc:	e7fa      	b.n	800d7c4 <UTIL_TIMER_Create+0x2c>
 800d7ce:	bf00      	nop
 800d7d0:	08011a38 	.word	0x08011a38

0800d7d4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800d7d4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800d7d6:	4c03      	ldr	r4, [pc, #12]	@ (800d7e4 <UTIL_TIMER_GetCurrentTime+0x10>)
 800d7d8:	69e3      	ldr	r3, [r4, #28]
 800d7da:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800d7dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d7de:	4798      	blx	r3
}
 800d7e0:	bd10      	pop	{r4, pc}
 800d7e2:	bf00      	nop
 800d7e4:	08011a38 	.word	0x08011a38

0800d7e8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800d7e8:	b570      	push	{r4, r5, r6, lr}
 800d7ea:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800d7ec:	4d05      	ldr	r5, [pc, #20]	@ (800d804 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800d7ee:	69eb      	ldr	r3, [r5, #28]
 800d7f0:	4798      	blx	r3
 800d7f2:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800d7f4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800d7fa:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800d7fc:	1a20      	subs	r0, r4, r0
 800d7fe:	4798      	blx	r3
}
 800d800:	bd70      	pop	{r4, r5, r6, pc}
 800d802:	bf00      	nop
 800d804:	08011a38 	.word	0x08011a38

0800d808 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d808:	4b05      	ldr	r3, [pc, #20]	@ (800d820 <TimerExists+0x18>)
 800d80a:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800d80c:	e000      	b.n	800d810 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 800d80e:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800d810:	b11b      	cbz	r3, 800d81a <TimerExists+0x12>
    if( cur == TimerObject )
 800d812:	4283      	cmp	r3, r0
 800d814:	d1fb      	bne.n	800d80e <TimerExists+0x6>
      return true;
 800d816:	2001      	movs	r0, #1
  }
  return false;
}
 800d818:	4770      	bx	lr
  return false;
 800d81a:	2000      	movs	r0, #0
 800d81c:	4770      	bx	lr
 800d81e:	bf00      	nop
 800d820:	20000c58 	.word	0x20000c58

0800d824 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800d824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d826:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800d828:	4e09      	ldr	r6, [pc, #36]	@ (800d850 <TimerSetTimeout+0x2c>)
 800d82a:	6a33      	ldr	r3, [r6, #32]
 800d82c:	4798      	blx	r3
 800d82e:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 800d830:	2301      	movs	r3, #1
 800d832:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800d834:	6827      	ldr	r7, [r4, #0]
 800d836:	69b6      	ldr	r6, [r6, #24]
 800d838:	47b0      	blx	r6
 800d83a:	4428      	add	r0, r5
 800d83c:	4287      	cmp	r7, r0
 800d83e:	d202      	bcs.n	800d846 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800d840:	47b0      	blx	r6
 800d842:	4428      	add	r0, r5
 800d844:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800d846:	4b02      	ldr	r3, [pc, #8]	@ (800d850 <TimerSetTimeout+0x2c>)
 800d848:	689b      	ldr	r3, [r3, #8]
 800d84a:	6820      	ldr	r0, [r4, #0]
 800d84c:	4798      	blx	r3
}
 800d84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d850:	08011a38 	.word	0x08011a38

0800d854 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 800d854:	b368      	cbz	r0, 800d8b2 <UTIL_TIMER_Stop+0x5e>
{
 800d856:	b510      	push	{r4, lr}
 800d858:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d85a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d85e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800d860:	4b15      	ldr	r3, [pc, #84]	@ (800d8b8 <UTIL_TIMER_Stop+0x64>)
 800d862:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 800d864:	2301      	movs	r3, #1
 800d866:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 800d868:	b1e1      	cbz	r1, 800d8a4 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 800d86a:	2300      	movs	r3, #0
 800d86c:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800d86e:	4288      	cmp	r0, r1
 800d870:	d006      	beq.n	800d880 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800d872:	460b      	mov	r3, r1
        while( cur != NULL )
 800d874:	b1b3      	cbz	r3, 800d8a4 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 800d876:	4293      	cmp	r3, r2
 800d878:	d011      	beq.n	800d89e <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 800d87a:	4619      	mov	r1, r3
            cur = cur->Next;
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	e7f9      	b.n	800d874 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 800d880:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 800d882:	6948      	ldr	r0, [r1, #20]
 800d884:	b120      	cbz	r0, 800d890 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 800d886:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b8 <UTIL_TIMER_Stop+0x64>)
 800d888:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 800d88a:	f7ff ffcb 	bl	800d824 <TimerSetTimeout>
 800d88e:	e009      	b.n	800d8a4 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 800d890:	4b0a      	ldr	r3, [pc, #40]	@ (800d8bc <UTIL_TIMER_Stop+0x68>)
 800d892:	68db      	ldr	r3, [r3, #12]
 800d894:	4798      	blx	r3
            TimerListHead = NULL;
 800d896:	4b08      	ldr	r3, [pc, #32]	@ (800d8b8 <UTIL_TIMER_Stop+0x64>)
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	e002      	b.n	800d8a4 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 800d89e:	695b      	ldr	r3, [r3, #20]
 800d8a0:	b123      	cbz	r3, 800d8ac <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 800d8a2:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8a4:	f384 8810 	msr	PRIMASK, r4
}
 800d8a8:	2000      	movs	r0, #0
}
 800d8aa:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	614b      	str	r3, [r1, #20]
 800d8b0:	e7f8      	b.n	800d8a4 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 800d8b2:	2001      	movs	r0, #1
}
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	20000c58 	.word	0x20000c58
 800d8bc:	08011a38 	.word	0x08011a38

0800d8c0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d8c0:	4b09      	ldr	r3, [pc, #36]	@ (800d8e8 <TimerInsertTimer+0x28>)
 800d8c2:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800d8c4:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800d8c6:	e001      	b.n	800d8cc <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 800d8c8:	461a      	mov	r2, r3
        next = next->Next;
 800d8ca:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 800d8cc:	6951      	ldr	r1, [r2, #20]
 800d8ce:	b139      	cbz	r1, 800d8e0 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 800d8d0:	6819      	ldr	r1, [r3, #0]
 800d8d2:	f8d0 c000 	ldr.w	ip, [r0]
 800d8d6:	458c      	cmp	ip, r1
 800d8d8:	d8f6      	bhi.n	800d8c8 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 800d8da:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800d8dc:	6143      	str	r3, [r0, #20]
        return;
 800d8de:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 800d8e0:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	6143      	str	r3, [r0, #20]
}
 800d8e6:	4770      	bx	lr
 800d8e8:	20000c58 	.word	0x20000c58

0800d8ec <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800d8ec:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800d8ee:	4b05      	ldr	r3, [pc, #20]	@ (800d904 <TimerInsertNewHeadTimer+0x18>)
 800d8f0:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 800d8f2:	b10b      	cbz	r3, 800d8f8 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800d8f8:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800d8fa:	4b02      	ldr	r3, [pc, #8]	@ (800d904 <TimerInsertNewHeadTimer+0x18>)
 800d8fc:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800d8fe:	f7ff ff91 	bl	800d824 <TimerSetTimeout>
}
 800d902:	bd08      	pop	{r3, pc}
 800d904:	20000c58 	.word	0x20000c58

0800d908 <UTIL_TIMER_Start>:
{
 800d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d036      	beq.n	800d97c <UTIL_TIMER_Start+0x74>
 800d90e:	4604      	mov	r4, r0
 800d910:	f7ff ff7a 	bl	800d808 <TimerExists>
 800d914:	2800      	cmp	r0, #0
 800d916:	d134      	bne.n	800d982 <UTIL_TIMER_Start+0x7a>
 800d918:	7a65      	ldrb	r5, [r4, #9]
 800d91a:	2d00      	cmp	r5, #0
 800d91c:	d133      	bne.n	800d986 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d91e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d922:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 800d924:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800d926:	4b19      	ldr	r3, [pc, #100]	@ (800d98c <UTIL_TIMER_Start+0x84>)
 800d928:	6a1b      	ldr	r3, [r3, #32]
 800d92a:	4798      	blx	r3
    if( ticks < minValue )
 800d92c:	4287      	cmp	r7, r0
 800d92e:	d300      	bcc.n	800d932 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 800d930:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 800d932:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 800d934:	2300      	movs	r3, #0
 800d936:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 800d938:	2201      	movs	r2, #1
 800d93a:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800d93c:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800d93e:	4b14      	ldr	r3, [pc, #80]	@ (800d990 <UTIL_TIMER_Start+0x88>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	b183      	cbz	r3, 800d966 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800d944:	4b11      	ldr	r3, [pc, #68]	@ (800d98c <UTIL_TIMER_Start+0x84>)
 800d946:	699b      	ldr	r3, [r3, #24]
 800d948:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	4418      	add	r0, r3
 800d94e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800d950:	4b0f      	ldr	r3, [pc, #60]	@ (800d990 <UTIL_TIMER_Start+0x88>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4298      	cmp	r0, r3
 800d958:	d20c      	bcs.n	800d974 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 800d95a:	4620      	mov	r0, r4
 800d95c:	f7ff ffc6 	bl	800d8ec <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d960:	f386 8810 	msr	PRIMASK, r6
}
 800d964:	e00b      	b.n	800d97e <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 800d966:	4b09      	ldr	r3, [pc, #36]	@ (800d98c <UTIL_TIMER_Start+0x84>)
 800d968:	691b      	ldr	r3, [r3, #16]
 800d96a:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800d96c:	4620      	mov	r0, r4
 800d96e:	f7ff ffbd 	bl	800d8ec <TimerInsertNewHeadTimer>
 800d972:	e7f5      	b.n	800d960 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 800d974:	4620      	mov	r0, r4
 800d976:	f7ff ffa3 	bl	800d8c0 <TimerInsertTimer>
 800d97a:	e7f1      	b.n	800d960 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d97c:	2501      	movs	r5, #1
}
 800d97e:	4628      	mov	r0, r5
 800d980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 800d982:	2501      	movs	r5, #1
 800d984:	e7fb      	b.n	800d97e <UTIL_TIMER_Start+0x76>
 800d986:	2501      	movs	r5, #1
 800d988:	e7f9      	b.n	800d97e <UTIL_TIMER_Start+0x76>
 800d98a:	bf00      	nop
 800d98c:	08011a38 	.word	0x08011a38
 800d990:	20000c58 	.word	0x20000c58

0800d994 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 800d994:	b198      	cbz	r0, 800d9be <UTIL_TIMER_SetPeriod+0x2a>
{
 800d996:	b510      	push	{r4, lr}
 800d998:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800d99a:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c4 <UTIL_TIMER_SetPeriod+0x30>)
 800d99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d99e:	4608      	mov	r0, r1
 800d9a0:	4798      	blx	r3
 800d9a2:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f7ff ff2f 	bl	800d808 <TimerExists>
 800d9aa:	b908      	cbnz	r0, 800d9b0 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800d9ac:	2000      	movs	r0, #0
}
 800d9ae:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	f7ff ff4f 	bl	800d854 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f7ff ffa6 	bl	800d908 <UTIL_TIMER_Start>
 800d9bc:	e7f7      	b.n	800d9ae <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800d9be:	2001      	movs	r0, #1
}
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	08011a38 	.word	0x08011a38

0800d9c8 <UTIL_TIMER_IRQ_Handler>:
{
 800d9c8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9ca:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d9ce:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800d9d0:	4c1e      	ldr	r4, [pc, #120]	@ (800da4c <UTIL_TIMER_IRQ_Handler+0x84>)
 800d9d2:	6963      	ldr	r3, [r4, #20]
 800d9d4:	4798      	blx	r3
 800d9d6:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800d9d8:	6923      	ldr	r3, [r4, #16]
 800d9da:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 800d9dc:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 800d9de:	4b1c      	ldr	r3, [pc, #112]	@ (800da50 <UTIL_TIMER_IRQ_Handler+0x88>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	b923      	cbnz	r3, 800d9ee <UTIL_TIMER_IRQ_Handler+0x26>
 800d9e4:	e018      	b.n	800da18 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800d9ea:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800d9ec:	b1a3      	cbz	r3, 800da18 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	42a2      	cmp	r2, r4
 800d9f2:	d9f8      	bls.n	800d9e6 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 800d9f4:	1a31      	subs	r1, r6, r0
 800d9f6:	440a      	add	r2, r1
 800d9f8:	601a      	str	r2, [r3, #0]
 800d9fa:	e7f6      	b.n	800d9ea <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 800d9fc:	4b14      	ldr	r3, [pc, #80]	@ (800da50 <UTIL_TIMER_IRQ_Handler+0x88>)
 800d9fe:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 800da00:	6962      	ldr	r2, [r4, #20]
 800da02:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 800da04:	2300      	movs	r3, #0
 800da06:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 800da08:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 800da0a:	68e3      	ldr	r3, [r4, #12]
 800da0c:	6920      	ldr	r0, [r4, #16]
 800da0e:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800da10:	8963      	ldrh	r3, [r4, #10]
 800da12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da16:	d012      	beq.n	800da3e <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800da18:	4b0d      	ldr	r3, [pc, #52]	@ (800da50 <UTIL_TIMER_IRQ_Handler+0x88>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	b13b      	cbz	r3, 800da2e <UTIL_TIMER_IRQ_Handler+0x66>
 800da1e:	681c      	ldr	r4, [r3, #0]
 800da20:	2c00      	cmp	r4, #0
 800da22:	d0eb      	beq.n	800d9fc <UTIL_TIMER_IRQ_Handler+0x34>
 800da24:	4b09      	ldr	r3, [pc, #36]	@ (800da4c <UTIL_TIMER_IRQ_Handler+0x84>)
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	4798      	blx	r3
 800da2a:	4284      	cmp	r4, r0
 800da2c:	d3e6      	bcc.n	800d9fc <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800da2e:	4b08      	ldr	r3, [pc, #32]	@ (800da50 <UTIL_TIMER_IRQ_Handler+0x88>)
 800da30:	6818      	ldr	r0, [r3, #0]
 800da32:	b108      	cbz	r0, 800da38 <UTIL_TIMER_IRQ_Handler+0x70>
 800da34:	7a03      	ldrb	r3, [r0, #8]
 800da36:	b133      	cbz	r3, 800da46 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da38:	f385 8810 	msr	PRIMASK, r5
}
 800da3c:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 800da3e:	4620      	mov	r0, r4
 800da40:	f7ff ff62 	bl	800d908 <UTIL_TIMER_Start>
 800da44:	e7e8      	b.n	800da18 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 800da46:	f7ff feed 	bl	800d824 <TimerSetTimeout>
 800da4a:	e7f5      	b.n	800da38 <UTIL_TIMER_IRQ_Handler+0x70>
 800da4c:	08011a38 	.word	0x08011a38
 800da50:	20000c58 	.word	0x20000c58

0800da54 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800da54:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da56:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da5a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800da5c:	4b1e      	ldr	r3, [pc, #120]	@ (800dad8 <TRACE_AllocateBufer+0x84>)
 800da5e:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800da62:	8a1a      	ldrh	r2, [r3, #16]
 800da64:	4596      	cmp	lr, r2
 800da66:	d011      	beq.n	800da8c <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800da68:	4596      	cmp	lr, r2
 800da6a:	d921      	bls.n	800dab0 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800da6c:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 800da70:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800da72:	4283      	cmp	r3, r0
 800da74:	d81f      	bhi.n	800dab6 <TRACE_AllocateBufer+0x62>
 800da76:	4282      	cmp	r2, r0
 800da78:	d91d      	bls.n	800dab6 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800da7a:	4b17      	ldr	r3, [pc, #92]	@ (800dad8 <TRACE_AllocateBufer+0x84>)
 800da7c:	2401      	movs	r4, #1
 800da7e:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800da80:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800da84:	2400      	movs	r4, #0
 800da86:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800da88:	4613      	mov	r3, r2
 800da8a:	e014      	b.n	800dab6 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800da8c:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 800da90:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800da92:	4298      	cmp	r0, r3
 800da94:	d30f      	bcc.n	800dab6 <TRACE_AllocateBufer+0x62>
 800da96:	4282      	cmp	r2, r0
 800da98:	d90d      	bls.n	800dab6 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800da9a:	4b0f      	ldr	r3, [pc, #60]	@ (800dad8 <TRACE_AllocateBufer+0x84>)
 800da9c:	2401      	movs	r4, #1
 800da9e:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800daa0:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800daa4:	f04f 0e00 	mov.w	lr, #0
 800daa8:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800daac:	4613      	mov	r3, r2
 800daae:	e002      	b.n	800dab6 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800dab0:	eba2 020e 	sub.w	r2, r2, lr
 800dab4:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800dab6:	4283      	cmp	r3, r0
 800dab8:	d90a      	bls.n	800dad0 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800daba:	4a07      	ldr	r2, [pc, #28]	@ (800dad8 <TRACE_AllocateBufer+0x84>)
 800dabc:	8a53      	ldrh	r3, [r2, #18]
 800dabe:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800dac0:	4403      	add	r3, r0
 800dac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dac6:	8253      	strh	r3, [r2, #18]
    ret = 0;
 800dac8:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daca:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800dace:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 800dad0:	f04f 30ff 	mov.w	r0, #4294967295
 800dad4:	e7f9      	b.n	800daca <TRACE_AllocateBufer+0x76>
 800dad6:	bf00      	nop
 800dad8:	20000f5c 	.word	0x20000f5c

0800dadc <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dadc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dae0:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800dae2:	4a03      	ldr	r2, [pc, #12]	@ (800daf0 <TRACE_Lock+0x14>)
 800dae4:	8ad3      	ldrh	r3, [r2, #22]
 800dae6:	3301      	adds	r3, #1
 800dae8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800daea:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800daee:	4770      	bx	lr
 800daf0:	20000f5c 	.word	0x20000f5c

0800daf4 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800daf4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800daf8:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800dafa:	4a03      	ldr	r2, [pc, #12]	@ (800db08 <TRACE_UnLock+0x14>)
 800dafc:	8ad3      	ldrh	r3, [r2, #22]
 800dafe:	3b01      	subs	r3, #1
 800db00:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db02:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800db06:	4770      	bx	lr
 800db08:	20000f5c 	.word	0x20000f5c

0800db0c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800db0c:	4b02      	ldr	r3, [pc, #8]	@ (800db18 <TRACE_IsLocked+0xc>)
 800db0e:	8ad8      	ldrh	r0, [r3, #22]
}
 800db10:	3800      	subs	r0, #0
 800db12:	bf18      	it	ne
 800db14:	2001      	movne	r0, #1
 800db16:	4770      	bx	lr
 800db18:	20000f5c 	.word	0x20000f5c

0800db1c <UTIL_ADV_TRACE_Init>:
{
 800db1c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800db1e:	2218      	movs	r2, #24
 800db20:	2100      	movs	r1, #0
 800db22:	4807      	ldr	r0, [pc, #28]	@ (800db40 <UTIL_ADV_TRACE_Init+0x24>)
 800db24:	f7ff fba9 	bl	800d27a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800db28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db2c:	2100      	movs	r1, #0
 800db2e:	4805      	ldr	r0, [pc, #20]	@ (800db44 <UTIL_ADV_TRACE_Init+0x28>)
 800db30:	f7ff fba3 	bl	800d27a <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800db34:	4b04      	ldr	r3, [pc, #16]	@ (800db48 <UTIL_ADV_TRACE_Init+0x2c>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4804      	ldr	r0, [pc, #16]	@ (800db4c <UTIL_ADV_TRACE_Init+0x30>)
 800db3a:	4798      	blx	r3
}
 800db3c:	bd08      	pop	{r3, pc}
 800db3e:	bf00      	nop
 800db40:	20000f5c 	.word	0x20000f5c
 800db44:	20000d5c 	.word	0x20000d5c
 800db48:	08011a64 	.word	0x08011a64
 800db4c:	0800dccd 	.word	0x0800dccd

0800db50 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800db50:	4b01      	ldr	r3, [pc, #4]	@ (800db58 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800db52:	6058      	str	r0, [r3, #4]
}
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop
 800db58:	20000f5c 	.word	0x20000f5c

0800db5c <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800db5c:	4b01      	ldr	r3, [pc, #4]	@ (800db64 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800db5e:	7218      	strb	r0, [r3, #8]
}
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	20000f5c 	.word	0x20000f5c

0800db68 <TRACE_Send>:
{
 800db68:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db6a:	f3ef 8310 	mrs	r3, PRIMASK
 800db6e:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800db70:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 800db72:	f7ff ffcb 	bl	800db0c <TRACE_IsLocked>
 800db76:	b118      	cbz	r0, 800db80 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db78:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800db7c:	2000      	movs	r0, #0
}
 800db7e:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 800db80:	f7ff ffac 	bl	800dadc <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800db84:	4b1c      	ldr	r3, [pc, #112]	@ (800dbf8 <TRACE_Send+0x90>)
 800db86:	8a1a      	ldrh	r2, [r3, #16]
 800db88:	8a5b      	ldrh	r3, [r3, #18]
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d02e      	beq.n	800dbec <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800db8e:	491a      	ldr	r1, [pc, #104]	@ (800dbf8 <TRACE_Send+0x90>)
 800db90:	7889      	ldrb	r1, [r1, #2]
 800db92:	2901      	cmp	r1, #1
 800db94:	d017      	beq.n	800dbc6 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800db96:	4a18      	ldr	r2, [pc, #96]	@ (800dbf8 <TRACE_Send+0x90>)
 800db98:	7892      	ldrb	r2, [r2, #2]
 800db9a:	b932      	cbnz	r2, 800dbaa <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800db9c:	4a16      	ldr	r2, [pc, #88]	@ (800dbf8 <TRACE_Send+0x90>)
 800db9e:	8a12      	ldrh	r2, [r2, #16]
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d91e      	bls.n	800dbe2 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800dba4:	1a9b      	subs	r3, r3, r2
 800dba6:	4a14      	ldr	r2, [pc, #80]	@ (800dbf8 <TRACE_Send+0x90>)
 800dba8:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800dbaa:	4e13      	ldr	r6, [pc, #76]	@ (800dbf8 <TRACE_Send+0x90>)
 800dbac:	8a35      	ldrh	r5, [r6, #16]
 800dbae:	4b13      	ldr	r3, [pc, #76]	@ (800dbfc <TRACE_Send+0x94>)
 800dbb0:	441d      	add	r5, r3
 800dbb2:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 800dbb6:	f7f4 ff6f 	bl	8002a98 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800dbba:	4b11      	ldr	r3, [pc, #68]	@ (800dc00 <TRACE_Send+0x98>)
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	8ab1      	ldrh	r1, [r6, #20]
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	4798      	blx	r3
 800dbc4:	e7db      	b.n	800db7e <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800dbc6:	480c      	ldr	r0, [pc, #48]	@ (800dbf8 <TRACE_Send+0x90>)
 800dbc8:	8801      	ldrh	r1, [r0, #0]
 800dbca:	1a8a      	subs	r2, r1, r2
 800dbcc:	b292      	uxth	r2, r2
 800dbce:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800dbd0:	2102      	movs	r1, #2
 800dbd2:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dbd4:	2100      	movs	r1, #0
 800dbd6:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800dbd8:	2a00      	cmp	r2, #0
 800dbda:	d1dc      	bne.n	800db96 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dbdc:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dbde:	8201      	strh	r1, [r0, #16]
 800dbe0:	e7d9      	b.n	800db96 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800dbe2:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 800dbe6:	4b04      	ldr	r3, [pc, #16]	@ (800dbf8 <TRACE_Send+0x90>)
 800dbe8:	829a      	strh	r2, [r3, #20]
 800dbea:	e7de      	b.n	800dbaa <TRACE_Send+0x42>
      TRACE_UnLock();
 800dbec:	f7ff ff82 	bl	800daf4 <TRACE_UnLock>
 800dbf0:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800dbf4:	2000      	movs	r0, #0
}
 800dbf6:	e7c2      	b.n	800db7e <TRACE_Send+0x16>
 800dbf8:	20000f5c 	.word	0x20000f5c
 800dbfc:	20000d5c 	.word	0x20000d5c
 800dc00:	08011a64 	.word	0x08011a64

0800dc04 <UTIL_ADV_TRACE_COND_FSend>:
{
 800dc04:	b408      	push	{r3}
 800dc06:	b530      	push	{r4, r5, lr}
 800dc08:	b086      	sub	sp, #24
 800dc0a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800dc12:	4b2b      	ldr	r3, [pc, #172]	@ (800dcc0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800dc14:	7a1b      	ldrb	r3, [r3, #8]
 800dc16:	4283      	cmp	r3, r0
 800dc18:	d34c      	bcc.n	800dcb4 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800dc1a:	4b29      	ldr	r3, [pc, #164]	@ (800dcc0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	4399      	bics	r1, r3
 800dc20:	d14b      	bne.n	800dcba <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800dc22:	4b27      	ldr	r3, [pc, #156]	@ (800dcc0 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	b123      	cbz	r3, 800dc32 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 800dc28:	b11a      	cbz	r2, 800dc32 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800dc2a:	f10d 0102 	add.w	r1, sp, #2
 800dc2e:	a801      	add	r0, sp, #4
 800dc30:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 800dc32:	ab0a      	add	r3, sp, #40	@ 0x28
 800dc34:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800dc36:	4622      	mov	r2, r4
 800dc38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800dc3c:	4821      	ldr	r0, [pc, #132]	@ (800dcc4 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800dc3e:	f7ff fc05 	bl	800d44c <tiny_vsnprintf_like>
 800dc42:	b285      	uxth	r5, r0
  TRACE_Lock();
 800dc44:	f7ff ff4a 	bl	800dadc <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800dc48:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800dc4c:	18e8      	adds	r0, r5, r3
 800dc4e:	4669      	mov	r1, sp
 800dc50:	b280      	uxth	r0, r0
 800dc52:	f7ff feff 	bl	800da54 <TRACE_AllocateBufer>
 800dc56:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dc5a:	d026      	beq.n	800dcaa <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	e00d      	b.n	800dc7c <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800dc60:	f8bd 2000 	ldrh.w	r2, [sp]
 800dc64:	f103 0118 	add.w	r1, r3, #24
 800dc68:	4469      	add	r1, sp
 800dc6a:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 800dc6e:	4916      	ldr	r1, [pc, #88]	@ (800dcc8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800dc70:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 800dc72:	3201      	adds	r2, #1
 800dc74:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 800dc78:	3301      	adds	r3, #1
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800dc80:	429a      	cmp	r2, r3
 800dc82:	d8ed      	bhi.n	800dc60 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800dc84:	f8bd 0000 	ldrh.w	r0, [sp]
 800dc88:	9b05      	ldr	r3, [sp, #20]
 800dc8a:	4622      	mov	r2, r4
 800dc8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800dc90:	4c0d      	ldr	r4, [pc, #52]	@ (800dcc8 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800dc92:	4420      	add	r0, r4
 800dc94:	f7ff fbda 	bl	800d44c <tiny_vsnprintf_like>
    TRACE_UnLock();
 800dc98:	f7ff ff2c 	bl	800daf4 <TRACE_UnLock>
    return TRACE_Send();
 800dc9c:	f7ff ff64 	bl	800db68 <TRACE_Send>
}
 800dca0:	b006      	add	sp, #24
 800dca2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dca6:	b001      	add	sp, #4
 800dca8:	4770      	bx	lr
  TRACE_UnLock();
 800dcaa:	f7ff ff23 	bl	800daf4 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800dcae:	f06f 0002 	mvn.w	r0, #2
 800dcb2:	e7f5      	b.n	800dca0 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 800dcb4:	f06f 0004 	mvn.w	r0, #4
 800dcb8:	e7f2      	b.n	800dca0 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800dcba:	f06f 0005 	mvn.w	r0, #5
 800dcbe:	e7ef      	b.n	800dca0 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800dcc0:	20000f5c 	.word	0x20000f5c
 800dcc4:	20000c5c 	.word	0x20000c5c
 800dcc8:	20000d5c 	.word	0x20000d5c

0800dccc <TRACE_TxCpltCallback>:
{
 800dccc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcce:	f3ef 8310 	mrs	r3, PRIMASK
 800dcd2:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800dcd4:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800dcd6:	4b26      	ldr	r3, [pc, #152]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dcd8:	789b      	ldrb	r3, [r3, #2]
 800dcda:	2b02      	cmp	r3, #2
 800dcdc:	d016      	beq.n	800dd0c <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800dcde:	4a24      	ldr	r2, [pc, #144]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dce0:	8a13      	ldrh	r3, [r2, #16]
 800dce2:	8a90      	ldrh	r0, [r2, #20]
 800dce4:	4403      	add	r3, r0
 800dce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcea:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800dcec:	4b20      	ldr	r3, [pc, #128]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dcee:	8a1a      	ldrh	r2, [r3, #16]
 800dcf0:	8a5b      	ldrh	r3, [r3, #18]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d003      	beq.n	800dcfe <TRACE_TxCpltCallback+0x32>
 800dcf6:	481e      	ldr	r0, [pc, #120]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dcf8:	8ac0      	ldrh	r0, [r0, #22]
 800dcfa:	2801      	cmp	r0, #1
 800dcfc:	d00b      	beq.n	800dd16 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcfe:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800dd02:	f7f4 fecf 	bl	8002aa4 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800dd06:	f7ff fef5 	bl	800daf4 <TRACE_UnLock>
}
 800dd0a:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dd0c:	4b18      	ldr	r3, [pc, #96]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dd12:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 800dd14:	e7ea      	b.n	800dcec <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800dd16:	4816      	ldr	r0, [pc, #88]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dd18:	7880      	ldrb	r0, [r0, #2]
 800dd1a:	2801      	cmp	r0, #1
 800dd1c:	d014      	beq.n	800dd48 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800dd1e:	4a14      	ldr	r2, [pc, #80]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dd20:	7892      	ldrb	r2, [r2, #2]
 800dd22:	b932      	cbnz	r2, 800dd32 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800dd24:	4a12      	ldr	r2, [pc, #72]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dd26:	8a12      	ldrh	r2, [r2, #16]
 800dd28:	4293      	cmp	r3, r2
 800dd2a:	d91b      	bls.n	800dd64 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800dd2c:	1a9b      	subs	r3, r3, r2
 800dd2e:	4a10      	ldr	r2, [pc, #64]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dd30:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800dd32:	4b0f      	ldr	r3, [pc, #60]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dd34:	8a18      	ldrh	r0, [r3, #16]
 800dd36:	4a0f      	ldr	r2, [pc, #60]	@ (800dd74 <TRACE_TxCpltCallback+0xa8>)
 800dd38:	4410      	add	r0, r2
 800dd3a:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800dd3e:	4a0e      	ldr	r2, [pc, #56]	@ (800dd78 <TRACE_TxCpltCallback+0xac>)
 800dd40:	68d2      	ldr	r2, [r2, #12]
 800dd42:	8a99      	ldrh	r1, [r3, #20]
 800dd44:	4790      	blx	r2
 800dd46:	e7e0      	b.n	800dd0a <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800dd48:	4c09      	ldr	r4, [pc, #36]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dd4a:	8820      	ldrh	r0, [r4, #0]
 800dd4c:	1a82      	subs	r2, r0, r2
 800dd4e:	b292      	uxth	r2, r2
 800dd50:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800dd52:	2002      	movs	r0, #2
 800dd54:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dd56:	2000      	movs	r0, #0
 800dd58:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800dd5a:	2a00      	cmp	r2, #0
 800dd5c:	d1df      	bne.n	800dd1e <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dd5e:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dd60:	8220      	strh	r0, [r4, #16]
 800dd62:	e7dc      	b.n	800dd1e <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800dd64:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 800dd68:	4b01      	ldr	r3, [pc, #4]	@ (800dd70 <TRACE_TxCpltCallback+0xa4>)
 800dd6a:	829a      	strh	r2, [r3, #20]
 800dd6c:	e7e1      	b.n	800dd32 <TRACE_TxCpltCallback+0x66>
 800dd6e:	bf00      	nop
 800dd70:	20000f5c 	.word	0x20000f5c
 800dd74:	20000d5c 	.word	0x20000d5c
 800dd78:	08011a64 	.word	0x08011a64

0800dd7c <malloc>:
 800dd7c:	4b02      	ldr	r3, [pc, #8]	@ (800dd88 <malloc+0xc>)
 800dd7e:	4601      	mov	r1, r0
 800dd80:	6818      	ldr	r0, [r3, #0]
 800dd82:	f000 b82d 	b.w	800dde0 <_malloc_r>
 800dd86:	bf00      	nop
 800dd88:	20000098 	.word	0x20000098

0800dd8c <free>:
 800dd8c:	4b02      	ldr	r3, [pc, #8]	@ (800dd98 <free+0xc>)
 800dd8e:	4601      	mov	r1, r0
 800dd90:	6818      	ldr	r0, [r3, #0]
 800dd92:	f001 bdb5 	b.w	800f900 <_free_r>
 800dd96:	bf00      	nop
 800dd98:	20000098 	.word	0x20000098

0800dd9c <sbrk_aligned>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	4e0f      	ldr	r6, [pc, #60]	@ (800dddc <sbrk_aligned+0x40>)
 800dda0:	460c      	mov	r4, r1
 800dda2:	6831      	ldr	r1, [r6, #0]
 800dda4:	4605      	mov	r5, r0
 800dda6:	b911      	cbnz	r1, 800ddae <sbrk_aligned+0x12>
 800dda8:	f000 fefa 	bl	800eba0 <_sbrk_r>
 800ddac:	6030      	str	r0, [r6, #0]
 800ddae:	4621      	mov	r1, r4
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	f000 fef5 	bl	800eba0 <_sbrk_r>
 800ddb6:	1c43      	adds	r3, r0, #1
 800ddb8:	d103      	bne.n	800ddc2 <sbrk_aligned+0x26>
 800ddba:	f04f 34ff 	mov.w	r4, #4294967295
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	bd70      	pop	{r4, r5, r6, pc}
 800ddc2:	1cc4      	adds	r4, r0, #3
 800ddc4:	f024 0403 	bic.w	r4, r4, #3
 800ddc8:	42a0      	cmp	r0, r4
 800ddca:	d0f8      	beq.n	800ddbe <sbrk_aligned+0x22>
 800ddcc:	1a21      	subs	r1, r4, r0
 800ddce:	4628      	mov	r0, r5
 800ddd0:	f000 fee6 	bl	800eba0 <_sbrk_r>
 800ddd4:	3001      	adds	r0, #1
 800ddd6:	d1f2      	bne.n	800ddbe <sbrk_aligned+0x22>
 800ddd8:	e7ef      	b.n	800ddba <sbrk_aligned+0x1e>
 800ddda:	bf00      	nop
 800dddc:	20000f74 	.word	0x20000f74

0800dde0 <_malloc_r>:
 800dde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dde4:	1ccd      	adds	r5, r1, #3
 800dde6:	f025 0503 	bic.w	r5, r5, #3
 800ddea:	3508      	adds	r5, #8
 800ddec:	2d0c      	cmp	r5, #12
 800ddee:	bf38      	it	cc
 800ddf0:	250c      	movcc	r5, #12
 800ddf2:	2d00      	cmp	r5, #0
 800ddf4:	4606      	mov	r6, r0
 800ddf6:	db01      	blt.n	800ddfc <_malloc_r+0x1c>
 800ddf8:	42a9      	cmp	r1, r5
 800ddfa:	d904      	bls.n	800de06 <_malloc_r+0x26>
 800ddfc:	230c      	movs	r3, #12
 800ddfe:	6033      	str	r3, [r6, #0]
 800de00:	2000      	movs	r0, #0
 800de02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dedc <_malloc_r+0xfc>
 800de0a:	f000 f869 	bl	800dee0 <__malloc_lock>
 800de0e:	f8d8 3000 	ldr.w	r3, [r8]
 800de12:	461c      	mov	r4, r3
 800de14:	bb44      	cbnz	r4, 800de68 <_malloc_r+0x88>
 800de16:	4629      	mov	r1, r5
 800de18:	4630      	mov	r0, r6
 800de1a:	f7ff ffbf 	bl	800dd9c <sbrk_aligned>
 800de1e:	1c43      	adds	r3, r0, #1
 800de20:	4604      	mov	r4, r0
 800de22:	d158      	bne.n	800ded6 <_malloc_r+0xf6>
 800de24:	f8d8 4000 	ldr.w	r4, [r8]
 800de28:	4627      	mov	r7, r4
 800de2a:	2f00      	cmp	r7, #0
 800de2c:	d143      	bne.n	800deb6 <_malloc_r+0xd6>
 800de2e:	2c00      	cmp	r4, #0
 800de30:	d04b      	beq.n	800deca <_malloc_r+0xea>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	4639      	mov	r1, r7
 800de36:	4630      	mov	r0, r6
 800de38:	eb04 0903 	add.w	r9, r4, r3
 800de3c:	f000 feb0 	bl	800eba0 <_sbrk_r>
 800de40:	4581      	cmp	r9, r0
 800de42:	d142      	bne.n	800deca <_malloc_r+0xea>
 800de44:	6821      	ldr	r1, [r4, #0]
 800de46:	1a6d      	subs	r5, r5, r1
 800de48:	4629      	mov	r1, r5
 800de4a:	4630      	mov	r0, r6
 800de4c:	f7ff ffa6 	bl	800dd9c <sbrk_aligned>
 800de50:	3001      	adds	r0, #1
 800de52:	d03a      	beq.n	800deca <_malloc_r+0xea>
 800de54:	6823      	ldr	r3, [r4, #0]
 800de56:	442b      	add	r3, r5
 800de58:	6023      	str	r3, [r4, #0]
 800de5a:	f8d8 3000 	ldr.w	r3, [r8]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	bb62      	cbnz	r2, 800debc <_malloc_r+0xdc>
 800de62:	f8c8 7000 	str.w	r7, [r8]
 800de66:	e00f      	b.n	800de88 <_malloc_r+0xa8>
 800de68:	6822      	ldr	r2, [r4, #0]
 800de6a:	1b52      	subs	r2, r2, r5
 800de6c:	d420      	bmi.n	800deb0 <_malloc_r+0xd0>
 800de6e:	2a0b      	cmp	r2, #11
 800de70:	d917      	bls.n	800dea2 <_malloc_r+0xc2>
 800de72:	1961      	adds	r1, r4, r5
 800de74:	42a3      	cmp	r3, r4
 800de76:	6025      	str	r5, [r4, #0]
 800de78:	bf18      	it	ne
 800de7a:	6059      	strne	r1, [r3, #4]
 800de7c:	6863      	ldr	r3, [r4, #4]
 800de7e:	bf08      	it	eq
 800de80:	f8c8 1000 	streq.w	r1, [r8]
 800de84:	5162      	str	r2, [r4, r5]
 800de86:	604b      	str	r3, [r1, #4]
 800de88:	4630      	mov	r0, r6
 800de8a:	f000 f82f 	bl	800deec <__malloc_unlock>
 800de8e:	f104 000b 	add.w	r0, r4, #11
 800de92:	1d23      	adds	r3, r4, #4
 800de94:	f020 0007 	bic.w	r0, r0, #7
 800de98:	1ac2      	subs	r2, r0, r3
 800de9a:	bf1c      	itt	ne
 800de9c:	1a1b      	subne	r3, r3, r0
 800de9e:	50a3      	strne	r3, [r4, r2]
 800dea0:	e7af      	b.n	800de02 <_malloc_r+0x22>
 800dea2:	6862      	ldr	r2, [r4, #4]
 800dea4:	42a3      	cmp	r3, r4
 800dea6:	bf0c      	ite	eq
 800dea8:	f8c8 2000 	streq.w	r2, [r8]
 800deac:	605a      	strne	r2, [r3, #4]
 800deae:	e7eb      	b.n	800de88 <_malloc_r+0xa8>
 800deb0:	4623      	mov	r3, r4
 800deb2:	6864      	ldr	r4, [r4, #4]
 800deb4:	e7ae      	b.n	800de14 <_malloc_r+0x34>
 800deb6:	463c      	mov	r4, r7
 800deb8:	687f      	ldr	r7, [r7, #4]
 800deba:	e7b6      	b.n	800de2a <_malloc_r+0x4a>
 800debc:	461a      	mov	r2, r3
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	42a3      	cmp	r3, r4
 800dec2:	d1fb      	bne.n	800debc <_malloc_r+0xdc>
 800dec4:	2300      	movs	r3, #0
 800dec6:	6053      	str	r3, [r2, #4]
 800dec8:	e7de      	b.n	800de88 <_malloc_r+0xa8>
 800deca:	230c      	movs	r3, #12
 800decc:	6033      	str	r3, [r6, #0]
 800dece:	4630      	mov	r0, r6
 800ded0:	f000 f80c 	bl	800deec <__malloc_unlock>
 800ded4:	e794      	b.n	800de00 <_malloc_r+0x20>
 800ded6:	6005      	str	r5, [r0, #0]
 800ded8:	e7d6      	b.n	800de88 <_malloc_r+0xa8>
 800deda:	bf00      	nop
 800dedc:	20000f78 	.word	0x20000f78

0800dee0 <__malloc_lock>:
 800dee0:	4801      	ldr	r0, [pc, #4]	@ (800dee8 <__malloc_lock+0x8>)
 800dee2:	f000 beaa 	b.w	800ec3a <__retarget_lock_acquire_recursive>
 800dee6:	bf00      	nop
 800dee8:	200010bc 	.word	0x200010bc

0800deec <__malloc_unlock>:
 800deec:	4801      	ldr	r0, [pc, #4]	@ (800def4 <__malloc_unlock+0x8>)
 800deee:	f000 bea5 	b.w	800ec3c <__retarget_lock_release_recursive>
 800def2:	bf00      	nop
 800def4:	200010bc 	.word	0x200010bc

0800def8 <_strtol_l.constprop.0>:
 800def8:	2b24      	cmp	r3, #36	@ 0x24
 800defa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800defe:	4686      	mov	lr, r0
 800df00:	4690      	mov	r8, r2
 800df02:	d801      	bhi.n	800df08 <_strtol_l.constprop.0+0x10>
 800df04:	2b01      	cmp	r3, #1
 800df06:	d106      	bne.n	800df16 <_strtol_l.constprop.0+0x1e>
 800df08:	f000 fe6c 	bl	800ebe4 <__errno>
 800df0c:	2316      	movs	r3, #22
 800df0e:	6003      	str	r3, [r0, #0]
 800df10:	2000      	movs	r0, #0
 800df12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df16:	4834      	ldr	r0, [pc, #208]	@ (800dfe8 <_strtol_l.constprop.0+0xf0>)
 800df18:	460d      	mov	r5, r1
 800df1a:	462a      	mov	r2, r5
 800df1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df20:	5d06      	ldrb	r6, [r0, r4]
 800df22:	f016 0608 	ands.w	r6, r6, #8
 800df26:	d1f8      	bne.n	800df1a <_strtol_l.constprop.0+0x22>
 800df28:	2c2d      	cmp	r4, #45	@ 0x2d
 800df2a:	d12d      	bne.n	800df88 <_strtol_l.constprop.0+0x90>
 800df2c:	782c      	ldrb	r4, [r5, #0]
 800df2e:	2601      	movs	r6, #1
 800df30:	1c95      	adds	r5, r2, #2
 800df32:	f033 0210 	bics.w	r2, r3, #16
 800df36:	d109      	bne.n	800df4c <_strtol_l.constprop.0+0x54>
 800df38:	2c30      	cmp	r4, #48	@ 0x30
 800df3a:	d12a      	bne.n	800df92 <_strtol_l.constprop.0+0x9a>
 800df3c:	782a      	ldrb	r2, [r5, #0]
 800df3e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df42:	2a58      	cmp	r2, #88	@ 0x58
 800df44:	d125      	bne.n	800df92 <_strtol_l.constprop.0+0x9a>
 800df46:	786c      	ldrb	r4, [r5, #1]
 800df48:	2310      	movs	r3, #16
 800df4a:	3502      	adds	r5, #2
 800df4c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800df50:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df54:	2200      	movs	r2, #0
 800df56:	fbbc f9f3 	udiv	r9, ip, r3
 800df5a:	4610      	mov	r0, r2
 800df5c:	fb03 ca19 	mls	sl, r3, r9, ip
 800df60:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800df64:	2f09      	cmp	r7, #9
 800df66:	d81b      	bhi.n	800dfa0 <_strtol_l.constprop.0+0xa8>
 800df68:	463c      	mov	r4, r7
 800df6a:	42a3      	cmp	r3, r4
 800df6c:	dd27      	ble.n	800dfbe <_strtol_l.constprop.0+0xc6>
 800df6e:	1c57      	adds	r7, r2, #1
 800df70:	d007      	beq.n	800df82 <_strtol_l.constprop.0+0x8a>
 800df72:	4581      	cmp	r9, r0
 800df74:	d320      	bcc.n	800dfb8 <_strtol_l.constprop.0+0xc0>
 800df76:	d101      	bne.n	800df7c <_strtol_l.constprop.0+0x84>
 800df78:	45a2      	cmp	sl, r4
 800df7a:	db1d      	blt.n	800dfb8 <_strtol_l.constprop.0+0xc0>
 800df7c:	fb00 4003 	mla	r0, r0, r3, r4
 800df80:	2201      	movs	r2, #1
 800df82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df86:	e7eb      	b.n	800df60 <_strtol_l.constprop.0+0x68>
 800df88:	2c2b      	cmp	r4, #43	@ 0x2b
 800df8a:	bf04      	itt	eq
 800df8c:	782c      	ldrbeq	r4, [r5, #0]
 800df8e:	1c95      	addeq	r5, r2, #2
 800df90:	e7cf      	b.n	800df32 <_strtol_l.constprop.0+0x3a>
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1da      	bne.n	800df4c <_strtol_l.constprop.0+0x54>
 800df96:	2c30      	cmp	r4, #48	@ 0x30
 800df98:	bf0c      	ite	eq
 800df9a:	2308      	moveq	r3, #8
 800df9c:	230a      	movne	r3, #10
 800df9e:	e7d5      	b.n	800df4c <_strtol_l.constprop.0+0x54>
 800dfa0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dfa4:	2f19      	cmp	r7, #25
 800dfa6:	d801      	bhi.n	800dfac <_strtol_l.constprop.0+0xb4>
 800dfa8:	3c37      	subs	r4, #55	@ 0x37
 800dfaa:	e7de      	b.n	800df6a <_strtol_l.constprop.0+0x72>
 800dfac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dfb0:	2f19      	cmp	r7, #25
 800dfb2:	d804      	bhi.n	800dfbe <_strtol_l.constprop.0+0xc6>
 800dfb4:	3c57      	subs	r4, #87	@ 0x57
 800dfb6:	e7d8      	b.n	800df6a <_strtol_l.constprop.0+0x72>
 800dfb8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfbc:	e7e1      	b.n	800df82 <_strtol_l.constprop.0+0x8a>
 800dfbe:	1c53      	adds	r3, r2, #1
 800dfc0:	d108      	bne.n	800dfd4 <_strtol_l.constprop.0+0xdc>
 800dfc2:	2322      	movs	r3, #34	@ 0x22
 800dfc4:	f8ce 3000 	str.w	r3, [lr]
 800dfc8:	4660      	mov	r0, ip
 800dfca:	f1b8 0f00 	cmp.w	r8, #0
 800dfce:	d0a0      	beq.n	800df12 <_strtol_l.constprop.0+0x1a>
 800dfd0:	1e69      	subs	r1, r5, #1
 800dfd2:	e006      	b.n	800dfe2 <_strtol_l.constprop.0+0xea>
 800dfd4:	b106      	cbz	r6, 800dfd8 <_strtol_l.constprop.0+0xe0>
 800dfd6:	4240      	negs	r0, r0
 800dfd8:	f1b8 0f00 	cmp.w	r8, #0
 800dfdc:	d099      	beq.n	800df12 <_strtol_l.constprop.0+0x1a>
 800dfde:	2a00      	cmp	r2, #0
 800dfe0:	d1f6      	bne.n	800dfd0 <_strtol_l.constprop.0+0xd8>
 800dfe2:	f8c8 1000 	str.w	r1, [r8]
 800dfe6:	e794      	b.n	800df12 <_strtol_l.constprop.0+0x1a>
 800dfe8:	08012135 	.word	0x08012135

0800dfec <strtol>:
 800dfec:	4613      	mov	r3, r2
 800dfee:	460a      	mov	r2, r1
 800dff0:	4601      	mov	r1, r0
 800dff2:	4802      	ldr	r0, [pc, #8]	@ (800dffc <strtol+0x10>)
 800dff4:	6800      	ldr	r0, [r0, #0]
 800dff6:	f7ff bf7f 	b.w	800def8 <_strtol_l.constprop.0>
 800dffa:	bf00      	nop
 800dffc:	20000098 	.word	0x20000098

0800e000 <__cvt>:
 800e000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e004:	b088      	sub	sp, #32
 800e006:	2b00      	cmp	r3, #0
 800e008:	461d      	mov	r5, r3
 800e00a:	4614      	mov	r4, r2
 800e00c:	bfbc      	itt	lt
 800e00e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800e012:	4614      	movlt	r4, r2
 800e014:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e016:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e018:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800e01c:	bfb6      	itet	lt
 800e01e:	461d      	movlt	r5, r3
 800e020:	2300      	movge	r3, #0
 800e022:	232d      	movlt	r3, #45	@ 0x2d
 800e024:	7013      	strb	r3, [r2, #0]
 800e026:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e028:	f023 0820 	bic.w	r8, r3, #32
 800e02c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e030:	d005      	beq.n	800e03e <__cvt+0x3e>
 800e032:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e036:	d100      	bne.n	800e03a <__cvt+0x3a>
 800e038:	3601      	adds	r6, #1
 800e03a:	2302      	movs	r3, #2
 800e03c:	e000      	b.n	800e040 <__cvt+0x40>
 800e03e:	2303      	movs	r3, #3
 800e040:	aa07      	add	r2, sp, #28
 800e042:	9204      	str	r2, [sp, #16]
 800e044:	aa06      	add	r2, sp, #24
 800e046:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e04a:	e9cd 3600 	strd	r3, r6, [sp]
 800e04e:	4622      	mov	r2, r4
 800e050:	462b      	mov	r3, r5
 800e052:	f000 fe8d 	bl	800ed70 <_dtoa_r>
 800e056:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e05a:	4607      	mov	r7, r0
 800e05c:	d119      	bne.n	800e092 <__cvt+0x92>
 800e05e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e060:	07db      	lsls	r3, r3, #31
 800e062:	d50e      	bpl.n	800e082 <__cvt+0x82>
 800e064:	eb00 0906 	add.w	r9, r0, r6
 800e068:	2200      	movs	r2, #0
 800e06a:	2300      	movs	r3, #0
 800e06c:	4620      	mov	r0, r4
 800e06e:	4629      	mov	r1, r5
 800e070:	f7f2 fd02 	bl	8000a78 <__aeabi_dcmpeq>
 800e074:	b108      	cbz	r0, 800e07a <__cvt+0x7a>
 800e076:	f8cd 901c 	str.w	r9, [sp, #28]
 800e07a:	2230      	movs	r2, #48	@ 0x30
 800e07c:	9b07      	ldr	r3, [sp, #28]
 800e07e:	454b      	cmp	r3, r9
 800e080:	d31e      	bcc.n	800e0c0 <__cvt+0xc0>
 800e082:	9b07      	ldr	r3, [sp, #28]
 800e084:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e086:	1bdb      	subs	r3, r3, r7
 800e088:	4638      	mov	r0, r7
 800e08a:	6013      	str	r3, [r2, #0]
 800e08c:	b008      	add	sp, #32
 800e08e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e092:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e096:	eb00 0906 	add.w	r9, r0, r6
 800e09a:	d1e5      	bne.n	800e068 <__cvt+0x68>
 800e09c:	7803      	ldrb	r3, [r0, #0]
 800e09e:	2b30      	cmp	r3, #48	@ 0x30
 800e0a0:	d10a      	bne.n	800e0b8 <__cvt+0xb8>
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	4629      	mov	r1, r5
 800e0aa:	f7f2 fce5 	bl	8000a78 <__aeabi_dcmpeq>
 800e0ae:	b918      	cbnz	r0, 800e0b8 <__cvt+0xb8>
 800e0b0:	f1c6 0601 	rsb	r6, r6, #1
 800e0b4:	f8ca 6000 	str.w	r6, [sl]
 800e0b8:	f8da 3000 	ldr.w	r3, [sl]
 800e0bc:	4499      	add	r9, r3
 800e0be:	e7d3      	b.n	800e068 <__cvt+0x68>
 800e0c0:	1c59      	adds	r1, r3, #1
 800e0c2:	9107      	str	r1, [sp, #28]
 800e0c4:	701a      	strb	r2, [r3, #0]
 800e0c6:	e7d9      	b.n	800e07c <__cvt+0x7c>

0800e0c8 <__exponent>:
 800e0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e0ca:	2900      	cmp	r1, #0
 800e0cc:	bfba      	itte	lt
 800e0ce:	4249      	neglt	r1, r1
 800e0d0:	232d      	movlt	r3, #45	@ 0x2d
 800e0d2:	232b      	movge	r3, #43	@ 0x2b
 800e0d4:	2909      	cmp	r1, #9
 800e0d6:	7002      	strb	r2, [r0, #0]
 800e0d8:	7043      	strb	r3, [r0, #1]
 800e0da:	dd29      	ble.n	800e130 <__exponent+0x68>
 800e0dc:	f10d 0307 	add.w	r3, sp, #7
 800e0e0:	461d      	mov	r5, r3
 800e0e2:	270a      	movs	r7, #10
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	fbb1 f6f7 	udiv	r6, r1, r7
 800e0ea:	fb07 1416 	mls	r4, r7, r6, r1
 800e0ee:	3430      	adds	r4, #48	@ 0x30
 800e0f0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e0f4:	460c      	mov	r4, r1
 800e0f6:	2c63      	cmp	r4, #99	@ 0x63
 800e0f8:	f103 33ff 	add.w	r3, r3, #4294967295
 800e0fc:	4631      	mov	r1, r6
 800e0fe:	dcf1      	bgt.n	800e0e4 <__exponent+0x1c>
 800e100:	3130      	adds	r1, #48	@ 0x30
 800e102:	1e94      	subs	r4, r2, #2
 800e104:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e108:	1c41      	adds	r1, r0, #1
 800e10a:	4623      	mov	r3, r4
 800e10c:	42ab      	cmp	r3, r5
 800e10e:	d30a      	bcc.n	800e126 <__exponent+0x5e>
 800e110:	f10d 0309 	add.w	r3, sp, #9
 800e114:	1a9b      	subs	r3, r3, r2
 800e116:	42ac      	cmp	r4, r5
 800e118:	bf88      	it	hi
 800e11a:	2300      	movhi	r3, #0
 800e11c:	3302      	adds	r3, #2
 800e11e:	4403      	add	r3, r0
 800e120:	1a18      	subs	r0, r3, r0
 800e122:	b003      	add	sp, #12
 800e124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e126:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e12a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e12e:	e7ed      	b.n	800e10c <__exponent+0x44>
 800e130:	2330      	movs	r3, #48	@ 0x30
 800e132:	3130      	adds	r1, #48	@ 0x30
 800e134:	7083      	strb	r3, [r0, #2]
 800e136:	70c1      	strb	r1, [r0, #3]
 800e138:	1d03      	adds	r3, r0, #4
 800e13a:	e7f1      	b.n	800e120 <__exponent+0x58>

0800e13c <_printf_float>:
 800e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e140:	b091      	sub	sp, #68	@ 0x44
 800e142:	460c      	mov	r4, r1
 800e144:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800e148:	4616      	mov	r6, r2
 800e14a:	461f      	mov	r7, r3
 800e14c:	4605      	mov	r5, r0
 800e14e:	f000 fcef 	bl	800eb30 <_localeconv_r>
 800e152:	6803      	ldr	r3, [r0, #0]
 800e154:	9308      	str	r3, [sp, #32]
 800e156:	4618      	mov	r0, r3
 800e158:	f7f2 f862 	bl	8000220 <strlen>
 800e15c:	2300      	movs	r3, #0
 800e15e:	930e      	str	r3, [sp, #56]	@ 0x38
 800e160:	f8d8 3000 	ldr.w	r3, [r8]
 800e164:	9009      	str	r0, [sp, #36]	@ 0x24
 800e166:	3307      	adds	r3, #7
 800e168:	f023 0307 	bic.w	r3, r3, #7
 800e16c:	f103 0208 	add.w	r2, r3, #8
 800e170:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e174:	f8d4 b000 	ldr.w	fp, [r4]
 800e178:	f8c8 2000 	str.w	r2, [r8]
 800e17c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e180:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e184:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e186:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800e18a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e18e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e192:	4b9d      	ldr	r3, [pc, #628]	@ (800e408 <_printf_float+0x2cc>)
 800e194:	f04f 32ff 	mov.w	r2, #4294967295
 800e198:	f7f2 fca0 	bl	8000adc <__aeabi_dcmpun>
 800e19c:	bb70      	cbnz	r0, 800e1fc <_printf_float+0xc0>
 800e19e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e1a2:	4b99      	ldr	r3, [pc, #612]	@ (800e408 <_printf_float+0x2cc>)
 800e1a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e1a8:	f7f2 fc7a 	bl	8000aa0 <__aeabi_dcmple>
 800e1ac:	bb30      	cbnz	r0, 800e1fc <_printf_float+0xc0>
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	4640      	mov	r0, r8
 800e1b4:	4649      	mov	r1, r9
 800e1b6:	f7f2 fc69 	bl	8000a8c <__aeabi_dcmplt>
 800e1ba:	b110      	cbz	r0, 800e1c2 <_printf_float+0x86>
 800e1bc:	232d      	movs	r3, #45	@ 0x2d
 800e1be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1c2:	4a92      	ldr	r2, [pc, #584]	@ (800e40c <_printf_float+0x2d0>)
 800e1c4:	4b92      	ldr	r3, [pc, #584]	@ (800e410 <_printf_float+0x2d4>)
 800e1c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e1ca:	bf94      	ite	ls
 800e1cc:	4690      	movls	r8, r2
 800e1ce:	4698      	movhi	r8, r3
 800e1d0:	2303      	movs	r3, #3
 800e1d2:	6123      	str	r3, [r4, #16]
 800e1d4:	f02b 0304 	bic.w	r3, fp, #4
 800e1d8:	6023      	str	r3, [r4, #0]
 800e1da:	f04f 0900 	mov.w	r9, #0
 800e1de:	9700      	str	r7, [sp, #0]
 800e1e0:	4633      	mov	r3, r6
 800e1e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800e1e4:	4621      	mov	r1, r4
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	f000 f9d4 	bl	800e594 <_printf_common>
 800e1ec:	3001      	adds	r0, #1
 800e1ee:	f040 808f 	bne.w	800e310 <_printf_float+0x1d4>
 800e1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f6:	b011      	add	sp, #68	@ 0x44
 800e1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1fc:	4642      	mov	r2, r8
 800e1fe:	464b      	mov	r3, r9
 800e200:	4640      	mov	r0, r8
 800e202:	4649      	mov	r1, r9
 800e204:	f7f2 fc6a 	bl	8000adc <__aeabi_dcmpun>
 800e208:	b140      	cbz	r0, 800e21c <_printf_float+0xe0>
 800e20a:	464b      	mov	r3, r9
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	bfbc      	itt	lt
 800e210:	232d      	movlt	r3, #45	@ 0x2d
 800e212:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e216:	4a7f      	ldr	r2, [pc, #508]	@ (800e414 <_printf_float+0x2d8>)
 800e218:	4b7f      	ldr	r3, [pc, #508]	@ (800e418 <_printf_float+0x2dc>)
 800e21a:	e7d4      	b.n	800e1c6 <_printf_float+0x8a>
 800e21c:	6863      	ldr	r3, [r4, #4]
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800e224:	d13f      	bne.n	800e2a6 <_printf_float+0x16a>
 800e226:	2306      	movs	r3, #6
 800e228:	6063      	str	r3, [r4, #4]
 800e22a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800e22e:	2200      	movs	r2, #0
 800e230:	6023      	str	r3, [r4, #0]
 800e232:	9206      	str	r2, [sp, #24]
 800e234:	aa0e      	add	r2, sp, #56	@ 0x38
 800e236:	e9cd a204 	strd	sl, r2, [sp, #16]
 800e23a:	aa0d      	add	r2, sp, #52	@ 0x34
 800e23c:	9203      	str	r2, [sp, #12]
 800e23e:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800e242:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e246:	6863      	ldr	r3, [r4, #4]
 800e248:	9300      	str	r3, [sp, #0]
 800e24a:	4642      	mov	r2, r8
 800e24c:	464b      	mov	r3, r9
 800e24e:	4628      	mov	r0, r5
 800e250:	910a      	str	r1, [sp, #40]	@ 0x28
 800e252:	f7ff fed5 	bl	800e000 <__cvt>
 800e256:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e258:	2947      	cmp	r1, #71	@ 0x47
 800e25a:	4680      	mov	r8, r0
 800e25c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800e25e:	d128      	bne.n	800e2b2 <_printf_float+0x176>
 800e260:	1cc8      	adds	r0, r1, #3
 800e262:	db02      	blt.n	800e26a <_printf_float+0x12e>
 800e264:	6863      	ldr	r3, [r4, #4]
 800e266:	4299      	cmp	r1, r3
 800e268:	dd40      	ble.n	800e2ec <_printf_float+0x1b0>
 800e26a:	f1aa 0a02 	sub.w	sl, sl, #2
 800e26e:	fa5f fa8a 	uxtb.w	sl, sl
 800e272:	3901      	subs	r1, #1
 800e274:	4652      	mov	r2, sl
 800e276:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e27a:	910d      	str	r1, [sp, #52]	@ 0x34
 800e27c:	f7ff ff24 	bl	800e0c8 <__exponent>
 800e280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e282:	1813      	adds	r3, r2, r0
 800e284:	2a01      	cmp	r2, #1
 800e286:	4681      	mov	r9, r0
 800e288:	6123      	str	r3, [r4, #16]
 800e28a:	dc02      	bgt.n	800e292 <_printf_float+0x156>
 800e28c:	6822      	ldr	r2, [r4, #0]
 800e28e:	07d2      	lsls	r2, r2, #31
 800e290:	d501      	bpl.n	800e296 <_printf_float+0x15a>
 800e292:	3301      	adds	r3, #1
 800e294:	6123      	str	r3, [r4, #16]
 800e296:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d09f      	beq.n	800e1de <_printf_float+0xa2>
 800e29e:	232d      	movs	r3, #45	@ 0x2d
 800e2a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e2a4:	e79b      	b.n	800e1de <_printf_float+0xa2>
 800e2a6:	2947      	cmp	r1, #71	@ 0x47
 800e2a8:	d1bf      	bne.n	800e22a <_printf_float+0xee>
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d1bd      	bne.n	800e22a <_printf_float+0xee>
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	e7ba      	b.n	800e228 <_printf_float+0xec>
 800e2b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e2b6:	d9dc      	bls.n	800e272 <_printf_float+0x136>
 800e2b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e2bc:	d118      	bne.n	800e2f0 <_printf_float+0x1b4>
 800e2be:	2900      	cmp	r1, #0
 800e2c0:	6863      	ldr	r3, [r4, #4]
 800e2c2:	dd0b      	ble.n	800e2dc <_printf_float+0x1a0>
 800e2c4:	6121      	str	r1, [r4, #16]
 800e2c6:	b913      	cbnz	r3, 800e2ce <_printf_float+0x192>
 800e2c8:	6822      	ldr	r2, [r4, #0]
 800e2ca:	07d0      	lsls	r0, r2, #31
 800e2cc:	d502      	bpl.n	800e2d4 <_printf_float+0x198>
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	440b      	add	r3, r1
 800e2d2:	6123      	str	r3, [r4, #16]
 800e2d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e2d6:	f04f 0900 	mov.w	r9, #0
 800e2da:	e7dc      	b.n	800e296 <_printf_float+0x15a>
 800e2dc:	b913      	cbnz	r3, 800e2e4 <_printf_float+0x1a8>
 800e2de:	6822      	ldr	r2, [r4, #0]
 800e2e0:	07d2      	lsls	r2, r2, #31
 800e2e2:	d501      	bpl.n	800e2e8 <_printf_float+0x1ac>
 800e2e4:	3302      	adds	r3, #2
 800e2e6:	e7f4      	b.n	800e2d2 <_printf_float+0x196>
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	e7f2      	b.n	800e2d2 <_printf_float+0x196>
 800e2ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e2f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2f2:	4299      	cmp	r1, r3
 800e2f4:	db05      	blt.n	800e302 <_printf_float+0x1c6>
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	6121      	str	r1, [r4, #16]
 800e2fa:	07d8      	lsls	r0, r3, #31
 800e2fc:	d5ea      	bpl.n	800e2d4 <_printf_float+0x198>
 800e2fe:	1c4b      	adds	r3, r1, #1
 800e300:	e7e7      	b.n	800e2d2 <_printf_float+0x196>
 800e302:	2900      	cmp	r1, #0
 800e304:	bfd4      	ite	le
 800e306:	f1c1 0202 	rsble	r2, r1, #2
 800e30a:	2201      	movgt	r2, #1
 800e30c:	4413      	add	r3, r2
 800e30e:	e7e0      	b.n	800e2d2 <_printf_float+0x196>
 800e310:	6823      	ldr	r3, [r4, #0]
 800e312:	055a      	lsls	r2, r3, #21
 800e314:	d407      	bmi.n	800e326 <_printf_float+0x1ea>
 800e316:	6923      	ldr	r3, [r4, #16]
 800e318:	4642      	mov	r2, r8
 800e31a:	4631      	mov	r1, r6
 800e31c:	4628      	mov	r0, r5
 800e31e:	47b8      	blx	r7
 800e320:	3001      	adds	r0, #1
 800e322:	d12b      	bne.n	800e37c <_printf_float+0x240>
 800e324:	e765      	b.n	800e1f2 <_printf_float+0xb6>
 800e326:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e32a:	f240 80dd 	bls.w	800e4e8 <_printf_float+0x3ac>
 800e32e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e332:	2200      	movs	r2, #0
 800e334:	2300      	movs	r3, #0
 800e336:	f7f2 fb9f 	bl	8000a78 <__aeabi_dcmpeq>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d033      	beq.n	800e3a6 <_printf_float+0x26a>
 800e33e:	4a37      	ldr	r2, [pc, #220]	@ (800e41c <_printf_float+0x2e0>)
 800e340:	2301      	movs	r3, #1
 800e342:	4631      	mov	r1, r6
 800e344:	4628      	mov	r0, r5
 800e346:	47b8      	blx	r7
 800e348:	3001      	adds	r0, #1
 800e34a:	f43f af52 	beq.w	800e1f2 <_printf_float+0xb6>
 800e34e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800e352:	4543      	cmp	r3, r8
 800e354:	db02      	blt.n	800e35c <_printf_float+0x220>
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	07d8      	lsls	r0, r3, #31
 800e35a:	d50f      	bpl.n	800e37c <_printf_float+0x240>
 800e35c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e360:	4631      	mov	r1, r6
 800e362:	4628      	mov	r0, r5
 800e364:	47b8      	blx	r7
 800e366:	3001      	adds	r0, #1
 800e368:	f43f af43 	beq.w	800e1f2 <_printf_float+0xb6>
 800e36c:	f04f 0900 	mov.w	r9, #0
 800e370:	f108 38ff 	add.w	r8, r8, #4294967295
 800e374:	f104 0a1a 	add.w	sl, r4, #26
 800e378:	45c8      	cmp	r8, r9
 800e37a:	dc09      	bgt.n	800e390 <_printf_float+0x254>
 800e37c:	6823      	ldr	r3, [r4, #0]
 800e37e:	079b      	lsls	r3, r3, #30
 800e380:	f100 8103 	bmi.w	800e58a <_printf_float+0x44e>
 800e384:	68e0      	ldr	r0, [r4, #12]
 800e386:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e388:	4298      	cmp	r0, r3
 800e38a:	bfb8      	it	lt
 800e38c:	4618      	movlt	r0, r3
 800e38e:	e732      	b.n	800e1f6 <_printf_float+0xba>
 800e390:	2301      	movs	r3, #1
 800e392:	4652      	mov	r2, sl
 800e394:	4631      	mov	r1, r6
 800e396:	4628      	mov	r0, r5
 800e398:	47b8      	blx	r7
 800e39a:	3001      	adds	r0, #1
 800e39c:	f43f af29 	beq.w	800e1f2 <_printf_float+0xb6>
 800e3a0:	f109 0901 	add.w	r9, r9, #1
 800e3a4:	e7e8      	b.n	800e378 <_printf_float+0x23c>
 800e3a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	dc39      	bgt.n	800e420 <_printf_float+0x2e4>
 800e3ac:	4a1b      	ldr	r2, [pc, #108]	@ (800e41c <_printf_float+0x2e0>)
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	4631      	mov	r1, r6
 800e3b2:	4628      	mov	r0, r5
 800e3b4:	47b8      	blx	r7
 800e3b6:	3001      	adds	r0, #1
 800e3b8:	f43f af1b 	beq.w	800e1f2 <_printf_float+0xb6>
 800e3bc:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800e3c0:	ea59 0303 	orrs.w	r3, r9, r3
 800e3c4:	d102      	bne.n	800e3cc <_printf_float+0x290>
 800e3c6:	6823      	ldr	r3, [r4, #0]
 800e3c8:	07d9      	lsls	r1, r3, #31
 800e3ca:	d5d7      	bpl.n	800e37c <_printf_float+0x240>
 800e3cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e3d0:	4631      	mov	r1, r6
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	47b8      	blx	r7
 800e3d6:	3001      	adds	r0, #1
 800e3d8:	f43f af0b 	beq.w	800e1f2 <_printf_float+0xb6>
 800e3dc:	f04f 0a00 	mov.w	sl, #0
 800e3e0:	f104 0b1a 	add.w	fp, r4, #26
 800e3e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3e6:	425b      	negs	r3, r3
 800e3e8:	4553      	cmp	r3, sl
 800e3ea:	dc01      	bgt.n	800e3f0 <_printf_float+0x2b4>
 800e3ec:	464b      	mov	r3, r9
 800e3ee:	e793      	b.n	800e318 <_printf_float+0x1dc>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	465a      	mov	r2, fp
 800e3f4:	4631      	mov	r1, r6
 800e3f6:	4628      	mov	r0, r5
 800e3f8:	47b8      	blx	r7
 800e3fa:	3001      	adds	r0, #1
 800e3fc:	f43f aef9 	beq.w	800e1f2 <_printf_float+0xb6>
 800e400:	f10a 0a01 	add.w	sl, sl, #1
 800e404:	e7ee      	b.n	800e3e4 <_printf_float+0x2a8>
 800e406:	bf00      	nop
 800e408:	7fefffff 	.word	0x7fefffff
 800e40c:	08012235 	.word	0x08012235
 800e410:	08012239 	.word	0x08012239
 800e414:	0801223d 	.word	0x0801223d
 800e418:	08012241 	.word	0x08012241
 800e41c:	08012245 	.word	0x08012245
 800e420:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e422:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800e426:	4553      	cmp	r3, sl
 800e428:	bfa8      	it	ge
 800e42a:	4653      	movge	r3, sl
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	4699      	mov	r9, r3
 800e430:	dc36      	bgt.n	800e4a0 <_printf_float+0x364>
 800e432:	f04f 0b00 	mov.w	fp, #0
 800e436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e43a:	f104 021a 	add.w	r2, r4, #26
 800e43e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e440:	930a      	str	r3, [sp, #40]	@ 0x28
 800e442:	eba3 0309 	sub.w	r3, r3, r9
 800e446:	455b      	cmp	r3, fp
 800e448:	dc31      	bgt.n	800e4ae <_printf_float+0x372>
 800e44a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e44c:	459a      	cmp	sl, r3
 800e44e:	dc3a      	bgt.n	800e4c6 <_printf_float+0x38a>
 800e450:	6823      	ldr	r3, [r4, #0]
 800e452:	07da      	lsls	r2, r3, #31
 800e454:	d437      	bmi.n	800e4c6 <_printf_float+0x38a>
 800e456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e458:	ebaa 0903 	sub.w	r9, sl, r3
 800e45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e45e:	ebaa 0303 	sub.w	r3, sl, r3
 800e462:	4599      	cmp	r9, r3
 800e464:	bfa8      	it	ge
 800e466:	4699      	movge	r9, r3
 800e468:	f1b9 0f00 	cmp.w	r9, #0
 800e46c:	dc33      	bgt.n	800e4d6 <_printf_float+0x39a>
 800e46e:	f04f 0800 	mov.w	r8, #0
 800e472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e476:	f104 0b1a 	add.w	fp, r4, #26
 800e47a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e47c:	ebaa 0303 	sub.w	r3, sl, r3
 800e480:	eba3 0309 	sub.w	r3, r3, r9
 800e484:	4543      	cmp	r3, r8
 800e486:	f77f af79 	ble.w	800e37c <_printf_float+0x240>
 800e48a:	2301      	movs	r3, #1
 800e48c:	465a      	mov	r2, fp
 800e48e:	4631      	mov	r1, r6
 800e490:	4628      	mov	r0, r5
 800e492:	47b8      	blx	r7
 800e494:	3001      	adds	r0, #1
 800e496:	f43f aeac 	beq.w	800e1f2 <_printf_float+0xb6>
 800e49a:	f108 0801 	add.w	r8, r8, #1
 800e49e:	e7ec      	b.n	800e47a <_printf_float+0x33e>
 800e4a0:	4642      	mov	r2, r8
 800e4a2:	4631      	mov	r1, r6
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47b8      	blx	r7
 800e4a8:	3001      	adds	r0, #1
 800e4aa:	d1c2      	bne.n	800e432 <_printf_float+0x2f6>
 800e4ac:	e6a1      	b.n	800e1f2 <_printf_float+0xb6>
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	4631      	mov	r1, r6
 800e4b2:	4628      	mov	r0, r5
 800e4b4:	920a      	str	r2, [sp, #40]	@ 0x28
 800e4b6:	47b8      	blx	r7
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	f43f ae9a 	beq.w	800e1f2 <_printf_float+0xb6>
 800e4be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4c0:	f10b 0b01 	add.w	fp, fp, #1
 800e4c4:	e7bb      	b.n	800e43e <_printf_float+0x302>
 800e4c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e4ca:	4631      	mov	r1, r6
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	47b8      	blx	r7
 800e4d0:	3001      	adds	r0, #1
 800e4d2:	d1c0      	bne.n	800e456 <_printf_float+0x31a>
 800e4d4:	e68d      	b.n	800e1f2 <_printf_float+0xb6>
 800e4d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4d8:	464b      	mov	r3, r9
 800e4da:	4442      	add	r2, r8
 800e4dc:	4631      	mov	r1, r6
 800e4de:	4628      	mov	r0, r5
 800e4e0:	47b8      	blx	r7
 800e4e2:	3001      	adds	r0, #1
 800e4e4:	d1c3      	bne.n	800e46e <_printf_float+0x332>
 800e4e6:	e684      	b.n	800e1f2 <_printf_float+0xb6>
 800e4e8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800e4ec:	f1ba 0f01 	cmp.w	sl, #1
 800e4f0:	dc01      	bgt.n	800e4f6 <_printf_float+0x3ba>
 800e4f2:	07db      	lsls	r3, r3, #31
 800e4f4:	d536      	bpl.n	800e564 <_printf_float+0x428>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	4642      	mov	r2, r8
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	4628      	mov	r0, r5
 800e4fe:	47b8      	blx	r7
 800e500:	3001      	adds	r0, #1
 800e502:	f43f ae76 	beq.w	800e1f2 <_printf_float+0xb6>
 800e506:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e50a:	4631      	mov	r1, r6
 800e50c:	4628      	mov	r0, r5
 800e50e:	47b8      	blx	r7
 800e510:	3001      	adds	r0, #1
 800e512:	f43f ae6e 	beq.w	800e1f2 <_printf_float+0xb6>
 800e516:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e51a:	2200      	movs	r2, #0
 800e51c:	2300      	movs	r3, #0
 800e51e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e522:	f7f2 faa9 	bl	8000a78 <__aeabi_dcmpeq>
 800e526:	b9c0      	cbnz	r0, 800e55a <_printf_float+0x41e>
 800e528:	4653      	mov	r3, sl
 800e52a:	f108 0201 	add.w	r2, r8, #1
 800e52e:	4631      	mov	r1, r6
 800e530:	4628      	mov	r0, r5
 800e532:	47b8      	blx	r7
 800e534:	3001      	adds	r0, #1
 800e536:	d10c      	bne.n	800e552 <_printf_float+0x416>
 800e538:	e65b      	b.n	800e1f2 <_printf_float+0xb6>
 800e53a:	2301      	movs	r3, #1
 800e53c:	465a      	mov	r2, fp
 800e53e:	4631      	mov	r1, r6
 800e540:	4628      	mov	r0, r5
 800e542:	47b8      	blx	r7
 800e544:	3001      	adds	r0, #1
 800e546:	f43f ae54 	beq.w	800e1f2 <_printf_float+0xb6>
 800e54a:	f108 0801 	add.w	r8, r8, #1
 800e54e:	45d0      	cmp	r8, sl
 800e550:	dbf3      	blt.n	800e53a <_printf_float+0x3fe>
 800e552:	464b      	mov	r3, r9
 800e554:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e558:	e6df      	b.n	800e31a <_printf_float+0x1de>
 800e55a:	f04f 0800 	mov.w	r8, #0
 800e55e:	f104 0b1a 	add.w	fp, r4, #26
 800e562:	e7f4      	b.n	800e54e <_printf_float+0x412>
 800e564:	2301      	movs	r3, #1
 800e566:	4642      	mov	r2, r8
 800e568:	e7e1      	b.n	800e52e <_printf_float+0x3f2>
 800e56a:	2301      	movs	r3, #1
 800e56c:	464a      	mov	r2, r9
 800e56e:	4631      	mov	r1, r6
 800e570:	4628      	mov	r0, r5
 800e572:	47b8      	blx	r7
 800e574:	3001      	adds	r0, #1
 800e576:	f43f ae3c 	beq.w	800e1f2 <_printf_float+0xb6>
 800e57a:	f108 0801 	add.w	r8, r8, #1
 800e57e:	68e3      	ldr	r3, [r4, #12]
 800e580:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e582:	1a5b      	subs	r3, r3, r1
 800e584:	4543      	cmp	r3, r8
 800e586:	dcf0      	bgt.n	800e56a <_printf_float+0x42e>
 800e588:	e6fc      	b.n	800e384 <_printf_float+0x248>
 800e58a:	f04f 0800 	mov.w	r8, #0
 800e58e:	f104 0919 	add.w	r9, r4, #25
 800e592:	e7f4      	b.n	800e57e <_printf_float+0x442>

0800e594 <_printf_common>:
 800e594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e598:	4616      	mov	r6, r2
 800e59a:	4698      	mov	r8, r3
 800e59c:	688a      	ldr	r2, [r1, #8]
 800e59e:	690b      	ldr	r3, [r1, #16]
 800e5a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	bfb8      	it	lt
 800e5a8:	4613      	movlt	r3, r2
 800e5aa:	6033      	str	r3, [r6, #0]
 800e5ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e5b0:	4607      	mov	r7, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	b10a      	cbz	r2, 800e5ba <_printf_common+0x26>
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	6033      	str	r3, [r6, #0]
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	0699      	lsls	r1, r3, #26
 800e5be:	bf42      	ittt	mi
 800e5c0:	6833      	ldrmi	r3, [r6, #0]
 800e5c2:	3302      	addmi	r3, #2
 800e5c4:	6033      	strmi	r3, [r6, #0]
 800e5c6:	6825      	ldr	r5, [r4, #0]
 800e5c8:	f015 0506 	ands.w	r5, r5, #6
 800e5cc:	d106      	bne.n	800e5dc <_printf_common+0x48>
 800e5ce:	f104 0a19 	add.w	sl, r4, #25
 800e5d2:	68e3      	ldr	r3, [r4, #12]
 800e5d4:	6832      	ldr	r2, [r6, #0]
 800e5d6:	1a9b      	subs	r3, r3, r2
 800e5d8:	42ab      	cmp	r3, r5
 800e5da:	dc26      	bgt.n	800e62a <_printf_common+0x96>
 800e5dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e5e0:	6822      	ldr	r2, [r4, #0]
 800e5e2:	3b00      	subs	r3, #0
 800e5e4:	bf18      	it	ne
 800e5e6:	2301      	movne	r3, #1
 800e5e8:	0692      	lsls	r2, r2, #26
 800e5ea:	d42b      	bmi.n	800e644 <_printf_common+0xb0>
 800e5ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e5f0:	4641      	mov	r1, r8
 800e5f2:	4638      	mov	r0, r7
 800e5f4:	47c8      	blx	r9
 800e5f6:	3001      	adds	r0, #1
 800e5f8:	d01e      	beq.n	800e638 <_printf_common+0xa4>
 800e5fa:	6823      	ldr	r3, [r4, #0]
 800e5fc:	6922      	ldr	r2, [r4, #16]
 800e5fe:	f003 0306 	and.w	r3, r3, #6
 800e602:	2b04      	cmp	r3, #4
 800e604:	bf02      	ittt	eq
 800e606:	68e5      	ldreq	r5, [r4, #12]
 800e608:	6833      	ldreq	r3, [r6, #0]
 800e60a:	1aed      	subeq	r5, r5, r3
 800e60c:	68a3      	ldr	r3, [r4, #8]
 800e60e:	bf0c      	ite	eq
 800e610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e614:	2500      	movne	r5, #0
 800e616:	4293      	cmp	r3, r2
 800e618:	bfc4      	itt	gt
 800e61a:	1a9b      	subgt	r3, r3, r2
 800e61c:	18ed      	addgt	r5, r5, r3
 800e61e:	2600      	movs	r6, #0
 800e620:	341a      	adds	r4, #26
 800e622:	42b5      	cmp	r5, r6
 800e624:	d11a      	bne.n	800e65c <_printf_common+0xc8>
 800e626:	2000      	movs	r0, #0
 800e628:	e008      	b.n	800e63c <_printf_common+0xa8>
 800e62a:	2301      	movs	r3, #1
 800e62c:	4652      	mov	r2, sl
 800e62e:	4641      	mov	r1, r8
 800e630:	4638      	mov	r0, r7
 800e632:	47c8      	blx	r9
 800e634:	3001      	adds	r0, #1
 800e636:	d103      	bne.n	800e640 <_printf_common+0xac>
 800e638:	f04f 30ff 	mov.w	r0, #4294967295
 800e63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e640:	3501      	adds	r5, #1
 800e642:	e7c6      	b.n	800e5d2 <_printf_common+0x3e>
 800e644:	18e1      	adds	r1, r4, r3
 800e646:	1c5a      	adds	r2, r3, #1
 800e648:	2030      	movs	r0, #48	@ 0x30
 800e64a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e64e:	4422      	add	r2, r4
 800e650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e658:	3302      	adds	r3, #2
 800e65a:	e7c7      	b.n	800e5ec <_printf_common+0x58>
 800e65c:	2301      	movs	r3, #1
 800e65e:	4622      	mov	r2, r4
 800e660:	4641      	mov	r1, r8
 800e662:	4638      	mov	r0, r7
 800e664:	47c8      	blx	r9
 800e666:	3001      	adds	r0, #1
 800e668:	d0e6      	beq.n	800e638 <_printf_common+0xa4>
 800e66a:	3601      	adds	r6, #1
 800e66c:	e7d9      	b.n	800e622 <_printf_common+0x8e>
	...

0800e670 <_printf_i>:
 800e670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e674:	7e0f      	ldrb	r7, [r1, #24]
 800e676:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e678:	2f78      	cmp	r7, #120	@ 0x78
 800e67a:	4691      	mov	r9, r2
 800e67c:	4680      	mov	r8, r0
 800e67e:	460c      	mov	r4, r1
 800e680:	469a      	mov	sl, r3
 800e682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e686:	d807      	bhi.n	800e698 <_printf_i+0x28>
 800e688:	2f62      	cmp	r7, #98	@ 0x62
 800e68a:	d80a      	bhi.n	800e6a2 <_printf_i+0x32>
 800e68c:	2f00      	cmp	r7, #0
 800e68e:	f000 80d2 	beq.w	800e836 <_printf_i+0x1c6>
 800e692:	2f58      	cmp	r7, #88	@ 0x58
 800e694:	f000 80b9 	beq.w	800e80a <_printf_i+0x19a>
 800e698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e69c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e6a0:	e03a      	b.n	800e718 <_printf_i+0xa8>
 800e6a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e6a6:	2b15      	cmp	r3, #21
 800e6a8:	d8f6      	bhi.n	800e698 <_printf_i+0x28>
 800e6aa:	a101      	add	r1, pc, #4	@ (adr r1, 800e6b0 <_printf_i+0x40>)
 800e6ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6b0:	0800e709 	.word	0x0800e709
 800e6b4:	0800e71d 	.word	0x0800e71d
 800e6b8:	0800e699 	.word	0x0800e699
 800e6bc:	0800e699 	.word	0x0800e699
 800e6c0:	0800e699 	.word	0x0800e699
 800e6c4:	0800e699 	.word	0x0800e699
 800e6c8:	0800e71d 	.word	0x0800e71d
 800e6cc:	0800e699 	.word	0x0800e699
 800e6d0:	0800e699 	.word	0x0800e699
 800e6d4:	0800e699 	.word	0x0800e699
 800e6d8:	0800e699 	.word	0x0800e699
 800e6dc:	0800e81d 	.word	0x0800e81d
 800e6e0:	0800e747 	.word	0x0800e747
 800e6e4:	0800e7d7 	.word	0x0800e7d7
 800e6e8:	0800e699 	.word	0x0800e699
 800e6ec:	0800e699 	.word	0x0800e699
 800e6f0:	0800e83f 	.word	0x0800e83f
 800e6f4:	0800e699 	.word	0x0800e699
 800e6f8:	0800e747 	.word	0x0800e747
 800e6fc:	0800e699 	.word	0x0800e699
 800e700:	0800e699 	.word	0x0800e699
 800e704:	0800e7df 	.word	0x0800e7df
 800e708:	6833      	ldr	r3, [r6, #0]
 800e70a:	1d1a      	adds	r2, r3, #4
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	6032      	str	r2, [r6, #0]
 800e710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e718:	2301      	movs	r3, #1
 800e71a:	e09d      	b.n	800e858 <_printf_i+0x1e8>
 800e71c:	6833      	ldr	r3, [r6, #0]
 800e71e:	6820      	ldr	r0, [r4, #0]
 800e720:	1d19      	adds	r1, r3, #4
 800e722:	6031      	str	r1, [r6, #0]
 800e724:	0606      	lsls	r6, r0, #24
 800e726:	d501      	bpl.n	800e72c <_printf_i+0xbc>
 800e728:	681d      	ldr	r5, [r3, #0]
 800e72a:	e003      	b.n	800e734 <_printf_i+0xc4>
 800e72c:	0645      	lsls	r5, r0, #25
 800e72e:	d5fb      	bpl.n	800e728 <_printf_i+0xb8>
 800e730:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e734:	2d00      	cmp	r5, #0
 800e736:	da03      	bge.n	800e740 <_printf_i+0xd0>
 800e738:	232d      	movs	r3, #45	@ 0x2d
 800e73a:	426d      	negs	r5, r5
 800e73c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e740:	4859      	ldr	r0, [pc, #356]	@ (800e8a8 <_printf_i+0x238>)
 800e742:	230a      	movs	r3, #10
 800e744:	e011      	b.n	800e76a <_printf_i+0xfa>
 800e746:	6821      	ldr	r1, [r4, #0]
 800e748:	6833      	ldr	r3, [r6, #0]
 800e74a:	0608      	lsls	r0, r1, #24
 800e74c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e750:	d402      	bmi.n	800e758 <_printf_i+0xe8>
 800e752:	0649      	lsls	r1, r1, #25
 800e754:	bf48      	it	mi
 800e756:	b2ad      	uxthmi	r5, r5
 800e758:	2f6f      	cmp	r7, #111	@ 0x6f
 800e75a:	4853      	ldr	r0, [pc, #332]	@ (800e8a8 <_printf_i+0x238>)
 800e75c:	6033      	str	r3, [r6, #0]
 800e75e:	bf14      	ite	ne
 800e760:	230a      	movne	r3, #10
 800e762:	2308      	moveq	r3, #8
 800e764:	2100      	movs	r1, #0
 800e766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e76a:	6866      	ldr	r6, [r4, #4]
 800e76c:	60a6      	str	r6, [r4, #8]
 800e76e:	2e00      	cmp	r6, #0
 800e770:	bfa2      	ittt	ge
 800e772:	6821      	ldrge	r1, [r4, #0]
 800e774:	f021 0104 	bicge.w	r1, r1, #4
 800e778:	6021      	strge	r1, [r4, #0]
 800e77a:	b90d      	cbnz	r5, 800e780 <_printf_i+0x110>
 800e77c:	2e00      	cmp	r6, #0
 800e77e:	d04b      	beq.n	800e818 <_printf_i+0x1a8>
 800e780:	4616      	mov	r6, r2
 800e782:	fbb5 f1f3 	udiv	r1, r5, r3
 800e786:	fb03 5711 	mls	r7, r3, r1, r5
 800e78a:	5dc7      	ldrb	r7, [r0, r7]
 800e78c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e790:	462f      	mov	r7, r5
 800e792:	42bb      	cmp	r3, r7
 800e794:	460d      	mov	r5, r1
 800e796:	d9f4      	bls.n	800e782 <_printf_i+0x112>
 800e798:	2b08      	cmp	r3, #8
 800e79a:	d10b      	bne.n	800e7b4 <_printf_i+0x144>
 800e79c:	6823      	ldr	r3, [r4, #0]
 800e79e:	07df      	lsls	r7, r3, #31
 800e7a0:	d508      	bpl.n	800e7b4 <_printf_i+0x144>
 800e7a2:	6923      	ldr	r3, [r4, #16]
 800e7a4:	6861      	ldr	r1, [r4, #4]
 800e7a6:	4299      	cmp	r1, r3
 800e7a8:	bfde      	ittt	le
 800e7aa:	2330      	movle	r3, #48	@ 0x30
 800e7ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e7b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e7b4:	1b92      	subs	r2, r2, r6
 800e7b6:	6122      	str	r2, [r4, #16]
 800e7b8:	f8cd a000 	str.w	sl, [sp]
 800e7bc:	464b      	mov	r3, r9
 800e7be:	aa03      	add	r2, sp, #12
 800e7c0:	4621      	mov	r1, r4
 800e7c2:	4640      	mov	r0, r8
 800e7c4:	f7ff fee6 	bl	800e594 <_printf_common>
 800e7c8:	3001      	adds	r0, #1
 800e7ca:	d14a      	bne.n	800e862 <_printf_i+0x1f2>
 800e7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d0:	b004      	add	sp, #16
 800e7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7d6:	6823      	ldr	r3, [r4, #0]
 800e7d8:	f043 0320 	orr.w	r3, r3, #32
 800e7dc:	6023      	str	r3, [r4, #0]
 800e7de:	4833      	ldr	r0, [pc, #204]	@ (800e8ac <_printf_i+0x23c>)
 800e7e0:	2778      	movs	r7, #120	@ 0x78
 800e7e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	6831      	ldr	r1, [r6, #0]
 800e7ea:	061f      	lsls	r7, r3, #24
 800e7ec:	f851 5b04 	ldr.w	r5, [r1], #4
 800e7f0:	d402      	bmi.n	800e7f8 <_printf_i+0x188>
 800e7f2:	065f      	lsls	r7, r3, #25
 800e7f4:	bf48      	it	mi
 800e7f6:	b2ad      	uxthmi	r5, r5
 800e7f8:	6031      	str	r1, [r6, #0]
 800e7fa:	07d9      	lsls	r1, r3, #31
 800e7fc:	bf44      	itt	mi
 800e7fe:	f043 0320 	orrmi.w	r3, r3, #32
 800e802:	6023      	strmi	r3, [r4, #0]
 800e804:	b11d      	cbz	r5, 800e80e <_printf_i+0x19e>
 800e806:	2310      	movs	r3, #16
 800e808:	e7ac      	b.n	800e764 <_printf_i+0xf4>
 800e80a:	4827      	ldr	r0, [pc, #156]	@ (800e8a8 <_printf_i+0x238>)
 800e80c:	e7e9      	b.n	800e7e2 <_printf_i+0x172>
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	f023 0320 	bic.w	r3, r3, #32
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	e7f6      	b.n	800e806 <_printf_i+0x196>
 800e818:	4616      	mov	r6, r2
 800e81a:	e7bd      	b.n	800e798 <_printf_i+0x128>
 800e81c:	6833      	ldr	r3, [r6, #0]
 800e81e:	6825      	ldr	r5, [r4, #0]
 800e820:	6961      	ldr	r1, [r4, #20]
 800e822:	1d18      	adds	r0, r3, #4
 800e824:	6030      	str	r0, [r6, #0]
 800e826:	062e      	lsls	r6, r5, #24
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	d501      	bpl.n	800e830 <_printf_i+0x1c0>
 800e82c:	6019      	str	r1, [r3, #0]
 800e82e:	e002      	b.n	800e836 <_printf_i+0x1c6>
 800e830:	0668      	lsls	r0, r5, #25
 800e832:	d5fb      	bpl.n	800e82c <_printf_i+0x1bc>
 800e834:	8019      	strh	r1, [r3, #0]
 800e836:	2300      	movs	r3, #0
 800e838:	6123      	str	r3, [r4, #16]
 800e83a:	4616      	mov	r6, r2
 800e83c:	e7bc      	b.n	800e7b8 <_printf_i+0x148>
 800e83e:	6833      	ldr	r3, [r6, #0]
 800e840:	1d1a      	adds	r2, r3, #4
 800e842:	6032      	str	r2, [r6, #0]
 800e844:	681e      	ldr	r6, [r3, #0]
 800e846:	6862      	ldr	r2, [r4, #4]
 800e848:	2100      	movs	r1, #0
 800e84a:	4630      	mov	r0, r6
 800e84c:	f7f1 fc98 	bl	8000180 <memchr>
 800e850:	b108      	cbz	r0, 800e856 <_printf_i+0x1e6>
 800e852:	1b80      	subs	r0, r0, r6
 800e854:	6060      	str	r0, [r4, #4]
 800e856:	6863      	ldr	r3, [r4, #4]
 800e858:	6123      	str	r3, [r4, #16]
 800e85a:	2300      	movs	r3, #0
 800e85c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e860:	e7aa      	b.n	800e7b8 <_printf_i+0x148>
 800e862:	6923      	ldr	r3, [r4, #16]
 800e864:	4632      	mov	r2, r6
 800e866:	4649      	mov	r1, r9
 800e868:	4640      	mov	r0, r8
 800e86a:	47d0      	blx	sl
 800e86c:	3001      	adds	r0, #1
 800e86e:	d0ad      	beq.n	800e7cc <_printf_i+0x15c>
 800e870:	6823      	ldr	r3, [r4, #0]
 800e872:	079b      	lsls	r3, r3, #30
 800e874:	d413      	bmi.n	800e89e <_printf_i+0x22e>
 800e876:	68e0      	ldr	r0, [r4, #12]
 800e878:	9b03      	ldr	r3, [sp, #12]
 800e87a:	4298      	cmp	r0, r3
 800e87c:	bfb8      	it	lt
 800e87e:	4618      	movlt	r0, r3
 800e880:	e7a6      	b.n	800e7d0 <_printf_i+0x160>
 800e882:	2301      	movs	r3, #1
 800e884:	4632      	mov	r2, r6
 800e886:	4649      	mov	r1, r9
 800e888:	4640      	mov	r0, r8
 800e88a:	47d0      	blx	sl
 800e88c:	3001      	adds	r0, #1
 800e88e:	d09d      	beq.n	800e7cc <_printf_i+0x15c>
 800e890:	3501      	adds	r5, #1
 800e892:	68e3      	ldr	r3, [r4, #12]
 800e894:	9903      	ldr	r1, [sp, #12]
 800e896:	1a5b      	subs	r3, r3, r1
 800e898:	42ab      	cmp	r3, r5
 800e89a:	dcf2      	bgt.n	800e882 <_printf_i+0x212>
 800e89c:	e7eb      	b.n	800e876 <_printf_i+0x206>
 800e89e:	2500      	movs	r5, #0
 800e8a0:	f104 0619 	add.w	r6, r4, #25
 800e8a4:	e7f5      	b.n	800e892 <_printf_i+0x222>
 800e8a6:	bf00      	nop
 800e8a8:	08012247 	.word	0x08012247
 800e8ac:	08012258 	.word	0x08012258

0800e8b0 <std>:
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	b510      	push	{r4, lr}
 800e8b4:	4604      	mov	r4, r0
 800e8b6:	e9c0 3300 	strd	r3, r3, [r0]
 800e8ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e8be:	6083      	str	r3, [r0, #8]
 800e8c0:	8181      	strh	r1, [r0, #12]
 800e8c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e8c4:	81c2      	strh	r2, [r0, #14]
 800e8c6:	6183      	str	r3, [r0, #24]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	2208      	movs	r2, #8
 800e8cc:	305c      	adds	r0, #92	@ 0x5c
 800e8ce:	f000 f926 	bl	800eb1e <memset>
 800e8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e908 <std+0x58>)
 800e8d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800e90c <std+0x5c>)
 800e8d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e8da:	4b0d      	ldr	r3, [pc, #52]	@ (800e910 <std+0x60>)
 800e8dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e8de:	4b0d      	ldr	r3, [pc, #52]	@ (800e914 <std+0x64>)
 800e8e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e918 <std+0x68>)
 800e8e4:	6224      	str	r4, [r4, #32]
 800e8e6:	429c      	cmp	r4, r3
 800e8e8:	d006      	beq.n	800e8f8 <std+0x48>
 800e8ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e8ee:	4294      	cmp	r4, r2
 800e8f0:	d002      	beq.n	800e8f8 <std+0x48>
 800e8f2:	33d0      	adds	r3, #208	@ 0xd0
 800e8f4:	429c      	cmp	r4, r3
 800e8f6:	d105      	bne.n	800e904 <std+0x54>
 800e8f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e900:	f000 b99a 	b.w	800ec38 <__retarget_lock_init_recursive>
 800e904:	bd10      	pop	{r4, pc}
 800e906:	bf00      	nop
 800e908:	0800ea99 	.word	0x0800ea99
 800e90c:	0800eabb 	.word	0x0800eabb
 800e910:	0800eaf3 	.word	0x0800eaf3
 800e914:	0800eb17 	.word	0x0800eb17
 800e918:	20000f7c 	.word	0x20000f7c

0800e91c <stdio_exit_handler>:
 800e91c:	4a02      	ldr	r2, [pc, #8]	@ (800e928 <stdio_exit_handler+0xc>)
 800e91e:	4903      	ldr	r1, [pc, #12]	@ (800e92c <stdio_exit_handler+0x10>)
 800e920:	4803      	ldr	r0, [pc, #12]	@ (800e930 <stdio_exit_handler+0x14>)
 800e922:	f000 b869 	b.w	800e9f8 <_fwalk_sglue>
 800e926:	bf00      	nop
 800e928:	2000008c 	.word	0x2000008c
 800e92c:	080106c5 	.word	0x080106c5
 800e930:	2000009c 	.word	0x2000009c

0800e934 <cleanup_stdio>:
 800e934:	6841      	ldr	r1, [r0, #4]
 800e936:	4b0c      	ldr	r3, [pc, #48]	@ (800e968 <cleanup_stdio+0x34>)
 800e938:	4299      	cmp	r1, r3
 800e93a:	b510      	push	{r4, lr}
 800e93c:	4604      	mov	r4, r0
 800e93e:	d001      	beq.n	800e944 <cleanup_stdio+0x10>
 800e940:	f001 fec0 	bl	80106c4 <_fflush_r>
 800e944:	68a1      	ldr	r1, [r4, #8]
 800e946:	4b09      	ldr	r3, [pc, #36]	@ (800e96c <cleanup_stdio+0x38>)
 800e948:	4299      	cmp	r1, r3
 800e94a:	d002      	beq.n	800e952 <cleanup_stdio+0x1e>
 800e94c:	4620      	mov	r0, r4
 800e94e:	f001 feb9 	bl	80106c4 <_fflush_r>
 800e952:	68e1      	ldr	r1, [r4, #12]
 800e954:	4b06      	ldr	r3, [pc, #24]	@ (800e970 <cleanup_stdio+0x3c>)
 800e956:	4299      	cmp	r1, r3
 800e958:	d004      	beq.n	800e964 <cleanup_stdio+0x30>
 800e95a:	4620      	mov	r0, r4
 800e95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e960:	f001 beb0 	b.w	80106c4 <_fflush_r>
 800e964:	bd10      	pop	{r4, pc}
 800e966:	bf00      	nop
 800e968:	20000f7c 	.word	0x20000f7c
 800e96c:	20000fe4 	.word	0x20000fe4
 800e970:	2000104c 	.word	0x2000104c

0800e974 <global_stdio_init.part.0>:
 800e974:	b510      	push	{r4, lr}
 800e976:	4b0b      	ldr	r3, [pc, #44]	@ (800e9a4 <global_stdio_init.part.0+0x30>)
 800e978:	4c0b      	ldr	r4, [pc, #44]	@ (800e9a8 <global_stdio_init.part.0+0x34>)
 800e97a:	4a0c      	ldr	r2, [pc, #48]	@ (800e9ac <global_stdio_init.part.0+0x38>)
 800e97c:	601a      	str	r2, [r3, #0]
 800e97e:	4620      	mov	r0, r4
 800e980:	2200      	movs	r2, #0
 800e982:	2104      	movs	r1, #4
 800e984:	f7ff ff94 	bl	800e8b0 <std>
 800e988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e98c:	2201      	movs	r2, #1
 800e98e:	2109      	movs	r1, #9
 800e990:	f7ff ff8e 	bl	800e8b0 <std>
 800e994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e998:	2202      	movs	r2, #2
 800e99a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e99e:	2112      	movs	r1, #18
 800e9a0:	f7ff bf86 	b.w	800e8b0 <std>
 800e9a4:	200010b4 	.word	0x200010b4
 800e9a8:	20000f7c 	.word	0x20000f7c
 800e9ac:	0800e91d 	.word	0x0800e91d

0800e9b0 <__sfp_lock_acquire>:
 800e9b0:	4801      	ldr	r0, [pc, #4]	@ (800e9b8 <__sfp_lock_acquire+0x8>)
 800e9b2:	f000 b942 	b.w	800ec3a <__retarget_lock_acquire_recursive>
 800e9b6:	bf00      	nop
 800e9b8:	200010bd 	.word	0x200010bd

0800e9bc <__sfp_lock_release>:
 800e9bc:	4801      	ldr	r0, [pc, #4]	@ (800e9c4 <__sfp_lock_release+0x8>)
 800e9be:	f000 b93d 	b.w	800ec3c <__retarget_lock_release_recursive>
 800e9c2:	bf00      	nop
 800e9c4:	200010bd 	.word	0x200010bd

0800e9c8 <__sinit>:
 800e9c8:	b510      	push	{r4, lr}
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	f7ff fff0 	bl	800e9b0 <__sfp_lock_acquire>
 800e9d0:	6a23      	ldr	r3, [r4, #32]
 800e9d2:	b11b      	cbz	r3, 800e9dc <__sinit+0x14>
 800e9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d8:	f7ff bff0 	b.w	800e9bc <__sfp_lock_release>
 800e9dc:	4b04      	ldr	r3, [pc, #16]	@ (800e9f0 <__sinit+0x28>)
 800e9de:	6223      	str	r3, [r4, #32]
 800e9e0:	4b04      	ldr	r3, [pc, #16]	@ (800e9f4 <__sinit+0x2c>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d1f5      	bne.n	800e9d4 <__sinit+0xc>
 800e9e8:	f7ff ffc4 	bl	800e974 <global_stdio_init.part.0>
 800e9ec:	e7f2      	b.n	800e9d4 <__sinit+0xc>
 800e9ee:	bf00      	nop
 800e9f0:	0800e935 	.word	0x0800e935
 800e9f4:	200010b4 	.word	0x200010b4

0800e9f8 <_fwalk_sglue>:
 800e9f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9fc:	4607      	mov	r7, r0
 800e9fe:	4688      	mov	r8, r1
 800ea00:	4614      	mov	r4, r2
 800ea02:	2600      	movs	r6, #0
 800ea04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea08:	f1b9 0901 	subs.w	r9, r9, #1
 800ea0c:	d505      	bpl.n	800ea1a <_fwalk_sglue+0x22>
 800ea0e:	6824      	ldr	r4, [r4, #0]
 800ea10:	2c00      	cmp	r4, #0
 800ea12:	d1f7      	bne.n	800ea04 <_fwalk_sglue+0xc>
 800ea14:	4630      	mov	r0, r6
 800ea16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea1a:	89ab      	ldrh	r3, [r5, #12]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d907      	bls.n	800ea30 <_fwalk_sglue+0x38>
 800ea20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea24:	3301      	adds	r3, #1
 800ea26:	d003      	beq.n	800ea30 <_fwalk_sglue+0x38>
 800ea28:	4629      	mov	r1, r5
 800ea2a:	4638      	mov	r0, r7
 800ea2c:	47c0      	blx	r8
 800ea2e:	4306      	orrs	r6, r0
 800ea30:	3568      	adds	r5, #104	@ 0x68
 800ea32:	e7e9      	b.n	800ea08 <_fwalk_sglue+0x10>

0800ea34 <iprintf>:
 800ea34:	b40f      	push	{r0, r1, r2, r3}
 800ea36:	b507      	push	{r0, r1, r2, lr}
 800ea38:	4906      	ldr	r1, [pc, #24]	@ (800ea54 <iprintf+0x20>)
 800ea3a:	ab04      	add	r3, sp, #16
 800ea3c:	6808      	ldr	r0, [r1, #0]
 800ea3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea42:	6881      	ldr	r1, [r0, #8]
 800ea44:	9301      	str	r3, [sp, #4]
 800ea46:	f001 fca5 	bl	8010394 <_vfiprintf_r>
 800ea4a:	b003      	add	sp, #12
 800ea4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea50:	b004      	add	sp, #16
 800ea52:	4770      	bx	lr
 800ea54:	20000098 	.word	0x20000098

0800ea58 <siprintf>:
 800ea58:	b40e      	push	{r1, r2, r3}
 800ea5a:	b500      	push	{lr}
 800ea5c:	b09c      	sub	sp, #112	@ 0x70
 800ea5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ea60:	9002      	str	r0, [sp, #8]
 800ea62:	9006      	str	r0, [sp, #24]
 800ea64:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ea68:	4809      	ldr	r0, [pc, #36]	@ (800ea90 <siprintf+0x38>)
 800ea6a:	9107      	str	r1, [sp, #28]
 800ea6c:	9104      	str	r1, [sp, #16]
 800ea6e:	4909      	ldr	r1, [pc, #36]	@ (800ea94 <siprintf+0x3c>)
 800ea70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea74:	9105      	str	r1, [sp, #20]
 800ea76:	6800      	ldr	r0, [r0, #0]
 800ea78:	9301      	str	r3, [sp, #4]
 800ea7a:	a902      	add	r1, sp, #8
 800ea7c:	f001 fb66 	bl	801014c <_svfiprintf_r>
 800ea80:	9b02      	ldr	r3, [sp, #8]
 800ea82:	2200      	movs	r2, #0
 800ea84:	701a      	strb	r2, [r3, #0]
 800ea86:	b01c      	add	sp, #112	@ 0x70
 800ea88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea8c:	b003      	add	sp, #12
 800ea8e:	4770      	bx	lr
 800ea90:	20000098 	.word	0x20000098
 800ea94:	ffff0208 	.word	0xffff0208

0800ea98 <__sread>:
 800ea98:	b510      	push	{r4, lr}
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaa0:	f000 f86c 	bl	800eb7c <_read_r>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	bfab      	itete	ge
 800eaa8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eaaa:	89a3      	ldrhlt	r3, [r4, #12]
 800eaac:	181b      	addge	r3, r3, r0
 800eaae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eab2:	bfac      	ite	ge
 800eab4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eab6:	81a3      	strhlt	r3, [r4, #12]
 800eab8:	bd10      	pop	{r4, pc}

0800eaba <__swrite>:
 800eaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eabe:	461f      	mov	r7, r3
 800eac0:	898b      	ldrh	r3, [r1, #12]
 800eac2:	05db      	lsls	r3, r3, #23
 800eac4:	4605      	mov	r5, r0
 800eac6:	460c      	mov	r4, r1
 800eac8:	4616      	mov	r6, r2
 800eaca:	d505      	bpl.n	800ead8 <__swrite+0x1e>
 800eacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ead0:	2302      	movs	r3, #2
 800ead2:	2200      	movs	r2, #0
 800ead4:	f000 f840 	bl	800eb58 <_lseek_r>
 800ead8:	89a3      	ldrh	r3, [r4, #12]
 800eada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eade:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eae2:	81a3      	strh	r3, [r4, #12]
 800eae4:	4632      	mov	r2, r6
 800eae6:	463b      	mov	r3, r7
 800eae8:	4628      	mov	r0, r5
 800eaea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eaee:	f000 b867 	b.w	800ebc0 <_write_r>

0800eaf2 <__sseek>:
 800eaf2:	b510      	push	{r4, lr}
 800eaf4:	460c      	mov	r4, r1
 800eaf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eafa:	f000 f82d 	bl	800eb58 <_lseek_r>
 800eafe:	1c43      	adds	r3, r0, #1
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	bf15      	itete	ne
 800eb04:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb0e:	81a3      	strheq	r3, [r4, #12]
 800eb10:	bf18      	it	ne
 800eb12:	81a3      	strhne	r3, [r4, #12]
 800eb14:	bd10      	pop	{r4, pc}

0800eb16 <__sclose>:
 800eb16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1a:	f000 b80d 	b.w	800eb38 <_close_r>

0800eb1e <memset>:
 800eb1e:	4402      	add	r2, r0
 800eb20:	4603      	mov	r3, r0
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d100      	bne.n	800eb28 <memset+0xa>
 800eb26:	4770      	bx	lr
 800eb28:	f803 1b01 	strb.w	r1, [r3], #1
 800eb2c:	e7f9      	b.n	800eb22 <memset+0x4>
	...

0800eb30 <_localeconv_r>:
 800eb30:	4800      	ldr	r0, [pc, #0]	@ (800eb34 <_localeconv_r+0x4>)
 800eb32:	4770      	bx	lr
 800eb34:	200001d8 	.word	0x200001d8

0800eb38 <_close_r>:
 800eb38:	b538      	push	{r3, r4, r5, lr}
 800eb3a:	4d06      	ldr	r5, [pc, #24]	@ (800eb54 <_close_r+0x1c>)
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	4604      	mov	r4, r0
 800eb40:	4608      	mov	r0, r1
 800eb42:	602b      	str	r3, [r5, #0]
 800eb44:	f7f4 f870 	bl	8002c28 <_close>
 800eb48:	1c43      	adds	r3, r0, #1
 800eb4a:	d102      	bne.n	800eb52 <_close_r+0x1a>
 800eb4c:	682b      	ldr	r3, [r5, #0]
 800eb4e:	b103      	cbz	r3, 800eb52 <_close_r+0x1a>
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	bd38      	pop	{r3, r4, r5, pc}
 800eb54:	200010b8 	.word	0x200010b8

0800eb58 <_lseek_r>:
 800eb58:	b538      	push	{r3, r4, r5, lr}
 800eb5a:	4d07      	ldr	r5, [pc, #28]	@ (800eb78 <_lseek_r+0x20>)
 800eb5c:	4604      	mov	r4, r0
 800eb5e:	4608      	mov	r0, r1
 800eb60:	4611      	mov	r1, r2
 800eb62:	2200      	movs	r2, #0
 800eb64:	602a      	str	r2, [r5, #0]
 800eb66:	461a      	mov	r2, r3
 800eb68:	f7f4 f868 	bl	8002c3c <_lseek>
 800eb6c:	1c43      	adds	r3, r0, #1
 800eb6e:	d102      	bne.n	800eb76 <_lseek_r+0x1e>
 800eb70:	682b      	ldr	r3, [r5, #0]
 800eb72:	b103      	cbz	r3, 800eb76 <_lseek_r+0x1e>
 800eb74:	6023      	str	r3, [r4, #0]
 800eb76:	bd38      	pop	{r3, r4, r5, pc}
 800eb78:	200010b8 	.word	0x200010b8

0800eb7c <_read_r>:
 800eb7c:	b538      	push	{r3, r4, r5, lr}
 800eb7e:	4d07      	ldr	r5, [pc, #28]	@ (800eb9c <_read_r+0x20>)
 800eb80:	4604      	mov	r4, r0
 800eb82:	4608      	mov	r0, r1
 800eb84:	4611      	mov	r1, r2
 800eb86:	2200      	movs	r2, #0
 800eb88:	602a      	str	r2, [r5, #0]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	f7f4 f82e 	bl	8002bec <_read>
 800eb90:	1c43      	adds	r3, r0, #1
 800eb92:	d102      	bne.n	800eb9a <_read_r+0x1e>
 800eb94:	682b      	ldr	r3, [r5, #0]
 800eb96:	b103      	cbz	r3, 800eb9a <_read_r+0x1e>
 800eb98:	6023      	str	r3, [r4, #0]
 800eb9a:	bd38      	pop	{r3, r4, r5, pc}
 800eb9c:	200010b8 	.word	0x200010b8

0800eba0 <_sbrk_r>:
 800eba0:	b538      	push	{r3, r4, r5, lr}
 800eba2:	4d06      	ldr	r5, [pc, #24]	@ (800ebbc <_sbrk_r+0x1c>)
 800eba4:	2300      	movs	r3, #0
 800eba6:	4604      	mov	r4, r0
 800eba8:	4608      	mov	r0, r1
 800ebaa:	602b      	str	r3, [r5, #0]
 800ebac:	f7f4 f848 	bl	8002c40 <_sbrk>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d102      	bne.n	800ebba <_sbrk_r+0x1a>
 800ebb4:	682b      	ldr	r3, [r5, #0]
 800ebb6:	b103      	cbz	r3, 800ebba <_sbrk_r+0x1a>
 800ebb8:	6023      	str	r3, [r4, #0]
 800ebba:	bd38      	pop	{r3, r4, r5, pc}
 800ebbc:	200010b8 	.word	0x200010b8

0800ebc0 <_write_r>:
 800ebc0:	b538      	push	{r3, r4, r5, lr}
 800ebc2:	4d07      	ldr	r5, [pc, #28]	@ (800ebe0 <_write_r+0x20>)
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	4608      	mov	r0, r1
 800ebc8:	4611      	mov	r1, r2
 800ebca:	2200      	movs	r2, #0
 800ebcc:	602a      	str	r2, [r5, #0]
 800ebce:	461a      	mov	r2, r3
 800ebd0:	f7f4 f81c 	bl	8002c0c <_write>
 800ebd4:	1c43      	adds	r3, r0, #1
 800ebd6:	d102      	bne.n	800ebde <_write_r+0x1e>
 800ebd8:	682b      	ldr	r3, [r5, #0]
 800ebda:	b103      	cbz	r3, 800ebde <_write_r+0x1e>
 800ebdc:	6023      	str	r3, [r4, #0]
 800ebde:	bd38      	pop	{r3, r4, r5, pc}
 800ebe0:	200010b8 	.word	0x200010b8

0800ebe4 <__errno>:
 800ebe4:	4b01      	ldr	r3, [pc, #4]	@ (800ebec <__errno+0x8>)
 800ebe6:	6818      	ldr	r0, [r3, #0]
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	20000098 	.word	0x20000098

0800ebf0 <__libc_init_array>:
 800ebf0:	b570      	push	{r4, r5, r6, lr}
 800ebf2:	4d0d      	ldr	r5, [pc, #52]	@ (800ec28 <__libc_init_array+0x38>)
 800ebf4:	4c0d      	ldr	r4, [pc, #52]	@ (800ec2c <__libc_init_array+0x3c>)
 800ebf6:	1b64      	subs	r4, r4, r5
 800ebf8:	10a4      	asrs	r4, r4, #2
 800ebfa:	2600      	movs	r6, #0
 800ebfc:	42a6      	cmp	r6, r4
 800ebfe:	d109      	bne.n	800ec14 <__libc_init_array+0x24>
 800ec00:	4d0b      	ldr	r5, [pc, #44]	@ (800ec30 <__libc_init_array+0x40>)
 800ec02:	4c0c      	ldr	r4, [pc, #48]	@ (800ec34 <__libc_init_array+0x44>)
 800ec04:	f002 fa08 	bl	8011018 <_init>
 800ec08:	1b64      	subs	r4, r4, r5
 800ec0a:	10a4      	asrs	r4, r4, #2
 800ec0c:	2600      	movs	r6, #0
 800ec0e:	42a6      	cmp	r6, r4
 800ec10:	d105      	bne.n	800ec1e <__libc_init_array+0x2e>
 800ec12:	bd70      	pop	{r4, r5, r6, pc}
 800ec14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec18:	4798      	blx	r3
 800ec1a:	3601      	adds	r6, #1
 800ec1c:	e7ee      	b.n	800ebfc <__libc_init_array+0xc>
 800ec1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec22:	4798      	blx	r3
 800ec24:	3601      	adds	r6, #1
 800ec26:	e7f2      	b.n	800ec0e <__libc_init_array+0x1e>
 800ec28:	08012520 	.word	0x08012520
 800ec2c:	08012520 	.word	0x08012520
 800ec30:	08012520 	.word	0x08012520
 800ec34:	08012524 	.word	0x08012524

0800ec38 <__retarget_lock_init_recursive>:
 800ec38:	4770      	bx	lr

0800ec3a <__retarget_lock_acquire_recursive>:
 800ec3a:	4770      	bx	lr

0800ec3c <__retarget_lock_release_recursive>:
 800ec3c:	4770      	bx	lr

0800ec3e <memcpy>:
 800ec3e:	440a      	add	r2, r1
 800ec40:	4291      	cmp	r1, r2
 800ec42:	f100 33ff 	add.w	r3, r0, #4294967295
 800ec46:	d100      	bne.n	800ec4a <memcpy+0xc>
 800ec48:	4770      	bx	lr
 800ec4a:	b510      	push	{r4, lr}
 800ec4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec54:	4291      	cmp	r1, r2
 800ec56:	d1f9      	bne.n	800ec4c <memcpy+0xe>
 800ec58:	bd10      	pop	{r4, pc}

0800ec5a <quorem>:
 800ec5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5e:	6903      	ldr	r3, [r0, #16]
 800ec60:	690c      	ldr	r4, [r1, #16]
 800ec62:	42a3      	cmp	r3, r4
 800ec64:	4607      	mov	r7, r0
 800ec66:	db7e      	blt.n	800ed66 <quorem+0x10c>
 800ec68:	3c01      	subs	r4, #1
 800ec6a:	f101 0814 	add.w	r8, r1, #20
 800ec6e:	00a3      	lsls	r3, r4, #2
 800ec70:	f100 0514 	add.w	r5, r0, #20
 800ec74:	9300      	str	r3, [sp, #0]
 800ec76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ec7a:	9301      	str	r3, [sp, #4]
 800ec7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ec80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ec84:	3301      	adds	r3, #1
 800ec86:	429a      	cmp	r2, r3
 800ec88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ec8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ec90:	d32e      	bcc.n	800ecf0 <quorem+0x96>
 800ec92:	f04f 0a00 	mov.w	sl, #0
 800ec96:	46c4      	mov	ip, r8
 800ec98:	46ae      	mov	lr, r5
 800ec9a:	46d3      	mov	fp, sl
 800ec9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800eca0:	b298      	uxth	r0, r3
 800eca2:	fb06 a000 	mla	r0, r6, r0, sl
 800eca6:	0c02      	lsrs	r2, r0, #16
 800eca8:	0c1b      	lsrs	r3, r3, #16
 800ecaa:	fb06 2303 	mla	r3, r6, r3, r2
 800ecae:	f8de 2000 	ldr.w	r2, [lr]
 800ecb2:	b280      	uxth	r0, r0
 800ecb4:	b292      	uxth	r2, r2
 800ecb6:	1a12      	subs	r2, r2, r0
 800ecb8:	445a      	add	r2, fp
 800ecba:	f8de 0000 	ldr.w	r0, [lr]
 800ecbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecc2:	b29b      	uxth	r3, r3
 800ecc4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ecc8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eccc:	b292      	uxth	r2, r2
 800ecce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ecd2:	45e1      	cmp	r9, ip
 800ecd4:	f84e 2b04 	str.w	r2, [lr], #4
 800ecd8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ecdc:	d2de      	bcs.n	800ec9c <quorem+0x42>
 800ecde:	9b00      	ldr	r3, [sp, #0]
 800ece0:	58eb      	ldr	r3, [r5, r3]
 800ece2:	b92b      	cbnz	r3, 800ecf0 <quorem+0x96>
 800ece4:	9b01      	ldr	r3, [sp, #4]
 800ece6:	3b04      	subs	r3, #4
 800ece8:	429d      	cmp	r5, r3
 800ecea:	461a      	mov	r2, r3
 800ecec:	d32f      	bcc.n	800ed4e <quorem+0xf4>
 800ecee:	613c      	str	r4, [r7, #16]
 800ecf0:	4638      	mov	r0, r7
 800ecf2:	f001 f8c9 	bl	800fe88 <__mcmp>
 800ecf6:	2800      	cmp	r0, #0
 800ecf8:	db25      	blt.n	800ed46 <quorem+0xec>
 800ecfa:	4629      	mov	r1, r5
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	f858 2b04 	ldr.w	r2, [r8], #4
 800ed02:	f8d1 c000 	ldr.w	ip, [r1]
 800ed06:	fa1f fe82 	uxth.w	lr, r2
 800ed0a:	fa1f f38c 	uxth.w	r3, ip
 800ed0e:	eba3 030e 	sub.w	r3, r3, lr
 800ed12:	4403      	add	r3, r0
 800ed14:	0c12      	lsrs	r2, r2, #16
 800ed16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ed1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed24:	45c1      	cmp	r9, r8
 800ed26:	f841 3b04 	str.w	r3, [r1], #4
 800ed2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ed2e:	d2e6      	bcs.n	800ecfe <quorem+0xa4>
 800ed30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ed34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ed38:	b922      	cbnz	r2, 800ed44 <quorem+0xea>
 800ed3a:	3b04      	subs	r3, #4
 800ed3c:	429d      	cmp	r5, r3
 800ed3e:	461a      	mov	r2, r3
 800ed40:	d30b      	bcc.n	800ed5a <quorem+0x100>
 800ed42:	613c      	str	r4, [r7, #16]
 800ed44:	3601      	adds	r6, #1
 800ed46:	4630      	mov	r0, r6
 800ed48:	b003      	add	sp, #12
 800ed4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed4e:	6812      	ldr	r2, [r2, #0]
 800ed50:	3b04      	subs	r3, #4
 800ed52:	2a00      	cmp	r2, #0
 800ed54:	d1cb      	bne.n	800ecee <quorem+0x94>
 800ed56:	3c01      	subs	r4, #1
 800ed58:	e7c6      	b.n	800ece8 <quorem+0x8e>
 800ed5a:	6812      	ldr	r2, [r2, #0]
 800ed5c:	3b04      	subs	r3, #4
 800ed5e:	2a00      	cmp	r2, #0
 800ed60:	d1ef      	bne.n	800ed42 <quorem+0xe8>
 800ed62:	3c01      	subs	r4, #1
 800ed64:	e7ea      	b.n	800ed3c <quorem+0xe2>
 800ed66:	2000      	movs	r0, #0
 800ed68:	e7ee      	b.n	800ed48 <quorem+0xee>
 800ed6a:	0000      	movs	r0, r0
 800ed6c:	0000      	movs	r0, r0
	...

0800ed70 <_dtoa_r>:
 800ed70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed74:	69c7      	ldr	r7, [r0, #28]
 800ed76:	b097      	sub	sp, #92	@ 0x5c
 800ed78:	4614      	mov	r4, r2
 800ed7a:	461d      	mov	r5, r3
 800ed7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ed80:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800ed82:	4683      	mov	fp, r0
 800ed84:	b97f      	cbnz	r7, 800eda6 <_dtoa_r+0x36>
 800ed86:	2010      	movs	r0, #16
 800ed88:	f7fe fff8 	bl	800dd7c <malloc>
 800ed8c:	4602      	mov	r2, r0
 800ed8e:	f8cb 001c 	str.w	r0, [fp, #28]
 800ed92:	b920      	cbnz	r0, 800ed9e <_dtoa_r+0x2e>
 800ed94:	4ba8      	ldr	r3, [pc, #672]	@ (800f038 <_dtoa_r+0x2c8>)
 800ed96:	21ef      	movs	r1, #239	@ 0xef
 800ed98:	48a8      	ldr	r0, [pc, #672]	@ (800f03c <_dtoa_r+0x2cc>)
 800ed9a:	f001 fd69 	bl	8010870 <__assert_func>
 800ed9e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eda2:	6007      	str	r7, [r0, #0]
 800eda4:	60c7      	str	r7, [r0, #12]
 800eda6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800edaa:	6819      	ldr	r1, [r3, #0]
 800edac:	b159      	cbz	r1, 800edc6 <_dtoa_r+0x56>
 800edae:	685a      	ldr	r2, [r3, #4]
 800edb0:	604a      	str	r2, [r1, #4]
 800edb2:	2301      	movs	r3, #1
 800edb4:	4093      	lsls	r3, r2
 800edb6:	608b      	str	r3, [r1, #8]
 800edb8:	4658      	mov	r0, fp
 800edba:	f000 fe2b 	bl	800fa14 <_Bfree>
 800edbe:	f8db 301c 	ldr.w	r3, [fp, #28]
 800edc2:	2200      	movs	r2, #0
 800edc4:	601a      	str	r2, [r3, #0]
 800edc6:	1e2b      	subs	r3, r5, #0
 800edc8:	bfb9      	ittee	lt
 800edca:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800edce:	9303      	strlt	r3, [sp, #12]
 800edd0:	2300      	movge	r3, #0
 800edd2:	6033      	strge	r3, [r6, #0]
 800edd4:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800edd8:	4b99      	ldr	r3, [pc, #612]	@ (800f040 <_dtoa_r+0x2d0>)
 800edda:	bfbc      	itt	lt
 800eddc:	2201      	movlt	r2, #1
 800edde:	6032      	strlt	r2, [r6, #0]
 800ede0:	ea33 0308 	bics.w	r3, r3, r8
 800ede4:	d112      	bne.n	800ee0c <_dtoa_r+0x9c>
 800ede6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ede8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800edec:	6013      	str	r3, [r2, #0]
 800edee:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800edf2:	4323      	orrs	r3, r4
 800edf4:	f000 8551 	beq.w	800f89a <_dtoa_r+0xb2a>
 800edf8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800edfa:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800f044 <_dtoa_r+0x2d4>
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f000 8553 	beq.w	800f8aa <_dtoa_r+0xb3a>
 800ee04:	f10a 0303 	add.w	r3, sl, #3
 800ee08:	f000 bd4d 	b.w	800f8a6 <_dtoa_r+0xb36>
 800ee0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee10:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ee14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee18:	2200      	movs	r2, #0
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	f7f1 fe2c 	bl	8000a78 <__aeabi_dcmpeq>
 800ee20:	4607      	mov	r7, r0
 800ee22:	b158      	cbz	r0, 800ee3c <_dtoa_r+0xcc>
 800ee24:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ee26:	2301      	movs	r3, #1
 800ee28:	6013      	str	r3, [r2, #0]
 800ee2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ee2c:	b113      	cbz	r3, 800ee34 <_dtoa_r+0xc4>
 800ee2e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ee30:	4b85      	ldr	r3, [pc, #532]	@ (800f048 <_dtoa_r+0x2d8>)
 800ee32:	6013      	str	r3, [r2, #0]
 800ee34:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800f04c <_dtoa_r+0x2dc>
 800ee38:	f000 bd37 	b.w	800f8aa <_dtoa_r+0xb3a>
 800ee3c:	ab14      	add	r3, sp, #80	@ 0x50
 800ee3e:	9301      	str	r3, [sp, #4]
 800ee40:	ab15      	add	r3, sp, #84	@ 0x54
 800ee42:	9300      	str	r3, [sp, #0]
 800ee44:	4658      	mov	r0, fp
 800ee46:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ee4a:	f001 f8cb 	bl	800ffe4 <__d2b>
 800ee4e:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ee52:	4681      	mov	r9, r0
 800ee54:	2e00      	cmp	r6, #0
 800ee56:	d076      	beq.n	800ef46 <_dtoa_r+0x1d6>
 800ee58:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee5a:	9712      	str	r7, [sp, #72]	@ 0x48
 800ee5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ee64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ee68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ee6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ee70:	4619      	mov	r1, r3
 800ee72:	2200      	movs	r2, #0
 800ee74:	4b76      	ldr	r3, [pc, #472]	@ (800f050 <_dtoa_r+0x2e0>)
 800ee76:	f7f1 f9df 	bl	8000238 <__aeabi_dsub>
 800ee7a:	a369      	add	r3, pc, #420	@ (adr r3, 800f020 <_dtoa_r+0x2b0>)
 800ee7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee80:	f7f1 fb92 	bl	80005a8 <__aeabi_dmul>
 800ee84:	a368      	add	r3, pc, #416	@ (adr r3, 800f028 <_dtoa_r+0x2b8>)
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	f7f1 f9d7 	bl	800023c <__adddf3>
 800ee8e:	4604      	mov	r4, r0
 800ee90:	4630      	mov	r0, r6
 800ee92:	460d      	mov	r5, r1
 800ee94:	f7f1 fb1e 	bl	80004d4 <__aeabi_i2d>
 800ee98:	a365      	add	r3, pc, #404	@ (adr r3, 800f030 <_dtoa_r+0x2c0>)
 800ee9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee9e:	f7f1 fb83 	bl	80005a8 <__aeabi_dmul>
 800eea2:	4602      	mov	r2, r0
 800eea4:	460b      	mov	r3, r1
 800eea6:	4620      	mov	r0, r4
 800eea8:	4629      	mov	r1, r5
 800eeaa:	f7f1 f9c7 	bl	800023c <__adddf3>
 800eeae:	4604      	mov	r4, r0
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	f7f1 fe29 	bl	8000b08 <__aeabi_d2iz>
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	4607      	mov	r7, r0
 800eeba:	2300      	movs	r3, #0
 800eebc:	4620      	mov	r0, r4
 800eebe:	4629      	mov	r1, r5
 800eec0:	f7f1 fde4 	bl	8000a8c <__aeabi_dcmplt>
 800eec4:	b140      	cbz	r0, 800eed8 <_dtoa_r+0x168>
 800eec6:	4638      	mov	r0, r7
 800eec8:	f7f1 fb04 	bl	80004d4 <__aeabi_i2d>
 800eecc:	4622      	mov	r2, r4
 800eece:	462b      	mov	r3, r5
 800eed0:	f7f1 fdd2 	bl	8000a78 <__aeabi_dcmpeq>
 800eed4:	b900      	cbnz	r0, 800eed8 <_dtoa_r+0x168>
 800eed6:	3f01      	subs	r7, #1
 800eed8:	2f16      	cmp	r7, #22
 800eeda:	d852      	bhi.n	800ef82 <_dtoa_r+0x212>
 800eedc:	4b5d      	ldr	r3, [pc, #372]	@ (800f054 <_dtoa_r+0x2e4>)
 800eede:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eeea:	f7f1 fdcf 	bl	8000a8c <__aeabi_dcmplt>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d049      	beq.n	800ef86 <_dtoa_r+0x216>
 800eef2:	3f01      	subs	r7, #1
 800eef4:	2300      	movs	r3, #0
 800eef6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eef8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eefa:	1b9b      	subs	r3, r3, r6
 800eefc:	1e5a      	subs	r2, r3, #1
 800eefe:	bf44      	itt	mi
 800ef00:	f1c3 0801 	rsbmi	r8, r3, #1
 800ef04:	2300      	movmi	r3, #0
 800ef06:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef08:	bf54      	ite	pl
 800ef0a:	f04f 0800 	movpl.w	r8, #0
 800ef0e:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800ef10:	2f00      	cmp	r7, #0
 800ef12:	db3a      	blt.n	800ef8a <_dtoa_r+0x21a>
 800ef14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef16:	970e      	str	r7, [sp, #56]	@ 0x38
 800ef18:	443b      	add	r3, r7
 800ef1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef20:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef22:	2b09      	cmp	r3, #9
 800ef24:	d865      	bhi.n	800eff2 <_dtoa_r+0x282>
 800ef26:	2b05      	cmp	r3, #5
 800ef28:	bfc4      	itt	gt
 800ef2a:	3b04      	subgt	r3, #4
 800ef2c:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800ef2e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ef30:	f1a3 0302 	sub.w	r3, r3, #2
 800ef34:	bfcc      	ite	gt
 800ef36:	2400      	movgt	r4, #0
 800ef38:	2401      	movle	r4, #1
 800ef3a:	2b03      	cmp	r3, #3
 800ef3c:	d864      	bhi.n	800f008 <_dtoa_r+0x298>
 800ef3e:	e8df f003 	tbb	[pc, r3]
 800ef42:	382b      	.short	0x382b
 800ef44:	5636      	.short	0x5636
 800ef46:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ef4a:	441e      	add	r6, r3
 800ef4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ef50:	2b20      	cmp	r3, #32
 800ef52:	bfc1      	itttt	gt
 800ef54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ef58:	fa08 f803 	lslgt.w	r8, r8, r3
 800ef5c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ef60:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ef64:	bfd6      	itet	le
 800ef66:	f1c3 0320 	rsble	r3, r3, #32
 800ef6a:	ea48 0003 	orrgt.w	r0, r8, r3
 800ef6e:	fa04 f003 	lslle.w	r0, r4, r3
 800ef72:	f7f1 fa9f 	bl	80004b4 <__aeabi_ui2d>
 800ef76:	2201      	movs	r2, #1
 800ef78:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ef7c:	3e01      	subs	r6, #1
 800ef7e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ef80:	e776      	b.n	800ee70 <_dtoa_r+0x100>
 800ef82:	2301      	movs	r3, #1
 800ef84:	e7b7      	b.n	800eef6 <_dtoa_r+0x186>
 800ef86:	900f      	str	r0, [sp, #60]	@ 0x3c
 800ef88:	e7b6      	b.n	800eef8 <_dtoa_r+0x188>
 800ef8a:	427b      	negs	r3, r7
 800ef8c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ef8e:	2300      	movs	r3, #0
 800ef90:	eba8 0807 	sub.w	r8, r8, r7
 800ef94:	930e      	str	r3, [sp, #56]	@ 0x38
 800ef96:	e7c3      	b.n	800ef20 <_dtoa_r+0x1b0>
 800ef98:	2300      	movs	r3, #0
 800ef9a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ef9c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	dc35      	bgt.n	800f00e <_dtoa_r+0x29e>
 800efa2:	2301      	movs	r3, #1
 800efa4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800efa8:	461a      	mov	r2, r3
 800efaa:	9221      	str	r2, [sp, #132]	@ 0x84
 800efac:	e00b      	b.n	800efc6 <_dtoa_r+0x256>
 800efae:	2301      	movs	r3, #1
 800efb0:	e7f3      	b.n	800ef9a <_dtoa_r+0x22a>
 800efb2:	2300      	movs	r3, #0
 800efb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800efb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800efb8:	18fb      	adds	r3, r7, r3
 800efba:	9308      	str	r3, [sp, #32]
 800efbc:	3301      	adds	r3, #1
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	9307      	str	r3, [sp, #28]
 800efc2:	bfb8      	it	lt
 800efc4:	2301      	movlt	r3, #1
 800efc6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800efca:	2100      	movs	r1, #0
 800efcc:	2204      	movs	r2, #4
 800efce:	f102 0514 	add.w	r5, r2, #20
 800efd2:	429d      	cmp	r5, r3
 800efd4:	d91f      	bls.n	800f016 <_dtoa_r+0x2a6>
 800efd6:	6041      	str	r1, [r0, #4]
 800efd8:	4658      	mov	r0, fp
 800efda:	f000 fcdb 	bl	800f994 <_Balloc>
 800efde:	4682      	mov	sl, r0
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d13b      	bne.n	800f05c <_dtoa_r+0x2ec>
 800efe4:	4b1c      	ldr	r3, [pc, #112]	@ (800f058 <_dtoa_r+0x2e8>)
 800efe6:	4602      	mov	r2, r0
 800efe8:	f240 11af 	movw	r1, #431	@ 0x1af
 800efec:	e6d4      	b.n	800ed98 <_dtoa_r+0x28>
 800efee:	2301      	movs	r3, #1
 800eff0:	e7e0      	b.n	800efb4 <_dtoa_r+0x244>
 800eff2:	2401      	movs	r4, #1
 800eff4:	2300      	movs	r3, #0
 800eff6:	9320      	str	r3, [sp, #128]	@ 0x80
 800eff8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800effa:	f04f 33ff 	mov.w	r3, #4294967295
 800effe:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f002:	2200      	movs	r2, #0
 800f004:	2312      	movs	r3, #18
 800f006:	e7d0      	b.n	800efaa <_dtoa_r+0x23a>
 800f008:	2301      	movs	r3, #1
 800f00a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f00c:	e7f5      	b.n	800effa <_dtoa_r+0x28a>
 800f00e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f010:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f014:	e7d7      	b.n	800efc6 <_dtoa_r+0x256>
 800f016:	3101      	adds	r1, #1
 800f018:	0052      	lsls	r2, r2, #1
 800f01a:	e7d8      	b.n	800efce <_dtoa_r+0x25e>
 800f01c:	f3af 8000 	nop.w
 800f020:	636f4361 	.word	0x636f4361
 800f024:	3fd287a7 	.word	0x3fd287a7
 800f028:	8b60c8b3 	.word	0x8b60c8b3
 800f02c:	3fc68a28 	.word	0x3fc68a28
 800f030:	509f79fb 	.word	0x509f79fb
 800f034:	3fd34413 	.word	0x3fd34413
 800f038:	08012276 	.word	0x08012276
 800f03c:	0801228d 	.word	0x0801228d
 800f040:	7ff00000 	.word	0x7ff00000
 800f044:	08012272 	.word	0x08012272
 800f048:	08012246 	.word	0x08012246
 800f04c:	08012245 	.word	0x08012245
 800f050:	3ff80000 	.word	0x3ff80000
 800f054:	08012388 	.word	0x08012388
 800f058:	080122e5 	.word	0x080122e5
 800f05c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f060:	6018      	str	r0, [r3, #0]
 800f062:	9b07      	ldr	r3, [sp, #28]
 800f064:	2b0e      	cmp	r3, #14
 800f066:	f200 80a4 	bhi.w	800f1b2 <_dtoa_r+0x442>
 800f06a:	2c00      	cmp	r4, #0
 800f06c:	f000 80a1 	beq.w	800f1b2 <_dtoa_r+0x442>
 800f070:	2f00      	cmp	r7, #0
 800f072:	dd33      	ble.n	800f0dc <_dtoa_r+0x36c>
 800f074:	4b86      	ldr	r3, [pc, #536]	@ (800f290 <_dtoa_r+0x520>)
 800f076:	f007 020f 	and.w	r2, r7, #15
 800f07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f07e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f082:	05f8      	lsls	r0, r7, #23
 800f084:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f088:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f08c:	d516      	bpl.n	800f0bc <_dtoa_r+0x34c>
 800f08e:	4b81      	ldr	r3, [pc, #516]	@ (800f294 <_dtoa_r+0x524>)
 800f090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f098:	f7f1 fbb0 	bl	80007fc <__aeabi_ddiv>
 800f09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0a0:	f004 040f 	and.w	r4, r4, #15
 800f0a4:	2603      	movs	r6, #3
 800f0a6:	4d7b      	ldr	r5, [pc, #492]	@ (800f294 <_dtoa_r+0x524>)
 800f0a8:	b954      	cbnz	r4, 800f0c0 <_dtoa_r+0x350>
 800f0aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0b2:	f7f1 fba3 	bl	80007fc <__aeabi_ddiv>
 800f0b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0ba:	e028      	b.n	800f10e <_dtoa_r+0x39e>
 800f0bc:	2602      	movs	r6, #2
 800f0be:	e7f2      	b.n	800f0a6 <_dtoa_r+0x336>
 800f0c0:	07e1      	lsls	r1, r4, #31
 800f0c2:	d508      	bpl.n	800f0d6 <_dtoa_r+0x366>
 800f0c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0cc:	f7f1 fa6c 	bl	80005a8 <__aeabi_dmul>
 800f0d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0d4:	3601      	adds	r6, #1
 800f0d6:	1064      	asrs	r4, r4, #1
 800f0d8:	3508      	adds	r5, #8
 800f0da:	e7e5      	b.n	800f0a8 <_dtoa_r+0x338>
 800f0dc:	f000 80d2 	beq.w	800f284 <_dtoa_r+0x514>
 800f0e0:	427c      	negs	r4, r7
 800f0e2:	4b6b      	ldr	r3, [pc, #428]	@ (800f290 <_dtoa_r+0x520>)
 800f0e4:	4d6b      	ldr	r5, [pc, #428]	@ (800f294 <_dtoa_r+0x524>)
 800f0e6:	f004 020f 	and.w	r2, r4, #15
 800f0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0f6:	f7f1 fa57 	bl	80005a8 <__aeabi_dmul>
 800f0fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0fe:	1124      	asrs	r4, r4, #4
 800f100:	2300      	movs	r3, #0
 800f102:	2602      	movs	r6, #2
 800f104:	2c00      	cmp	r4, #0
 800f106:	f040 80b2 	bne.w	800f26e <_dtoa_r+0x4fe>
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d1d3      	bne.n	800f0b6 <_dtoa_r+0x346>
 800f10e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f110:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f114:	2b00      	cmp	r3, #0
 800f116:	f000 80b7 	beq.w	800f288 <_dtoa_r+0x518>
 800f11a:	4b5f      	ldr	r3, [pc, #380]	@ (800f298 <_dtoa_r+0x528>)
 800f11c:	2200      	movs	r2, #0
 800f11e:	4620      	mov	r0, r4
 800f120:	4629      	mov	r1, r5
 800f122:	f7f1 fcb3 	bl	8000a8c <__aeabi_dcmplt>
 800f126:	2800      	cmp	r0, #0
 800f128:	f000 80ae 	beq.w	800f288 <_dtoa_r+0x518>
 800f12c:	9b07      	ldr	r3, [sp, #28]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f000 80aa 	beq.w	800f288 <_dtoa_r+0x518>
 800f134:	9b08      	ldr	r3, [sp, #32]
 800f136:	2b00      	cmp	r3, #0
 800f138:	dd37      	ble.n	800f1aa <_dtoa_r+0x43a>
 800f13a:	1e7b      	subs	r3, r7, #1
 800f13c:	9304      	str	r3, [sp, #16]
 800f13e:	4620      	mov	r0, r4
 800f140:	4b56      	ldr	r3, [pc, #344]	@ (800f29c <_dtoa_r+0x52c>)
 800f142:	2200      	movs	r2, #0
 800f144:	4629      	mov	r1, r5
 800f146:	f7f1 fa2f 	bl	80005a8 <__aeabi_dmul>
 800f14a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f14e:	9c08      	ldr	r4, [sp, #32]
 800f150:	3601      	adds	r6, #1
 800f152:	4630      	mov	r0, r6
 800f154:	f7f1 f9be 	bl	80004d4 <__aeabi_i2d>
 800f158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f15c:	f7f1 fa24 	bl	80005a8 <__aeabi_dmul>
 800f160:	4b4f      	ldr	r3, [pc, #316]	@ (800f2a0 <_dtoa_r+0x530>)
 800f162:	2200      	movs	r2, #0
 800f164:	f7f1 f86a 	bl	800023c <__adddf3>
 800f168:	4605      	mov	r5, r0
 800f16a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f16e:	2c00      	cmp	r4, #0
 800f170:	f040 809a 	bne.w	800f2a8 <_dtoa_r+0x538>
 800f174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f178:	4b4a      	ldr	r3, [pc, #296]	@ (800f2a4 <_dtoa_r+0x534>)
 800f17a:	2200      	movs	r2, #0
 800f17c:	f7f1 f85c 	bl	8000238 <__aeabi_dsub>
 800f180:	4602      	mov	r2, r0
 800f182:	460b      	mov	r3, r1
 800f184:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f188:	462a      	mov	r2, r5
 800f18a:	4633      	mov	r3, r6
 800f18c:	f7f1 fc9c 	bl	8000ac8 <__aeabi_dcmpgt>
 800f190:	2800      	cmp	r0, #0
 800f192:	f040 828e 	bne.w	800f6b2 <_dtoa_r+0x942>
 800f196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f19a:	462a      	mov	r2, r5
 800f19c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f1a0:	f7f1 fc74 	bl	8000a8c <__aeabi_dcmplt>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	f040 8127 	bne.w	800f3f8 <_dtoa_r+0x688>
 800f1aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f1ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f1b2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	f2c0 8163 	blt.w	800f480 <_dtoa_r+0x710>
 800f1ba:	2f0e      	cmp	r7, #14
 800f1bc:	f300 8160 	bgt.w	800f480 <_dtoa_r+0x710>
 800f1c0:	4b33      	ldr	r3, [pc, #204]	@ (800f290 <_dtoa_r+0x520>)
 800f1c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f1ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f1ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	da03      	bge.n	800f1dc <_dtoa_r+0x46c>
 800f1d4:	9b07      	ldr	r3, [sp, #28]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f340 8100 	ble.w	800f3dc <_dtoa_r+0x66c>
 800f1dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1e0:	4656      	mov	r6, sl
 800f1e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	f7f1 fb07 	bl	80007fc <__aeabi_ddiv>
 800f1ee:	f7f1 fc8b 	bl	8000b08 <__aeabi_d2iz>
 800f1f2:	4680      	mov	r8, r0
 800f1f4:	f7f1 f96e 	bl	80004d4 <__aeabi_i2d>
 800f1f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1fc:	f7f1 f9d4 	bl	80005a8 <__aeabi_dmul>
 800f200:	4602      	mov	r2, r0
 800f202:	460b      	mov	r3, r1
 800f204:	4620      	mov	r0, r4
 800f206:	4629      	mov	r1, r5
 800f208:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f20c:	f7f1 f814 	bl	8000238 <__aeabi_dsub>
 800f210:	f806 4b01 	strb.w	r4, [r6], #1
 800f214:	9d07      	ldr	r5, [sp, #28]
 800f216:	eba6 040a 	sub.w	r4, r6, sl
 800f21a:	42a5      	cmp	r5, r4
 800f21c:	4602      	mov	r2, r0
 800f21e:	460b      	mov	r3, r1
 800f220:	f040 8116 	bne.w	800f450 <_dtoa_r+0x6e0>
 800f224:	f7f1 f80a 	bl	800023c <__adddf3>
 800f228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f22c:	4604      	mov	r4, r0
 800f22e:	460d      	mov	r5, r1
 800f230:	f7f1 fc4a 	bl	8000ac8 <__aeabi_dcmpgt>
 800f234:	2800      	cmp	r0, #0
 800f236:	f040 80f8 	bne.w	800f42a <_dtoa_r+0x6ba>
 800f23a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f23e:	4620      	mov	r0, r4
 800f240:	4629      	mov	r1, r5
 800f242:	f7f1 fc19 	bl	8000a78 <__aeabi_dcmpeq>
 800f246:	b118      	cbz	r0, 800f250 <_dtoa_r+0x4e0>
 800f248:	f018 0f01 	tst.w	r8, #1
 800f24c:	f040 80ed 	bne.w	800f42a <_dtoa_r+0x6ba>
 800f250:	4649      	mov	r1, r9
 800f252:	4658      	mov	r0, fp
 800f254:	f000 fbde 	bl	800fa14 <_Bfree>
 800f258:	2300      	movs	r3, #0
 800f25a:	7033      	strb	r3, [r6, #0]
 800f25c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f25e:	3701      	adds	r7, #1
 800f260:	601f      	str	r7, [r3, #0]
 800f262:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f264:	2b00      	cmp	r3, #0
 800f266:	f000 8320 	beq.w	800f8aa <_dtoa_r+0xb3a>
 800f26a:	601e      	str	r6, [r3, #0]
 800f26c:	e31d      	b.n	800f8aa <_dtoa_r+0xb3a>
 800f26e:	07e2      	lsls	r2, r4, #31
 800f270:	d505      	bpl.n	800f27e <_dtoa_r+0x50e>
 800f272:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f276:	f7f1 f997 	bl	80005a8 <__aeabi_dmul>
 800f27a:	3601      	adds	r6, #1
 800f27c:	2301      	movs	r3, #1
 800f27e:	1064      	asrs	r4, r4, #1
 800f280:	3508      	adds	r5, #8
 800f282:	e73f      	b.n	800f104 <_dtoa_r+0x394>
 800f284:	2602      	movs	r6, #2
 800f286:	e742      	b.n	800f10e <_dtoa_r+0x39e>
 800f288:	9c07      	ldr	r4, [sp, #28]
 800f28a:	9704      	str	r7, [sp, #16]
 800f28c:	e761      	b.n	800f152 <_dtoa_r+0x3e2>
 800f28e:	bf00      	nop
 800f290:	08012388 	.word	0x08012388
 800f294:	08012360 	.word	0x08012360
 800f298:	3ff00000 	.word	0x3ff00000
 800f29c:	40240000 	.word	0x40240000
 800f2a0:	401c0000 	.word	0x401c0000
 800f2a4:	40140000 	.word	0x40140000
 800f2a8:	4b70      	ldr	r3, [pc, #448]	@ (800f46c <_dtoa_r+0x6fc>)
 800f2aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f2ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f2b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f2b4:	4454      	add	r4, sl
 800f2b6:	2900      	cmp	r1, #0
 800f2b8:	d045      	beq.n	800f346 <_dtoa_r+0x5d6>
 800f2ba:	496d      	ldr	r1, [pc, #436]	@ (800f470 <_dtoa_r+0x700>)
 800f2bc:	2000      	movs	r0, #0
 800f2be:	f7f1 fa9d 	bl	80007fc <__aeabi_ddiv>
 800f2c2:	4633      	mov	r3, r6
 800f2c4:	462a      	mov	r2, r5
 800f2c6:	f7f0 ffb7 	bl	8000238 <__aeabi_dsub>
 800f2ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f2ce:	4656      	mov	r6, sl
 800f2d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2d4:	f7f1 fc18 	bl	8000b08 <__aeabi_d2iz>
 800f2d8:	4605      	mov	r5, r0
 800f2da:	f7f1 f8fb 	bl	80004d4 <__aeabi_i2d>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	460b      	mov	r3, r1
 800f2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2e6:	f7f0 ffa7 	bl	8000238 <__aeabi_dsub>
 800f2ea:	3530      	adds	r5, #48	@ 0x30
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f2f4:	f806 5b01 	strb.w	r5, [r6], #1
 800f2f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f2fc:	f7f1 fbc6 	bl	8000a8c <__aeabi_dcmplt>
 800f300:	2800      	cmp	r0, #0
 800f302:	d163      	bne.n	800f3cc <_dtoa_r+0x65c>
 800f304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f308:	495a      	ldr	r1, [pc, #360]	@ (800f474 <_dtoa_r+0x704>)
 800f30a:	2000      	movs	r0, #0
 800f30c:	f7f0 ff94 	bl	8000238 <__aeabi_dsub>
 800f310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f314:	f7f1 fbba 	bl	8000a8c <__aeabi_dcmplt>
 800f318:	2800      	cmp	r0, #0
 800f31a:	f040 8087 	bne.w	800f42c <_dtoa_r+0x6bc>
 800f31e:	42a6      	cmp	r6, r4
 800f320:	f43f af43 	beq.w	800f1aa <_dtoa_r+0x43a>
 800f324:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f328:	4b53      	ldr	r3, [pc, #332]	@ (800f478 <_dtoa_r+0x708>)
 800f32a:	2200      	movs	r2, #0
 800f32c:	f7f1 f93c 	bl	80005a8 <__aeabi_dmul>
 800f330:	4b51      	ldr	r3, [pc, #324]	@ (800f478 <_dtoa_r+0x708>)
 800f332:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f336:	2200      	movs	r2, #0
 800f338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f33c:	f7f1 f934 	bl	80005a8 <__aeabi_dmul>
 800f340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f344:	e7c4      	b.n	800f2d0 <_dtoa_r+0x560>
 800f346:	4631      	mov	r1, r6
 800f348:	4628      	mov	r0, r5
 800f34a:	f7f1 f92d 	bl	80005a8 <__aeabi_dmul>
 800f34e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f352:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f354:	4656      	mov	r6, sl
 800f356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f35a:	f7f1 fbd5 	bl	8000b08 <__aeabi_d2iz>
 800f35e:	4605      	mov	r5, r0
 800f360:	f7f1 f8b8 	bl	80004d4 <__aeabi_i2d>
 800f364:	4602      	mov	r2, r0
 800f366:	460b      	mov	r3, r1
 800f368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f36c:	f7f0 ff64 	bl	8000238 <__aeabi_dsub>
 800f370:	3530      	adds	r5, #48	@ 0x30
 800f372:	f806 5b01 	strb.w	r5, [r6], #1
 800f376:	4602      	mov	r2, r0
 800f378:	460b      	mov	r3, r1
 800f37a:	42a6      	cmp	r6, r4
 800f37c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f380:	f04f 0200 	mov.w	r2, #0
 800f384:	d124      	bne.n	800f3d0 <_dtoa_r+0x660>
 800f386:	4b3a      	ldr	r3, [pc, #232]	@ (800f470 <_dtoa_r+0x700>)
 800f388:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f38c:	f7f0 ff56 	bl	800023c <__adddf3>
 800f390:	4602      	mov	r2, r0
 800f392:	460b      	mov	r3, r1
 800f394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f398:	f7f1 fb96 	bl	8000ac8 <__aeabi_dcmpgt>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d145      	bne.n	800f42c <_dtoa_r+0x6bc>
 800f3a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f3a4:	4932      	ldr	r1, [pc, #200]	@ (800f470 <_dtoa_r+0x700>)
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	f7f0 ff46 	bl	8000238 <__aeabi_dsub>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3b4:	f7f1 fb6a 	bl	8000a8c <__aeabi_dcmplt>
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	f43f aef6 	beq.w	800f1aa <_dtoa_r+0x43a>
 800f3be:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f3c0:	1e73      	subs	r3, r6, #1
 800f3c2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f3c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f3c8:	2b30      	cmp	r3, #48	@ 0x30
 800f3ca:	d0f8      	beq.n	800f3be <_dtoa_r+0x64e>
 800f3cc:	9f04      	ldr	r7, [sp, #16]
 800f3ce:	e73f      	b.n	800f250 <_dtoa_r+0x4e0>
 800f3d0:	4b29      	ldr	r3, [pc, #164]	@ (800f478 <_dtoa_r+0x708>)
 800f3d2:	f7f1 f8e9 	bl	80005a8 <__aeabi_dmul>
 800f3d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3da:	e7bc      	b.n	800f356 <_dtoa_r+0x5e6>
 800f3dc:	d10c      	bne.n	800f3f8 <_dtoa_r+0x688>
 800f3de:	4b27      	ldr	r3, [pc, #156]	@ (800f47c <_dtoa_r+0x70c>)
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3e6:	f7f1 f8df 	bl	80005a8 <__aeabi_dmul>
 800f3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f3ee:	f7f1 fb61 	bl	8000ab4 <__aeabi_dcmpge>
 800f3f2:	2800      	cmp	r0, #0
 800f3f4:	f000 815b 	beq.w	800f6ae <_dtoa_r+0x93e>
 800f3f8:	2400      	movs	r4, #0
 800f3fa:	4625      	mov	r5, r4
 800f3fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f3fe:	43db      	mvns	r3, r3
 800f400:	9304      	str	r3, [sp, #16]
 800f402:	4656      	mov	r6, sl
 800f404:	2700      	movs	r7, #0
 800f406:	4621      	mov	r1, r4
 800f408:	4658      	mov	r0, fp
 800f40a:	f000 fb03 	bl	800fa14 <_Bfree>
 800f40e:	2d00      	cmp	r5, #0
 800f410:	d0dc      	beq.n	800f3cc <_dtoa_r+0x65c>
 800f412:	b12f      	cbz	r7, 800f420 <_dtoa_r+0x6b0>
 800f414:	42af      	cmp	r7, r5
 800f416:	d003      	beq.n	800f420 <_dtoa_r+0x6b0>
 800f418:	4639      	mov	r1, r7
 800f41a:	4658      	mov	r0, fp
 800f41c:	f000 fafa 	bl	800fa14 <_Bfree>
 800f420:	4629      	mov	r1, r5
 800f422:	4658      	mov	r0, fp
 800f424:	f000 faf6 	bl	800fa14 <_Bfree>
 800f428:	e7d0      	b.n	800f3cc <_dtoa_r+0x65c>
 800f42a:	9704      	str	r7, [sp, #16]
 800f42c:	4633      	mov	r3, r6
 800f42e:	461e      	mov	r6, r3
 800f430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f434:	2a39      	cmp	r2, #57	@ 0x39
 800f436:	d107      	bne.n	800f448 <_dtoa_r+0x6d8>
 800f438:	459a      	cmp	sl, r3
 800f43a:	d1f8      	bne.n	800f42e <_dtoa_r+0x6be>
 800f43c:	9a04      	ldr	r2, [sp, #16]
 800f43e:	3201      	adds	r2, #1
 800f440:	9204      	str	r2, [sp, #16]
 800f442:	2230      	movs	r2, #48	@ 0x30
 800f444:	f88a 2000 	strb.w	r2, [sl]
 800f448:	781a      	ldrb	r2, [r3, #0]
 800f44a:	3201      	adds	r2, #1
 800f44c:	701a      	strb	r2, [r3, #0]
 800f44e:	e7bd      	b.n	800f3cc <_dtoa_r+0x65c>
 800f450:	4b09      	ldr	r3, [pc, #36]	@ (800f478 <_dtoa_r+0x708>)
 800f452:	2200      	movs	r2, #0
 800f454:	f7f1 f8a8 	bl	80005a8 <__aeabi_dmul>
 800f458:	2200      	movs	r2, #0
 800f45a:	2300      	movs	r3, #0
 800f45c:	4604      	mov	r4, r0
 800f45e:	460d      	mov	r5, r1
 800f460:	f7f1 fb0a 	bl	8000a78 <__aeabi_dcmpeq>
 800f464:	2800      	cmp	r0, #0
 800f466:	f43f aebc 	beq.w	800f1e2 <_dtoa_r+0x472>
 800f46a:	e6f1      	b.n	800f250 <_dtoa_r+0x4e0>
 800f46c:	08012388 	.word	0x08012388
 800f470:	3fe00000 	.word	0x3fe00000
 800f474:	3ff00000 	.word	0x3ff00000
 800f478:	40240000 	.word	0x40240000
 800f47c:	40140000 	.word	0x40140000
 800f480:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f482:	2a00      	cmp	r2, #0
 800f484:	f000 80db 	beq.w	800f63e <_dtoa_r+0x8ce>
 800f488:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f48a:	2a01      	cmp	r2, #1
 800f48c:	f300 80bf 	bgt.w	800f60e <_dtoa_r+0x89e>
 800f490:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f492:	2a00      	cmp	r2, #0
 800f494:	f000 80b7 	beq.w	800f606 <_dtoa_r+0x896>
 800f498:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f49c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f49e:	4646      	mov	r6, r8
 800f4a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4a2:	2101      	movs	r1, #1
 800f4a4:	441a      	add	r2, r3
 800f4a6:	4658      	mov	r0, fp
 800f4a8:	4498      	add	r8, r3
 800f4aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4ac:	f000 fb66 	bl	800fb7c <__i2b>
 800f4b0:	4605      	mov	r5, r0
 800f4b2:	b15e      	cbz	r6, 800f4cc <_dtoa_r+0x75c>
 800f4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	dd08      	ble.n	800f4cc <_dtoa_r+0x75c>
 800f4ba:	42b3      	cmp	r3, r6
 800f4bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4be:	bfa8      	it	ge
 800f4c0:	4633      	movge	r3, r6
 800f4c2:	eba8 0803 	sub.w	r8, r8, r3
 800f4c6:	1af6      	subs	r6, r6, r3
 800f4c8:	1ad3      	subs	r3, r2, r3
 800f4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f4ce:	b1f3      	cbz	r3, 800f50e <_dtoa_r+0x79e>
 800f4d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	f000 80b7 	beq.w	800f646 <_dtoa_r+0x8d6>
 800f4d8:	b18c      	cbz	r4, 800f4fe <_dtoa_r+0x78e>
 800f4da:	4629      	mov	r1, r5
 800f4dc:	4622      	mov	r2, r4
 800f4de:	4658      	mov	r0, fp
 800f4e0:	f000 fc0c 	bl	800fcfc <__pow5mult>
 800f4e4:	464a      	mov	r2, r9
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	4605      	mov	r5, r0
 800f4ea:	4658      	mov	r0, fp
 800f4ec:	f000 fb5c 	bl	800fba8 <__multiply>
 800f4f0:	4649      	mov	r1, r9
 800f4f2:	9004      	str	r0, [sp, #16]
 800f4f4:	4658      	mov	r0, fp
 800f4f6:	f000 fa8d 	bl	800fa14 <_Bfree>
 800f4fa:	9b04      	ldr	r3, [sp, #16]
 800f4fc:	4699      	mov	r9, r3
 800f4fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f500:	1b1a      	subs	r2, r3, r4
 800f502:	d004      	beq.n	800f50e <_dtoa_r+0x79e>
 800f504:	4649      	mov	r1, r9
 800f506:	4658      	mov	r0, fp
 800f508:	f000 fbf8 	bl	800fcfc <__pow5mult>
 800f50c:	4681      	mov	r9, r0
 800f50e:	2101      	movs	r1, #1
 800f510:	4658      	mov	r0, fp
 800f512:	f000 fb33 	bl	800fb7c <__i2b>
 800f516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f518:	4604      	mov	r4, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	f000 81c9 	beq.w	800f8b2 <_dtoa_r+0xb42>
 800f520:	461a      	mov	r2, r3
 800f522:	4601      	mov	r1, r0
 800f524:	4658      	mov	r0, fp
 800f526:	f000 fbe9 	bl	800fcfc <__pow5mult>
 800f52a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	4604      	mov	r4, r0
 800f530:	f300 808f 	bgt.w	800f652 <_dtoa_r+0x8e2>
 800f534:	9b02      	ldr	r3, [sp, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	f040 8087 	bne.w	800f64a <_dtoa_r+0x8da>
 800f53c:	9b03      	ldr	r3, [sp, #12]
 800f53e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f542:	2b00      	cmp	r3, #0
 800f544:	f040 8083 	bne.w	800f64e <_dtoa_r+0x8de>
 800f548:	9b03      	ldr	r3, [sp, #12]
 800f54a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f54e:	0d1b      	lsrs	r3, r3, #20
 800f550:	051b      	lsls	r3, r3, #20
 800f552:	b12b      	cbz	r3, 800f560 <_dtoa_r+0x7f0>
 800f554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f556:	3301      	adds	r3, #1
 800f558:	9309      	str	r3, [sp, #36]	@ 0x24
 800f55a:	f108 0801 	add.w	r8, r8, #1
 800f55e:	2301      	movs	r3, #1
 800f560:	930a      	str	r3, [sp, #40]	@ 0x28
 800f562:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f564:	2b00      	cmp	r3, #0
 800f566:	f000 81aa 	beq.w	800f8be <_dtoa_r+0xb4e>
 800f56a:	6923      	ldr	r3, [r4, #16]
 800f56c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f570:	6918      	ldr	r0, [r3, #16]
 800f572:	f000 fab7 	bl	800fae4 <__hi0bits>
 800f576:	f1c0 0020 	rsb	r0, r0, #32
 800f57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f57c:	4418      	add	r0, r3
 800f57e:	f010 001f 	ands.w	r0, r0, #31
 800f582:	d071      	beq.n	800f668 <_dtoa_r+0x8f8>
 800f584:	f1c0 0320 	rsb	r3, r0, #32
 800f588:	2b04      	cmp	r3, #4
 800f58a:	dd65      	ble.n	800f658 <_dtoa_r+0x8e8>
 800f58c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f58e:	f1c0 001c 	rsb	r0, r0, #28
 800f592:	4403      	add	r3, r0
 800f594:	4480      	add	r8, r0
 800f596:	4406      	add	r6, r0
 800f598:	9309      	str	r3, [sp, #36]	@ 0x24
 800f59a:	f1b8 0f00 	cmp.w	r8, #0
 800f59e:	dd05      	ble.n	800f5ac <_dtoa_r+0x83c>
 800f5a0:	4649      	mov	r1, r9
 800f5a2:	4642      	mov	r2, r8
 800f5a4:	4658      	mov	r0, fp
 800f5a6:	f000 fc03 	bl	800fdb0 <__lshift>
 800f5aa:	4681      	mov	r9, r0
 800f5ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	dd05      	ble.n	800f5be <_dtoa_r+0x84e>
 800f5b2:	4621      	mov	r1, r4
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	4658      	mov	r0, fp
 800f5b8:	f000 fbfa 	bl	800fdb0 <__lshift>
 800f5bc:	4604      	mov	r4, r0
 800f5be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d053      	beq.n	800f66c <_dtoa_r+0x8fc>
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	4648      	mov	r0, r9
 800f5c8:	f000 fc5e 	bl	800fe88 <__mcmp>
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	da4d      	bge.n	800f66c <_dtoa_r+0x8fc>
 800f5d0:	1e7b      	subs	r3, r7, #1
 800f5d2:	9304      	str	r3, [sp, #16]
 800f5d4:	4649      	mov	r1, r9
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	220a      	movs	r2, #10
 800f5da:	4658      	mov	r0, fp
 800f5dc:	f000 fa3c 	bl	800fa58 <__multadd>
 800f5e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f5e2:	4681      	mov	r9, r0
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	f000 816c 	beq.w	800f8c2 <_dtoa_r+0xb52>
 800f5ea:	2300      	movs	r3, #0
 800f5ec:	4629      	mov	r1, r5
 800f5ee:	220a      	movs	r2, #10
 800f5f0:	4658      	mov	r0, fp
 800f5f2:	f000 fa31 	bl	800fa58 <__multadd>
 800f5f6:	9b08      	ldr	r3, [sp, #32]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	4605      	mov	r5, r0
 800f5fc:	dc61      	bgt.n	800f6c2 <_dtoa_r+0x952>
 800f5fe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f600:	2b02      	cmp	r3, #2
 800f602:	dc3b      	bgt.n	800f67c <_dtoa_r+0x90c>
 800f604:	e05d      	b.n	800f6c2 <_dtoa_r+0x952>
 800f606:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f608:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f60c:	e746      	b.n	800f49c <_dtoa_r+0x72c>
 800f60e:	9b07      	ldr	r3, [sp, #28]
 800f610:	1e5c      	subs	r4, r3, #1
 800f612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f614:	42a3      	cmp	r3, r4
 800f616:	bfbf      	itttt	lt
 800f618:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f61a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800f61c:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f61e:	1ae3      	sublt	r3, r4, r3
 800f620:	bfb4      	ite	lt
 800f622:	18d2      	addlt	r2, r2, r3
 800f624:	1b1c      	subge	r4, r3, r4
 800f626:	9b07      	ldr	r3, [sp, #28]
 800f628:	bfbc      	itt	lt
 800f62a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800f62c:	2400      	movlt	r4, #0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	bfb5      	itete	lt
 800f632:	eba8 0603 	sublt.w	r6, r8, r3
 800f636:	9b07      	ldrge	r3, [sp, #28]
 800f638:	2300      	movlt	r3, #0
 800f63a:	4646      	movge	r6, r8
 800f63c:	e730      	b.n	800f4a0 <_dtoa_r+0x730>
 800f63e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f640:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f642:	4646      	mov	r6, r8
 800f644:	e735      	b.n	800f4b2 <_dtoa_r+0x742>
 800f646:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f648:	e75c      	b.n	800f504 <_dtoa_r+0x794>
 800f64a:	2300      	movs	r3, #0
 800f64c:	e788      	b.n	800f560 <_dtoa_r+0x7f0>
 800f64e:	9b02      	ldr	r3, [sp, #8]
 800f650:	e786      	b.n	800f560 <_dtoa_r+0x7f0>
 800f652:	2300      	movs	r3, #0
 800f654:	930a      	str	r3, [sp, #40]	@ 0x28
 800f656:	e788      	b.n	800f56a <_dtoa_r+0x7fa>
 800f658:	d09f      	beq.n	800f59a <_dtoa_r+0x82a>
 800f65a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f65c:	331c      	adds	r3, #28
 800f65e:	441a      	add	r2, r3
 800f660:	4498      	add	r8, r3
 800f662:	441e      	add	r6, r3
 800f664:	9209      	str	r2, [sp, #36]	@ 0x24
 800f666:	e798      	b.n	800f59a <_dtoa_r+0x82a>
 800f668:	4603      	mov	r3, r0
 800f66a:	e7f6      	b.n	800f65a <_dtoa_r+0x8ea>
 800f66c:	9b07      	ldr	r3, [sp, #28]
 800f66e:	9704      	str	r7, [sp, #16]
 800f670:	2b00      	cmp	r3, #0
 800f672:	dc20      	bgt.n	800f6b6 <_dtoa_r+0x946>
 800f674:	9308      	str	r3, [sp, #32]
 800f676:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f678:	2b02      	cmp	r3, #2
 800f67a:	dd1e      	ble.n	800f6ba <_dtoa_r+0x94a>
 800f67c:	9b08      	ldr	r3, [sp, #32]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	f47f aebc 	bne.w	800f3fc <_dtoa_r+0x68c>
 800f684:	4621      	mov	r1, r4
 800f686:	2205      	movs	r2, #5
 800f688:	4658      	mov	r0, fp
 800f68a:	f000 f9e5 	bl	800fa58 <__multadd>
 800f68e:	4601      	mov	r1, r0
 800f690:	4604      	mov	r4, r0
 800f692:	4648      	mov	r0, r9
 800f694:	f000 fbf8 	bl	800fe88 <__mcmp>
 800f698:	2800      	cmp	r0, #0
 800f69a:	f77f aeaf 	ble.w	800f3fc <_dtoa_r+0x68c>
 800f69e:	4656      	mov	r6, sl
 800f6a0:	2331      	movs	r3, #49	@ 0x31
 800f6a2:	f806 3b01 	strb.w	r3, [r6], #1
 800f6a6:	9b04      	ldr	r3, [sp, #16]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	e6aa      	b.n	800f404 <_dtoa_r+0x694>
 800f6ae:	9c07      	ldr	r4, [sp, #28]
 800f6b0:	9704      	str	r7, [sp, #16]
 800f6b2:	4625      	mov	r5, r4
 800f6b4:	e7f3      	b.n	800f69e <_dtoa_r+0x92e>
 800f6b6:	9b07      	ldr	r3, [sp, #28]
 800f6b8:	9308      	str	r3, [sp, #32]
 800f6ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	f000 8104 	beq.w	800f8ca <_dtoa_r+0xb5a>
 800f6c2:	2e00      	cmp	r6, #0
 800f6c4:	dd05      	ble.n	800f6d2 <_dtoa_r+0x962>
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	4632      	mov	r2, r6
 800f6ca:	4658      	mov	r0, fp
 800f6cc:	f000 fb70 	bl	800fdb0 <__lshift>
 800f6d0:	4605      	mov	r5, r0
 800f6d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d05a      	beq.n	800f78e <_dtoa_r+0xa1e>
 800f6d8:	6869      	ldr	r1, [r5, #4]
 800f6da:	4658      	mov	r0, fp
 800f6dc:	f000 f95a 	bl	800f994 <_Balloc>
 800f6e0:	4606      	mov	r6, r0
 800f6e2:	b928      	cbnz	r0, 800f6f0 <_dtoa_r+0x980>
 800f6e4:	4b84      	ldr	r3, [pc, #528]	@ (800f8f8 <_dtoa_r+0xb88>)
 800f6e6:	4602      	mov	r2, r0
 800f6e8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f6ec:	f7ff bb54 	b.w	800ed98 <_dtoa_r+0x28>
 800f6f0:	692a      	ldr	r2, [r5, #16]
 800f6f2:	3202      	adds	r2, #2
 800f6f4:	0092      	lsls	r2, r2, #2
 800f6f6:	f105 010c 	add.w	r1, r5, #12
 800f6fa:	300c      	adds	r0, #12
 800f6fc:	f7ff fa9f 	bl	800ec3e <memcpy>
 800f700:	2201      	movs	r2, #1
 800f702:	4631      	mov	r1, r6
 800f704:	4658      	mov	r0, fp
 800f706:	f000 fb53 	bl	800fdb0 <__lshift>
 800f70a:	f10a 0301 	add.w	r3, sl, #1
 800f70e:	9307      	str	r3, [sp, #28]
 800f710:	9b08      	ldr	r3, [sp, #32]
 800f712:	4453      	add	r3, sl
 800f714:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f716:	9b02      	ldr	r3, [sp, #8]
 800f718:	f003 0301 	and.w	r3, r3, #1
 800f71c:	462f      	mov	r7, r5
 800f71e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f720:	4605      	mov	r5, r0
 800f722:	9b07      	ldr	r3, [sp, #28]
 800f724:	4621      	mov	r1, r4
 800f726:	3b01      	subs	r3, #1
 800f728:	4648      	mov	r0, r9
 800f72a:	9302      	str	r3, [sp, #8]
 800f72c:	f7ff fa95 	bl	800ec5a <quorem>
 800f730:	4639      	mov	r1, r7
 800f732:	9008      	str	r0, [sp, #32]
 800f734:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f738:	4648      	mov	r0, r9
 800f73a:	f000 fba5 	bl	800fe88 <__mcmp>
 800f73e:	462a      	mov	r2, r5
 800f740:	9009      	str	r0, [sp, #36]	@ 0x24
 800f742:	4621      	mov	r1, r4
 800f744:	4658      	mov	r0, fp
 800f746:	f000 fbbb 	bl	800fec0 <__mdiff>
 800f74a:	68c2      	ldr	r2, [r0, #12]
 800f74c:	4606      	mov	r6, r0
 800f74e:	bb02      	cbnz	r2, 800f792 <_dtoa_r+0xa22>
 800f750:	4601      	mov	r1, r0
 800f752:	4648      	mov	r0, r9
 800f754:	f000 fb98 	bl	800fe88 <__mcmp>
 800f758:	4602      	mov	r2, r0
 800f75a:	4631      	mov	r1, r6
 800f75c:	4658      	mov	r0, fp
 800f75e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f760:	f000 f958 	bl	800fa14 <_Bfree>
 800f764:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f766:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f768:	9e07      	ldr	r6, [sp, #28]
 800f76a:	ea43 0102 	orr.w	r1, r3, r2
 800f76e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f770:	4319      	orrs	r1, r3
 800f772:	d110      	bne.n	800f796 <_dtoa_r+0xa26>
 800f774:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f778:	d029      	beq.n	800f7ce <_dtoa_r+0xa5e>
 800f77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	dd02      	ble.n	800f786 <_dtoa_r+0xa16>
 800f780:	9b08      	ldr	r3, [sp, #32]
 800f782:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f786:	9b02      	ldr	r3, [sp, #8]
 800f788:	f883 8000 	strb.w	r8, [r3]
 800f78c:	e63b      	b.n	800f406 <_dtoa_r+0x696>
 800f78e:	4628      	mov	r0, r5
 800f790:	e7bb      	b.n	800f70a <_dtoa_r+0x99a>
 800f792:	2201      	movs	r2, #1
 800f794:	e7e1      	b.n	800f75a <_dtoa_r+0x9ea>
 800f796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f798:	2b00      	cmp	r3, #0
 800f79a:	db04      	blt.n	800f7a6 <_dtoa_r+0xa36>
 800f79c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800f79e:	430b      	orrs	r3, r1
 800f7a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7a2:	430b      	orrs	r3, r1
 800f7a4:	d120      	bne.n	800f7e8 <_dtoa_r+0xa78>
 800f7a6:	2a00      	cmp	r2, #0
 800f7a8:	dded      	ble.n	800f786 <_dtoa_r+0xa16>
 800f7aa:	4649      	mov	r1, r9
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	4658      	mov	r0, fp
 800f7b0:	f000 fafe 	bl	800fdb0 <__lshift>
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	4681      	mov	r9, r0
 800f7b8:	f000 fb66 	bl	800fe88 <__mcmp>
 800f7bc:	2800      	cmp	r0, #0
 800f7be:	dc03      	bgt.n	800f7c8 <_dtoa_r+0xa58>
 800f7c0:	d1e1      	bne.n	800f786 <_dtoa_r+0xa16>
 800f7c2:	f018 0f01 	tst.w	r8, #1
 800f7c6:	d0de      	beq.n	800f786 <_dtoa_r+0xa16>
 800f7c8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f7cc:	d1d8      	bne.n	800f780 <_dtoa_r+0xa10>
 800f7ce:	9a02      	ldr	r2, [sp, #8]
 800f7d0:	2339      	movs	r3, #57	@ 0x39
 800f7d2:	7013      	strb	r3, [r2, #0]
 800f7d4:	4633      	mov	r3, r6
 800f7d6:	461e      	mov	r6, r3
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f7de:	2a39      	cmp	r2, #57	@ 0x39
 800f7e0:	d052      	beq.n	800f888 <_dtoa_r+0xb18>
 800f7e2:	3201      	adds	r2, #1
 800f7e4:	701a      	strb	r2, [r3, #0]
 800f7e6:	e60e      	b.n	800f406 <_dtoa_r+0x696>
 800f7e8:	2a00      	cmp	r2, #0
 800f7ea:	dd07      	ble.n	800f7fc <_dtoa_r+0xa8c>
 800f7ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f7f0:	d0ed      	beq.n	800f7ce <_dtoa_r+0xa5e>
 800f7f2:	9a02      	ldr	r2, [sp, #8]
 800f7f4:	f108 0301 	add.w	r3, r8, #1
 800f7f8:	7013      	strb	r3, [r2, #0]
 800f7fa:	e604      	b.n	800f406 <_dtoa_r+0x696>
 800f7fc:	9b07      	ldr	r3, [sp, #28]
 800f7fe:	9a07      	ldr	r2, [sp, #28]
 800f800:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f806:	4293      	cmp	r3, r2
 800f808:	d028      	beq.n	800f85c <_dtoa_r+0xaec>
 800f80a:	4649      	mov	r1, r9
 800f80c:	2300      	movs	r3, #0
 800f80e:	220a      	movs	r2, #10
 800f810:	4658      	mov	r0, fp
 800f812:	f000 f921 	bl	800fa58 <__multadd>
 800f816:	42af      	cmp	r7, r5
 800f818:	4681      	mov	r9, r0
 800f81a:	f04f 0300 	mov.w	r3, #0
 800f81e:	f04f 020a 	mov.w	r2, #10
 800f822:	4639      	mov	r1, r7
 800f824:	4658      	mov	r0, fp
 800f826:	d107      	bne.n	800f838 <_dtoa_r+0xac8>
 800f828:	f000 f916 	bl	800fa58 <__multadd>
 800f82c:	4607      	mov	r7, r0
 800f82e:	4605      	mov	r5, r0
 800f830:	9b07      	ldr	r3, [sp, #28]
 800f832:	3301      	adds	r3, #1
 800f834:	9307      	str	r3, [sp, #28]
 800f836:	e774      	b.n	800f722 <_dtoa_r+0x9b2>
 800f838:	f000 f90e 	bl	800fa58 <__multadd>
 800f83c:	4629      	mov	r1, r5
 800f83e:	4607      	mov	r7, r0
 800f840:	2300      	movs	r3, #0
 800f842:	220a      	movs	r2, #10
 800f844:	4658      	mov	r0, fp
 800f846:	f000 f907 	bl	800fa58 <__multadd>
 800f84a:	4605      	mov	r5, r0
 800f84c:	e7f0      	b.n	800f830 <_dtoa_r+0xac0>
 800f84e:	9b08      	ldr	r3, [sp, #32]
 800f850:	2b00      	cmp	r3, #0
 800f852:	bfcc      	ite	gt
 800f854:	461e      	movgt	r6, r3
 800f856:	2601      	movle	r6, #1
 800f858:	4456      	add	r6, sl
 800f85a:	2700      	movs	r7, #0
 800f85c:	4649      	mov	r1, r9
 800f85e:	2201      	movs	r2, #1
 800f860:	4658      	mov	r0, fp
 800f862:	f000 faa5 	bl	800fdb0 <__lshift>
 800f866:	4621      	mov	r1, r4
 800f868:	4681      	mov	r9, r0
 800f86a:	f000 fb0d 	bl	800fe88 <__mcmp>
 800f86e:	2800      	cmp	r0, #0
 800f870:	dcb0      	bgt.n	800f7d4 <_dtoa_r+0xa64>
 800f872:	d102      	bne.n	800f87a <_dtoa_r+0xb0a>
 800f874:	f018 0f01 	tst.w	r8, #1
 800f878:	d1ac      	bne.n	800f7d4 <_dtoa_r+0xa64>
 800f87a:	4633      	mov	r3, r6
 800f87c:	461e      	mov	r6, r3
 800f87e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f882:	2a30      	cmp	r2, #48	@ 0x30
 800f884:	d0fa      	beq.n	800f87c <_dtoa_r+0xb0c>
 800f886:	e5be      	b.n	800f406 <_dtoa_r+0x696>
 800f888:	459a      	cmp	sl, r3
 800f88a:	d1a4      	bne.n	800f7d6 <_dtoa_r+0xa66>
 800f88c:	9b04      	ldr	r3, [sp, #16]
 800f88e:	3301      	adds	r3, #1
 800f890:	9304      	str	r3, [sp, #16]
 800f892:	2331      	movs	r3, #49	@ 0x31
 800f894:	f88a 3000 	strb.w	r3, [sl]
 800f898:	e5b5      	b.n	800f406 <_dtoa_r+0x696>
 800f89a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f89c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f8fc <_dtoa_r+0xb8c>
 800f8a0:	b11b      	cbz	r3, 800f8aa <_dtoa_r+0xb3a>
 800f8a2:	f10a 0308 	add.w	r3, sl, #8
 800f8a6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f8a8:	6013      	str	r3, [r2, #0]
 800f8aa:	4650      	mov	r0, sl
 800f8ac:	b017      	add	sp, #92	@ 0x5c
 800f8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f8b4:	2b01      	cmp	r3, #1
 800f8b6:	f77f ae3d 	ble.w	800f534 <_dtoa_r+0x7c4>
 800f8ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f8bc:	930a      	str	r3, [sp, #40]	@ 0x28
 800f8be:	2001      	movs	r0, #1
 800f8c0:	e65b      	b.n	800f57a <_dtoa_r+0x80a>
 800f8c2:	9b08      	ldr	r3, [sp, #32]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f77f aed6 	ble.w	800f676 <_dtoa_r+0x906>
 800f8ca:	4656      	mov	r6, sl
 800f8cc:	4621      	mov	r1, r4
 800f8ce:	4648      	mov	r0, r9
 800f8d0:	f7ff f9c3 	bl	800ec5a <quorem>
 800f8d4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f8d8:	f806 8b01 	strb.w	r8, [r6], #1
 800f8dc:	9b08      	ldr	r3, [sp, #32]
 800f8de:	eba6 020a 	sub.w	r2, r6, sl
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	ddb3      	ble.n	800f84e <_dtoa_r+0xade>
 800f8e6:	4649      	mov	r1, r9
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	220a      	movs	r2, #10
 800f8ec:	4658      	mov	r0, fp
 800f8ee:	f000 f8b3 	bl	800fa58 <__multadd>
 800f8f2:	4681      	mov	r9, r0
 800f8f4:	e7ea      	b.n	800f8cc <_dtoa_r+0xb5c>
 800f8f6:	bf00      	nop
 800f8f8:	080122e5 	.word	0x080122e5
 800f8fc:	08012269 	.word	0x08012269

0800f900 <_free_r>:
 800f900:	b538      	push	{r3, r4, r5, lr}
 800f902:	4605      	mov	r5, r0
 800f904:	2900      	cmp	r1, #0
 800f906:	d041      	beq.n	800f98c <_free_r+0x8c>
 800f908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f90c:	1f0c      	subs	r4, r1, #4
 800f90e:	2b00      	cmp	r3, #0
 800f910:	bfb8      	it	lt
 800f912:	18e4      	addlt	r4, r4, r3
 800f914:	f7fe fae4 	bl	800dee0 <__malloc_lock>
 800f918:	4a1d      	ldr	r2, [pc, #116]	@ (800f990 <_free_r+0x90>)
 800f91a:	6813      	ldr	r3, [r2, #0]
 800f91c:	b933      	cbnz	r3, 800f92c <_free_r+0x2c>
 800f91e:	6063      	str	r3, [r4, #4]
 800f920:	6014      	str	r4, [r2, #0]
 800f922:	4628      	mov	r0, r5
 800f924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f928:	f7fe bae0 	b.w	800deec <__malloc_unlock>
 800f92c:	42a3      	cmp	r3, r4
 800f92e:	d908      	bls.n	800f942 <_free_r+0x42>
 800f930:	6820      	ldr	r0, [r4, #0]
 800f932:	1821      	adds	r1, r4, r0
 800f934:	428b      	cmp	r3, r1
 800f936:	bf01      	itttt	eq
 800f938:	6819      	ldreq	r1, [r3, #0]
 800f93a:	685b      	ldreq	r3, [r3, #4]
 800f93c:	1809      	addeq	r1, r1, r0
 800f93e:	6021      	streq	r1, [r4, #0]
 800f940:	e7ed      	b.n	800f91e <_free_r+0x1e>
 800f942:	461a      	mov	r2, r3
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	b10b      	cbz	r3, 800f94c <_free_r+0x4c>
 800f948:	42a3      	cmp	r3, r4
 800f94a:	d9fa      	bls.n	800f942 <_free_r+0x42>
 800f94c:	6811      	ldr	r1, [r2, #0]
 800f94e:	1850      	adds	r0, r2, r1
 800f950:	42a0      	cmp	r0, r4
 800f952:	d10b      	bne.n	800f96c <_free_r+0x6c>
 800f954:	6820      	ldr	r0, [r4, #0]
 800f956:	4401      	add	r1, r0
 800f958:	1850      	adds	r0, r2, r1
 800f95a:	4283      	cmp	r3, r0
 800f95c:	6011      	str	r1, [r2, #0]
 800f95e:	d1e0      	bne.n	800f922 <_free_r+0x22>
 800f960:	6818      	ldr	r0, [r3, #0]
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	6053      	str	r3, [r2, #4]
 800f966:	4408      	add	r0, r1
 800f968:	6010      	str	r0, [r2, #0]
 800f96a:	e7da      	b.n	800f922 <_free_r+0x22>
 800f96c:	d902      	bls.n	800f974 <_free_r+0x74>
 800f96e:	230c      	movs	r3, #12
 800f970:	602b      	str	r3, [r5, #0]
 800f972:	e7d6      	b.n	800f922 <_free_r+0x22>
 800f974:	6820      	ldr	r0, [r4, #0]
 800f976:	1821      	adds	r1, r4, r0
 800f978:	428b      	cmp	r3, r1
 800f97a:	bf04      	itt	eq
 800f97c:	6819      	ldreq	r1, [r3, #0]
 800f97e:	685b      	ldreq	r3, [r3, #4]
 800f980:	6063      	str	r3, [r4, #4]
 800f982:	bf04      	itt	eq
 800f984:	1809      	addeq	r1, r1, r0
 800f986:	6021      	streq	r1, [r4, #0]
 800f988:	6054      	str	r4, [r2, #4]
 800f98a:	e7ca      	b.n	800f922 <_free_r+0x22>
 800f98c:	bd38      	pop	{r3, r4, r5, pc}
 800f98e:	bf00      	nop
 800f990:	20000f78 	.word	0x20000f78

0800f994 <_Balloc>:
 800f994:	b570      	push	{r4, r5, r6, lr}
 800f996:	69c6      	ldr	r6, [r0, #28]
 800f998:	4604      	mov	r4, r0
 800f99a:	460d      	mov	r5, r1
 800f99c:	b976      	cbnz	r6, 800f9bc <_Balloc+0x28>
 800f99e:	2010      	movs	r0, #16
 800f9a0:	f7fe f9ec 	bl	800dd7c <malloc>
 800f9a4:	4602      	mov	r2, r0
 800f9a6:	61e0      	str	r0, [r4, #28]
 800f9a8:	b920      	cbnz	r0, 800f9b4 <_Balloc+0x20>
 800f9aa:	4b18      	ldr	r3, [pc, #96]	@ (800fa0c <_Balloc+0x78>)
 800f9ac:	4818      	ldr	r0, [pc, #96]	@ (800fa10 <_Balloc+0x7c>)
 800f9ae:	216b      	movs	r1, #107	@ 0x6b
 800f9b0:	f000 ff5e 	bl	8010870 <__assert_func>
 800f9b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f9b8:	6006      	str	r6, [r0, #0]
 800f9ba:	60c6      	str	r6, [r0, #12]
 800f9bc:	69e6      	ldr	r6, [r4, #28]
 800f9be:	68f3      	ldr	r3, [r6, #12]
 800f9c0:	b183      	cbz	r3, 800f9e4 <_Balloc+0x50>
 800f9c2:	69e3      	ldr	r3, [r4, #28]
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f9ca:	b9b8      	cbnz	r0, 800f9fc <_Balloc+0x68>
 800f9cc:	2101      	movs	r1, #1
 800f9ce:	fa01 f605 	lsl.w	r6, r1, r5
 800f9d2:	1d72      	adds	r2, r6, #5
 800f9d4:	0092      	lsls	r2, r2, #2
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	f000 ff68 	bl	80108ac <_calloc_r>
 800f9dc:	b160      	cbz	r0, 800f9f8 <_Balloc+0x64>
 800f9de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f9e2:	e00e      	b.n	800fa02 <_Balloc+0x6e>
 800f9e4:	2221      	movs	r2, #33	@ 0x21
 800f9e6:	2104      	movs	r1, #4
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f000 ff5f 	bl	80108ac <_calloc_r>
 800f9ee:	69e3      	ldr	r3, [r4, #28]
 800f9f0:	60f0      	str	r0, [r6, #12]
 800f9f2:	68db      	ldr	r3, [r3, #12]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d1e4      	bne.n	800f9c2 <_Balloc+0x2e>
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	bd70      	pop	{r4, r5, r6, pc}
 800f9fc:	6802      	ldr	r2, [r0, #0]
 800f9fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fa02:	2300      	movs	r3, #0
 800fa04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa08:	e7f7      	b.n	800f9fa <_Balloc+0x66>
 800fa0a:	bf00      	nop
 800fa0c:	08012276 	.word	0x08012276
 800fa10:	080122f6 	.word	0x080122f6

0800fa14 <_Bfree>:
 800fa14:	b570      	push	{r4, r5, r6, lr}
 800fa16:	69c6      	ldr	r6, [r0, #28]
 800fa18:	4605      	mov	r5, r0
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	b976      	cbnz	r6, 800fa3c <_Bfree+0x28>
 800fa1e:	2010      	movs	r0, #16
 800fa20:	f7fe f9ac 	bl	800dd7c <malloc>
 800fa24:	4602      	mov	r2, r0
 800fa26:	61e8      	str	r0, [r5, #28]
 800fa28:	b920      	cbnz	r0, 800fa34 <_Bfree+0x20>
 800fa2a:	4b09      	ldr	r3, [pc, #36]	@ (800fa50 <_Bfree+0x3c>)
 800fa2c:	4809      	ldr	r0, [pc, #36]	@ (800fa54 <_Bfree+0x40>)
 800fa2e:	218f      	movs	r1, #143	@ 0x8f
 800fa30:	f000 ff1e 	bl	8010870 <__assert_func>
 800fa34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fa38:	6006      	str	r6, [r0, #0]
 800fa3a:	60c6      	str	r6, [r0, #12]
 800fa3c:	b13c      	cbz	r4, 800fa4e <_Bfree+0x3a>
 800fa3e:	69eb      	ldr	r3, [r5, #28]
 800fa40:	6862      	ldr	r2, [r4, #4]
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fa48:	6021      	str	r1, [r4, #0]
 800fa4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fa4e:	bd70      	pop	{r4, r5, r6, pc}
 800fa50:	08012276 	.word	0x08012276
 800fa54:	080122f6 	.word	0x080122f6

0800fa58 <__multadd>:
 800fa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa5c:	690d      	ldr	r5, [r1, #16]
 800fa5e:	4607      	mov	r7, r0
 800fa60:	460c      	mov	r4, r1
 800fa62:	461e      	mov	r6, r3
 800fa64:	f101 0c14 	add.w	ip, r1, #20
 800fa68:	2000      	movs	r0, #0
 800fa6a:	f8dc 3000 	ldr.w	r3, [ip]
 800fa6e:	b299      	uxth	r1, r3
 800fa70:	fb02 6101 	mla	r1, r2, r1, r6
 800fa74:	0c1e      	lsrs	r6, r3, #16
 800fa76:	0c0b      	lsrs	r3, r1, #16
 800fa78:	fb02 3306 	mla	r3, r2, r6, r3
 800fa7c:	b289      	uxth	r1, r1
 800fa7e:	3001      	adds	r0, #1
 800fa80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fa84:	4285      	cmp	r5, r0
 800fa86:	f84c 1b04 	str.w	r1, [ip], #4
 800fa8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fa8e:	dcec      	bgt.n	800fa6a <__multadd+0x12>
 800fa90:	b30e      	cbz	r6, 800fad6 <__multadd+0x7e>
 800fa92:	68a3      	ldr	r3, [r4, #8]
 800fa94:	42ab      	cmp	r3, r5
 800fa96:	dc19      	bgt.n	800facc <__multadd+0x74>
 800fa98:	6861      	ldr	r1, [r4, #4]
 800fa9a:	4638      	mov	r0, r7
 800fa9c:	3101      	adds	r1, #1
 800fa9e:	f7ff ff79 	bl	800f994 <_Balloc>
 800faa2:	4680      	mov	r8, r0
 800faa4:	b928      	cbnz	r0, 800fab2 <__multadd+0x5a>
 800faa6:	4602      	mov	r2, r0
 800faa8:	4b0c      	ldr	r3, [pc, #48]	@ (800fadc <__multadd+0x84>)
 800faaa:	480d      	ldr	r0, [pc, #52]	@ (800fae0 <__multadd+0x88>)
 800faac:	21ba      	movs	r1, #186	@ 0xba
 800faae:	f000 fedf 	bl	8010870 <__assert_func>
 800fab2:	6922      	ldr	r2, [r4, #16]
 800fab4:	3202      	adds	r2, #2
 800fab6:	f104 010c 	add.w	r1, r4, #12
 800faba:	0092      	lsls	r2, r2, #2
 800fabc:	300c      	adds	r0, #12
 800fabe:	f7ff f8be 	bl	800ec3e <memcpy>
 800fac2:	4621      	mov	r1, r4
 800fac4:	4638      	mov	r0, r7
 800fac6:	f7ff ffa5 	bl	800fa14 <_Bfree>
 800faca:	4644      	mov	r4, r8
 800facc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fad0:	3501      	adds	r5, #1
 800fad2:	615e      	str	r6, [r3, #20]
 800fad4:	6125      	str	r5, [r4, #16]
 800fad6:	4620      	mov	r0, r4
 800fad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fadc:	080122e5 	.word	0x080122e5
 800fae0:	080122f6 	.word	0x080122f6

0800fae4 <__hi0bits>:
 800fae4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fae8:	4603      	mov	r3, r0
 800faea:	bf36      	itet	cc
 800faec:	0403      	lslcc	r3, r0, #16
 800faee:	2000      	movcs	r0, #0
 800faf0:	2010      	movcc	r0, #16
 800faf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800faf6:	bf3c      	itt	cc
 800faf8:	021b      	lslcc	r3, r3, #8
 800fafa:	3008      	addcc	r0, #8
 800fafc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fb00:	bf3c      	itt	cc
 800fb02:	011b      	lslcc	r3, r3, #4
 800fb04:	3004      	addcc	r0, #4
 800fb06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb0a:	bf3c      	itt	cc
 800fb0c:	009b      	lslcc	r3, r3, #2
 800fb0e:	3002      	addcc	r0, #2
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	db05      	blt.n	800fb20 <__hi0bits+0x3c>
 800fb14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fb18:	f100 0001 	add.w	r0, r0, #1
 800fb1c:	bf08      	it	eq
 800fb1e:	2020      	moveq	r0, #32
 800fb20:	4770      	bx	lr

0800fb22 <__lo0bits>:
 800fb22:	6803      	ldr	r3, [r0, #0]
 800fb24:	4602      	mov	r2, r0
 800fb26:	f013 0007 	ands.w	r0, r3, #7
 800fb2a:	d00b      	beq.n	800fb44 <__lo0bits+0x22>
 800fb2c:	07d9      	lsls	r1, r3, #31
 800fb2e:	d421      	bmi.n	800fb74 <__lo0bits+0x52>
 800fb30:	0798      	lsls	r0, r3, #30
 800fb32:	bf49      	itett	mi
 800fb34:	085b      	lsrmi	r3, r3, #1
 800fb36:	089b      	lsrpl	r3, r3, #2
 800fb38:	2001      	movmi	r0, #1
 800fb3a:	6013      	strmi	r3, [r2, #0]
 800fb3c:	bf5c      	itt	pl
 800fb3e:	6013      	strpl	r3, [r2, #0]
 800fb40:	2002      	movpl	r0, #2
 800fb42:	4770      	bx	lr
 800fb44:	b299      	uxth	r1, r3
 800fb46:	b909      	cbnz	r1, 800fb4c <__lo0bits+0x2a>
 800fb48:	0c1b      	lsrs	r3, r3, #16
 800fb4a:	2010      	movs	r0, #16
 800fb4c:	b2d9      	uxtb	r1, r3
 800fb4e:	b909      	cbnz	r1, 800fb54 <__lo0bits+0x32>
 800fb50:	3008      	adds	r0, #8
 800fb52:	0a1b      	lsrs	r3, r3, #8
 800fb54:	0719      	lsls	r1, r3, #28
 800fb56:	bf04      	itt	eq
 800fb58:	091b      	lsreq	r3, r3, #4
 800fb5a:	3004      	addeq	r0, #4
 800fb5c:	0799      	lsls	r1, r3, #30
 800fb5e:	bf04      	itt	eq
 800fb60:	089b      	lsreq	r3, r3, #2
 800fb62:	3002      	addeq	r0, #2
 800fb64:	07d9      	lsls	r1, r3, #31
 800fb66:	d403      	bmi.n	800fb70 <__lo0bits+0x4e>
 800fb68:	085b      	lsrs	r3, r3, #1
 800fb6a:	f100 0001 	add.w	r0, r0, #1
 800fb6e:	d003      	beq.n	800fb78 <__lo0bits+0x56>
 800fb70:	6013      	str	r3, [r2, #0]
 800fb72:	4770      	bx	lr
 800fb74:	2000      	movs	r0, #0
 800fb76:	4770      	bx	lr
 800fb78:	2020      	movs	r0, #32
 800fb7a:	4770      	bx	lr

0800fb7c <__i2b>:
 800fb7c:	b510      	push	{r4, lr}
 800fb7e:	460c      	mov	r4, r1
 800fb80:	2101      	movs	r1, #1
 800fb82:	f7ff ff07 	bl	800f994 <_Balloc>
 800fb86:	4602      	mov	r2, r0
 800fb88:	b928      	cbnz	r0, 800fb96 <__i2b+0x1a>
 800fb8a:	4b05      	ldr	r3, [pc, #20]	@ (800fba0 <__i2b+0x24>)
 800fb8c:	4805      	ldr	r0, [pc, #20]	@ (800fba4 <__i2b+0x28>)
 800fb8e:	f240 1145 	movw	r1, #325	@ 0x145
 800fb92:	f000 fe6d 	bl	8010870 <__assert_func>
 800fb96:	2301      	movs	r3, #1
 800fb98:	6144      	str	r4, [r0, #20]
 800fb9a:	6103      	str	r3, [r0, #16]
 800fb9c:	bd10      	pop	{r4, pc}
 800fb9e:	bf00      	nop
 800fba0:	080122e5 	.word	0x080122e5
 800fba4:	080122f6 	.word	0x080122f6

0800fba8 <__multiply>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	4614      	mov	r4, r2
 800fbae:	690a      	ldr	r2, [r1, #16]
 800fbb0:	6923      	ldr	r3, [r4, #16]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	bfa8      	it	ge
 800fbb6:	4623      	movge	r3, r4
 800fbb8:	460f      	mov	r7, r1
 800fbba:	bfa4      	itt	ge
 800fbbc:	460c      	movge	r4, r1
 800fbbe:	461f      	movge	r7, r3
 800fbc0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fbc4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fbc8:	68a3      	ldr	r3, [r4, #8]
 800fbca:	6861      	ldr	r1, [r4, #4]
 800fbcc:	eb0a 0609 	add.w	r6, sl, r9
 800fbd0:	42b3      	cmp	r3, r6
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	bfb8      	it	lt
 800fbd6:	3101      	addlt	r1, #1
 800fbd8:	f7ff fedc 	bl	800f994 <_Balloc>
 800fbdc:	b930      	cbnz	r0, 800fbec <__multiply+0x44>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	4b44      	ldr	r3, [pc, #272]	@ (800fcf4 <__multiply+0x14c>)
 800fbe2:	4845      	ldr	r0, [pc, #276]	@ (800fcf8 <__multiply+0x150>)
 800fbe4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fbe8:	f000 fe42 	bl	8010870 <__assert_func>
 800fbec:	f100 0514 	add.w	r5, r0, #20
 800fbf0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fbf4:	462b      	mov	r3, r5
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	4543      	cmp	r3, r8
 800fbfa:	d321      	bcc.n	800fc40 <__multiply+0x98>
 800fbfc:	f107 0114 	add.w	r1, r7, #20
 800fc00:	f104 0214 	add.w	r2, r4, #20
 800fc04:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fc08:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fc0c:	9302      	str	r3, [sp, #8]
 800fc0e:	1b13      	subs	r3, r2, r4
 800fc10:	3b15      	subs	r3, #21
 800fc12:	f023 0303 	bic.w	r3, r3, #3
 800fc16:	3304      	adds	r3, #4
 800fc18:	f104 0715 	add.w	r7, r4, #21
 800fc1c:	42ba      	cmp	r2, r7
 800fc1e:	bf38      	it	cc
 800fc20:	2304      	movcc	r3, #4
 800fc22:	9301      	str	r3, [sp, #4]
 800fc24:	9b02      	ldr	r3, [sp, #8]
 800fc26:	9103      	str	r1, [sp, #12]
 800fc28:	428b      	cmp	r3, r1
 800fc2a:	d80c      	bhi.n	800fc46 <__multiply+0x9e>
 800fc2c:	2e00      	cmp	r6, #0
 800fc2e:	dd03      	ble.n	800fc38 <__multiply+0x90>
 800fc30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d05a      	beq.n	800fcee <__multiply+0x146>
 800fc38:	6106      	str	r6, [r0, #16]
 800fc3a:	b005      	add	sp, #20
 800fc3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc40:	f843 2b04 	str.w	r2, [r3], #4
 800fc44:	e7d8      	b.n	800fbf8 <__multiply+0x50>
 800fc46:	f8b1 a000 	ldrh.w	sl, [r1]
 800fc4a:	f1ba 0f00 	cmp.w	sl, #0
 800fc4e:	d023      	beq.n	800fc98 <__multiply+0xf0>
 800fc50:	f104 0e14 	add.w	lr, r4, #20
 800fc54:	46a9      	mov	r9, r5
 800fc56:	f04f 0c00 	mov.w	ip, #0
 800fc5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fc5e:	f8d9 3000 	ldr.w	r3, [r9]
 800fc62:	fa1f fb87 	uxth.w	fp, r7
 800fc66:	b29b      	uxth	r3, r3
 800fc68:	fb0a 330b 	mla	r3, sl, fp, r3
 800fc6c:	4463      	add	r3, ip
 800fc6e:	f8d9 c000 	ldr.w	ip, [r9]
 800fc72:	0c3f      	lsrs	r7, r7, #16
 800fc74:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800fc78:	fb0a c707 	mla	r7, sl, r7, ip
 800fc7c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc86:	4572      	cmp	r2, lr
 800fc88:	f849 3b04 	str.w	r3, [r9], #4
 800fc8c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc90:	d8e3      	bhi.n	800fc5a <__multiply+0xb2>
 800fc92:	9b01      	ldr	r3, [sp, #4]
 800fc94:	f845 c003 	str.w	ip, [r5, r3]
 800fc98:	9b03      	ldr	r3, [sp, #12]
 800fc9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fc9e:	3104      	adds	r1, #4
 800fca0:	f1b9 0f00 	cmp.w	r9, #0
 800fca4:	d021      	beq.n	800fcea <__multiply+0x142>
 800fca6:	682b      	ldr	r3, [r5, #0]
 800fca8:	f104 0c14 	add.w	ip, r4, #20
 800fcac:	46ae      	mov	lr, r5
 800fcae:	f04f 0a00 	mov.w	sl, #0
 800fcb2:	f8bc b000 	ldrh.w	fp, [ip]
 800fcb6:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fcba:	fb09 770b 	mla	r7, r9, fp, r7
 800fcbe:	4457      	add	r7, sl
 800fcc0:	b29b      	uxth	r3, r3
 800fcc2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fcc6:	f84e 3b04 	str.w	r3, [lr], #4
 800fcca:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fcce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fcd2:	f8be 3000 	ldrh.w	r3, [lr]
 800fcd6:	fb09 330a 	mla	r3, r9, sl, r3
 800fcda:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fcde:	4562      	cmp	r2, ip
 800fce0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fce4:	d8e5      	bhi.n	800fcb2 <__multiply+0x10a>
 800fce6:	9f01      	ldr	r7, [sp, #4]
 800fce8:	51eb      	str	r3, [r5, r7]
 800fcea:	3504      	adds	r5, #4
 800fcec:	e79a      	b.n	800fc24 <__multiply+0x7c>
 800fcee:	3e01      	subs	r6, #1
 800fcf0:	e79c      	b.n	800fc2c <__multiply+0x84>
 800fcf2:	bf00      	nop
 800fcf4:	080122e5 	.word	0x080122e5
 800fcf8:	080122f6 	.word	0x080122f6

0800fcfc <__pow5mult>:
 800fcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd00:	4615      	mov	r5, r2
 800fd02:	f012 0203 	ands.w	r2, r2, #3
 800fd06:	4607      	mov	r7, r0
 800fd08:	460e      	mov	r6, r1
 800fd0a:	d007      	beq.n	800fd1c <__pow5mult+0x20>
 800fd0c:	4c25      	ldr	r4, [pc, #148]	@ (800fda4 <__pow5mult+0xa8>)
 800fd0e:	3a01      	subs	r2, #1
 800fd10:	2300      	movs	r3, #0
 800fd12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd16:	f7ff fe9f 	bl	800fa58 <__multadd>
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	10ad      	asrs	r5, r5, #2
 800fd1e:	d03d      	beq.n	800fd9c <__pow5mult+0xa0>
 800fd20:	69fc      	ldr	r4, [r7, #28]
 800fd22:	b97c      	cbnz	r4, 800fd44 <__pow5mult+0x48>
 800fd24:	2010      	movs	r0, #16
 800fd26:	f7fe f829 	bl	800dd7c <malloc>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	61f8      	str	r0, [r7, #28]
 800fd2e:	b928      	cbnz	r0, 800fd3c <__pow5mult+0x40>
 800fd30:	4b1d      	ldr	r3, [pc, #116]	@ (800fda8 <__pow5mult+0xac>)
 800fd32:	481e      	ldr	r0, [pc, #120]	@ (800fdac <__pow5mult+0xb0>)
 800fd34:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fd38:	f000 fd9a 	bl	8010870 <__assert_func>
 800fd3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd40:	6004      	str	r4, [r0, #0]
 800fd42:	60c4      	str	r4, [r0, #12]
 800fd44:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fd48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd4c:	b94c      	cbnz	r4, 800fd62 <__pow5mult+0x66>
 800fd4e:	f240 2171 	movw	r1, #625	@ 0x271
 800fd52:	4638      	mov	r0, r7
 800fd54:	f7ff ff12 	bl	800fb7c <__i2b>
 800fd58:	2300      	movs	r3, #0
 800fd5a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd5e:	4604      	mov	r4, r0
 800fd60:	6003      	str	r3, [r0, #0]
 800fd62:	f04f 0900 	mov.w	r9, #0
 800fd66:	07eb      	lsls	r3, r5, #31
 800fd68:	d50a      	bpl.n	800fd80 <__pow5mult+0x84>
 800fd6a:	4631      	mov	r1, r6
 800fd6c:	4622      	mov	r2, r4
 800fd6e:	4638      	mov	r0, r7
 800fd70:	f7ff ff1a 	bl	800fba8 <__multiply>
 800fd74:	4631      	mov	r1, r6
 800fd76:	4680      	mov	r8, r0
 800fd78:	4638      	mov	r0, r7
 800fd7a:	f7ff fe4b 	bl	800fa14 <_Bfree>
 800fd7e:	4646      	mov	r6, r8
 800fd80:	106d      	asrs	r5, r5, #1
 800fd82:	d00b      	beq.n	800fd9c <__pow5mult+0xa0>
 800fd84:	6820      	ldr	r0, [r4, #0]
 800fd86:	b938      	cbnz	r0, 800fd98 <__pow5mult+0x9c>
 800fd88:	4622      	mov	r2, r4
 800fd8a:	4621      	mov	r1, r4
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	f7ff ff0b 	bl	800fba8 <__multiply>
 800fd92:	6020      	str	r0, [r4, #0]
 800fd94:	f8c0 9000 	str.w	r9, [r0]
 800fd98:	4604      	mov	r4, r0
 800fd9a:	e7e4      	b.n	800fd66 <__pow5mult+0x6a>
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fda2:	bf00      	nop
 800fda4:	08012350 	.word	0x08012350
 800fda8:	08012276 	.word	0x08012276
 800fdac:	080122f6 	.word	0x080122f6

0800fdb0 <__lshift>:
 800fdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb4:	460c      	mov	r4, r1
 800fdb6:	6849      	ldr	r1, [r1, #4]
 800fdb8:	6923      	ldr	r3, [r4, #16]
 800fdba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fdbe:	68a3      	ldr	r3, [r4, #8]
 800fdc0:	4607      	mov	r7, r0
 800fdc2:	4691      	mov	r9, r2
 800fdc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fdc8:	f108 0601 	add.w	r6, r8, #1
 800fdcc:	42b3      	cmp	r3, r6
 800fdce:	db0b      	blt.n	800fde8 <__lshift+0x38>
 800fdd0:	4638      	mov	r0, r7
 800fdd2:	f7ff fddf 	bl	800f994 <_Balloc>
 800fdd6:	4605      	mov	r5, r0
 800fdd8:	b948      	cbnz	r0, 800fdee <__lshift+0x3e>
 800fdda:	4602      	mov	r2, r0
 800fddc:	4b28      	ldr	r3, [pc, #160]	@ (800fe80 <__lshift+0xd0>)
 800fdde:	4829      	ldr	r0, [pc, #164]	@ (800fe84 <__lshift+0xd4>)
 800fde0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fde4:	f000 fd44 	bl	8010870 <__assert_func>
 800fde8:	3101      	adds	r1, #1
 800fdea:	005b      	lsls	r3, r3, #1
 800fdec:	e7ee      	b.n	800fdcc <__lshift+0x1c>
 800fdee:	2300      	movs	r3, #0
 800fdf0:	f100 0114 	add.w	r1, r0, #20
 800fdf4:	f100 0210 	add.w	r2, r0, #16
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	4553      	cmp	r3, sl
 800fdfc:	db33      	blt.n	800fe66 <__lshift+0xb6>
 800fdfe:	6920      	ldr	r0, [r4, #16]
 800fe00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fe04:	f104 0314 	add.w	r3, r4, #20
 800fe08:	f019 091f 	ands.w	r9, r9, #31
 800fe0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fe10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fe14:	d02b      	beq.n	800fe6e <__lshift+0xbe>
 800fe16:	f1c9 0e20 	rsb	lr, r9, #32
 800fe1a:	468a      	mov	sl, r1
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	6818      	ldr	r0, [r3, #0]
 800fe20:	fa00 f009 	lsl.w	r0, r0, r9
 800fe24:	4310      	orrs	r0, r2
 800fe26:	f84a 0b04 	str.w	r0, [sl], #4
 800fe2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe2e:	459c      	cmp	ip, r3
 800fe30:	fa22 f20e 	lsr.w	r2, r2, lr
 800fe34:	d8f3      	bhi.n	800fe1e <__lshift+0x6e>
 800fe36:	ebac 0304 	sub.w	r3, ip, r4
 800fe3a:	3b15      	subs	r3, #21
 800fe3c:	f023 0303 	bic.w	r3, r3, #3
 800fe40:	3304      	adds	r3, #4
 800fe42:	f104 0015 	add.w	r0, r4, #21
 800fe46:	4584      	cmp	ip, r0
 800fe48:	bf38      	it	cc
 800fe4a:	2304      	movcc	r3, #4
 800fe4c:	50ca      	str	r2, [r1, r3]
 800fe4e:	b10a      	cbz	r2, 800fe54 <__lshift+0xa4>
 800fe50:	f108 0602 	add.w	r6, r8, #2
 800fe54:	3e01      	subs	r6, #1
 800fe56:	4638      	mov	r0, r7
 800fe58:	612e      	str	r6, [r5, #16]
 800fe5a:	4621      	mov	r1, r4
 800fe5c:	f7ff fdda 	bl	800fa14 <_Bfree>
 800fe60:	4628      	mov	r0, r5
 800fe62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe66:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe6a:	3301      	adds	r3, #1
 800fe6c:	e7c5      	b.n	800fdfa <__lshift+0x4a>
 800fe6e:	3904      	subs	r1, #4
 800fe70:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe74:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe78:	459c      	cmp	ip, r3
 800fe7a:	d8f9      	bhi.n	800fe70 <__lshift+0xc0>
 800fe7c:	e7ea      	b.n	800fe54 <__lshift+0xa4>
 800fe7e:	bf00      	nop
 800fe80:	080122e5 	.word	0x080122e5
 800fe84:	080122f6 	.word	0x080122f6

0800fe88 <__mcmp>:
 800fe88:	690a      	ldr	r2, [r1, #16]
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	6900      	ldr	r0, [r0, #16]
 800fe8e:	1a80      	subs	r0, r0, r2
 800fe90:	b530      	push	{r4, r5, lr}
 800fe92:	d10e      	bne.n	800feb2 <__mcmp+0x2a>
 800fe94:	3314      	adds	r3, #20
 800fe96:	3114      	adds	r1, #20
 800fe98:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe9c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fea8:	4295      	cmp	r5, r2
 800feaa:	d003      	beq.n	800feb4 <__mcmp+0x2c>
 800feac:	d205      	bcs.n	800feba <__mcmp+0x32>
 800feae:	f04f 30ff 	mov.w	r0, #4294967295
 800feb2:	bd30      	pop	{r4, r5, pc}
 800feb4:	42a3      	cmp	r3, r4
 800feb6:	d3f3      	bcc.n	800fea0 <__mcmp+0x18>
 800feb8:	e7fb      	b.n	800feb2 <__mcmp+0x2a>
 800feba:	2001      	movs	r0, #1
 800febc:	e7f9      	b.n	800feb2 <__mcmp+0x2a>
	...

0800fec0 <__mdiff>:
 800fec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fec4:	4689      	mov	r9, r1
 800fec6:	4606      	mov	r6, r0
 800fec8:	4611      	mov	r1, r2
 800feca:	4648      	mov	r0, r9
 800fecc:	4614      	mov	r4, r2
 800fece:	f7ff ffdb 	bl	800fe88 <__mcmp>
 800fed2:	1e05      	subs	r5, r0, #0
 800fed4:	d112      	bne.n	800fefc <__mdiff+0x3c>
 800fed6:	4629      	mov	r1, r5
 800fed8:	4630      	mov	r0, r6
 800feda:	f7ff fd5b 	bl	800f994 <_Balloc>
 800fede:	4602      	mov	r2, r0
 800fee0:	b928      	cbnz	r0, 800feee <__mdiff+0x2e>
 800fee2:	4b3e      	ldr	r3, [pc, #248]	@ (800ffdc <__mdiff+0x11c>)
 800fee4:	f240 2137 	movw	r1, #567	@ 0x237
 800fee8:	483d      	ldr	r0, [pc, #244]	@ (800ffe0 <__mdiff+0x120>)
 800feea:	f000 fcc1 	bl	8010870 <__assert_func>
 800feee:	2301      	movs	r3, #1
 800fef0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fef4:	4610      	mov	r0, r2
 800fef6:	b003      	add	sp, #12
 800fef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fefc:	bfbc      	itt	lt
 800fefe:	464b      	movlt	r3, r9
 800ff00:	46a1      	movlt	r9, r4
 800ff02:	4630      	mov	r0, r6
 800ff04:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ff08:	bfba      	itte	lt
 800ff0a:	461c      	movlt	r4, r3
 800ff0c:	2501      	movlt	r5, #1
 800ff0e:	2500      	movge	r5, #0
 800ff10:	f7ff fd40 	bl	800f994 <_Balloc>
 800ff14:	4602      	mov	r2, r0
 800ff16:	b918      	cbnz	r0, 800ff20 <__mdiff+0x60>
 800ff18:	4b30      	ldr	r3, [pc, #192]	@ (800ffdc <__mdiff+0x11c>)
 800ff1a:	f240 2145 	movw	r1, #581	@ 0x245
 800ff1e:	e7e3      	b.n	800fee8 <__mdiff+0x28>
 800ff20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ff24:	6926      	ldr	r6, [r4, #16]
 800ff26:	60c5      	str	r5, [r0, #12]
 800ff28:	f109 0310 	add.w	r3, r9, #16
 800ff2c:	f109 0514 	add.w	r5, r9, #20
 800ff30:	f104 0e14 	add.w	lr, r4, #20
 800ff34:	f100 0b14 	add.w	fp, r0, #20
 800ff38:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ff3c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ff40:	9301      	str	r3, [sp, #4]
 800ff42:	46d9      	mov	r9, fp
 800ff44:	f04f 0c00 	mov.w	ip, #0
 800ff48:	9b01      	ldr	r3, [sp, #4]
 800ff4a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ff4e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ff52:	9301      	str	r3, [sp, #4]
 800ff54:	b281      	uxth	r1, r0
 800ff56:	fa1f f38a 	uxth.w	r3, sl
 800ff5a:	1a5b      	subs	r3, r3, r1
 800ff5c:	0c00      	lsrs	r0, r0, #16
 800ff5e:	4463      	add	r3, ip
 800ff60:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ff64:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ff6e:	4576      	cmp	r6, lr
 800ff70:	f849 3b04 	str.w	r3, [r9], #4
 800ff74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff78:	d8e6      	bhi.n	800ff48 <__mdiff+0x88>
 800ff7a:	1b33      	subs	r3, r6, r4
 800ff7c:	3b15      	subs	r3, #21
 800ff7e:	f023 0303 	bic.w	r3, r3, #3
 800ff82:	3415      	adds	r4, #21
 800ff84:	3304      	adds	r3, #4
 800ff86:	42a6      	cmp	r6, r4
 800ff88:	bf38      	it	cc
 800ff8a:	2304      	movcc	r3, #4
 800ff8c:	441d      	add	r5, r3
 800ff8e:	445b      	add	r3, fp
 800ff90:	461e      	mov	r6, r3
 800ff92:	462c      	mov	r4, r5
 800ff94:	4544      	cmp	r4, r8
 800ff96:	d30e      	bcc.n	800ffb6 <__mdiff+0xf6>
 800ff98:	f108 0103 	add.w	r1, r8, #3
 800ff9c:	1b49      	subs	r1, r1, r5
 800ff9e:	f021 0103 	bic.w	r1, r1, #3
 800ffa2:	3d03      	subs	r5, #3
 800ffa4:	45a8      	cmp	r8, r5
 800ffa6:	bf38      	it	cc
 800ffa8:	2100      	movcc	r1, #0
 800ffaa:	440b      	add	r3, r1
 800ffac:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ffb0:	b191      	cbz	r1, 800ffd8 <__mdiff+0x118>
 800ffb2:	6117      	str	r7, [r2, #16]
 800ffb4:	e79e      	b.n	800fef4 <__mdiff+0x34>
 800ffb6:	f854 1b04 	ldr.w	r1, [r4], #4
 800ffba:	46e6      	mov	lr, ip
 800ffbc:	0c08      	lsrs	r0, r1, #16
 800ffbe:	fa1c fc81 	uxtah	ip, ip, r1
 800ffc2:	4471      	add	r1, lr
 800ffc4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ffc8:	b289      	uxth	r1, r1
 800ffca:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ffce:	f846 1b04 	str.w	r1, [r6], #4
 800ffd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ffd6:	e7dd      	b.n	800ff94 <__mdiff+0xd4>
 800ffd8:	3f01      	subs	r7, #1
 800ffda:	e7e7      	b.n	800ffac <__mdiff+0xec>
 800ffdc:	080122e5 	.word	0x080122e5
 800ffe0:	080122f6 	.word	0x080122f6

0800ffe4 <__d2b>:
 800ffe4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ffe8:	2101      	movs	r1, #1
 800ffea:	9e08      	ldr	r6, [sp, #32]
 800ffec:	4690      	mov	r8, r2
 800ffee:	4699      	mov	r9, r3
 800fff0:	f7ff fcd0 	bl	800f994 <_Balloc>
 800fff4:	4604      	mov	r4, r0
 800fff6:	b930      	cbnz	r0, 8010006 <__d2b+0x22>
 800fff8:	4602      	mov	r2, r0
 800fffa:	4b24      	ldr	r3, [pc, #144]	@ (801008c <__d2b+0xa8>)
 800fffc:	4824      	ldr	r0, [pc, #144]	@ (8010090 <__d2b+0xac>)
 800fffe:	f240 310f 	movw	r1, #783	@ 0x30f
 8010002:	f000 fc35 	bl	8010870 <__assert_func>
 8010006:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801000a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801000e:	b10d      	cbz	r5, 8010014 <__d2b+0x30>
 8010010:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010014:	9301      	str	r3, [sp, #4]
 8010016:	f1b8 0300 	subs.w	r3, r8, #0
 801001a:	d024      	beq.n	8010066 <__d2b+0x82>
 801001c:	4668      	mov	r0, sp
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	f7ff fd7f 	bl	800fb22 <__lo0bits>
 8010024:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010028:	b1d8      	cbz	r0, 8010062 <__d2b+0x7e>
 801002a:	f1c0 0320 	rsb	r3, r0, #32
 801002e:	fa02 f303 	lsl.w	r3, r2, r3
 8010032:	430b      	orrs	r3, r1
 8010034:	40c2      	lsrs	r2, r0
 8010036:	6163      	str	r3, [r4, #20]
 8010038:	9201      	str	r2, [sp, #4]
 801003a:	9b01      	ldr	r3, [sp, #4]
 801003c:	61a3      	str	r3, [r4, #24]
 801003e:	2b00      	cmp	r3, #0
 8010040:	bf0c      	ite	eq
 8010042:	2201      	moveq	r2, #1
 8010044:	2202      	movne	r2, #2
 8010046:	6122      	str	r2, [r4, #16]
 8010048:	b1ad      	cbz	r5, 8010076 <__d2b+0x92>
 801004a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801004e:	4405      	add	r5, r0
 8010050:	6035      	str	r5, [r6, #0]
 8010052:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010058:	6018      	str	r0, [r3, #0]
 801005a:	4620      	mov	r0, r4
 801005c:	b002      	add	sp, #8
 801005e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8010062:	6161      	str	r1, [r4, #20]
 8010064:	e7e9      	b.n	801003a <__d2b+0x56>
 8010066:	a801      	add	r0, sp, #4
 8010068:	f7ff fd5b 	bl	800fb22 <__lo0bits>
 801006c:	9b01      	ldr	r3, [sp, #4]
 801006e:	6163      	str	r3, [r4, #20]
 8010070:	3020      	adds	r0, #32
 8010072:	2201      	movs	r2, #1
 8010074:	e7e7      	b.n	8010046 <__d2b+0x62>
 8010076:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801007a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801007e:	6030      	str	r0, [r6, #0]
 8010080:	6918      	ldr	r0, [r3, #16]
 8010082:	f7ff fd2f 	bl	800fae4 <__hi0bits>
 8010086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801008a:	e7e4      	b.n	8010056 <__d2b+0x72>
 801008c:	080122e5 	.word	0x080122e5
 8010090:	080122f6 	.word	0x080122f6

08010094 <__ssputs_r>:
 8010094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010098:	688e      	ldr	r6, [r1, #8]
 801009a:	461f      	mov	r7, r3
 801009c:	42be      	cmp	r6, r7
 801009e:	680b      	ldr	r3, [r1, #0]
 80100a0:	4682      	mov	sl, r0
 80100a2:	460c      	mov	r4, r1
 80100a4:	4690      	mov	r8, r2
 80100a6:	d82d      	bhi.n	8010104 <__ssputs_r+0x70>
 80100a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80100ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80100b0:	d026      	beq.n	8010100 <__ssputs_r+0x6c>
 80100b2:	6965      	ldr	r5, [r4, #20]
 80100b4:	6909      	ldr	r1, [r1, #16]
 80100b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80100ba:	eba3 0901 	sub.w	r9, r3, r1
 80100be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80100c2:	1c7b      	adds	r3, r7, #1
 80100c4:	444b      	add	r3, r9
 80100c6:	106d      	asrs	r5, r5, #1
 80100c8:	429d      	cmp	r5, r3
 80100ca:	bf38      	it	cc
 80100cc:	461d      	movcc	r5, r3
 80100ce:	0553      	lsls	r3, r2, #21
 80100d0:	d527      	bpl.n	8010122 <__ssputs_r+0x8e>
 80100d2:	4629      	mov	r1, r5
 80100d4:	f7fd fe84 	bl	800dde0 <_malloc_r>
 80100d8:	4606      	mov	r6, r0
 80100da:	b360      	cbz	r0, 8010136 <__ssputs_r+0xa2>
 80100dc:	6921      	ldr	r1, [r4, #16]
 80100de:	464a      	mov	r2, r9
 80100e0:	f7fe fdad 	bl	800ec3e <memcpy>
 80100e4:	89a3      	ldrh	r3, [r4, #12]
 80100e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80100ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80100ee:	81a3      	strh	r3, [r4, #12]
 80100f0:	6126      	str	r6, [r4, #16]
 80100f2:	6165      	str	r5, [r4, #20]
 80100f4:	444e      	add	r6, r9
 80100f6:	eba5 0509 	sub.w	r5, r5, r9
 80100fa:	6026      	str	r6, [r4, #0]
 80100fc:	60a5      	str	r5, [r4, #8]
 80100fe:	463e      	mov	r6, r7
 8010100:	42be      	cmp	r6, r7
 8010102:	d900      	bls.n	8010106 <__ssputs_r+0x72>
 8010104:	463e      	mov	r6, r7
 8010106:	6820      	ldr	r0, [r4, #0]
 8010108:	4632      	mov	r2, r6
 801010a:	4641      	mov	r1, r8
 801010c:	f000 fb96 	bl	801083c <memmove>
 8010110:	68a3      	ldr	r3, [r4, #8]
 8010112:	1b9b      	subs	r3, r3, r6
 8010114:	60a3      	str	r3, [r4, #8]
 8010116:	6823      	ldr	r3, [r4, #0]
 8010118:	4433      	add	r3, r6
 801011a:	6023      	str	r3, [r4, #0]
 801011c:	2000      	movs	r0, #0
 801011e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010122:	462a      	mov	r2, r5
 8010124:	f000 fbe8 	bl	80108f8 <_realloc_r>
 8010128:	4606      	mov	r6, r0
 801012a:	2800      	cmp	r0, #0
 801012c:	d1e0      	bne.n	80100f0 <__ssputs_r+0x5c>
 801012e:	6921      	ldr	r1, [r4, #16]
 8010130:	4650      	mov	r0, sl
 8010132:	f7ff fbe5 	bl	800f900 <_free_r>
 8010136:	230c      	movs	r3, #12
 8010138:	f8ca 3000 	str.w	r3, [sl]
 801013c:	89a3      	ldrh	r3, [r4, #12]
 801013e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010142:	81a3      	strh	r3, [r4, #12]
 8010144:	f04f 30ff 	mov.w	r0, #4294967295
 8010148:	e7e9      	b.n	801011e <__ssputs_r+0x8a>
	...

0801014c <_svfiprintf_r>:
 801014c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010150:	4698      	mov	r8, r3
 8010152:	898b      	ldrh	r3, [r1, #12]
 8010154:	061b      	lsls	r3, r3, #24
 8010156:	b09d      	sub	sp, #116	@ 0x74
 8010158:	4607      	mov	r7, r0
 801015a:	460d      	mov	r5, r1
 801015c:	4614      	mov	r4, r2
 801015e:	d510      	bpl.n	8010182 <_svfiprintf_r+0x36>
 8010160:	690b      	ldr	r3, [r1, #16]
 8010162:	b973      	cbnz	r3, 8010182 <_svfiprintf_r+0x36>
 8010164:	2140      	movs	r1, #64	@ 0x40
 8010166:	f7fd fe3b 	bl	800dde0 <_malloc_r>
 801016a:	6028      	str	r0, [r5, #0]
 801016c:	6128      	str	r0, [r5, #16]
 801016e:	b930      	cbnz	r0, 801017e <_svfiprintf_r+0x32>
 8010170:	230c      	movs	r3, #12
 8010172:	603b      	str	r3, [r7, #0]
 8010174:	f04f 30ff 	mov.w	r0, #4294967295
 8010178:	b01d      	add	sp, #116	@ 0x74
 801017a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801017e:	2340      	movs	r3, #64	@ 0x40
 8010180:	616b      	str	r3, [r5, #20]
 8010182:	2300      	movs	r3, #0
 8010184:	9309      	str	r3, [sp, #36]	@ 0x24
 8010186:	2320      	movs	r3, #32
 8010188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801018c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010190:	2330      	movs	r3, #48	@ 0x30
 8010192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010330 <_svfiprintf_r+0x1e4>
 8010196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801019a:	f04f 0901 	mov.w	r9, #1
 801019e:	4623      	mov	r3, r4
 80101a0:	469a      	mov	sl, r3
 80101a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101a6:	b10a      	cbz	r2, 80101ac <_svfiprintf_r+0x60>
 80101a8:	2a25      	cmp	r2, #37	@ 0x25
 80101aa:	d1f9      	bne.n	80101a0 <_svfiprintf_r+0x54>
 80101ac:	ebba 0b04 	subs.w	fp, sl, r4
 80101b0:	d00b      	beq.n	80101ca <_svfiprintf_r+0x7e>
 80101b2:	465b      	mov	r3, fp
 80101b4:	4622      	mov	r2, r4
 80101b6:	4629      	mov	r1, r5
 80101b8:	4638      	mov	r0, r7
 80101ba:	f7ff ff6b 	bl	8010094 <__ssputs_r>
 80101be:	3001      	adds	r0, #1
 80101c0:	f000 80a7 	beq.w	8010312 <_svfiprintf_r+0x1c6>
 80101c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101c6:	445a      	add	r2, fp
 80101c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80101ca:	f89a 3000 	ldrb.w	r3, [sl]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f000 809f 	beq.w	8010312 <_svfiprintf_r+0x1c6>
 80101d4:	2300      	movs	r3, #0
 80101d6:	f04f 32ff 	mov.w	r2, #4294967295
 80101da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101de:	f10a 0a01 	add.w	sl, sl, #1
 80101e2:	9304      	str	r3, [sp, #16]
 80101e4:	9307      	str	r3, [sp, #28]
 80101e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80101ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80101ec:	4654      	mov	r4, sl
 80101ee:	2205      	movs	r2, #5
 80101f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f4:	484e      	ldr	r0, [pc, #312]	@ (8010330 <_svfiprintf_r+0x1e4>)
 80101f6:	f7ef ffc3 	bl	8000180 <memchr>
 80101fa:	9a04      	ldr	r2, [sp, #16]
 80101fc:	b9d8      	cbnz	r0, 8010236 <_svfiprintf_r+0xea>
 80101fe:	06d0      	lsls	r0, r2, #27
 8010200:	bf44      	itt	mi
 8010202:	2320      	movmi	r3, #32
 8010204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010208:	0711      	lsls	r1, r2, #28
 801020a:	bf44      	itt	mi
 801020c:	232b      	movmi	r3, #43	@ 0x2b
 801020e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010212:	f89a 3000 	ldrb.w	r3, [sl]
 8010216:	2b2a      	cmp	r3, #42	@ 0x2a
 8010218:	d015      	beq.n	8010246 <_svfiprintf_r+0xfa>
 801021a:	9a07      	ldr	r2, [sp, #28]
 801021c:	4654      	mov	r4, sl
 801021e:	2000      	movs	r0, #0
 8010220:	f04f 0c0a 	mov.w	ip, #10
 8010224:	4621      	mov	r1, r4
 8010226:	f811 3b01 	ldrb.w	r3, [r1], #1
 801022a:	3b30      	subs	r3, #48	@ 0x30
 801022c:	2b09      	cmp	r3, #9
 801022e:	d94b      	bls.n	80102c8 <_svfiprintf_r+0x17c>
 8010230:	b1b0      	cbz	r0, 8010260 <_svfiprintf_r+0x114>
 8010232:	9207      	str	r2, [sp, #28]
 8010234:	e014      	b.n	8010260 <_svfiprintf_r+0x114>
 8010236:	eba0 0308 	sub.w	r3, r0, r8
 801023a:	fa09 f303 	lsl.w	r3, r9, r3
 801023e:	4313      	orrs	r3, r2
 8010240:	9304      	str	r3, [sp, #16]
 8010242:	46a2      	mov	sl, r4
 8010244:	e7d2      	b.n	80101ec <_svfiprintf_r+0xa0>
 8010246:	9b03      	ldr	r3, [sp, #12]
 8010248:	1d19      	adds	r1, r3, #4
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	9103      	str	r1, [sp, #12]
 801024e:	2b00      	cmp	r3, #0
 8010250:	bfbb      	ittet	lt
 8010252:	425b      	neglt	r3, r3
 8010254:	f042 0202 	orrlt.w	r2, r2, #2
 8010258:	9307      	strge	r3, [sp, #28]
 801025a:	9307      	strlt	r3, [sp, #28]
 801025c:	bfb8      	it	lt
 801025e:	9204      	strlt	r2, [sp, #16]
 8010260:	7823      	ldrb	r3, [r4, #0]
 8010262:	2b2e      	cmp	r3, #46	@ 0x2e
 8010264:	d10a      	bne.n	801027c <_svfiprintf_r+0x130>
 8010266:	7863      	ldrb	r3, [r4, #1]
 8010268:	2b2a      	cmp	r3, #42	@ 0x2a
 801026a:	d132      	bne.n	80102d2 <_svfiprintf_r+0x186>
 801026c:	9b03      	ldr	r3, [sp, #12]
 801026e:	1d1a      	adds	r2, r3, #4
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	9203      	str	r2, [sp, #12]
 8010274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010278:	3402      	adds	r4, #2
 801027a:	9305      	str	r3, [sp, #20]
 801027c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8010334 <_svfiprintf_r+0x1e8>
 8010280:	7821      	ldrb	r1, [r4, #0]
 8010282:	2203      	movs	r2, #3
 8010284:	4650      	mov	r0, sl
 8010286:	f7ef ff7b 	bl	8000180 <memchr>
 801028a:	b138      	cbz	r0, 801029c <_svfiprintf_r+0x150>
 801028c:	9b04      	ldr	r3, [sp, #16]
 801028e:	eba0 000a 	sub.w	r0, r0, sl
 8010292:	2240      	movs	r2, #64	@ 0x40
 8010294:	4082      	lsls	r2, r0
 8010296:	4313      	orrs	r3, r2
 8010298:	3401      	adds	r4, #1
 801029a:	9304      	str	r3, [sp, #16]
 801029c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a0:	4825      	ldr	r0, [pc, #148]	@ (8010338 <_svfiprintf_r+0x1ec>)
 80102a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102a6:	2206      	movs	r2, #6
 80102a8:	f7ef ff6a 	bl	8000180 <memchr>
 80102ac:	2800      	cmp	r0, #0
 80102ae:	d036      	beq.n	801031e <_svfiprintf_r+0x1d2>
 80102b0:	4b22      	ldr	r3, [pc, #136]	@ (801033c <_svfiprintf_r+0x1f0>)
 80102b2:	bb1b      	cbnz	r3, 80102fc <_svfiprintf_r+0x1b0>
 80102b4:	9b03      	ldr	r3, [sp, #12]
 80102b6:	3307      	adds	r3, #7
 80102b8:	f023 0307 	bic.w	r3, r3, #7
 80102bc:	3308      	adds	r3, #8
 80102be:	9303      	str	r3, [sp, #12]
 80102c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102c2:	4433      	add	r3, r6
 80102c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80102c6:	e76a      	b.n	801019e <_svfiprintf_r+0x52>
 80102c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80102cc:	460c      	mov	r4, r1
 80102ce:	2001      	movs	r0, #1
 80102d0:	e7a8      	b.n	8010224 <_svfiprintf_r+0xd8>
 80102d2:	2300      	movs	r3, #0
 80102d4:	3401      	adds	r4, #1
 80102d6:	9305      	str	r3, [sp, #20]
 80102d8:	4619      	mov	r1, r3
 80102da:	f04f 0c0a 	mov.w	ip, #10
 80102de:	4620      	mov	r0, r4
 80102e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102e4:	3a30      	subs	r2, #48	@ 0x30
 80102e6:	2a09      	cmp	r2, #9
 80102e8:	d903      	bls.n	80102f2 <_svfiprintf_r+0x1a6>
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d0c6      	beq.n	801027c <_svfiprintf_r+0x130>
 80102ee:	9105      	str	r1, [sp, #20]
 80102f0:	e7c4      	b.n	801027c <_svfiprintf_r+0x130>
 80102f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80102f6:	4604      	mov	r4, r0
 80102f8:	2301      	movs	r3, #1
 80102fa:	e7f0      	b.n	80102de <_svfiprintf_r+0x192>
 80102fc:	ab03      	add	r3, sp, #12
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	462a      	mov	r2, r5
 8010302:	4b0f      	ldr	r3, [pc, #60]	@ (8010340 <_svfiprintf_r+0x1f4>)
 8010304:	a904      	add	r1, sp, #16
 8010306:	4638      	mov	r0, r7
 8010308:	f7fd ff18 	bl	800e13c <_printf_float>
 801030c:	1c42      	adds	r2, r0, #1
 801030e:	4606      	mov	r6, r0
 8010310:	d1d6      	bne.n	80102c0 <_svfiprintf_r+0x174>
 8010312:	89ab      	ldrh	r3, [r5, #12]
 8010314:	065b      	lsls	r3, r3, #25
 8010316:	f53f af2d 	bmi.w	8010174 <_svfiprintf_r+0x28>
 801031a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801031c:	e72c      	b.n	8010178 <_svfiprintf_r+0x2c>
 801031e:	ab03      	add	r3, sp, #12
 8010320:	9300      	str	r3, [sp, #0]
 8010322:	462a      	mov	r2, r5
 8010324:	4b06      	ldr	r3, [pc, #24]	@ (8010340 <_svfiprintf_r+0x1f4>)
 8010326:	a904      	add	r1, sp, #16
 8010328:	4638      	mov	r0, r7
 801032a:	f7fe f9a1 	bl	800e670 <_printf_i>
 801032e:	e7ed      	b.n	801030c <_svfiprintf_r+0x1c0>
 8010330:	08012450 	.word	0x08012450
 8010334:	08012456 	.word	0x08012456
 8010338:	0801245a 	.word	0x0801245a
 801033c:	0800e13d 	.word	0x0800e13d
 8010340:	08010095 	.word	0x08010095

08010344 <__sfputc_r>:
 8010344:	6893      	ldr	r3, [r2, #8]
 8010346:	3b01      	subs	r3, #1
 8010348:	2b00      	cmp	r3, #0
 801034a:	b410      	push	{r4}
 801034c:	6093      	str	r3, [r2, #8]
 801034e:	da07      	bge.n	8010360 <__sfputc_r+0x1c>
 8010350:	6994      	ldr	r4, [r2, #24]
 8010352:	42a3      	cmp	r3, r4
 8010354:	db01      	blt.n	801035a <__sfputc_r+0x16>
 8010356:	290a      	cmp	r1, #10
 8010358:	d102      	bne.n	8010360 <__sfputc_r+0x1c>
 801035a:	bc10      	pop	{r4}
 801035c:	f000 b9da 	b.w	8010714 <__swbuf_r>
 8010360:	6813      	ldr	r3, [r2, #0]
 8010362:	1c58      	adds	r0, r3, #1
 8010364:	6010      	str	r0, [r2, #0]
 8010366:	7019      	strb	r1, [r3, #0]
 8010368:	4608      	mov	r0, r1
 801036a:	bc10      	pop	{r4}
 801036c:	4770      	bx	lr

0801036e <__sfputs_r>:
 801036e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010370:	4606      	mov	r6, r0
 8010372:	460f      	mov	r7, r1
 8010374:	4614      	mov	r4, r2
 8010376:	18d5      	adds	r5, r2, r3
 8010378:	42ac      	cmp	r4, r5
 801037a:	d101      	bne.n	8010380 <__sfputs_r+0x12>
 801037c:	2000      	movs	r0, #0
 801037e:	e007      	b.n	8010390 <__sfputs_r+0x22>
 8010380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010384:	463a      	mov	r2, r7
 8010386:	4630      	mov	r0, r6
 8010388:	f7ff ffdc 	bl	8010344 <__sfputc_r>
 801038c:	1c43      	adds	r3, r0, #1
 801038e:	d1f3      	bne.n	8010378 <__sfputs_r+0xa>
 8010390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010394 <_vfiprintf_r>:
 8010394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010398:	460d      	mov	r5, r1
 801039a:	b09d      	sub	sp, #116	@ 0x74
 801039c:	4614      	mov	r4, r2
 801039e:	4698      	mov	r8, r3
 80103a0:	4606      	mov	r6, r0
 80103a2:	b118      	cbz	r0, 80103ac <_vfiprintf_r+0x18>
 80103a4:	6a03      	ldr	r3, [r0, #32]
 80103a6:	b90b      	cbnz	r3, 80103ac <_vfiprintf_r+0x18>
 80103a8:	f7fe fb0e 	bl	800e9c8 <__sinit>
 80103ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103ae:	07d9      	lsls	r1, r3, #31
 80103b0:	d405      	bmi.n	80103be <_vfiprintf_r+0x2a>
 80103b2:	89ab      	ldrh	r3, [r5, #12]
 80103b4:	059a      	lsls	r2, r3, #22
 80103b6:	d402      	bmi.n	80103be <_vfiprintf_r+0x2a>
 80103b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103ba:	f7fe fc3e 	bl	800ec3a <__retarget_lock_acquire_recursive>
 80103be:	89ab      	ldrh	r3, [r5, #12]
 80103c0:	071b      	lsls	r3, r3, #28
 80103c2:	d501      	bpl.n	80103c8 <_vfiprintf_r+0x34>
 80103c4:	692b      	ldr	r3, [r5, #16]
 80103c6:	b99b      	cbnz	r3, 80103f0 <_vfiprintf_r+0x5c>
 80103c8:	4629      	mov	r1, r5
 80103ca:	4630      	mov	r0, r6
 80103cc:	f000 f9e0 	bl	8010790 <__swsetup_r>
 80103d0:	b170      	cbz	r0, 80103f0 <_vfiprintf_r+0x5c>
 80103d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103d4:	07dc      	lsls	r4, r3, #31
 80103d6:	d504      	bpl.n	80103e2 <_vfiprintf_r+0x4e>
 80103d8:	f04f 30ff 	mov.w	r0, #4294967295
 80103dc:	b01d      	add	sp, #116	@ 0x74
 80103de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103e2:	89ab      	ldrh	r3, [r5, #12]
 80103e4:	0598      	lsls	r0, r3, #22
 80103e6:	d4f7      	bmi.n	80103d8 <_vfiprintf_r+0x44>
 80103e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103ea:	f7fe fc27 	bl	800ec3c <__retarget_lock_release_recursive>
 80103ee:	e7f3      	b.n	80103d8 <_vfiprintf_r+0x44>
 80103f0:	2300      	movs	r3, #0
 80103f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80103f4:	2320      	movs	r3, #32
 80103f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80103fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80103fe:	2330      	movs	r3, #48	@ 0x30
 8010400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80105b0 <_vfiprintf_r+0x21c>
 8010404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010408:	f04f 0901 	mov.w	r9, #1
 801040c:	4623      	mov	r3, r4
 801040e:	469a      	mov	sl, r3
 8010410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010414:	b10a      	cbz	r2, 801041a <_vfiprintf_r+0x86>
 8010416:	2a25      	cmp	r2, #37	@ 0x25
 8010418:	d1f9      	bne.n	801040e <_vfiprintf_r+0x7a>
 801041a:	ebba 0b04 	subs.w	fp, sl, r4
 801041e:	d00b      	beq.n	8010438 <_vfiprintf_r+0xa4>
 8010420:	465b      	mov	r3, fp
 8010422:	4622      	mov	r2, r4
 8010424:	4629      	mov	r1, r5
 8010426:	4630      	mov	r0, r6
 8010428:	f7ff ffa1 	bl	801036e <__sfputs_r>
 801042c:	3001      	adds	r0, #1
 801042e:	f000 80a7 	beq.w	8010580 <_vfiprintf_r+0x1ec>
 8010432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010434:	445a      	add	r2, fp
 8010436:	9209      	str	r2, [sp, #36]	@ 0x24
 8010438:	f89a 3000 	ldrb.w	r3, [sl]
 801043c:	2b00      	cmp	r3, #0
 801043e:	f000 809f 	beq.w	8010580 <_vfiprintf_r+0x1ec>
 8010442:	2300      	movs	r3, #0
 8010444:	f04f 32ff 	mov.w	r2, #4294967295
 8010448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801044c:	f10a 0a01 	add.w	sl, sl, #1
 8010450:	9304      	str	r3, [sp, #16]
 8010452:	9307      	str	r3, [sp, #28]
 8010454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010458:	931a      	str	r3, [sp, #104]	@ 0x68
 801045a:	4654      	mov	r4, sl
 801045c:	2205      	movs	r2, #5
 801045e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010462:	4853      	ldr	r0, [pc, #332]	@ (80105b0 <_vfiprintf_r+0x21c>)
 8010464:	f7ef fe8c 	bl	8000180 <memchr>
 8010468:	9a04      	ldr	r2, [sp, #16]
 801046a:	b9d8      	cbnz	r0, 80104a4 <_vfiprintf_r+0x110>
 801046c:	06d1      	lsls	r1, r2, #27
 801046e:	bf44      	itt	mi
 8010470:	2320      	movmi	r3, #32
 8010472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010476:	0713      	lsls	r3, r2, #28
 8010478:	bf44      	itt	mi
 801047a:	232b      	movmi	r3, #43	@ 0x2b
 801047c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010480:	f89a 3000 	ldrb.w	r3, [sl]
 8010484:	2b2a      	cmp	r3, #42	@ 0x2a
 8010486:	d015      	beq.n	80104b4 <_vfiprintf_r+0x120>
 8010488:	9a07      	ldr	r2, [sp, #28]
 801048a:	4654      	mov	r4, sl
 801048c:	2000      	movs	r0, #0
 801048e:	f04f 0c0a 	mov.w	ip, #10
 8010492:	4621      	mov	r1, r4
 8010494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010498:	3b30      	subs	r3, #48	@ 0x30
 801049a:	2b09      	cmp	r3, #9
 801049c:	d94b      	bls.n	8010536 <_vfiprintf_r+0x1a2>
 801049e:	b1b0      	cbz	r0, 80104ce <_vfiprintf_r+0x13a>
 80104a0:	9207      	str	r2, [sp, #28]
 80104a2:	e014      	b.n	80104ce <_vfiprintf_r+0x13a>
 80104a4:	eba0 0308 	sub.w	r3, r0, r8
 80104a8:	fa09 f303 	lsl.w	r3, r9, r3
 80104ac:	4313      	orrs	r3, r2
 80104ae:	9304      	str	r3, [sp, #16]
 80104b0:	46a2      	mov	sl, r4
 80104b2:	e7d2      	b.n	801045a <_vfiprintf_r+0xc6>
 80104b4:	9b03      	ldr	r3, [sp, #12]
 80104b6:	1d19      	adds	r1, r3, #4
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	9103      	str	r1, [sp, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	bfbb      	ittet	lt
 80104c0:	425b      	neglt	r3, r3
 80104c2:	f042 0202 	orrlt.w	r2, r2, #2
 80104c6:	9307      	strge	r3, [sp, #28]
 80104c8:	9307      	strlt	r3, [sp, #28]
 80104ca:	bfb8      	it	lt
 80104cc:	9204      	strlt	r2, [sp, #16]
 80104ce:	7823      	ldrb	r3, [r4, #0]
 80104d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80104d2:	d10a      	bne.n	80104ea <_vfiprintf_r+0x156>
 80104d4:	7863      	ldrb	r3, [r4, #1]
 80104d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80104d8:	d132      	bne.n	8010540 <_vfiprintf_r+0x1ac>
 80104da:	9b03      	ldr	r3, [sp, #12]
 80104dc:	1d1a      	adds	r2, r3, #4
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	9203      	str	r2, [sp, #12]
 80104e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80104e6:	3402      	adds	r4, #2
 80104e8:	9305      	str	r3, [sp, #20]
 80104ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80105b4 <_vfiprintf_r+0x220>
 80104ee:	7821      	ldrb	r1, [r4, #0]
 80104f0:	2203      	movs	r2, #3
 80104f2:	4650      	mov	r0, sl
 80104f4:	f7ef fe44 	bl	8000180 <memchr>
 80104f8:	b138      	cbz	r0, 801050a <_vfiprintf_r+0x176>
 80104fa:	9b04      	ldr	r3, [sp, #16]
 80104fc:	eba0 000a 	sub.w	r0, r0, sl
 8010500:	2240      	movs	r2, #64	@ 0x40
 8010502:	4082      	lsls	r2, r0
 8010504:	4313      	orrs	r3, r2
 8010506:	3401      	adds	r4, #1
 8010508:	9304      	str	r3, [sp, #16]
 801050a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801050e:	482a      	ldr	r0, [pc, #168]	@ (80105b8 <_vfiprintf_r+0x224>)
 8010510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010514:	2206      	movs	r2, #6
 8010516:	f7ef fe33 	bl	8000180 <memchr>
 801051a:	2800      	cmp	r0, #0
 801051c:	d03f      	beq.n	801059e <_vfiprintf_r+0x20a>
 801051e:	4b27      	ldr	r3, [pc, #156]	@ (80105bc <_vfiprintf_r+0x228>)
 8010520:	bb1b      	cbnz	r3, 801056a <_vfiprintf_r+0x1d6>
 8010522:	9b03      	ldr	r3, [sp, #12]
 8010524:	3307      	adds	r3, #7
 8010526:	f023 0307 	bic.w	r3, r3, #7
 801052a:	3308      	adds	r3, #8
 801052c:	9303      	str	r3, [sp, #12]
 801052e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010530:	443b      	add	r3, r7
 8010532:	9309      	str	r3, [sp, #36]	@ 0x24
 8010534:	e76a      	b.n	801040c <_vfiprintf_r+0x78>
 8010536:	fb0c 3202 	mla	r2, ip, r2, r3
 801053a:	460c      	mov	r4, r1
 801053c:	2001      	movs	r0, #1
 801053e:	e7a8      	b.n	8010492 <_vfiprintf_r+0xfe>
 8010540:	2300      	movs	r3, #0
 8010542:	3401      	adds	r4, #1
 8010544:	9305      	str	r3, [sp, #20]
 8010546:	4619      	mov	r1, r3
 8010548:	f04f 0c0a 	mov.w	ip, #10
 801054c:	4620      	mov	r0, r4
 801054e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010552:	3a30      	subs	r2, #48	@ 0x30
 8010554:	2a09      	cmp	r2, #9
 8010556:	d903      	bls.n	8010560 <_vfiprintf_r+0x1cc>
 8010558:	2b00      	cmp	r3, #0
 801055a:	d0c6      	beq.n	80104ea <_vfiprintf_r+0x156>
 801055c:	9105      	str	r1, [sp, #20]
 801055e:	e7c4      	b.n	80104ea <_vfiprintf_r+0x156>
 8010560:	fb0c 2101 	mla	r1, ip, r1, r2
 8010564:	4604      	mov	r4, r0
 8010566:	2301      	movs	r3, #1
 8010568:	e7f0      	b.n	801054c <_vfiprintf_r+0x1b8>
 801056a:	ab03      	add	r3, sp, #12
 801056c:	9300      	str	r3, [sp, #0]
 801056e:	462a      	mov	r2, r5
 8010570:	4b13      	ldr	r3, [pc, #76]	@ (80105c0 <_vfiprintf_r+0x22c>)
 8010572:	a904      	add	r1, sp, #16
 8010574:	4630      	mov	r0, r6
 8010576:	f7fd fde1 	bl	800e13c <_printf_float>
 801057a:	4607      	mov	r7, r0
 801057c:	1c78      	adds	r0, r7, #1
 801057e:	d1d6      	bne.n	801052e <_vfiprintf_r+0x19a>
 8010580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010582:	07d9      	lsls	r1, r3, #31
 8010584:	d405      	bmi.n	8010592 <_vfiprintf_r+0x1fe>
 8010586:	89ab      	ldrh	r3, [r5, #12]
 8010588:	059a      	lsls	r2, r3, #22
 801058a:	d402      	bmi.n	8010592 <_vfiprintf_r+0x1fe>
 801058c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801058e:	f7fe fb55 	bl	800ec3c <__retarget_lock_release_recursive>
 8010592:	89ab      	ldrh	r3, [r5, #12]
 8010594:	065b      	lsls	r3, r3, #25
 8010596:	f53f af1f 	bmi.w	80103d8 <_vfiprintf_r+0x44>
 801059a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801059c:	e71e      	b.n	80103dc <_vfiprintf_r+0x48>
 801059e:	ab03      	add	r3, sp, #12
 80105a0:	9300      	str	r3, [sp, #0]
 80105a2:	462a      	mov	r2, r5
 80105a4:	4b06      	ldr	r3, [pc, #24]	@ (80105c0 <_vfiprintf_r+0x22c>)
 80105a6:	a904      	add	r1, sp, #16
 80105a8:	4630      	mov	r0, r6
 80105aa:	f7fe f861 	bl	800e670 <_printf_i>
 80105ae:	e7e4      	b.n	801057a <_vfiprintf_r+0x1e6>
 80105b0:	08012450 	.word	0x08012450
 80105b4:	08012456 	.word	0x08012456
 80105b8:	0801245a 	.word	0x0801245a
 80105bc:	0800e13d 	.word	0x0800e13d
 80105c0:	0801036f 	.word	0x0801036f

080105c4 <__sflush_r>:
 80105c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ca:	0716      	lsls	r6, r2, #28
 80105cc:	4605      	mov	r5, r0
 80105ce:	460c      	mov	r4, r1
 80105d0:	d454      	bmi.n	801067c <__sflush_r+0xb8>
 80105d2:	684b      	ldr	r3, [r1, #4]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	dc02      	bgt.n	80105de <__sflush_r+0x1a>
 80105d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105da:	2b00      	cmp	r3, #0
 80105dc:	dd48      	ble.n	8010670 <__sflush_r+0xac>
 80105de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105e0:	2e00      	cmp	r6, #0
 80105e2:	d045      	beq.n	8010670 <__sflush_r+0xac>
 80105e4:	2300      	movs	r3, #0
 80105e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80105ea:	682f      	ldr	r7, [r5, #0]
 80105ec:	6a21      	ldr	r1, [r4, #32]
 80105ee:	602b      	str	r3, [r5, #0]
 80105f0:	d030      	beq.n	8010654 <__sflush_r+0x90>
 80105f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80105f4:	89a3      	ldrh	r3, [r4, #12]
 80105f6:	0759      	lsls	r1, r3, #29
 80105f8:	d505      	bpl.n	8010606 <__sflush_r+0x42>
 80105fa:	6863      	ldr	r3, [r4, #4]
 80105fc:	1ad2      	subs	r2, r2, r3
 80105fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010600:	b10b      	cbz	r3, 8010606 <__sflush_r+0x42>
 8010602:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010604:	1ad2      	subs	r2, r2, r3
 8010606:	2300      	movs	r3, #0
 8010608:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801060a:	6a21      	ldr	r1, [r4, #32]
 801060c:	4628      	mov	r0, r5
 801060e:	47b0      	blx	r6
 8010610:	1c43      	adds	r3, r0, #1
 8010612:	89a3      	ldrh	r3, [r4, #12]
 8010614:	d106      	bne.n	8010624 <__sflush_r+0x60>
 8010616:	6829      	ldr	r1, [r5, #0]
 8010618:	291d      	cmp	r1, #29
 801061a:	d82b      	bhi.n	8010674 <__sflush_r+0xb0>
 801061c:	4a28      	ldr	r2, [pc, #160]	@ (80106c0 <__sflush_r+0xfc>)
 801061e:	410a      	asrs	r2, r1
 8010620:	07d6      	lsls	r6, r2, #31
 8010622:	d427      	bmi.n	8010674 <__sflush_r+0xb0>
 8010624:	2200      	movs	r2, #0
 8010626:	6062      	str	r2, [r4, #4]
 8010628:	04d9      	lsls	r1, r3, #19
 801062a:	6922      	ldr	r2, [r4, #16]
 801062c:	6022      	str	r2, [r4, #0]
 801062e:	d504      	bpl.n	801063a <__sflush_r+0x76>
 8010630:	1c42      	adds	r2, r0, #1
 8010632:	d101      	bne.n	8010638 <__sflush_r+0x74>
 8010634:	682b      	ldr	r3, [r5, #0]
 8010636:	b903      	cbnz	r3, 801063a <__sflush_r+0x76>
 8010638:	6560      	str	r0, [r4, #84]	@ 0x54
 801063a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801063c:	602f      	str	r7, [r5, #0]
 801063e:	b1b9      	cbz	r1, 8010670 <__sflush_r+0xac>
 8010640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010644:	4299      	cmp	r1, r3
 8010646:	d002      	beq.n	801064e <__sflush_r+0x8a>
 8010648:	4628      	mov	r0, r5
 801064a:	f7ff f959 	bl	800f900 <_free_r>
 801064e:	2300      	movs	r3, #0
 8010650:	6363      	str	r3, [r4, #52]	@ 0x34
 8010652:	e00d      	b.n	8010670 <__sflush_r+0xac>
 8010654:	2301      	movs	r3, #1
 8010656:	4628      	mov	r0, r5
 8010658:	47b0      	blx	r6
 801065a:	4602      	mov	r2, r0
 801065c:	1c50      	adds	r0, r2, #1
 801065e:	d1c9      	bne.n	80105f4 <__sflush_r+0x30>
 8010660:	682b      	ldr	r3, [r5, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d0c6      	beq.n	80105f4 <__sflush_r+0x30>
 8010666:	2b1d      	cmp	r3, #29
 8010668:	d001      	beq.n	801066e <__sflush_r+0xaa>
 801066a:	2b16      	cmp	r3, #22
 801066c:	d11d      	bne.n	80106aa <__sflush_r+0xe6>
 801066e:	602f      	str	r7, [r5, #0]
 8010670:	2000      	movs	r0, #0
 8010672:	e021      	b.n	80106b8 <__sflush_r+0xf4>
 8010674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010678:	b21b      	sxth	r3, r3
 801067a:	e01a      	b.n	80106b2 <__sflush_r+0xee>
 801067c:	690f      	ldr	r7, [r1, #16]
 801067e:	2f00      	cmp	r7, #0
 8010680:	d0f6      	beq.n	8010670 <__sflush_r+0xac>
 8010682:	0793      	lsls	r3, r2, #30
 8010684:	680e      	ldr	r6, [r1, #0]
 8010686:	bf08      	it	eq
 8010688:	694b      	ldreq	r3, [r1, #20]
 801068a:	600f      	str	r7, [r1, #0]
 801068c:	bf18      	it	ne
 801068e:	2300      	movne	r3, #0
 8010690:	1bf6      	subs	r6, r6, r7
 8010692:	608b      	str	r3, [r1, #8]
 8010694:	2e00      	cmp	r6, #0
 8010696:	ddeb      	ble.n	8010670 <__sflush_r+0xac>
 8010698:	6a21      	ldr	r1, [r4, #32]
 801069a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 801069e:	4633      	mov	r3, r6
 80106a0:	463a      	mov	r2, r7
 80106a2:	4628      	mov	r0, r5
 80106a4:	47e0      	blx	ip
 80106a6:	2800      	cmp	r0, #0
 80106a8:	dc07      	bgt.n	80106ba <__sflush_r+0xf6>
 80106aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106b2:	81a3      	strh	r3, [r4, #12]
 80106b4:	f04f 30ff 	mov.w	r0, #4294967295
 80106b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106ba:	4407      	add	r7, r0
 80106bc:	1a36      	subs	r6, r6, r0
 80106be:	e7e9      	b.n	8010694 <__sflush_r+0xd0>
 80106c0:	dfbffffe 	.word	0xdfbffffe

080106c4 <_fflush_r>:
 80106c4:	b538      	push	{r3, r4, r5, lr}
 80106c6:	690b      	ldr	r3, [r1, #16]
 80106c8:	4605      	mov	r5, r0
 80106ca:	460c      	mov	r4, r1
 80106cc:	b913      	cbnz	r3, 80106d4 <_fflush_r+0x10>
 80106ce:	2500      	movs	r5, #0
 80106d0:	4628      	mov	r0, r5
 80106d2:	bd38      	pop	{r3, r4, r5, pc}
 80106d4:	b118      	cbz	r0, 80106de <_fflush_r+0x1a>
 80106d6:	6a03      	ldr	r3, [r0, #32]
 80106d8:	b90b      	cbnz	r3, 80106de <_fflush_r+0x1a>
 80106da:	f7fe f975 	bl	800e9c8 <__sinit>
 80106de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d0f3      	beq.n	80106ce <_fflush_r+0xa>
 80106e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80106e8:	07d0      	lsls	r0, r2, #31
 80106ea:	d404      	bmi.n	80106f6 <_fflush_r+0x32>
 80106ec:	0599      	lsls	r1, r3, #22
 80106ee:	d402      	bmi.n	80106f6 <_fflush_r+0x32>
 80106f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80106f2:	f7fe faa2 	bl	800ec3a <__retarget_lock_acquire_recursive>
 80106f6:	4628      	mov	r0, r5
 80106f8:	4621      	mov	r1, r4
 80106fa:	f7ff ff63 	bl	80105c4 <__sflush_r>
 80106fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010700:	07da      	lsls	r2, r3, #31
 8010702:	4605      	mov	r5, r0
 8010704:	d4e4      	bmi.n	80106d0 <_fflush_r+0xc>
 8010706:	89a3      	ldrh	r3, [r4, #12]
 8010708:	059b      	lsls	r3, r3, #22
 801070a:	d4e1      	bmi.n	80106d0 <_fflush_r+0xc>
 801070c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801070e:	f7fe fa95 	bl	800ec3c <__retarget_lock_release_recursive>
 8010712:	e7dd      	b.n	80106d0 <_fflush_r+0xc>

08010714 <__swbuf_r>:
 8010714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010716:	460e      	mov	r6, r1
 8010718:	4614      	mov	r4, r2
 801071a:	4605      	mov	r5, r0
 801071c:	b118      	cbz	r0, 8010726 <__swbuf_r+0x12>
 801071e:	6a03      	ldr	r3, [r0, #32]
 8010720:	b90b      	cbnz	r3, 8010726 <__swbuf_r+0x12>
 8010722:	f7fe f951 	bl	800e9c8 <__sinit>
 8010726:	69a3      	ldr	r3, [r4, #24]
 8010728:	60a3      	str	r3, [r4, #8]
 801072a:	89a3      	ldrh	r3, [r4, #12]
 801072c:	071a      	lsls	r2, r3, #28
 801072e:	d501      	bpl.n	8010734 <__swbuf_r+0x20>
 8010730:	6923      	ldr	r3, [r4, #16]
 8010732:	b943      	cbnz	r3, 8010746 <__swbuf_r+0x32>
 8010734:	4621      	mov	r1, r4
 8010736:	4628      	mov	r0, r5
 8010738:	f000 f82a 	bl	8010790 <__swsetup_r>
 801073c:	b118      	cbz	r0, 8010746 <__swbuf_r+0x32>
 801073e:	f04f 37ff 	mov.w	r7, #4294967295
 8010742:	4638      	mov	r0, r7
 8010744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010746:	6823      	ldr	r3, [r4, #0]
 8010748:	6922      	ldr	r2, [r4, #16]
 801074a:	1a98      	subs	r0, r3, r2
 801074c:	6963      	ldr	r3, [r4, #20]
 801074e:	b2f6      	uxtb	r6, r6
 8010750:	4283      	cmp	r3, r0
 8010752:	4637      	mov	r7, r6
 8010754:	dc05      	bgt.n	8010762 <__swbuf_r+0x4e>
 8010756:	4621      	mov	r1, r4
 8010758:	4628      	mov	r0, r5
 801075a:	f7ff ffb3 	bl	80106c4 <_fflush_r>
 801075e:	2800      	cmp	r0, #0
 8010760:	d1ed      	bne.n	801073e <__swbuf_r+0x2a>
 8010762:	68a3      	ldr	r3, [r4, #8]
 8010764:	3b01      	subs	r3, #1
 8010766:	60a3      	str	r3, [r4, #8]
 8010768:	6823      	ldr	r3, [r4, #0]
 801076a:	1c5a      	adds	r2, r3, #1
 801076c:	6022      	str	r2, [r4, #0]
 801076e:	701e      	strb	r6, [r3, #0]
 8010770:	6962      	ldr	r2, [r4, #20]
 8010772:	1c43      	adds	r3, r0, #1
 8010774:	429a      	cmp	r2, r3
 8010776:	d004      	beq.n	8010782 <__swbuf_r+0x6e>
 8010778:	89a3      	ldrh	r3, [r4, #12]
 801077a:	07db      	lsls	r3, r3, #31
 801077c:	d5e1      	bpl.n	8010742 <__swbuf_r+0x2e>
 801077e:	2e0a      	cmp	r6, #10
 8010780:	d1df      	bne.n	8010742 <__swbuf_r+0x2e>
 8010782:	4621      	mov	r1, r4
 8010784:	4628      	mov	r0, r5
 8010786:	f7ff ff9d 	bl	80106c4 <_fflush_r>
 801078a:	2800      	cmp	r0, #0
 801078c:	d0d9      	beq.n	8010742 <__swbuf_r+0x2e>
 801078e:	e7d6      	b.n	801073e <__swbuf_r+0x2a>

08010790 <__swsetup_r>:
 8010790:	b538      	push	{r3, r4, r5, lr}
 8010792:	4b29      	ldr	r3, [pc, #164]	@ (8010838 <__swsetup_r+0xa8>)
 8010794:	4605      	mov	r5, r0
 8010796:	6818      	ldr	r0, [r3, #0]
 8010798:	460c      	mov	r4, r1
 801079a:	b118      	cbz	r0, 80107a4 <__swsetup_r+0x14>
 801079c:	6a03      	ldr	r3, [r0, #32]
 801079e:	b90b      	cbnz	r3, 80107a4 <__swsetup_r+0x14>
 80107a0:	f7fe f912 	bl	800e9c8 <__sinit>
 80107a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107a8:	0719      	lsls	r1, r3, #28
 80107aa:	d422      	bmi.n	80107f2 <__swsetup_r+0x62>
 80107ac:	06da      	lsls	r2, r3, #27
 80107ae:	d407      	bmi.n	80107c0 <__swsetup_r+0x30>
 80107b0:	2209      	movs	r2, #9
 80107b2:	602a      	str	r2, [r5, #0]
 80107b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80107b8:	81a3      	strh	r3, [r4, #12]
 80107ba:	f04f 30ff 	mov.w	r0, #4294967295
 80107be:	e033      	b.n	8010828 <__swsetup_r+0x98>
 80107c0:	0758      	lsls	r0, r3, #29
 80107c2:	d512      	bpl.n	80107ea <__swsetup_r+0x5a>
 80107c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107c6:	b141      	cbz	r1, 80107da <__swsetup_r+0x4a>
 80107c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107cc:	4299      	cmp	r1, r3
 80107ce:	d002      	beq.n	80107d6 <__swsetup_r+0x46>
 80107d0:	4628      	mov	r0, r5
 80107d2:	f7ff f895 	bl	800f900 <_free_r>
 80107d6:	2300      	movs	r3, #0
 80107d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80107da:	89a3      	ldrh	r3, [r4, #12]
 80107dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80107e0:	81a3      	strh	r3, [r4, #12]
 80107e2:	2300      	movs	r3, #0
 80107e4:	6063      	str	r3, [r4, #4]
 80107e6:	6923      	ldr	r3, [r4, #16]
 80107e8:	6023      	str	r3, [r4, #0]
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	f043 0308 	orr.w	r3, r3, #8
 80107f0:	81a3      	strh	r3, [r4, #12]
 80107f2:	6923      	ldr	r3, [r4, #16]
 80107f4:	b94b      	cbnz	r3, 801080a <__swsetup_r+0x7a>
 80107f6:	89a3      	ldrh	r3, [r4, #12]
 80107f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80107fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010800:	d003      	beq.n	801080a <__swsetup_r+0x7a>
 8010802:	4621      	mov	r1, r4
 8010804:	4628      	mov	r0, r5
 8010806:	f000 f8eb 	bl	80109e0 <__smakebuf_r>
 801080a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801080e:	f013 0201 	ands.w	r2, r3, #1
 8010812:	d00a      	beq.n	801082a <__swsetup_r+0x9a>
 8010814:	2200      	movs	r2, #0
 8010816:	60a2      	str	r2, [r4, #8]
 8010818:	6962      	ldr	r2, [r4, #20]
 801081a:	4252      	negs	r2, r2
 801081c:	61a2      	str	r2, [r4, #24]
 801081e:	6922      	ldr	r2, [r4, #16]
 8010820:	b942      	cbnz	r2, 8010834 <__swsetup_r+0xa4>
 8010822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010826:	d1c5      	bne.n	80107b4 <__swsetup_r+0x24>
 8010828:	bd38      	pop	{r3, r4, r5, pc}
 801082a:	0799      	lsls	r1, r3, #30
 801082c:	bf58      	it	pl
 801082e:	6962      	ldrpl	r2, [r4, #20]
 8010830:	60a2      	str	r2, [r4, #8]
 8010832:	e7f4      	b.n	801081e <__swsetup_r+0x8e>
 8010834:	2000      	movs	r0, #0
 8010836:	e7f7      	b.n	8010828 <__swsetup_r+0x98>
 8010838:	20000098 	.word	0x20000098

0801083c <memmove>:
 801083c:	4288      	cmp	r0, r1
 801083e:	b510      	push	{r4, lr}
 8010840:	eb01 0402 	add.w	r4, r1, r2
 8010844:	d902      	bls.n	801084c <memmove+0x10>
 8010846:	4284      	cmp	r4, r0
 8010848:	4623      	mov	r3, r4
 801084a:	d807      	bhi.n	801085c <memmove+0x20>
 801084c:	1e43      	subs	r3, r0, #1
 801084e:	42a1      	cmp	r1, r4
 8010850:	d008      	beq.n	8010864 <memmove+0x28>
 8010852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010856:	f803 2f01 	strb.w	r2, [r3, #1]!
 801085a:	e7f8      	b.n	801084e <memmove+0x12>
 801085c:	4402      	add	r2, r0
 801085e:	4601      	mov	r1, r0
 8010860:	428a      	cmp	r2, r1
 8010862:	d100      	bne.n	8010866 <memmove+0x2a>
 8010864:	bd10      	pop	{r4, pc}
 8010866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801086a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801086e:	e7f7      	b.n	8010860 <memmove+0x24>

08010870 <__assert_func>:
 8010870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010872:	4614      	mov	r4, r2
 8010874:	461a      	mov	r2, r3
 8010876:	4b09      	ldr	r3, [pc, #36]	@ (801089c <__assert_func+0x2c>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	4605      	mov	r5, r0
 801087c:	68d8      	ldr	r0, [r3, #12]
 801087e:	b954      	cbnz	r4, 8010896 <__assert_func+0x26>
 8010880:	4b07      	ldr	r3, [pc, #28]	@ (80108a0 <__assert_func+0x30>)
 8010882:	461c      	mov	r4, r3
 8010884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010888:	9100      	str	r1, [sp, #0]
 801088a:	462b      	mov	r3, r5
 801088c:	4905      	ldr	r1, [pc, #20]	@ (80108a4 <__assert_func+0x34>)
 801088e:	f000 f86f 	bl	8010970 <fiprintf>
 8010892:	f000 f903 	bl	8010a9c <abort>
 8010896:	4b04      	ldr	r3, [pc, #16]	@ (80108a8 <__assert_func+0x38>)
 8010898:	e7f4      	b.n	8010884 <__assert_func+0x14>
 801089a:	bf00      	nop
 801089c:	20000098 	.word	0x20000098
 80108a0:	080124a6 	.word	0x080124a6
 80108a4:	08012478 	.word	0x08012478
 80108a8:	0801246b 	.word	0x0801246b

080108ac <_calloc_r>:
 80108ac:	b570      	push	{r4, r5, r6, lr}
 80108ae:	fba1 5402 	umull	r5, r4, r1, r2
 80108b2:	b93c      	cbnz	r4, 80108c4 <_calloc_r+0x18>
 80108b4:	4629      	mov	r1, r5
 80108b6:	f7fd fa93 	bl	800dde0 <_malloc_r>
 80108ba:	4606      	mov	r6, r0
 80108bc:	b928      	cbnz	r0, 80108ca <_calloc_r+0x1e>
 80108be:	2600      	movs	r6, #0
 80108c0:	4630      	mov	r0, r6
 80108c2:	bd70      	pop	{r4, r5, r6, pc}
 80108c4:	220c      	movs	r2, #12
 80108c6:	6002      	str	r2, [r0, #0]
 80108c8:	e7f9      	b.n	80108be <_calloc_r+0x12>
 80108ca:	462a      	mov	r2, r5
 80108cc:	4621      	mov	r1, r4
 80108ce:	f7fe f926 	bl	800eb1e <memset>
 80108d2:	e7f5      	b.n	80108c0 <_calloc_r+0x14>

080108d4 <__ascii_mbtowc>:
 80108d4:	b082      	sub	sp, #8
 80108d6:	b901      	cbnz	r1, 80108da <__ascii_mbtowc+0x6>
 80108d8:	a901      	add	r1, sp, #4
 80108da:	b142      	cbz	r2, 80108ee <__ascii_mbtowc+0x1a>
 80108dc:	b14b      	cbz	r3, 80108f2 <__ascii_mbtowc+0x1e>
 80108de:	7813      	ldrb	r3, [r2, #0]
 80108e0:	600b      	str	r3, [r1, #0]
 80108e2:	7812      	ldrb	r2, [r2, #0]
 80108e4:	1e10      	subs	r0, r2, #0
 80108e6:	bf18      	it	ne
 80108e8:	2001      	movne	r0, #1
 80108ea:	b002      	add	sp, #8
 80108ec:	4770      	bx	lr
 80108ee:	4610      	mov	r0, r2
 80108f0:	e7fb      	b.n	80108ea <__ascii_mbtowc+0x16>
 80108f2:	f06f 0001 	mvn.w	r0, #1
 80108f6:	e7f8      	b.n	80108ea <__ascii_mbtowc+0x16>

080108f8 <_realloc_r>:
 80108f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fc:	4680      	mov	r8, r0
 80108fe:	4615      	mov	r5, r2
 8010900:	460c      	mov	r4, r1
 8010902:	b921      	cbnz	r1, 801090e <_realloc_r+0x16>
 8010904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010908:	4611      	mov	r1, r2
 801090a:	f7fd ba69 	b.w	800dde0 <_malloc_r>
 801090e:	b92a      	cbnz	r2, 801091c <_realloc_r+0x24>
 8010910:	f7fe fff6 	bl	800f900 <_free_r>
 8010914:	2400      	movs	r4, #0
 8010916:	4620      	mov	r0, r4
 8010918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801091c:	f000 f8c5 	bl	8010aaa <_malloc_usable_size_r>
 8010920:	4285      	cmp	r5, r0
 8010922:	4606      	mov	r6, r0
 8010924:	d802      	bhi.n	801092c <_realloc_r+0x34>
 8010926:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801092a:	d8f4      	bhi.n	8010916 <_realloc_r+0x1e>
 801092c:	4629      	mov	r1, r5
 801092e:	4640      	mov	r0, r8
 8010930:	f7fd fa56 	bl	800dde0 <_malloc_r>
 8010934:	4607      	mov	r7, r0
 8010936:	2800      	cmp	r0, #0
 8010938:	d0ec      	beq.n	8010914 <_realloc_r+0x1c>
 801093a:	42b5      	cmp	r5, r6
 801093c:	462a      	mov	r2, r5
 801093e:	4621      	mov	r1, r4
 8010940:	bf28      	it	cs
 8010942:	4632      	movcs	r2, r6
 8010944:	f7fe f97b 	bl	800ec3e <memcpy>
 8010948:	4621      	mov	r1, r4
 801094a:	4640      	mov	r0, r8
 801094c:	f7fe ffd8 	bl	800f900 <_free_r>
 8010950:	463c      	mov	r4, r7
 8010952:	e7e0      	b.n	8010916 <_realloc_r+0x1e>

08010954 <__ascii_wctomb>:
 8010954:	4603      	mov	r3, r0
 8010956:	4608      	mov	r0, r1
 8010958:	b141      	cbz	r1, 801096c <__ascii_wctomb+0x18>
 801095a:	2aff      	cmp	r2, #255	@ 0xff
 801095c:	d904      	bls.n	8010968 <__ascii_wctomb+0x14>
 801095e:	228a      	movs	r2, #138	@ 0x8a
 8010960:	601a      	str	r2, [r3, #0]
 8010962:	f04f 30ff 	mov.w	r0, #4294967295
 8010966:	4770      	bx	lr
 8010968:	700a      	strb	r2, [r1, #0]
 801096a:	2001      	movs	r0, #1
 801096c:	4770      	bx	lr
	...

08010970 <fiprintf>:
 8010970:	b40e      	push	{r1, r2, r3}
 8010972:	b503      	push	{r0, r1, lr}
 8010974:	4601      	mov	r1, r0
 8010976:	ab03      	add	r3, sp, #12
 8010978:	4805      	ldr	r0, [pc, #20]	@ (8010990 <fiprintf+0x20>)
 801097a:	f853 2b04 	ldr.w	r2, [r3], #4
 801097e:	6800      	ldr	r0, [r0, #0]
 8010980:	9301      	str	r3, [sp, #4]
 8010982:	f7ff fd07 	bl	8010394 <_vfiprintf_r>
 8010986:	b002      	add	sp, #8
 8010988:	f85d eb04 	ldr.w	lr, [sp], #4
 801098c:	b003      	add	sp, #12
 801098e:	4770      	bx	lr
 8010990:	20000098 	.word	0x20000098

08010994 <__swhatbuf_r>:
 8010994:	b570      	push	{r4, r5, r6, lr}
 8010996:	460c      	mov	r4, r1
 8010998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801099c:	2900      	cmp	r1, #0
 801099e:	b096      	sub	sp, #88	@ 0x58
 80109a0:	4615      	mov	r5, r2
 80109a2:	461e      	mov	r6, r3
 80109a4:	da0d      	bge.n	80109c2 <__swhatbuf_r+0x2e>
 80109a6:	89a3      	ldrh	r3, [r4, #12]
 80109a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80109ac:	f04f 0100 	mov.w	r1, #0
 80109b0:	bf14      	ite	ne
 80109b2:	2340      	movne	r3, #64	@ 0x40
 80109b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80109b8:	2000      	movs	r0, #0
 80109ba:	6031      	str	r1, [r6, #0]
 80109bc:	602b      	str	r3, [r5, #0]
 80109be:	b016      	add	sp, #88	@ 0x58
 80109c0:	bd70      	pop	{r4, r5, r6, pc}
 80109c2:	466a      	mov	r2, sp
 80109c4:	f000 f848 	bl	8010a58 <_fstat_r>
 80109c8:	2800      	cmp	r0, #0
 80109ca:	dbec      	blt.n	80109a6 <__swhatbuf_r+0x12>
 80109cc:	9901      	ldr	r1, [sp, #4]
 80109ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80109d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80109d6:	4259      	negs	r1, r3
 80109d8:	4159      	adcs	r1, r3
 80109da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80109de:	e7eb      	b.n	80109b8 <__swhatbuf_r+0x24>

080109e0 <__smakebuf_r>:
 80109e0:	898b      	ldrh	r3, [r1, #12]
 80109e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80109e4:	079d      	lsls	r5, r3, #30
 80109e6:	4606      	mov	r6, r0
 80109e8:	460c      	mov	r4, r1
 80109ea:	d507      	bpl.n	80109fc <__smakebuf_r+0x1c>
 80109ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80109f0:	6023      	str	r3, [r4, #0]
 80109f2:	6123      	str	r3, [r4, #16]
 80109f4:	2301      	movs	r3, #1
 80109f6:	6163      	str	r3, [r4, #20]
 80109f8:	b003      	add	sp, #12
 80109fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109fc:	ab01      	add	r3, sp, #4
 80109fe:	466a      	mov	r2, sp
 8010a00:	f7ff ffc8 	bl	8010994 <__swhatbuf_r>
 8010a04:	9f00      	ldr	r7, [sp, #0]
 8010a06:	4605      	mov	r5, r0
 8010a08:	4639      	mov	r1, r7
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7fd f9e8 	bl	800dde0 <_malloc_r>
 8010a10:	b948      	cbnz	r0, 8010a26 <__smakebuf_r+0x46>
 8010a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a16:	059a      	lsls	r2, r3, #22
 8010a18:	d4ee      	bmi.n	80109f8 <__smakebuf_r+0x18>
 8010a1a:	f023 0303 	bic.w	r3, r3, #3
 8010a1e:	f043 0302 	orr.w	r3, r3, #2
 8010a22:	81a3      	strh	r3, [r4, #12]
 8010a24:	e7e2      	b.n	80109ec <__smakebuf_r+0xc>
 8010a26:	89a3      	ldrh	r3, [r4, #12]
 8010a28:	6020      	str	r0, [r4, #0]
 8010a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a2e:	81a3      	strh	r3, [r4, #12]
 8010a30:	9b01      	ldr	r3, [sp, #4]
 8010a32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010a36:	b15b      	cbz	r3, 8010a50 <__smakebuf_r+0x70>
 8010a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a3c:	4630      	mov	r0, r6
 8010a3e:	f000 f81d 	bl	8010a7c <_isatty_r>
 8010a42:	b128      	cbz	r0, 8010a50 <__smakebuf_r+0x70>
 8010a44:	89a3      	ldrh	r3, [r4, #12]
 8010a46:	f023 0303 	bic.w	r3, r3, #3
 8010a4a:	f043 0301 	orr.w	r3, r3, #1
 8010a4e:	81a3      	strh	r3, [r4, #12]
 8010a50:	89a3      	ldrh	r3, [r4, #12]
 8010a52:	431d      	orrs	r5, r3
 8010a54:	81a5      	strh	r5, [r4, #12]
 8010a56:	e7cf      	b.n	80109f8 <__smakebuf_r+0x18>

08010a58 <_fstat_r>:
 8010a58:	b538      	push	{r3, r4, r5, lr}
 8010a5a:	4d07      	ldr	r5, [pc, #28]	@ (8010a78 <_fstat_r+0x20>)
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	4604      	mov	r4, r0
 8010a60:	4608      	mov	r0, r1
 8010a62:	4611      	mov	r1, r2
 8010a64:	602b      	str	r3, [r5, #0]
 8010a66:	f7f2 f8e2 	bl	8002c2e <_fstat>
 8010a6a:	1c43      	adds	r3, r0, #1
 8010a6c:	d102      	bne.n	8010a74 <_fstat_r+0x1c>
 8010a6e:	682b      	ldr	r3, [r5, #0]
 8010a70:	b103      	cbz	r3, 8010a74 <_fstat_r+0x1c>
 8010a72:	6023      	str	r3, [r4, #0]
 8010a74:	bd38      	pop	{r3, r4, r5, pc}
 8010a76:	bf00      	nop
 8010a78:	200010b8 	.word	0x200010b8

08010a7c <_isatty_r>:
 8010a7c:	b538      	push	{r3, r4, r5, lr}
 8010a7e:	4d06      	ldr	r5, [pc, #24]	@ (8010a98 <_isatty_r+0x1c>)
 8010a80:	2300      	movs	r3, #0
 8010a82:	4604      	mov	r4, r0
 8010a84:	4608      	mov	r0, r1
 8010a86:	602b      	str	r3, [r5, #0]
 8010a88:	f7f2 f8d6 	bl	8002c38 <_isatty>
 8010a8c:	1c43      	adds	r3, r0, #1
 8010a8e:	d102      	bne.n	8010a96 <_isatty_r+0x1a>
 8010a90:	682b      	ldr	r3, [r5, #0]
 8010a92:	b103      	cbz	r3, 8010a96 <_isatty_r+0x1a>
 8010a94:	6023      	str	r3, [r4, #0]
 8010a96:	bd38      	pop	{r3, r4, r5, pc}
 8010a98:	200010b8 	.word	0x200010b8

08010a9c <abort>:
 8010a9c:	b508      	push	{r3, lr}
 8010a9e:	2006      	movs	r0, #6
 8010aa0:	f000 f834 	bl	8010b0c <raise>
 8010aa4:	2001      	movs	r0, #1
 8010aa6:	f7f2 f89b 	bl	8002be0 <_exit>

08010aaa <_malloc_usable_size_r>:
 8010aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010aae:	1f18      	subs	r0, r3, #4
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	bfbc      	itt	lt
 8010ab4:	580b      	ldrlt	r3, [r1, r0]
 8010ab6:	18c0      	addlt	r0, r0, r3
 8010ab8:	4770      	bx	lr

08010aba <_raise_r>:
 8010aba:	291f      	cmp	r1, #31
 8010abc:	b538      	push	{r3, r4, r5, lr}
 8010abe:	4605      	mov	r5, r0
 8010ac0:	460c      	mov	r4, r1
 8010ac2:	d904      	bls.n	8010ace <_raise_r+0x14>
 8010ac4:	2316      	movs	r3, #22
 8010ac6:	6003      	str	r3, [r0, #0]
 8010ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8010acc:	bd38      	pop	{r3, r4, r5, pc}
 8010ace:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ad0:	b112      	cbz	r2, 8010ad8 <_raise_r+0x1e>
 8010ad2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010ad6:	b94b      	cbnz	r3, 8010aec <_raise_r+0x32>
 8010ad8:	4628      	mov	r0, r5
 8010ada:	f000 f831 	bl	8010b40 <_getpid_r>
 8010ade:	4622      	mov	r2, r4
 8010ae0:	4601      	mov	r1, r0
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ae8:	f000 b818 	b.w	8010b1c <_kill_r>
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d00a      	beq.n	8010b06 <_raise_r+0x4c>
 8010af0:	1c59      	adds	r1, r3, #1
 8010af2:	d103      	bne.n	8010afc <_raise_r+0x42>
 8010af4:	2316      	movs	r3, #22
 8010af6:	6003      	str	r3, [r0, #0]
 8010af8:	2001      	movs	r0, #1
 8010afa:	e7e7      	b.n	8010acc <_raise_r+0x12>
 8010afc:	2100      	movs	r1, #0
 8010afe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010b02:	4620      	mov	r0, r4
 8010b04:	4798      	blx	r3
 8010b06:	2000      	movs	r0, #0
 8010b08:	e7e0      	b.n	8010acc <_raise_r+0x12>
	...

08010b0c <raise>:
 8010b0c:	4b02      	ldr	r3, [pc, #8]	@ (8010b18 <raise+0xc>)
 8010b0e:	4601      	mov	r1, r0
 8010b10:	6818      	ldr	r0, [r3, #0]
 8010b12:	f7ff bfd2 	b.w	8010aba <_raise_r>
 8010b16:	bf00      	nop
 8010b18:	20000098 	.word	0x20000098

08010b1c <_kill_r>:
 8010b1c:	b538      	push	{r3, r4, r5, lr}
 8010b1e:	4d07      	ldr	r5, [pc, #28]	@ (8010b3c <_kill_r+0x20>)
 8010b20:	2300      	movs	r3, #0
 8010b22:	4604      	mov	r4, r0
 8010b24:	4608      	mov	r0, r1
 8010b26:	4611      	mov	r1, r2
 8010b28:	602b      	str	r3, [r5, #0]
 8010b2a:	f7f2 f851 	bl	8002bd0 <_kill>
 8010b2e:	1c43      	adds	r3, r0, #1
 8010b30:	d102      	bne.n	8010b38 <_kill_r+0x1c>
 8010b32:	682b      	ldr	r3, [r5, #0]
 8010b34:	b103      	cbz	r3, 8010b38 <_kill_r+0x1c>
 8010b36:	6023      	str	r3, [r4, #0]
 8010b38:	bd38      	pop	{r3, r4, r5, pc}
 8010b3a:	bf00      	nop
 8010b3c:	200010b8 	.word	0x200010b8

08010b40 <_getpid_r>:
 8010b40:	f7f2 b844 	b.w	8002bcc <_getpid>

08010b44 <atan2>:
 8010b44:	f000 b800 	b.w	8010b48 <__ieee754_atan2>

08010b48 <__ieee754_atan2>:
 8010b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b4c:	4617      	mov	r7, r2
 8010b4e:	4690      	mov	r8, r2
 8010b50:	4699      	mov	r9, r3
 8010b52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010b56:	427b      	negs	r3, r7
 8010b58:	f8df a184 	ldr.w	sl, [pc, #388]	@ 8010ce0 <__ieee754_atan2+0x198>
 8010b5c:	433b      	orrs	r3, r7
 8010b5e:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010b62:	4553      	cmp	r3, sl
 8010b64:	4604      	mov	r4, r0
 8010b66:	460d      	mov	r5, r1
 8010b68:	d809      	bhi.n	8010b7e <__ieee754_atan2+0x36>
 8010b6a:	4246      	negs	r6, r0
 8010b6c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010b70:	4306      	orrs	r6, r0
 8010b72:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8010b76:	4556      	cmp	r6, sl
 8010b78:	468e      	mov	lr, r1
 8010b7a:	4683      	mov	fp, r0
 8010b7c:	d908      	bls.n	8010b90 <__ieee754_atan2+0x48>
 8010b7e:	4642      	mov	r2, r8
 8010b80:	464b      	mov	r3, r9
 8010b82:	4620      	mov	r0, r4
 8010b84:	4629      	mov	r1, r5
 8010b86:	f7ef fb59 	bl	800023c <__adddf3>
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	460d      	mov	r5, r1
 8010b8e:	e016      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010b90:	f109 4640 	add.w	r6, r9, #3221225472	@ 0xc0000000
 8010b94:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8010b98:	433e      	orrs	r6, r7
 8010b9a:	d103      	bne.n	8010ba4 <__ieee754_atan2+0x5c>
 8010b9c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ba0:	f000 b8a6 	b.w	8010cf0 <atan>
 8010ba4:	ea4f 76a9 	mov.w	r6, r9, asr #30
 8010ba8:	f006 0602 	and.w	r6, r6, #2
 8010bac:	ea53 0b0b 	orrs.w	fp, r3, fp
 8010bb0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8010bb4:	d107      	bne.n	8010bc6 <__ieee754_atan2+0x7e>
 8010bb6:	2e02      	cmp	r6, #2
 8010bb8:	d064      	beq.n	8010c84 <__ieee754_atan2+0x13c>
 8010bba:	2e03      	cmp	r6, #3
 8010bbc:	d066      	beq.n	8010c8c <__ieee754_atan2+0x144>
 8010bbe:	4620      	mov	r0, r4
 8010bc0:	4629      	mov	r1, r5
 8010bc2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bc6:	4317      	orrs	r7, r2
 8010bc8:	d106      	bne.n	8010bd8 <__ieee754_atan2+0x90>
 8010bca:	f1be 0f00 	cmp.w	lr, #0
 8010bce:	da68      	bge.n	8010ca2 <__ieee754_atan2+0x15a>
 8010bd0:	a537      	add	r5, pc, #220	@ (adr r5, 8010cb0 <__ieee754_atan2+0x168>)
 8010bd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010bd6:	e7f2      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010bd8:	4552      	cmp	r2, sl
 8010bda:	d10f      	bne.n	8010bfc <__ieee754_atan2+0xb4>
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	f106 36ff 	add.w	r6, r6, #4294967295
 8010be2:	d107      	bne.n	8010bf4 <__ieee754_atan2+0xac>
 8010be4:	2e02      	cmp	r6, #2
 8010be6:	d855      	bhi.n	8010c94 <__ieee754_atan2+0x14c>
 8010be8:	4b3e      	ldr	r3, [pc, #248]	@ (8010ce4 <__ieee754_atan2+0x19c>)
 8010bea:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010bee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8010bf2:	e7e4      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010bf4:	2e02      	cmp	r6, #2
 8010bf6:	d851      	bhi.n	8010c9c <__ieee754_atan2+0x154>
 8010bf8:	4b3b      	ldr	r3, [pc, #236]	@ (8010ce8 <__ieee754_atan2+0x1a0>)
 8010bfa:	e7f6      	b.n	8010bea <__ieee754_atan2+0xa2>
 8010bfc:	4553      	cmp	r3, sl
 8010bfe:	d0e4      	beq.n	8010bca <__ieee754_atan2+0x82>
 8010c00:	1a9b      	subs	r3, r3, r2
 8010c02:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010c06:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010c0a:	da21      	bge.n	8010c50 <__ieee754_atan2+0x108>
 8010c0c:	f1b9 0f00 	cmp.w	r9, #0
 8010c10:	da01      	bge.n	8010c16 <__ieee754_atan2+0xce>
 8010c12:	323c      	adds	r2, #60	@ 0x3c
 8010c14:	db20      	blt.n	8010c58 <__ieee754_atan2+0x110>
 8010c16:	4642      	mov	r2, r8
 8010c18:	464b      	mov	r3, r9
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	4629      	mov	r1, r5
 8010c1e:	f7ef fded 	bl	80007fc <__aeabi_ddiv>
 8010c22:	f000 f9f5 	bl	8011010 <fabs>
 8010c26:	f000 f863 	bl	8010cf0 <atan>
 8010c2a:	4604      	mov	r4, r0
 8010c2c:	460d      	mov	r5, r1
 8010c2e:	2e01      	cmp	r6, #1
 8010c30:	d015      	beq.n	8010c5e <__ieee754_atan2+0x116>
 8010c32:	2e02      	cmp	r6, #2
 8010c34:	d017      	beq.n	8010c66 <__ieee754_atan2+0x11e>
 8010c36:	2e00      	cmp	r6, #0
 8010c38:	d0c1      	beq.n	8010bbe <__ieee754_atan2+0x76>
 8010c3a:	a31f      	add	r3, pc, #124	@ (adr r3, 8010cb8 <__ieee754_atan2+0x170>)
 8010c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c40:	4620      	mov	r0, r4
 8010c42:	4629      	mov	r1, r5
 8010c44:	f7ef faf8 	bl	8000238 <__aeabi_dsub>
 8010c48:	a31d      	add	r3, pc, #116	@ (adr r3, 8010cc0 <__ieee754_atan2+0x178>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	e016      	b.n	8010c7e <__ieee754_atan2+0x136>
 8010c50:	a51d      	add	r5, pc, #116	@ (adr r5, 8010cc8 <__ieee754_atan2+0x180>)
 8010c52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c56:	e7ea      	b.n	8010c2e <__ieee754_atan2+0xe6>
 8010c58:	2400      	movs	r4, #0
 8010c5a:	2500      	movs	r5, #0
 8010c5c:	e7e7      	b.n	8010c2e <__ieee754_atan2+0xe6>
 8010c5e:	f105 4300 	add.w	r3, r5, #2147483648	@ 0x80000000
 8010c62:	461d      	mov	r5, r3
 8010c64:	e7ab      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010c66:	a314      	add	r3, pc, #80	@ (adr r3, 8010cb8 <__ieee754_atan2+0x170>)
 8010c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	4629      	mov	r1, r5
 8010c70:	f7ef fae2 	bl	8000238 <__aeabi_dsub>
 8010c74:	4602      	mov	r2, r0
 8010c76:	460b      	mov	r3, r1
 8010c78:	a111      	add	r1, pc, #68	@ (adr r1, 8010cc0 <__ieee754_atan2+0x178>)
 8010c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c7e:	f7ef fadb 	bl	8000238 <__aeabi_dsub>
 8010c82:	e782      	b.n	8010b8a <__ieee754_atan2+0x42>
 8010c84:	a50e      	add	r5, pc, #56	@ (adr r5, 8010cc0 <__ieee754_atan2+0x178>)
 8010c86:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c8a:	e798      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010c8c:	a510      	add	r5, pc, #64	@ (adr r5, 8010cd0 <__ieee754_atan2+0x188>)
 8010c8e:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c92:	e794      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010c94:	a510      	add	r5, pc, #64	@ (adr r5, 8010cd8 <__ieee754_atan2+0x190>)
 8010c96:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010c9a:	e790      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010c9c:	2400      	movs	r4, #0
 8010c9e:	2500      	movs	r5, #0
 8010ca0:	e78d      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010ca2:	a509      	add	r5, pc, #36	@ (adr r5, 8010cc8 <__ieee754_atan2+0x180>)
 8010ca4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010ca8:	e789      	b.n	8010bbe <__ieee754_atan2+0x76>
 8010caa:	bf00      	nop
 8010cac:	f3af 8000 	nop.w
 8010cb0:	54442d18 	.word	0x54442d18
 8010cb4:	bff921fb 	.word	0xbff921fb
 8010cb8:	33145c07 	.word	0x33145c07
 8010cbc:	3ca1a626 	.word	0x3ca1a626
 8010cc0:	54442d18 	.word	0x54442d18
 8010cc4:	400921fb 	.word	0x400921fb
 8010cc8:	54442d18 	.word	0x54442d18
 8010ccc:	3ff921fb 	.word	0x3ff921fb
 8010cd0:	54442d18 	.word	0x54442d18
 8010cd4:	c00921fb 	.word	0xc00921fb
 8010cd8:	54442d18 	.word	0x54442d18
 8010cdc:	3fe921fb 	.word	0x3fe921fb
 8010ce0:	7ff00000 	.word	0x7ff00000
 8010ce4:	080124c0 	.word	0x080124c0
 8010ce8:	080124a8 	.word	0x080124a8
 8010cec:	00000000 	.word	0x00000000

08010cf0 <atan>:
 8010cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cf4:	4bbc      	ldr	r3, [pc, #752]	@ (8010fe8 <atan+0x2f8>)
 8010cf6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8010cfa:	429e      	cmp	r6, r3
 8010cfc:	4604      	mov	r4, r0
 8010cfe:	460d      	mov	r5, r1
 8010d00:	468b      	mov	fp, r1
 8010d02:	d918      	bls.n	8010d36 <atan+0x46>
 8010d04:	4bb9      	ldr	r3, [pc, #740]	@ (8010fec <atan+0x2fc>)
 8010d06:	429e      	cmp	r6, r3
 8010d08:	d801      	bhi.n	8010d0e <atan+0x1e>
 8010d0a:	d109      	bne.n	8010d20 <atan+0x30>
 8010d0c:	b140      	cbz	r0, 8010d20 <atan+0x30>
 8010d0e:	4622      	mov	r2, r4
 8010d10:	462b      	mov	r3, r5
 8010d12:	4620      	mov	r0, r4
 8010d14:	4629      	mov	r1, r5
 8010d16:	f7ef fa91 	bl	800023c <__adddf3>
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	460d      	mov	r5, r1
 8010d1e:	e006      	b.n	8010d2e <atan+0x3e>
 8010d20:	f1bb 0f00 	cmp.w	fp, #0
 8010d24:	f340 8123 	ble.w	8010f6e <atan+0x27e>
 8010d28:	a593      	add	r5, pc, #588	@ (adr r5, 8010f78 <atan+0x288>)
 8010d2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010d2e:	4620      	mov	r0, r4
 8010d30:	4629      	mov	r1, r5
 8010d32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d36:	4bae      	ldr	r3, [pc, #696]	@ (8010ff0 <atan+0x300>)
 8010d38:	429e      	cmp	r6, r3
 8010d3a:	d811      	bhi.n	8010d60 <atan+0x70>
 8010d3c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8010d40:	429e      	cmp	r6, r3
 8010d42:	d80a      	bhi.n	8010d5a <atan+0x6a>
 8010d44:	a38e      	add	r3, pc, #568	@ (adr r3, 8010f80 <atan+0x290>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	f7ef fa77 	bl	800023c <__adddf3>
 8010d4e:	4ba9      	ldr	r3, [pc, #676]	@ (8010ff4 <atan+0x304>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	f7ef feb9 	bl	8000ac8 <__aeabi_dcmpgt>
 8010d56:	2800      	cmp	r0, #0
 8010d58:	d1e9      	bne.n	8010d2e <atan+0x3e>
 8010d5a:	f04f 3aff 	mov.w	sl, #4294967295
 8010d5e:	e027      	b.n	8010db0 <atan+0xc0>
 8010d60:	f000 f956 	bl	8011010 <fabs>
 8010d64:	4ba4      	ldr	r3, [pc, #656]	@ (8010ff8 <atan+0x308>)
 8010d66:	429e      	cmp	r6, r3
 8010d68:	4604      	mov	r4, r0
 8010d6a:	460d      	mov	r5, r1
 8010d6c:	f200 80b8 	bhi.w	8010ee0 <atan+0x1f0>
 8010d70:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8010d74:	429e      	cmp	r6, r3
 8010d76:	f200 809c 	bhi.w	8010eb2 <atan+0x1c2>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	f7ef fa5d 	bl	800023c <__adddf3>
 8010d82:	4b9c      	ldr	r3, [pc, #624]	@ (8010ff4 <atan+0x304>)
 8010d84:	2200      	movs	r2, #0
 8010d86:	f7ef fa57 	bl	8000238 <__aeabi_dsub>
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	4606      	mov	r6, r0
 8010d8e:	460f      	mov	r7, r1
 8010d90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010d94:	4620      	mov	r0, r4
 8010d96:	4629      	mov	r1, r5
 8010d98:	f7ef fa50 	bl	800023c <__adddf3>
 8010d9c:	4602      	mov	r2, r0
 8010d9e:	460b      	mov	r3, r1
 8010da0:	4630      	mov	r0, r6
 8010da2:	4639      	mov	r1, r7
 8010da4:	f7ef fd2a 	bl	80007fc <__aeabi_ddiv>
 8010da8:	f04f 0a00 	mov.w	sl, #0
 8010dac:	4604      	mov	r4, r0
 8010dae:	460d      	mov	r5, r1
 8010db0:	4622      	mov	r2, r4
 8010db2:	462b      	mov	r3, r5
 8010db4:	4620      	mov	r0, r4
 8010db6:	4629      	mov	r1, r5
 8010db8:	f7ef fbf6 	bl	80005a8 <__aeabi_dmul>
 8010dbc:	4602      	mov	r2, r0
 8010dbe:	460b      	mov	r3, r1
 8010dc0:	4680      	mov	r8, r0
 8010dc2:	4689      	mov	r9, r1
 8010dc4:	f7ef fbf0 	bl	80005a8 <__aeabi_dmul>
 8010dc8:	a36f      	add	r3, pc, #444	@ (adr r3, 8010f88 <atan+0x298>)
 8010dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dce:	4606      	mov	r6, r0
 8010dd0:	460f      	mov	r7, r1
 8010dd2:	f7ef fbe9 	bl	80005a8 <__aeabi_dmul>
 8010dd6:	a36e      	add	r3, pc, #440	@ (adr r3, 8010f90 <atan+0x2a0>)
 8010dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ddc:	f7ef fa2e 	bl	800023c <__adddf3>
 8010de0:	4632      	mov	r2, r6
 8010de2:	463b      	mov	r3, r7
 8010de4:	f7ef fbe0 	bl	80005a8 <__aeabi_dmul>
 8010de8:	a36b      	add	r3, pc, #428	@ (adr r3, 8010f98 <atan+0x2a8>)
 8010dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dee:	f7ef fa25 	bl	800023c <__adddf3>
 8010df2:	4632      	mov	r2, r6
 8010df4:	463b      	mov	r3, r7
 8010df6:	f7ef fbd7 	bl	80005a8 <__aeabi_dmul>
 8010dfa:	a369      	add	r3, pc, #420	@ (adr r3, 8010fa0 <atan+0x2b0>)
 8010dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e00:	f7ef fa1c 	bl	800023c <__adddf3>
 8010e04:	4632      	mov	r2, r6
 8010e06:	463b      	mov	r3, r7
 8010e08:	f7ef fbce 	bl	80005a8 <__aeabi_dmul>
 8010e0c:	a366      	add	r3, pc, #408	@ (adr r3, 8010fa8 <atan+0x2b8>)
 8010e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e12:	f7ef fa13 	bl	800023c <__adddf3>
 8010e16:	4632      	mov	r2, r6
 8010e18:	463b      	mov	r3, r7
 8010e1a:	f7ef fbc5 	bl	80005a8 <__aeabi_dmul>
 8010e1e:	a364      	add	r3, pc, #400	@ (adr r3, 8010fb0 <atan+0x2c0>)
 8010e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e24:	f7ef fa0a 	bl	800023c <__adddf3>
 8010e28:	4642      	mov	r2, r8
 8010e2a:	464b      	mov	r3, r9
 8010e2c:	f7ef fbbc 	bl	80005a8 <__aeabi_dmul>
 8010e30:	a361      	add	r3, pc, #388	@ (adr r3, 8010fb8 <atan+0x2c8>)
 8010e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e36:	4680      	mov	r8, r0
 8010e38:	4689      	mov	r9, r1
 8010e3a:	4630      	mov	r0, r6
 8010e3c:	4639      	mov	r1, r7
 8010e3e:	f7ef fbb3 	bl	80005a8 <__aeabi_dmul>
 8010e42:	a35f      	add	r3, pc, #380	@ (adr r3, 8010fc0 <atan+0x2d0>)
 8010e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e48:	f7ef f9f6 	bl	8000238 <__aeabi_dsub>
 8010e4c:	4632      	mov	r2, r6
 8010e4e:	463b      	mov	r3, r7
 8010e50:	f7ef fbaa 	bl	80005a8 <__aeabi_dmul>
 8010e54:	a35c      	add	r3, pc, #368	@ (adr r3, 8010fc8 <atan+0x2d8>)
 8010e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e5a:	f7ef f9ed 	bl	8000238 <__aeabi_dsub>
 8010e5e:	4632      	mov	r2, r6
 8010e60:	463b      	mov	r3, r7
 8010e62:	f7ef fba1 	bl	80005a8 <__aeabi_dmul>
 8010e66:	a35a      	add	r3, pc, #360	@ (adr r3, 8010fd0 <atan+0x2e0>)
 8010e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e6c:	f7ef f9e4 	bl	8000238 <__aeabi_dsub>
 8010e70:	4632      	mov	r2, r6
 8010e72:	463b      	mov	r3, r7
 8010e74:	f7ef fb98 	bl	80005a8 <__aeabi_dmul>
 8010e78:	a357      	add	r3, pc, #348	@ (adr r3, 8010fd8 <atan+0x2e8>)
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	f7ef f9db 	bl	8000238 <__aeabi_dsub>
 8010e82:	4632      	mov	r2, r6
 8010e84:	463b      	mov	r3, r7
 8010e86:	f7ef fb8f 	bl	80005a8 <__aeabi_dmul>
 8010e8a:	4602      	mov	r2, r0
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	4640      	mov	r0, r8
 8010e90:	4649      	mov	r1, r9
 8010e92:	f7ef f9d3 	bl	800023c <__adddf3>
 8010e96:	4622      	mov	r2, r4
 8010e98:	462b      	mov	r3, r5
 8010e9a:	f7ef fb85 	bl	80005a8 <__aeabi_dmul>
 8010e9e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	460b      	mov	r3, r1
 8010ea6:	d144      	bne.n	8010f32 <atan+0x242>
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	4629      	mov	r1, r5
 8010eac:	f7ef f9c4 	bl	8000238 <__aeabi_dsub>
 8010eb0:	e733      	b.n	8010d1a <atan+0x2a>
 8010eb2:	4b50      	ldr	r3, [pc, #320]	@ (8010ff4 <atan+0x304>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	f7ef f9bf 	bl	8000238 <__aeabi_dsub>
 8010eba:	4b4e      	ldr	r3, [pc, #312]	@ (8010ff4 <atan+0x304>)
 8010ebc:	4606      	mov	r6, r0
 8010ebe:	460f      	mov	r7, r1
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	4620      	mov	r0, r4
 8010ec4:	4629      	mov	r1, r5
 8010ec6:	f7ef f9b9 	bl	800023c <__adddf3>
 8010eca:	4602      	mov	r2, r0
 8010ecc:	460b      	mov	r3, r1
 8010ece:	4630      	mov	r0, r6
 8010ed0:	4639      	mov	r1, r7
 8010ed2:	f7ef fc93 	bl	80007fc <__aeabi_ddiv>
 8010ed6:	f04f 0a01 	mov.w	sl, #1
 8010eda:	4604      	mov	r4, r0
 8010edc:	460d      	mov	r5, r1
 8010ede:	e767      	b.n	8010db0 <atan+0xc0>
 8010ee0:	4b46      	ldr	r3, [pc, #280]	@ (8010ffc <atan+0x30c>)
 8010ee2:	429e      	cmp	r6, r3
 8010ee4:	d21a      	bcs.n	8010f1c <atan+0x22c>
 8010ee6:	4b46      	ldr	r3, [pc, #280]	@ (8011000 <atan+0x310>)
 8010ee8:	2200      	movs	r2, #0
 8010eea:	f7ef f9a5 	bl	8000238 <__aeabi_dsub>
 8010eee:	4b44      	ldr	r3, [pc, #272]	@ (8011000 <atan+0x310>)
 8010ef0:	4606      	mov	r6, r0
 8010ef2:	460f      	mov	r7, r1
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	4629      	mov	r1, r5
 8010efa:	f7ef fb55 	bl	80005a8 <__aeabi_dmul>
 8010efe:	4b3d      	ldr	r3, [pc, #244]	@ (8010ff4 <atan+0x304>)
 8010f00:	2200      	movs	r2, #0
 8010f02:	f7ef f99b 	bl	800023c <__adddf3>
 8010f06:	4602      	mov	r2, r0
 8010f08:	460b      	mov	r3, r1
 8010f0a:	4630      	mov	r0, r6
 8010f0c:	4639      	mov	r1, r7
 8010f0e:	f7ef fc75 	bl	80007fc <__aeabi_ddiv>
 8010f12:	f04f 0a02 	mov.w	sl, #2
 8010f16:	4604      	mov	r4, r0
 8010f18:	460d      	mov	r5, r1
 8010f1a:	e749      	b.n	8010db0 <atan+0xc0>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	460b      	mov	r3, r1
 8010f20:	2000      	movs	r0, #0
 8010f22:	4938      	ldr	r1, [pc, #224]	@ (8011004 <atan+0x314>)
 8010f24:	f7ef fc6a 	bl	80007fc <__aeabi_ddiv>
 8010f28:	f04f 0a03 	mov.w	sl, #3
 8010f2c:	4604      	mov	r4, r0
 8010f2e:	460d      	mov	r5, r1
 8010f30:	e73e      	b.n	8010db0 <atan+0xc0>
 8010f32:	4b35      	ldr	r3, [pc, #212]	@ (8011008 <atan+0x318>)
 8010f34:	4e35      	ldr	r6, [pc, #212]	@ (801100c <atan+0x31c>)
 8010f36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3e:	f7ef f97b 	bl	8000238 <__aeabi_dsub>
 8010f42:	4622      	mov	r2, r4
 8010f44:	462b      	mov	r3, r5
 8010f46:	f7ef f977 	bl	8000238 <__aeabi_dsub>
 8010f4a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010f4e:	4602      	mov	r2, r0
 8010f50:	460b      	mov	r3, r1
 8010f52:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010f56:	f7ef f96f 	bl	8000238 <__aeabi_dsub>
 8010f5a:	f1bb 0f00 	cmp.w	fp, #0
 8010f5e:	4604      	mov	r4, r0
 8010f60:	460d      	mov	r5, r1
 8010f62:	f6bf aee4 	bge.w	8010d2e <atan+0x3e>
 8010f66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010f6a:	461d      	mov	r5, r3
 8010f6c:	e6df      	b.n	8010d2e <atan+0x3e>
 8010f6e:	a51c      	add	r5, pc, #112	@ (adr r5, 8010fe0 <atan+0x2f0>)
 8010f70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8010f74:	e6db      	b.n	8010d2e <atan+0x3e>
 8010f76:	bf00      	nop
 8010f78:	54442d18 	.word	0x54442d18
 8010f7c:	3ff921fb 	.word	0x3ff921fb
 8010f80:	8800759c 	.word	0x8800759c
 8010f84:	7e37e43c 	.word	0x7e37e43c
 8010f88:	e322da11 	.word	0xe322da11
 8010f8c:	3f90ad3a 	.word	0x3f90ad3a
 8010f90:	24760deb 	.word	0x24760deb
 8010f94:	3fa97b4b 	.word	0x3fa97b4b
 8010f98:	a0d03d51 	.word	0xa0d03d51
 8010f9c:	3fb10d66 	.word	0x3fb10d66
 8010fa0:	c54c206e 	.word	0xc54c206e
 8010fa4:	3fb745cd 	.word	0x3fb745cd
 8010fa8:	920083ff 	.word	0x920083ff
 8010fac:	3fc24924 	.word	0x3fc24924
 8010fb0:	5555550d 	.word	0x5555550d
 8010fb4:	3fd55555 	.word	0x3fd55555
 8010fb8:	2c6a6c2f 	.word	0x2c6a6c2f
 8010fbc:	bfa2b444 	.word	0xbfa2b444
 8010fc0:	52defd9a 	.word	0x52defd9a
 8010fc4:	3fadde2d 	.word	0x3fadde2d
 8010fc8:	af749a6d 	.word	0xaf749a6d
 8010fcc:	3fb3b0f2 	.word	0x3fb3b0f2
 8010fd0:	fe231671 	.word	0xfe231671
 8010fd4:	3fbc71c6 	.word	0x3fbc71c6
 8010fd8:	9998ebc4 	.word	0x9998ebc4
 8010fdc:	3fc99999 	.word	0x3fc99999
 8010fe0:	54442d18 	.word	0x54442d18
 8010fe4:	bff921fb 	.word	0xbff921fb
 8010fe8:	440fffff 	.word	0x440fffff
 8010fec:	7ff00000 	.word	0x7ff00000
 8010ff0:	3fdbffff 	.word	0x3fdbffff
 8010ff4:	3ff00000 	.word	0x3ff00000
 8010ff8:	3ff2ffff 	.word	0x3ff2ffff
 8010ffc:	40038000 	.word	0x40038000
 8011000:	3ff80000 	.word	0x3ff80000
 8011004:	bff00000 	.word	0xbff00000
 8011008:	080124d8 	.word	0x080124d8
 801100c:	080124f8 	.word	0x080124f8

08011010 <fabs>:
 8011010:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011014:	4619      	mov	r1, r3
 8011016:	4770      	bx	lr

08011018 <_init>:
 8011018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801101a:	bf00      	nop
 801101c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801101e:	bc08      	pop	{r3}
 8011020:	469e      	mov	lr, r3
 8011022:	4770      	bx	lr

08011024 <_fini>:
 8011024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011026:	bf00      	nop
 8011028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801102a:	bc08      	pop	{r3}
 801102c:	469e      	mov	lr, r3
 801102e:	4770      	bx	lr
