
CAB_BOX_PCB_CODE_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d87c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd8  0800d9c0  0800d9c0  0000e9c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e998  0800e998  000101e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e998  0800e998  0000f998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e9a0  0800e9a0  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9a0  0800e9a0  0000f9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9a4  0800e9a4  0000f9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e9a8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000db0  200001e8  0800eb90  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000f98  0800eb90  00010f98  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044eaa  00000000  00000000  00010212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000086a7  00000000  00000000  000550bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001713a  00000000  00000000  0005d763  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002630  00000000  00000000  000748a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001dac  00000000  00000000  00076ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278a9  00000000  00000000  00078c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000451b8  00000000  00000000  000a0525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d83a4  00000000  00000000  000e56dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001bda81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000077d0  00000000  00000000  001bdac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000084  00000000  00000000  001c5294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e8 	.word	0x200001e8
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d9a4 	.word	0x0800d9a4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001ec 	.word	0x200001ec
 800017c:	0800d9a4 	.word	0x0800d9a4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e48:	b500      	push	{lr}
 8000e4a:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e52:	f042 0204 	orr.w	r2, r2, #4
 8000e56:	649a      	str	r2, [r3, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e5a:	f002 0204 	and.w	r2, r2, #4
 8000e5e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000e60:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e64:	f042 0201 	orr.w	r2, r2, #1
 8000e68:	649a      	str	r2, [r3, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000e72:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	4611      	mov	r1, r2
 8000e78:	200b      	movs	r0, #11
 8000e7a:	f002 fb87 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e7e:	200b      	movs	r0, #11
 8000e80:	f002 fb94 	bl	80035ac <HAL_NVIC_EnableIRQ>

}
 8000e84:	b003      	add	sp, #12
 8000e86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000e8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8e:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	2400      	movs	r4, #0
 8000e92:	9405      	str	r4, [sp, #20]
 8000e94:	9406      	str	r4, [sp, #24]
 8000e96:	9407      	str	r4, [sp, #28]
 8000e98:	9408      	str	r4, [sp, #32]
 8000e9a:	9409      	str	r4, [sp, #36]	@ 0x24
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ea2:	f042 0202 	orr.w	r2, r2, #2
 8000ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eaa:	f002 0202 	and.w	r2, r2, #2
 8000eae:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000eb0:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000eb4:	f042 0201 	orr.w	r2, r2, #1
 8000eb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ebc:	f002 0201 	and.w	r2, r2, #1
 8000ec0:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000ec2:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ec4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ec6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000eca:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ecc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ece:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8000ed2:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000ed4:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ed6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ed8:	f042 0204 	orr.w	r2, r2, #4
 8000edc:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000ee6:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ee8:	4f2e      	ldr	r7, [pc, #184]	@ (8000fa4 <MX_GPIO_Init+0x118>)
 8000eea:	4622      	mov	r2, r4
 8000eec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	f002 ff54 	bl	8003d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 8000ef6:	4622      	mov	r2, r4
 8000ef8:	f240 1103 	movw	r1, #259	@ 0x103
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f00:	f002 ff4d 	bl	8003d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f08:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0a:	2601      	movs	r6, #1
 8000f0c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	a905      	add	r1, sp, #20
 8000f14:	4638      	mov	r0, r7
 8000f16:	f002 fdeb 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8;
 8000f1a:	f240 1303 	movw	r3, #259	@ 0x103
 8000f1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f26:	a905      	add	r1, sp, #20
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2c:	f002 fde0 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f30:	2508      	movs	r5, #8
 8000f32:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f34:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f38:	a905      	add	r1, sp, #20
 8000f3a:	481b      	ldr	r0, [pc, #108]	@ (8000fa8 <MX_GPIO_Init+0x11c>)
 8000f3c:	f002 fdd8 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12;
 8000f40:	f241 0304 	movw	r3, #4100	@ 0x1004
 8000f44:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f46:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000f4a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	a905      	add	r1, sp, #20
 8000f50:	4638      	mov	r0, r7
 8000f52:	f002 fdcd 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f60:	a905      	add	r1, sp, #20
 8000f62:	4812      	ldr	r0, [pc, #72]	@ (8000fac <MX_GPIO_Init+0x120>)
 8000f64:	f002 fdc4 	bl	8003af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f6c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f6e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000f72:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	a905      	add	r1, sp, #20
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7c:	f002 fdb8 	bl	8003af0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000f80:	4622      	mov	r2, r4
 8000f82:	4621      	mov	r1, r4
 8000f84:	4628      	mov	r0, r5
 8000f86:	f002 fb01 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	f002 fb0e 	bl	80035ac <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f90:	4622      	mov	r2, r4
 8000f92:	4621      	mov	r1, r4
 8000f94:	2029      	movs	r0, #41	@ 0x29
 8000f96:	f002 faf9 	bl	800358c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f9a:	2029      	movs	r0, #41	@ 0x29
 8000f9c:	f002 fb06 	bl	80035ac <HAL_NVIC_EnableIRQ>

}
 8000fa0:	b00b      	add	sp, #44	@ 0x2c
 8000fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48001c00 	.word	0x48001c00
 8000fac:	48000800 	.word	0x48000800

08000fb0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fb0:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb2:	4812      	ldr	r0, [pc, #72]	@ (8000ffc <MX_I2C1_Init+0x4c>)
 8000fb4:	4b12      	ldr	r3, [pc, #72]	@ (8001000 <MX_I2C1_Init+0x50>)
 8000fb6:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <MX_I2C1_Init+0x54>)
 8000fba:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc4:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fc6:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc8:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fca:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fce:	f003 f8b3 	bl	8004138 <HAL_I2C_Init>
 8000fd2:	b950      	cbnz	r0, 8000fea <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <MX_I2C1_Init+0x4c>)
 8000fd8:	f003 fba6 	bl	8004728 <HAL_I2CEx_ConfigAnalogFilter>
 8000fdc:	b940      	cbnz	r0, 8000ff0 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <MX_I2C1_Init+0x4c>)
 8000fe2:	f003 fbcf 	bl	8004784 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe6:	b930      	cbnz	r0, 8000ff6 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fe8:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000fea:	f000 fa3b 	bl	8001464 <Error_Handler>
 8000fee:	e7f1      	b.n	8000fd4 <MX_I2C1_Init+0x24>
    Error_Handler();
 8000ff0:	f000 fa38 	bl	8001464 <Error_Handler>
 8000ff4:	e7f3      	b.n	8000fde <MX_I2C1_Init+0x2e>
    Error_Handler();
 8000ff6:	f000 fa35 	bl	8001464 <Error_Handler>
}
 8000ffa:	e7f5      	b.n	8000fe8 <MX_I2C1_Init+0x38>
 8000ffc:	20000288 	.word	0x20000288
 8001000:	40005400 	.word	0x40005400
 8001004:	20303e5d 	.word	0x20303e5d

08001008 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001008:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800100a:	4812      	ldr	r0, [pc, #72]	@ (8001054 <MX_I2C3_Init+0x4c>)
 800100c:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <MX_I2C3_Init+0x50>)
 800100e:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <MX_I2C3_Init+0x54>)
 8001012:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001018:	2201      	movs	r2, #1
 800101a:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800101c:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800101e:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001020:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001022:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001024:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001026:	f003 f887 	bl	8004138 <HAL_I2C_Init>
 800102a:	b950      	cbnz	r0, 8001042 <MX_I2C3_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102c:	2100      	movs	r1, #0
 800102e:	4809      	ldr	r0, [pc, #36]	@ (8001054 <MX_I2C3_Init+0x4c>)
 8001030:	f003 fb7a 	bl	8004728 <HAL_I2CEx_ConfigAnalogFilter>
 8001034:	b940      	cbnz	r0, 8001048 <MX_I2C3_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001036:	2100      	movs	r1, #0
 8001038:	4806      	ldr	r0, [pc, #24]	@ (8001054 <MX_I2C3_Init+0x4c>)
 800103a:	f003 fba3 	bl	8004784 <HAL_I2CEx_ConfigDigitalFilter>
 800103e:	b930      	cbnz	r0, 800104e <MX_I2C3_Init+0x46>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001040:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001042:	f000 fa0f 	bl	8001464 <Error_Handler>
 8001046:	e7f1      	b.n	800102c <MX_I2C3_Init+0x24>
    Error_Handler();
 8001048:	f000 fa0c 	bl	8001464 <Error_Handler>
 800104c:	e7f3      	b.n	8001036 <MX_I2C3_Init+0x2e>
    Error_Handler();
 800104e:	f000 fa09 	bl	8001464 <Error_Handler>
}
 8001052:	e7f5      	b.n	8001040 <MX_I2C3_Init+0x38>
 8001054:	20000204 	.word	0x20000204
 8001058:	40005c00 	.word	0x40005c00
 800105c:	20303e5d 	.word	0x20303e5d

08001060 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001064:	b098      	sub	sp, #96	@ 0x60
 8001066:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	2100      	movs	r1, #0
 800106a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800106c:	9114      	str	r1, [sp, #80]	@ 0x50
 800106e:	9115      	str	r1, [sp, #84]	@ 0x54
 8001070:	9116      	str	r1, [sp, #88]	@ 0x58
 8001072:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001074:	2238      	movs	r2, #56	@ 0x38
 8001076:	a805      	add	r0, sp, #20
 8001078:	f00a fe29 	bl	800bcce <memset>
  if(i2cHandle->Instance==I2C1)
 800107c:	6823      	ldr	r3, [r4, #0]
 800107e:	4a44      	ldr	r2, [pc, #272]	@ (8001190 <HAL_I2C_MspInit+0x130>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d005      	beq.n	8001090 <HAL_I2C_MspInit+0x30>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 8001084:	4a43      	ldr	r2, [pc, #268]	@ (8001194 <HAL_I2C_MspInit+0x134>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d039      	beq.n	80010fe <HAL_I2C_MspInit+0x9e>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800108a:	b018      	add	sp, #96	@ 0x60
 800108c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001090:	2340      	movs	r3, #64	@ 0x40
 8001092:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001094:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001098:	930a      	str	r3, [sp, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800109a:	a805      	add	r0, sp, #20
 800109c:	f004 f9ce 	bl	800543c <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	bb50      	cbnz	r0, 80010f8 <HAL_I2C_MspInit+0x98>
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010a2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 80010a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80010a8:	f043 0302 	orr.w	r3, r3, #2
 80010ac:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80010b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010b8:	23c0      	movs	r3, #192	@ 0xc0
 80010ba:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010bc:	2312      	movs	r3, #18
 80010be:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	9315      	str	r3, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2302      	movs	r3, #2
 80010c6:	9316      	str	r3, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c8:	2304      	movs	r3, #4
 80010ca:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	a913      	add	r1, sp, #76	@ 0x4c
 80010ce:	4832      	ldr	r0, [pc, #200]	@ (8001198 <HAL_I2C_MspInit+0x138>)
 80010d0:	f002 fd0e 	bl	8003af0 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80010d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010da:	65a3      	str	r3, [r4, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80010de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80010e4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	4611      	mov	r1, r2
 80010ea:	201e      	movs	r0, #30
 80010ec:	f002 fa4e 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80010f0:	201e      	movs	r0, #30
 80010f2:	f002 fa5b 	bl	80035ac <HAL_NVIC_EnableIRQ>
 80010f6:	e7c8      	b.n	800108a <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 80010f8:	f000 f9b4 	bl	8001464 <Error_Handler>
 80010fc:	e7d1      	b.n	80010a2 <HAL_I2C_MspInit+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80010fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001102:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001104:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001108:	930c      	str	r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	a805      	add	r0, sp, #20
 800110c:	f004 f996 	bl	800543c <HAL_RCCEx_PeriphCLKConfig>
 8001110:	2800      	cmp	r0, #0
 8001112:	d139      	bne.n	8001188 <HAL_I2C_MspInit+0x128>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001114:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
 8001118:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800111a:	f043 0302 	orr.w	r3, r3, #2
 800111e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001120:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 8001128:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800112a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	64e3      	str	r3, [r4, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001132:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800113a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113c:	2310      	movs	r3, #16
 800113e:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001140:	f04f 0812 	mov.w	r8, #18
 8001144:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2701      	movs	r7, #1
 800114a:	9715      	str	r7, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2600      	movs	r6, #0
 800114e:	9616      	str	r6, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001150:	2504      	movs	r5, #4
 8001152:	9517      	str	r5, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	a913      	add	r1, sp, #76	@ 0x4c
 8001156:	4810      	ldr	r0, [pc, #64]	@ (8001198 <HAL_I2C_MspInit+0x138>)
 8001158:	f002 fcca 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001160:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001164:	9715      	str	r7, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	9616      	str	r6, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001168:	9517      	str	r5, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	a913      	add	r1, sp, #76	@ 0x4c
 800116c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001170:	f002 fcbe 	bl	8003af0 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001174:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001176:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800117a:	65a3      	str	r3, [r4, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800117c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800117e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001182:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8001184:	9b02      	ldr	r3, [sp, #8]
}
 8001186:	e780      	b.n	800108a <HAL_I2C_MspInit+0x2a>
      Error_Handler();
 8001188:	f000 f96c 	bl	8001464 <Error_Handler>
 800118c:	e7c2      	b.n	8001114 <HAL_I2C_MspInit+0xb4>
 800118e:	bf00      	nop
 8001190:	40005400 	.word	0x40005400
 8001194:	40005c00 	.word	0x40005c00
 8001198:	48000400 	.word	0x48000400

0800119c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800119c:	b500      	push	{lr}
 800119e:	b083      	sub	sp, #12
 80011a0:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	2201      	movs	r2, #1
 80011a8:	a901      	add	r1, sp, #4
 80011aa:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <__io_putchar+0x1c>)
 80011ac:	f006 fd43 	bl	8007c36 <HAL_UART_Transmit>
  return ch;
}
 80011b0:	9801      	ldr	r0, [sp, #4]
 80011b2:	b003      	add	sp, #12
 80011b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011b8:	20000594 	.word	0x20000594

080011bc <saveIDsToEEPROM>:
    return soc;
}

// EEPROM Read and Write Functions
void saveIDsToEEPROM(I2C_HandleTypeDef *hi2c3, uint16_t id1, uint16_t id2, uint16_t startAddress)
{
 80011bc:	b530      	push	{r4, r5, lr}
 80011be:	b087      	sub	sp, #28
 80011c0:	4605      	mov	r5, r0
 80011c2:	461c      	mov	r4, r3

	// Construct the high and low bytes of the pairingID 1
	uint8_t data_high_byte_1  = (id1 >> 8) & 0xFF;
 80011c4:	0a0b      	lsrs	r3, r1, #8
 80011c6:	f88d 3017 	strb.w	r3, [sp, #23]
	uint8_t data_low_byte_1   = id1 & 0xFF;
 80011ca:	f88d 1016 	strb.w	r1, [sp, #22]

	// Construct the high and low bytes of pairing ID 2
	uint8_t data_high_byte_2  = (id2 >> 8) & 0xFF;
 80011ce:	0a13      	lsrs	r3, r2, #8
 80011d0:	f88d 3015 	strb.w	r3, [sp, #21]
	uint8_t data_low_byte_2   = id2 & 0xFF;
 80011d4:	f88d 2014 	strb.w	r2, [sp, #20]

	// Perform the I2C write operations

    printf("Writing to address: 0x%02X, id1 Value: 0x%02X, id2 Value: 0x%02X\n\r", startAddress, id1, id2);
 80011d8:	4613      	mov	r3, r2
 80011da:	460a      	mov	r2, r1
 80011dc:	4621      	mov	r1, r4
 80011de:	4835      	ldr	r0, [pc, #212]	@ (80012b4 <saveIDsToEEPROM+0xf8>)
 80011e0:	f00a fd20 	bl	800bc24 <iprintf>
    printf("data_high_byte_1: 0x%02X, data_low_byte_1: 0x%02X\n\r", data_high_byte_1, data_low_byte_1);
 80011e4:	f89d 2016 	ldrb.w	r2, [sp, #22]
 80011e8:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80011ec:	4832      	ldr	r0, [pc, #200]	@ (80012b8 <saveIDsToEEPROM+0xfc>)
 80011ee:	f00a fd19 	bl	800bc24 <iprintf>
    printf("data_high_byte_2: 0x%02X, data_low_byte_2: 0x%02X\n\r", data_high_byte_2, data_low_byte_2);
 80011f2:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80011f6:	f89d 1015 	ldrb.w	r1, [sp, #21]
 80011fa:	4830      	ldr	r0, [pc, #192]	@ (80012bc <saveIDsToEEPROM+0x100>)
 80011fc:	f00a fd12 	bl	800bc24 <iprintf>

	// Send high and low bytes of pairingId1
    HAL_StatusTypeDef receiveStatus = HAL_I2C_Mem_Write(hi2c3, EEPROM_ADDR, startAddress + 1, 1, &data_high_byte_1, 1, HAL_MAX_DELAY);
 8001200:	1c62      	adds	r2, r4, #1
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	f10d 0117 	add.w	r1, sp, #23
 8001210:	9100      	str	r1, [sp, #0]
 8001212:	b292      	uxth	r2, r2
 8001214:	21a0      	movs	r1, #160	@ 0xa0
 8001216:	4628      	mov	r0, r5
 8001218:	f003 f81c 	bl	8004254 <HAL_I2C_Mem_Write>

	if (receiveStatus == HAL_OK)
 800121c:	2800      	cmp	r0, #0
 800121e:	d139      	bne.n	8001294 <saveIDsToEEPROM+0xd8>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Successful!\n\r");
 8001220:	4827      	ldr	r0, [pc, #156]	@ (80012c0 <saveIDsToEEPROM+0x104>)
 8001222:	f00a fcff 	bl	800bc24 <iprintf>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
	}

	// Send high and low bytes of pairingId2
	receiveStatus = HAL_I2C_Mem_Write(hi2c3, EEPROM_ADDR, startAddress + 2, 1, &data_low_byte_1, 1, HAL_MAX_DELAY);
 8001226:	1ca2      	adds	r2, r4, #2
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	f10d 0116 	add.w	r1, sp, #22
 8001236:	9100      	str	r1, [sp, #0]
 8001238:	b292      	uxth	r2, r2
 800123a:	21a0      	movs	r1, #160	@ 0xa0
 800123c:	4628      	mov	r0, r5
 800123e:	f003 f809 	bl	8004254 <HAL_I2C_Mem_Write>

	if (receiveStatus == HAL_OK)
 8001242:	bb58      	cbnz	r0, 800129c <saveIDsToEEPROM+0xe0>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Successful!\n\r");
 8001244:	481e      	ldr	r0, [pc, #120]	@ (80012c0 <saveIDsToEEPROM+0x104>)
 8001246:	f00a fced 	bl	800bc24 <iprintf>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
	}

	// Send high and low bytes of pairingId2
	receiveStatus = HAL_I2C_Mem_Write(hi2c3, EEPROM_ADDR, startAddress + 3, 1, &data_high_byte_2, 1, HAL_MAX_DELAY);
 800124a:	1ce2      	adds	r2, r4, #3
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	9302      	str	r3, [sp, #8]
 8001252:	2301      	movs	r3, #1
 8001254:	9301      	str	r3, [sp, #4]
 8001256:	f10d 0115 	add.w	r1, sp, #21
 800125a:	9100      	str	r1, [sp, #0]
 800125c:	b292      	uxth	r2, r2
 800125e:	21a0      	movs	r1, #160	@ 0xa0
 8001260:	4628      	mov	r0, r5
 8001262:	f002 fff7 	bl	8004254 <HAL_I2C_Mem_Write>

	if (receiveStatus == HAL_OK)
 8001266:	b9e8      	cbnz	r0, 80012a4 <saveIDsToEEPROM+0xe8>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Successful!\n\r");
 8001268:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <saveIDsToEEPROM+0x104>)
 800126a:	f00a fcdb 	bl	800bc24 <iprintf>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
	}

	 // Send high and low bytes of pairingId2
	receiveStatus = HAL_I2C_Mem_Write(hi2c3, EEPROM_ADDR, startAddress + 4, 1, &data_low_byte_2, 1, HAL_MAX_DELAY);
 800126e:	1d22      	adds	r2, r4, #4
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	9302      	str	r3, [sp, #8]
 8001276:	2301      	movs	r3, #1
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	a905      	add	r1, sp, #20
 800127c:	9100      	str	r1, [sp, #0]
 800127e:	b292      	uxth	r2, r2
 8001280:	21a0      	movs	r1, #160	@ 0xa0
 8001282:	4628      	mov	r0, r5
 8001284:	f002 ffe6 	bl	8004254 <HAL_I2C_Mem_Write>

	if (receiveStatus == HAL_OK)
 8001288:	b980      	cbnz	r0, 80012ac <saveIDsToEEPROM+0xf0>
	{
		printf("HAL_I2C_Mem_Write to EEPROM Successful!\n\r");
 800128a:	480d      	ldr	r0, [pc, #52]	@ (80012c0 <saveIDsToEEPROM+0x104>)
 800128c:	f00a fcca 	bl	800bc24 <iprintf>
	else
	{
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
	}

}
 8001290:	b007      	add	sp, #28
 8001292:	bd30      	pop	{r4, r5, pc}
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
 8001294:	480b      	ldr	r0, [pc, #44]	@ (80012c4 <saveIDsToEEPROM+0x108>)
 8001296:	f00a fcc5 	bl	800bc24 <iprintf>
 800129a:	e7c4      	b.n	8001226 <saveIDsToEEPROM+0x6a>
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
 800129c:	4809      	ldr	r0, [pc, #36]	@ (80012c4 <saveIDsToEEPROM+0x108>)
 800129e:	f00a fcc1 	bl	800bc24 <iprintf>
 80012a2:	e7d2      	b.n	800124a <saveIDsToEEPROM+0x8e>
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
 80012a4:	4807      	ldr	r0, [pc, #28]	@ (80012c4 <saveIDsToEEPROM+0x108>)
 80012a6:	f00a fcbd 	bl	800bc24 <iprintf>
 80012aa:	e7e0      	b.n	800126e <saveIDsToEEPROM+0xb2>
		printf("HAL_I2C_Mem_Write to EEPROM Failed.\n\r");
 80012ac:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <saveIDsToEEPROM+0x108>)
 80012ae:	f00a fcb9 	bl	800bc24 <iprintf>
}
 80012b2:	e7ed      	b.n	8001290 <saveIDsToEEPROM+0xd4>
 80012b4:	0800da04 	.word	0x0800da04
 80012b8:	0800da48 	.word	0x0800da48
 80012bc:	0800da7c 	.word	0x0800da7c
 80012c0:	0800dab0 	.word	0x0800dab0
 80012c4:	0800dadc 	.word	0x0800dadc

080012c8 <readIDsFromEEPROM>:

bool readIDsFromEEPROM(I2C_HandleTypeDef *hi2c3, uint16_t *id1, uint16_t *id2, uint16_t startAddress)
{
 80012c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012cc:	b085      	sub	sp, #20
 80012ce:	4606      	mov	r6, r0
 80012d0:	460f      	mov	r7, r1
 80012d2:	4690      	mov	r8, r2
 80012d4:	461d      	mov	r5, r3

	printf("Read Device IDS from EEPROM\n\r");
 80012d6:	4858      	ldr	r0, [pc, #352]	@ (8001438 <readIDsFromEEPROM+0x170>)
 80012d8:	f00a fca4 	bl	800bc24 <iprintf>
	// construct the read buffer and temp variables
	uint8_t * read_buffer 	= NULL;
	uint16_t temp1 			= 0;
	uint16_t temp2 			= 0;

	read_buffer = (uint8_t *)malloc(4 * sizeof(uint8_t));
 80012dc:	2004      	movs	r0, #4
 80012de:	f009 fec9 	bl	800b074 <malloc>
 80012e2:	4604      	mov	r4, r0

    HAL_StatusTypeDef receiveStatus = HAL_I2C_Mem_Read(hi2c3, EEPROM_ADDR, startAddress + 1, 1, &read_buffer[0], 1, HAL_MAX_DELAY);
 80012e4:	1c6a      	adds	r2, r5, #1
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	2301      	movs	r3, #1
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	9000      	str	r0, [sp, #0]
 80012f2:	b292      	uxth	r2, r2
 80012f4:	21a0      	movs	r1, #160	@ 0xa0
 80012f6:	4630      	mov	r0, r6
 80012f8:	f003 f880 	bl	80043fc <HAL_I2C_Mem_Read>
	if (receiveStatus != HAL_OK)
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d176      	bne.n	80013ee <readIDsFromEEPROM+0x126>
	{
		printf("Read Failed (ID1) - HAL Status: %u\n\r", receiveStatus);
		return false;
	}

	receiveStatus = HAL_I2C_Mem_Read(hi2c3, EEPROM_ADDR, startAddress + 2, 1, &read_buffer[1], 1, HAL_MAX_DELAY);
 8001300:	1caa      	adds	r2, r5, #2
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2301      	movs	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	18e1      	adds	r1, r4, r3
 800130e:	9100      	str	r1, [sp, #0]
 8001310:	b292      	uxth	r2, r2
 8001312:	21a0      	movs	r1, #160	@ 0xa0
 8001314:	4630      	mov	r0, r6
 8001316:	f003 f871 	bl	80043fc <HAL_I2C_Mem_Read>
	if (receiveStatus != HAL_OK)
 800131a:	4601      	mov	r1, r0
 800131c:	2800      	cmp	r0, #0
 800131e:	d16e      	bne.n	80013fe <readIDsFromEEPROM+0x136>
	{
		printf("Read Failed (ID2) - HAL Status: %u\n\r", receiveStatus);
		return false;
	}

	*id1 = (uint16_t)(read_buffer[0] << 8) | read_buffer[1];
 8001320:	7823      	ldrb	r3, [r4, #0]
 8001322:	7861      	ldrb	r1, [r4, #1]
 8001324:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
 8001328:	8039      	strh	r1, [r7, #0]

	temp1 = *id1;

	if((temp1 != 0x0000) && (temp1 != 0xFFFF))
 800132a:	1e4f      	subs	r7, r1, #1
 800132c:	b2bf      	uxth	r7, r7
 800132e:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 8001332:	429f      	cmp	r7, r3
 8001334:	d868      	bhi.n	8001408 <readIDsFromEEPROM+0x140>
	{
		deviceIds.deviceID = temp1;
 8001336:	f8df 9104 	ldr.w	r9, [pc, #260]	@ 800143c <readIDsFromEEPROM+0x174>
 800133a:	f8a9 1000 	strh.w	r1, [r9]
		printf("4. deviceIds.deviceID: 0x%04X\n\r", deviceIds.deviceID);
 800133e:	4840      	ldr	r0, [pc, #256]	@ (8001440 <readIDsFromEEPROM+0x178>)
 8001340:	f00a fc70 	bl	800bc24 <iprintf>
		deviceIds.combinedDeviceID[0]        = deviceIds.deviceID;
 8001344:	f8b9 3000 	ldrh.w	r3, [r9]
 8001348:	f8a9 3004 	strh.w	r3, [r9, #4]
	else
	{
		printf("4. No deviceID saved to EEPROM, waiting for pairing...\n\r");
	}

    receiveStatus = HAL_I2C_Mem_Read(hi2c3, EEPROM_ADDR, startAddress + 3, 1, &read_buffer[2], 1, HAL_MAX_DELAY);
 800134c:	1cea      	adds	r2, r5, #3
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	1ca1      	adds	r1, r4, #2
 800135a:	9100      	str	r1, [sp, #0]
 800135c:	b292      	uxth	r2, r2
 800135e:	21a0      	movs	r1, #160	@ 0xa0
 8001360:	4630      	mov	r0, r6
 8001362:	f003 f84b 	bl	80043fc <HAL_I2C_Mem_Read>
	if (receiveStatus != HAL_OK)
 8001366:	4601      	mov	r1, r0
 8001368:	2800      	cmp	r0, #0
 800136a:	d151      	bne.n	8001410 <readIDsFromEEPROM+0x148>
	{
		printf("Read Failed (ID1) - HAL Status: %u\n\r", receiveStatus);
		return false;
	}

	receiveStatus = HAL_I2C_Mem_Read(hi2c3, EEPROM_ADDR, startAddress + 4, 1, &read_buffer[3], 1, HAL_MAX_DELAY);
 800136c:	3504      	adds	r5, #4
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2301      	movs	r3, #1
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	1ce2      	adds	r2, r4, #3
 800137a:	9200      	str	r2, [sp, #0]
 800137c:	b2aa      	uxth	r2, r5
 800137e:	21a0      	movs	r1, #160	@ 0xa0
 8001380:	4630      	mov	r0, r6
 8001382:	f003 f83b 	bl	80043fc <HAL_I2C_Mem_Read>
	if (receiveStatus != HAL_OK)
 8001386:	4601      	mov	r1, r0
 8001388:	2800      	cmp	r0, #0
 800138a:	d146      	bne.n	800141a <readIDsFromEEPROM+0x152>
	{
		printf("Read Failed (ID2) - HAL Status: %u\n\r", receiveStatus);
		return false;
	}

	*id2 = (uint16_t)(read_buffer[2] << 8) | read_buffer[3];
 800138c:	78a3      	ldrb	r3, [r4, #2]
 800138e:	78e5      	ldrb	r5, [r4, #3]
 8001390:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 8001394:	f8a8 5000 	strh.w	r5, [r8]
	temp2 = *id2;

	if((temp2 != 0x0000) && (temp2 != 0xFFFF))
 8001398:	1e6b      	subs	r3, r5, #1
 800139a:	b29b      	uxth	r3, r3
 800139c:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d83f      	bhi.n	8001424 <readIDsFromEEPROM+0x15c>
	{
		deviceIds.otherDeviceID = temp2;
 80013a4:	4e25      	ldr	r6, [pc, #148]	@ (800143c <readIDsFromEEPROM+0x174>)
 80013a6:	8075      	strh	r5, [r6, #2]
		printf("6. deviceIds.otherDeviceID: 0x%04X\n\r", deviceIds.otherDeviceID);
 80013a8:	4629      	mov	r1, r5
 80013aa:	4826      	ldr	r0, [pc, #152]	@ (8001444 <readIDsFromEEPROM+0x17c>)
 80013ac:	f00a fc3a 	bl	800bc24 <iprintf>

		deviceIds.combinedDeviceID[1]        = deviceIds.otherDeviceID;
 80013b0:	8873      	ldrh	r3, [r6, #2]
 80013b2:	80f3      	strh	r3, [r6, #6]
		deviceIds.swappedCombinedDeviceID[0] = deviceIds.combinedDeviceID[1];
 80013b4:	8133      	strh	r3, [r6, #8]
		deviceIds.swappedCombinedDeviceID[1] = deviceIds.combinedDeviceID[0];
 80013b6:	88b1      	ldrh	r1, [r6, #4]
 80013b8:	8171      	strh	r1, [r6, #10]

		swappedCombinedDeviceID[0] 			 = deviceIds.swappedCombinedDeviceID[0];
 80013ba:	4a23      	ldr	r2, [pc, #140]	@ (8001448 <readIDsFromEEPROM+0x180>)
 80013bc:	8013      	strh	r3, [r2, #0]
	    swappedCombinedDeviceID[1] 			 = deviceIds.swappedCombinedDeviceID[1];
 80013be:	8051      	strh	r1, [r2, #2]
	else
	{
		printf("6. No deviceID saved to EEPROM, waiting for pairing...\n\r");
	}

	printf("7. deviceIds.deviceID = 0x%04X\n\r", deviceIds.deviceID);
 80013c0:	4e1e      	ldr	r6, [pc, #120]	@ (800143c <readIDsFromEEPROM+0x174>)
 80013c2:	8831      	ldrh	r1, [r6, #0]
 80013c4:	4821      	ldr	r0, [pc, #132]	@ (800144c <readIDsFromEEPROM+0x184>)
 80013c6:	f00a fc2d 	bl	800bc24 <iprintf>
	printf("8. deviceIds.otherDeviceID = 0x%04X\n\r", deviceIds.otherDeviceID);
 80013ca:	8871      	ldrh	r1, [r6, #2]
 80013cc:	4820      	ldr	r0, [pc, #128]	@ (8001450 <readIDsFromEEPROM+0x188>)
 80013ce:	f00a fc29 	bl	800bc24 <iprintf>

	free(read_buffer);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f009 fe56 	bl	800b084 <free>

	if((temp1 != 0) && (temp1 != 0xFFFF) && (temp2 != 0) && (temp2 != 0xFFFF))
 80013d8:	f64f 73fd 	movw	r3, #65533	@ 0xfffd
 80013dc:	429f      	cmp	r7, r3
 80013de:	d827      	bhi.n	8001430 <readIDsFromEEPROM+0x168>
 80013e0:	b345      	cbz	r5, 8001434 <readIDsFromEEPROM+0x16c>
 80013e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013e6:	429d      	cmp	r5, r3
 80013e8:	d020      	beq.n	800142c <readIDsFromEEPROM+0x164>
	{
		return true;
 80013ea:	2001      	movs	r0, #1
 80013ec:	e004      	b.n	80013f8 <readIDsFromEEPROM+0x130>
 80013ee:	4601      	mov	r1, r0
		printf("Read Failed (ID1) - HAL Status: %u\n\r", receiveStatus);
 80013f0:	4818      	ldr	r0, [pc, #96]	@ (8001454 <readIDsFromEEPROM+0x18c>)
 80013f2:	f00a fc17 	bl	800bc24 <iprintf>
		return false;
 80013f6:	2000      	movs	r0, #0

	else
	{
		return false;
	}
}
 80013f8:	b005      	add	sp, #20
 80013fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("Read Failed (ID2) - HAL Status: %u\n\r", receiveStatus);
 80013fe:	4816      	ldr	r0, [pc, #88]	@ (8001458 <readIDsFromEEPROM+0x190>)
 8001400:	f00a fc10 	bl	800bc24 <iprintf>
		return false;
 8001404:	2000      	movs	r0, #0
 8001406:	e7f7      	b.n	80013f8 <readIDsFromEEPROM+0x130>
		printf("4. No deviceID saved to EEPROM, waiting for pairing...\n\r");
 8001408:	4814      	ldr	r0, [pc, #80]	@ (800145c <readIDsFromEEPROM+0x194>)
 800140a:	f00a fc0b 	bl	800bc24 <iprintf>
 800140e:	e79d      	b.n	800134c <readIDsFromEEPROM+0x84>
		printf("Read Failed (ID1) - HAL Status: %u\n\r", receiveStatus);
 8001410:	4810      	ldr	r0, [pc, #64]	@ (8001454 <readIDsFromEEPROM+0x18c>)
 8001412:	f00a fc07 	bl	800bc24 <iprintf>
		return false;
 8001416:	2000      	movs	r0, #0
 8001418:	e7ee      	b.n	80013f8 <readIDsFromEEPROM+0x130>
		printf("Read Failed (ID2) - HAL Status: %u\n\r", receiveStatus);
 800141a:	480f      	ldr	r0, [pc, #60]	@ (8001458 <readIDsFromEEPROM+0x190>)
 800141c:	f00a fc02 	bl	800bc24 <iprintf>
		return false;
 8001420:	2000      	movs	r0, #0
 8001422:	e7e9      	b.n	80013f8 <readIDsFromEEPROM+0x130>
		printf("6. No deviceID saved to EEPROM, waiting for pairing...\n\r");
 8001424:	480e      	ldr	r0, [pc, #56]	@ (8001460 <readIDsFromEEPROM+0x198>)
 8001426:	f00a fbfd 	bl	800bc24 <iprintf>
 800142a:	e7c9      	b.n	80013c0 <readIDsFromEEPROM+0xf8>
		return false;
 800142c:	2000      	movs	r0, #0
 800142e:	e7e3      	b.n	80013f8 <readIDsFromEEPROM+0x130>
 8001430:	2000      	movs	r0, #0
 8001432:	e7e1      	b.n	80013f8 <readIDsFromEEPROM+0x130>
 8001434:	2000      	movs	r0, #0
 8001436:	e7df      	b.n	80013f8 <readIDsFromEEPROM+0x130>
 8001438:	0800db04 	.word	0x0800db04
 800143c:	2000030c 	.word	0x2000030c
 8001440:	0800db74 	.word	0x0800db74
 8001444:	0800dbd0 	.word	0x0800dbd0
 8001448:	20000324 	.word	0x20000324
 800144c:	0800dc34 	.word	0x0800dc34
 8001450:	0800dc58 	.word	0x0800dc58
 8001454:	0800db24 	.word	0x0800db24
 8001458:	0800db4c 	.word	0x0800db4c
 800145c:	0800db94 	.word	0x0800db94
 8001460:	0800dbf8 	.word	0x0800dbf8

08001464 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001466:	e7fe      	b.n	8001466 <Error_Handler+0x2>

08001468 <SystemClock_Config>:
{
 8001468:	b510      	push	{r4, lr}
 800146a:	b09a      	sub	sp, #104	@ 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146c:	2248      	movs	r2, #72	@ 0x48
 800146e:	2100      	movs	r1, #0
 8001470:	a808      	add	r0, sp, #32
 8001472:	f00a fc2c 	bl	800bcce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001476:	2400      	movs	r4, #0
 8001478:	9401      	str	r4, [sp, #4]
 800147a:	9402      	str	r4, [sp, #8]
 800147c:	9403      	str	r4, [sp, #12]
 800147e:	9404      	str	r4, [sp, #16]
 8001480:	9405      	str	r4, [sp, #20]
 8001482:	9406      	str	r4, [sp, #24]
 8001484:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001486:	f003 f9a9 	bl	80047dc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800148a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800148e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001492:	f023 0318 	bic.w	r3, r3, #24
 8001496:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800149a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	6813      	ldr	r3, [r2, #0]
 80014ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80014b4:	232c      	movs	r3, #44	@ 0x2c
 80014b6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014b8:	2381      	movs	r3, #129	@ 0x81
 80014ba:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014c0:	9411      	str	r4, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80014c2:	22b0      	movs	r2, #176	@ 0xb0
 80014c4:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80014c6:	940f      	str	r4, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014c8:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ca:	9413      	str	r4, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	a808      	add	r0, sp, #32
 80014ce:	f003 fb1f 	bl	8004b10 <HAL_RCC_OscConfig>
 80014d2:	b970      	cbnz	r0, 80014f2 <SystemClock_Config+0x8a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80014d4:	234f      	movs	r3, #79	@ 0x4f
 80014d6:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80014d8:	2300      	movs	r3, #0
 80014da:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014de:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80014e2:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e4:	2102      	movs	r1, #2
 80014e6:	a801      	add	r0, sp, #4
 80014e8:	f003 fe44 	bl	8005174 <HAL_RCC_ClockConfig>
 80014ec:	b918      	cbnz	r0, 80014f6 <SystemClock_Config+0x8e>
}
 80014ee:	b01a      	add	sp, #104	@ 0x68
 80014f0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014f2:	f7ff ffb7 	bl	8001464 <Error_Handler>
    Error_Handler();
 80014f6:	f7ff ffb5 	bl	8001464 <Error_Handler>
	...

080014fc <main>:
{
 80014fc:	b510      	push	{r4, lr}
  HAL_Init();
 80014fe:	f001 ff97 	bl	8003430 <HAL_Init>
  SystemClock_Config();
 8001502:	f7ff ffb1 	bl	8001468 <SystemClock_Config>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	200f      	movs	r0, #15
 8001508:	f001 ff6a 	bl	80033e0 <HAL_InitTick>
  MX_GPIO_Init();
 800150c:	f7ff fcbe 	bl	8000e8c <MX_GPIO_Init>
  MX_DMA_Init();
 8001510:	f7ff fc9a 	bl	8000e48 <MX_DMA_Init>
  MX_I2C1_Init();
 8001514:	f7ff fd4c 	bl	8000fb0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001518:	f7ff fd76 	bl	8001008 <MX_I2C3_Init>
  MX_RTC_Init();
 800151c:	f000 f9c2 	bl	80018a4 <MX_RTC_Init>
  MX_SPI1_Init();
 8001520:	f000 fa7a 	bl	8001a18 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001524:	f000 fe66 	bl	80021f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001528:	f000 fea2 	bl	8002270 <MX_USART2_UART_Init>
  MX_SubGHz_Phy_Init();
 800152c:	f001 f93f 	bl	80027ae <MX_SubGHz_Phy_Init>
  MX_TIM2_Init();
 8001530:	f000 fcce 	bl	8001ed0 <MX_TIM2_Init>
  SUBGRF_SetPaConfig(0x2, 0x3, 0x0, 0x1);
 8001534:	2301      	movs	r3, #1
 8001536:	2200      	movs	r2, #0
 8001538:	2103      	movs	r1, #3
 800153a:	2002      	movs	r0, #2
 800153c:	f008 fba6 	bl	8009c8c <SUBGRF_SetPaConfig>
  HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_SET);
 8001540:	2201      	movs	r2, #1
 8001542:	4611      	mov	r1, r2
 8001544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001548:	f002 fc29 	bl	8003d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001556:	f002 fc22 	bl	8003d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2102      	movs	r1, #2
 800155e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001562:	f002 fc1c 	bl	8003d9e <HAL_GPIO_WritePin>
  if(readIDsFromEEPROM(&hi2c3, EEPROM_PairingID1, EEPROM_PairingID2, EEPROM_Start_Address))
 8001566:	4bb8      	ldr	r3, [pc, #736]	@ (8001848 <main+0x34c>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	4ab8      	ldr	r2, [pc, #736]	@ (800184c <main+0x350>)
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	49b8      	ldr	r1, [pc, #736]	@ (8001850 <main+0x354>)
 8001570:	6809      	ldr	r1, [r1, #0]
 8001572:	48b8      	ldr	r0, [pc, #736]	@ (8001854 <main+0x358>)
 8001574:	f7ff fea8 	bl	80012c8 <readIDsFromEEPROM>
 8001578:	bbb0      	cbnz	r0, 80015e8 <main+0xec>
    HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);   HAL_UART_MspInit(&huart1);
 800157a:	2003      	movs	r0, #3
 800157c:	f001 fff4 	bl	8003568 <HAL_NVIC_SetPriorityGrouping>
 8001580:	4cb5      	ldr	r4, [pc, #724]	@ (8001858 <main+0x35c>)
 8001582:	4620      	mov	r0, r4
 8001584:	f000 fea8 	bl	80022d8 <HAL_UART_MspInit>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	4611      	mov	r1, r2
 800158c:	2024      	movs	r0, #36	@ 0x24
 800158e:	f001 fffd 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2103      	movs	r1, #3
 8001596:	201e      	movs	r0, #30
 8001598:	f001 fff8 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2104      	movs	r1, #4
 80015a0:	201b      	movs	r0, #27
 80015a2:	f001 fff3 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015a6:	2024      	movs	r0, #36	@ 0x24
 80015a8:	f002 f800 	bl	80035ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015ac:	201b      	movs	r0, #27
 80015ae:	f001 fffd 	bl	80035ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015b2:	201e      	movs	r0, #30
 80015b4:	f001 fffa 	bl	80035ac <HAL_NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80015b8:	b662      	cpsie	i
   HAL_UART_Receive_IT(&huart1, dataReceived, sizeof(dataReceived));
 80015ba:	2201      	movs	r2, #1
 80015bc:	49a7      	ldr	r1, [pc, #668]	@ (800185c <main+0x360>)
 80015be:	4620      	mov	r0, r4
 80015c0:	f006 fcb6 	bl	8007f30 <HAL_UART_Receive_IT>
   status = HAL_I2C_IsDeviceReady(&hi2c1, LTC4015_I2C_ADDRESS, 2, HAL_MAX_DELAY);//FINDME!
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	2202      	movs	r2, #2
 80015ca:	21d0      	movs	r1, #208	@ 0xd0
 80015cc:	48a4      	ldr	r0, [pc, #656]	@ (8001860 <main+0x364>)
 80015ce:	f002 ffed 	bl	80045ac <HAL_I2C_IsDeviceReady>
   if(status != HAL_OK)
 80015d2:	4601      	mov	r1, r0
 80015d4:	b190      	cbz	r0, 80015fc <main+0x100>
	   printf("SMBUS configuration failed, status = %d\n\r", status);
 80015d6:	48a3      	ldr	r0, [pc, #652]	@ (8001864 <main+0x368>)
 80015d8:	f00a fb24 	bl	800bc24 <iprintf>
   if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80015dc:	48a2      	ldr	r0, [pc, #648]	@ (8001868 <main+0x36c>)
 80015de:	f005 f8c3 	bl	8006768 <HAL_TIM_Base_Start_IT>
 80015e2:	b178      	cbz	r0, 8001604 <main+0x108>
     Error_Handler();
 80015e4:	f7ff ff3e 	bl	8001464 <Error_Handler>
	  printf("readIDSFromEEPROM() successful!\n\r");
 80015e8:	48a0      	ldr	r0, [pc, #640]	@ (800186c <main+0x370>)
 80015ea:	f00a fb1b 	bl	800bc24 <iprintf>
	  isPairingButtonPressed = false;
 80015ee:	4ba0      	ldr	r3, [pc, #640]	@ (8001870 <main+0x374>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
	  currentPairingState = Paired;
 80015f4:	4b9f      	ldr	r3, [pc, #636]	@ (8001874 <main+0x378>)
 80015f6:	2206      	movs	r2, #6
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	e7be      	b.n	800157a <main+0x7e>
	   printf("SMBUS configuration succeeded!\n\r");
 80015fc:	489e      	ldr	r0, [pc, #632]	@ (8001878 <main+0x37c>)
 80015fe:	f00a fb11 	bl	800bc24 <iprintf>
 8001602:	e7eb      	b.n	80015dc <main+0xe0>
   HAL_Delay(300); // Need a 300 msec delay here for some reason
 8001604:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001608:	f000 fb98 	bl	8001d3c <HAL_Delay>
  readIDsFromEEPROM(&hi2c3, &EEPROM_PairingID1, &EEPROM_PairingID2, EEPROM_Start_Address);
 800160c:	4b8e      	ldr	r3, [pc, #568]	@ (8001848 <main+0x34c>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	4a8e      	ldr	r2, [pc, #568]	@ (800184c <main+0x350>)
 8001612:	498f      	ldr	r1, [pc, #572]	@ (8001850 <main+0x354>)
 8001614:	488f      	ldr	r0, [pc, #572]	@ (8001854 <main+0x358>)
 8001616:	f7ff fe57 	bl	80012c8 <readIDsFromEEPROM>
  SUBGRF_SetPaConfig(2, 2, 0, 1);
 800161a:	2301      	movs	r3, #1
 800161c:	2200      	movs	r2, #0
 800161e:	2102      	movs	r1, #2
 8001620:	4608      	mov	r0, r1
 8001622:	f008 fb33 	bl	8009c8c <SUBGRF_SetPaConfig>
 8001626:	e04f      	b.n	80016c8 <main+0x1cc>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2101      	movs	r1, #1
 800162c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001630:	f002 fbb5 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800163a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800163e:	f002 fbae 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2102      	movs	r1, #2
 8001646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800164a:	f002 fba8 	bl	8003d9e <HAL_GPIO_WritePin>
			MX_SubGHz_Phy_Process();
 800164e:	f001 f8b4 	bl	80027ba <MX_SubGHz_Phy_Process>
 8001652:	e026      	b.n	80016a2 <main+0x1a6>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	2101      	movs	r1, #1
 8001658:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165c:	f002 fb9f 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001666:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800166a:	f002 fb98 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_SET);
 800166e:	2201      	movs	r2, #1
 8001670:	2102      	movs	r1, #2
 8001672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001676:	f002 fb92 	bl	8003d9e <HAL_GPIO_WritePin>
 800167a:	e012      	b.n	80016a2 <main+0x1a6>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_SET);
 800167c:	2201      	movs	r2, #1
 800167e:	4611      	mov	r1, r2
 8001680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001684:	f002 fb8b 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800168e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001692:	f002 fb84 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	2102      	movs	r1, #2
 800169a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169e:	f002 fb7e 	bl	8003d9e <HAL_GPIO_WritePin>
	  GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80016a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016aa:	f002 fb71 	bl	8003d90 <HAL_GPIO_ReadPin>
	  if(buttonState == GPIO_PIN_RESET)
 80016ae:	b948      	cbnz	r0, 80016c4 <main+0x1c8>
		  uint32_t startTime = HAL_GetTick();
 80016b0:	f000 fb38 	bl	8001d24 <HAL_GetTick>
 80016b4:	4604      	mov	r4, r0
		  while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET)
 80016b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016be:	f002 fb67 	bl	8003d90 <HAL_GPIO_ReadPin>
 80016c2:	b1f8      	cbz	r0, 8001704 <main+0x208>
    MX_SubGHz_Phy_Process();
 80016c4:	f001 f879 	bl	80027ba <MX_SubGHz_Phy_Process>
	  if(currentPairingState == Paired)
 80016c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001874 <main+0x378>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b06      	cmp	r3, #6
 80016ce:	d0ab      	beq.n	8001628 <main+0x12c>
	   else if((currentPairingState == GenerateDeviceID) || (currentPairingState == EncodeDeviceID) || (currentPairingState == BroadcastDeviceID))
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	2a02      	cmp	r2, #2
 80016d6:	d9bd      	bls.n	8001654 <main+0x158>
	   else if((currentPairingState == Unknown))
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1cf      	bne.n	800167c <main+0x180>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	4611      	mov	r1, r2
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e4:	f002 fb5b 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f2:	f002 fb54 	bl	8003d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2102      	movs	r1, #2
 80016fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016fe:	f002 fb4e 	bl	8003d9e <HAL_GPIO_WritePin>
 8001702:	e7ce      	b.n	80016a2 <main+0x1a6>
			  HAL_Delay(10);
 8001704:	200a      	movs	r0, #10
 8001706:	f000 fb19 	bl	8001d3c <HAL_Delay>
			  if((HAL_GetTick() - startTime) >= 5000)
 800170a:	f000 fb0b 	bl	8001d24 <HAL_GetTick>
 800170e:	1b00      	subs	r0, r0, r4
 8001710:	f241 3387 	movw	r3, #4999	@ 0x1387
 8001714:	4298      	cmp	r0, r3
 8001716:	d9ce      	bls.n	80016b6 <main+0x1ba>
				  printf("Button held down for 3 seconds\n\r");
 8001718:	4858      	ldr	r0, [pc, #352]	@ (800187c <main+0x380>)
 800171a:	f00a fa83 	bl	800bc24 <iprintf>
				  deviceIds.deviceID 					= 0;
 800171e:	4a58      	ldr	r2, [pc, #352]	@ (8001880 <main+0x384>)
 8001720:	2300      	movs	r3, #0
 8001722:	8013      	strh	r3, [r2, #0]
				  deviceIds.otherDeviceID 				= 0;
 8001724:	8053      	strh	r3, [r2, #2]
				  deviceIds.combinedDeviceID[0]		    = 0;
 8001726:	8093      	strh	r3, [r2, #4]
				  deviceIds.combinedDeviceID[1]         = 0;
 8001728:	80d3      	strh	r3, [r2, #6]
				  deviceIds.swappedCombinedDeviceID[0]  = 0;
 800172a:	8113      	strh	r3, [r2, #8]
				  deviceIds.swappedCombinedDeviceID[1]  = 0;
 800172c:	8153      	strh	r3, [r2, #10]
				  isAck1Received						= false;
 800172e:	4a55      	ldr	r2, [pc, #340]	@ (8001884 <main+0x388>)
 8001730:	7013      	strb	r3, [r2, #0]
				  isOtherDeviceIDReceived               = false;
 8001732:	4a55      	ldr	r2, [pc, #340]	@ (8001888 <main+0x38c>)
 8001734:	7013      	strb	r3, [r2, #0]
				  currentPairingState                   = Unknown;
 8001736:	4a4f      	ldr	r2, [pc, #316]	@ (8001874 <main+0x378>)
 8001738:	7013      	strb	r3, [r2, #0]
				  isPairingButtonPressed                = true;
 800173a:	4b4d      	ldr	r3, [pc, #308]	@ (8001870 <main+0x374>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
				  while(isPairingButtonPressed)
 8001740:	e025      	b.n	800178e <main+0x292>
						HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	4611      	mov	r1, r2
 8001746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174a:	f002 fb28 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001754:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001758:	f002 fb21 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	2102      	movs	r1, #2
 8001760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001764:	f002 fb1b 	bl	8003d9e <HAL_GPIO_WritePin>
						isAck1Received                       = false;
 8001768:	2300      	movs	r3, #0
 800176a:	4a46      	ldr	r2, [pc, #280]	@ (8001884 <main+0x388>)
 800176c:	7013      	strb	r3, [r2, #0]
						isOtherDeviceIDReceived              = false;
 800176e:	4a46      	ldr	r2, [pc, #280]	@ (8001888 <main+0x38c>)
 8001770:	7013      	strb	r3, [r2, #0]
						deviceIds.deviceID                   = 0;
 8001772:	4a43      	ldr	r2, [pc, #268]	@ (8001880 <main+0x384>)
 8001774:	8013      	strh	r3, [r2, #0]
						deviceIds.otherDeviceID              = 0;
 8001776:	8053      	strh	r3, [r2, #2]
						deviceIds.combinedDeviceID[0]        = 0;
 8001778:	8093      	strh	r3, [r2, #4]
						deviceIds.combinedDeviceID[1]        = 0;
 800177a:	80d3      	strh	r3, [r2, #6]
						deviceIds.swappedCombinedDeviceID[0] = 0;
 800177c:	8113      	strh	r3, [r2, #8]
						deviceIds.swappedCombinedDeviceID[1] = 0;
 800177e:	8153      	strh	r3, [r2, #10]
						printf("Current state is: %d\n\r", currentPairingState);
 8001780:	4c3c      	ldr	r4, [pc, #240]	@ (8001874 <main+0x378>)
 8001782:	7821      	ldrb	r1, [r4, #0]
 8001784:	4841      	ldr	r0, [pc, #260]	@ (800188c <main+0x390>)
 8001786:	f00a fa4d 	bl	800bc24 <iprintf>
						currentPairingState = GenerateDeviceID;
 800178a:	2301      	movs	r3, #1
 800178c:	7023      	strb	r3, [r4, #0]
				  while(isPairingButtonPressed)
 800178e:	4b38      	ldr	r3, [pc, #224]	@ (8001870 <main+0x374>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d054      	beq.n	8001840 <main+0x344>
					  switch(currentPairingState)
 8001796:	4b37      	ldr	r3, [pc, #220]	@ (8001874 <main+0x378>)
 8001798:	7819      	ldrb	r1, [r3, #0]
 800179a:	2906      	cmp	r1, #6
 800179c:	d8f7      	bhi.n	800178e <main+0x292>
 800179e:	a301      	add	r3, pc, #4	@ (adr r3, 80017a4 <main+0x2a8>)
 80017a0:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80017a4:	08001743 	.word	0x08001743
 80017a8:	080017c1 	.word	0x080017c1
 80017ac:	080017e1 	.word	0x080017e1
 80017b0:	08001805 	.word	0x08001805
 80017b4:	0800178f 	.word	0x0800178f
 80017b8:	0800178f 	.word	0x0800178f
 80017bc:	08001813 	.word	0x08001813
						printf("Current state is: %d\n\r", currentPairingState);
 80017c0:	4832      	ldr	r0, [pc, #200]	@ (800188c <main+0x390>)
 80017c2:	f00a fa2f 	bl	800bc24 <iprintf>
						deviceId = Radio.Random();
 80017c6:	4b32      	ldr	r3, [pc, #200]	@ (8001890 <main+0x394>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4798      	blx	r3
 80017cc:	4b31      	ldr	r3, [pc, #196]	@ (8001894 <main+0x398>)
 80017ce:	8018      	strh	r0, [r3, #0]
						printf("randomly generated device ID is: %u\n\r", deviceId);
 80017d0:	b281      	uxth	r1, r0
 80017d2:	4831      	ldr	r0, [pc, #196]	@ (8001898 <main+0x39c>)
 80017d4:	f00a fa26 	bl	800bc24 <iprintf>
						currentPairingState = EncodeDeviceID;
 80017d8:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <main+0x378>)
 80017da:	2202      	movs	r2, #2
 80017dc:	701a      	strb	r2, [r3, #0]
						break;
 80017de:	e7d6      	b.n	800178e <main+0x292>
						printf("Current state is: %d\n\r", currentPairingState);
 80017e0:	482a      	ldr	r0, [pc, #168]	@ (800188c <main+0x390>)
 80017e2:	f00a fa1f 	bl	800bc24 <iprintf>
						encodeDeviceId(deviceId, payload);
 80017e6:	4c2d      	ldr	r4, [pc, #180]	@ (800189c <main+0x3a0>)
 80017e8:	4621      	mov	r1, r4
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <main+0x398>)
 80017ec:	8818      	ldrh	r0, [r3, #0]
 80017ee:	f001 faaf 	bl	8002d50 <encodeDeviceId>
						printf( "Encoded device ID is: 0x%02X%02X\n\r", payload[1], payload[0]);
 80017f2:	7822      	ldrb	r2, [r4, #0]
 80017f4:	7861      	ldrb	r1, [r4, #1]
 80017f6:	482a      	ldr	r0, [pc, #168]	@ (80018a0 <main+0x3a4>)
 80017f8:	f00a fa14 	bl	800bc24 <iprintf>
						currentPairingState = BroadcastDeviceID;
 80017fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001874 <main+0x378>)
 80017fe:	2203      	movs	r2, #3
 8001800:	701a      	strb	r2, [r3, #0]
						break;
 8001802:	e7c4      	b.n	800178e <main+0x292>
						printf("Current state is: %d\n\r", currentPairingState);
 8001804:	4821      	ldr	r0, [pc, #132]	@ (800188c <main+0x390>)
 8001806:	f00a fa0d 	bl	800bc24 <iprintf>
						broadcastDeviceId(payload);
 800180a:	4824      	ldr	r0, [pc, #144]	@ (800189c <main+0x3a0>)
 800180c:	f001 facc 	bl	8002da8 <broadcastDeviceId>
						break;
 8001810:	e7bd      	b.n	800178e <main+0x292>
						isPairingButtonPressed = false;
 8001812:	2400      	movs	r4, #0
 8001814:	4b16      	ldr	r3, [pc, #88]	@ (8001870 <main+0x374>)
 8001816:	701c      	strb	r4, [r3, #0]
						HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_RESET);
 8001818:	4622      	mov	r2, r4
 800181a:	2101      	movs	r1, #1
 800181c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001820:	f002 fabd 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f002 fab6 	bl	8003d9e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_RESET);
 8001832:	4622      	mov	r2, r4
 8001834:	2102      	movs	r1, #2
 8001836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800183a:	f002 fab0 	bl	8003d9e <HAL_GPIO_WritePin>
						break;
 800183e:	e7a6      	b.n	800178e <main+0x292>
				 startTime = HAL_GetTick();
 8001840:	f000 fa70 	bl	8001d24 <HAL_GetTick>
 8001844:	4604      	mov	r4, r0
 8001846:	e736      	b.n	80016b6 <main+0x1ba>
 8001848:	2000031a 	.word	0x2000031a
 800184c:	2000031c 	.word	0x2000031c
 8001850:	20000320 	.word	0x20000320
 8001854:	20000204 	.word	0x20000204
 8001858:	20000660 	.word	0x20000660
 800185c:	20000734 	.word	0x20000734
 8001860:	20000288 	.word	0x20000288
 8001864:	0800dca4 	.word	0x0800dca4
 8001868:	20000470 	.word	0x20000470
 800186c:	0800dc80 	.word	0x0800dc80
 8001870:	20000318 	.word	0x20000318
 8001874:	2000032e 	.word	0x2000032e
 8001878:	0800dcd0 	.word	0x0800dcd0
 800187c:	0800dcf4 	.word	0x0800dcf4
 8001880:	2000030c 	.word	0x2000030c
 8001884:	20000963 	.word	0x20000963
 8001888:	20000960 	.word	0x20000960
 800188c:	0800dd18 	.word	0x0800dd18
 8001890:	0800e46c 	.word	0x0800e46c
 8001894:	2000032a 	.word	0x2000032a
 8001898:	0800dd30 	.word	0x0800dd30
 800189c:	2000032c 	.word	0x2000032c
 80018a0:	0800dd58 	.word	0x0800dd58

080018a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018a4:	b510      	push	{r4, lr}
 80018a6:	b092      	sub	sp, #72	@ 0x48

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018a8:	2400      	movs	r4, #0
 80018aa:	940d      	str	r4, [sp, #52]	@ 0x34
 80018ac:	940e      	str	r4, [sp, #56]	@ 0x38
 80018ae:	940f      	str	r4, [sp, #60]	@ 0x3c
 80018b0:	9410      	str	r4, [sp, #64]	@ 0x40
 80018b2:	9411      	str	r4, [sp, #68]	@ 0x44
  RTC_DateTypeDef sDate = {0};
 80018b4:	940c      	str	r4, [sp, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 80018b6:	222c      	movs	r2, #44	@ 0x2c
 80018b8:	4621      	mov	r1, r4
 80018ba:	a801      	add	r0, sp, #4
 80018bc:	f00a fa07 	bl	800bcce <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018c0:	482b      	ldr	r0, [pc, #172]	@ (8001970 <MX_RTC_Init+0xcc>)
 80018c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001974 <MX_RTC_Init+0xd0>)
 80018c4:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018c6:	6044      	str	r4, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018c8:	237f      	movs	r3, #127	@ 0x7f
 80018ca:	6083      	str	r3, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80018cc:	23ff      	movs	r3, #255	@ 0xff
 80018ce:	60c3      	str	r3, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018d0:	6104      	str	r4, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018d2:	6144      	str	r4, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018d4:	6184      	str	r4, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018da:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018dc:	6204      	str	r4, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80018de:	6244      	str	r4, [r0, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018e0:	f003 ff92 	bl	8005808 <HAL_RTC_Init>
 80018e4:	2800      	cmp	r0, #0
 80018e6:	d137      	bne.n	8001958 <MX_RTC_Init+0xb4>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
  sTime.Minutes = 0x0;
 80018ee:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
  sTime.Seconds = 0x0;
 80018f2:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018f6:	9310      	str	r3, [sp, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018f8:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018fa:	2201      	movs	r2, #1
 80018fc:	a90d      	add	r1, sp, #52	@ 0x34
 80018fe:	481c      	ldr	r0, [pc, #112]	@ (8001970 <MX_RTC_Init+0xcc>)
 8001900:	f004 f828 	bl	8005954 <HAL_RTC_SetTime>
 8001904:	bb58      	cbnz	r0, 800195e <MX_RTC_Init+0xba>
  {
    Error_Handler();
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001906:	2201      	movs	r2, #1
 8001908:	f88d 2030 	strb.w	r2, [sp, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800190c:	f88d 2031 	strb.w	r2, [sp, #49]	@ 0x31
  sDate.Date = 0x1;
 8001910:	f88d 2032 	strb.w	r2, [sp, #50]	@ 0x32
  sDate.Year = 0x0;
 8001914:	2300      	movs	r3, #0
 8001916:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800191a:	a90c      	add	r1, sp, #48	@ 0x30
 800191c:	4814      	ldr	r0, [pc, #80]	@ (8001970 <MX_RTC_Init+0xcc>)
 800191e:	f004 f885 	bl	8005a2c <HAL_RTC_SetDate>
 8001922:	b9f8      	cbnz	r0, 8001964 <MX_RTC_Init+0xc0>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001924:	2300      	movs	r3, #0
 8001926:	f88d 3004 	strb.w	r3, [sp, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 800192a:	f88d 3005 	strb.w	r3, [sp, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 800192e:	f88d 3006 	strb.w	r3, [sp, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001932:	9302      	str	r3, [sp, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001934:	9304      	str	r3, [sp, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001936:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001938:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800193a:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800193c:	9309      	str	r3, [sp, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 800193e:	2201      	movs	r2, #1
 8001940:	f88d 2028 	strb.w	r2, [sp, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001948:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800194a:	a901      	add	r1, sp, #4
 800194c:	4808      	ldr	r0, [pc, #32]	@ (8001970 <MX_RTC_Init+0xcc>)
 800194e:	f004 f8c3 	bl	8005ad8 <HAL_RTC_SetAlarm_IT>
 8001952:	b950      	cbnz	r0, 800196a <MX_RTC_Init+0xc6>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001954:	b012      	add	sp, #72	@ 0x48
 8001956:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001958:	f7ff fd84 	bl	8001464 <Error_Handler>
 800195c:	e7c4      	b.n	80018e8 <MX_RTC_Init+0x44>
    Error_Handler();
 800195e:	f7ff fd81 	bl	8001464 <Error_Handler>
 8001962:	e7d0      	b.n	8001906 <MX_RTC_Init+0x62>
    Error_Handler();
 8001964:	f7ff fd7e 	bl	8001464 <Error_Handler>
 8001968:	e7dc      	b.n	8001924 <MX_RTC_Init+0x80>
    Error_Handler();
 800196a:	f7ff fd7b 	bl	8001464 <Error_Handler>
}
 800196e:	e7f1      	b.n	8001954 <MX_RTC_Init+0xb0>
 8001970:	20000330 	.word	0x20000330
 8001974:	40002800 	.word	0x40002800

08001978 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001978:	b510      	push	{r4, lr}
 800197a:	b090      	sub	sp, #64	@ 0x40
 800197c:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800197e:	2238      	movs	r2, #56	@ 0x38
 8001980:	2100      	movs	r1, #0
 8001982:	a802      	add	r0, sp, #8
 8001984:	f00a f9a3 	bl	800bcce <memset>
  if(rtcHandle->Instance==RTC)
 8001988:	6822      	ldr	r2, [r4, #0]
 800198a:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_RTC_MspInit+0x6c>)
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001990:	b010      	add	sp, #64	@ 0x40
 8001992:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001998:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800199a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800199e:	930f      	str	r3, [sp, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a0:	a802      	add	r0, sp, #8
 80019a2:	f003 fd4b 	bl	800543c <HAL_RCCEx_PeriphCLKConfig>
 80019a6:	b9c8      	cbnz	r0, 80019dc <HAL_RTC_MspInit+0x64>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ac:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80019b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019be:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80019c8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	4611      	mov	r1, r2
 80019ce:	202a      	movs	r0, #42	@ 0x2a
 80019d0:	f001 fddc 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80019d4:	202a      	movs	r0, #42	@ 0x2a
 80019d6:	f001 fde9 	bl	80035ac <HAL_NVIC_EnableIRQ>
}
 80019da:	e7d9      	b.n	8001990 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80019dc:	f7ff fd42 	bl	8001464 <Error_Handler>
 80019e0:	e7e2      	b.n	80019a8 <HAL_RTC_MspInit+0x30>
 80019e2:	bf00      	nop
 80019e4:	40002800 	.word	0x40002800

080019e8 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 80019e8:	b508      	push	{r3, lr}

  if(rtcHandle->Instance==RTC)
 80019ea:	6802      	ldr	r2, [r0, #0]
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_RTC_MspDeInit+0x2c>)
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d000      	beq.n	80019f4 <HAL_RTC_MspDeInit+0xc>
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 80019f2:	bd08      	pop	{r3, pc}
  * @rmtoll BDCR         RTCEN         LL_RCC_DisableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_DisableRTC(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80019fc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001a04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a0a:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001a0c:	202a      	movs	r0, #42	@ 0x2a
 8001a0e:	f001 fdd1 	bl	80035b4 <HAL_NVIC_DisableIRQ>
}
 8001a12:	e7ee      	b.n	80019f2 <HAL_RTC_MspDeInit+0xa>
 8001a14:	40002800 	.word	0x40002800

08001a18 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a18:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001a1a:	4810      	ldr	r0, [pc, #64]	@ (8001a5c <MX_SPI1_Init+0x44>)
 8001a1c:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <MX_SPI1_Init+0x48>)
 8001a1e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a20:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8001a24:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a26:	2300      	movs	r3, #0
 8001a28:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a2a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001a2e:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a30:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a32:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a38:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a3a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a3e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a40:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a42:	2207      	movs	r2, #7
 8001a44:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a46:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a4c:	f004 f94a 	bl	8005ce4 <HAL_SPI_Init>
 8001a50:	b900      	cbnz	r0, 8001a54 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a52:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a54:	f7ff fd06 	bl	8001464 <Error_Handler>
}
 8001a58:	e7fb      	b.n	8001a52 <MX_SPI1_Init+0x3a>
 8001a5a:	bf00      	nop
 8001a5c:	200003a0 	.word	0x200003a0
 8001a60:	40013000 	.word	0x40013000

08001a64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a64:	b530      	push	{r4, r5, lr}
 8001a66:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	2300      	movs	r3, #0
 8001a6a:	9303      	str	r3, [sp, #12]
 8001a6c:	9304      	str	r3, [sp, #16]
 8001a6e:	9305      	str	r3, [sp, #20]
 8001a70:	9306      	str	r3, [sp, #24]
 8001a72:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 8001a74:	6802      	ldr	r2, [r0, #0]
 8001a76:	4b20      	ldr	r3, [pc, #128]	@ (8001af8 <HAL_SPI_MspInit+0x94>)
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a7c:	b009      	add	sp, #36	@ 0x24
 8001a7e:	bd30      	pop	{r4, r5, pc}
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a84:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a86:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001a8a:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a8e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001a92:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a94:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a98:	f042 0202 	orr.w	r2, r2, #2
 8001a9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001aa0:	f002 0202 	and.w	r2, r2, #2
 8001aa4:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001aa6:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001aa8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001aaa:	f042 0201 	orr.w	r2, r2, #1
 8001aae:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001ab8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aba:	2320      	movs	r3, #32
 8001abc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2402      	movs	r4, #2
 8001ac0:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac2:	2505      	movs	r5, #5
 8001ac4:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	a903      	add	r1, sp, #12
 8001ac8:	480c      	ldr	r0, [pc, #48]	@ (8001afc <HAL_SPI_MspInit+0x98>)
 8001aca:	f002 f811 	bl	8003af0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ace:	2370      	movs	r3, #112	@ 0x70
 8001ad0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ada:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	a903      	add	r1, sp, #12
 8001ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae2:	f002 f805 	bl	8003af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	4621      	mov	r1, r4
 8001aea:	2022      	movs	r0, #34	@ 0x22
 8001aec:	f001 fd4e 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001af0:	2022      	movs	r0, #34	@ 0x22
 8001af2:	f001 fd5b 	bl	80035ac <HAL_NVIC_EnableIRQ>
}
 8001af6:	e7c1      	b.n	8001a7c <HAL_SPI_MspInit+0x18>
 8001af8:	40013000 	.word	0x40013000
 8001afc:	48000400 	.word	0x48000400

08001b00 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001b00:	4770      	bx	lr

08001b02 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001b02:	4770      	bx	lr

08001b04 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001b04:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001b06:	f001 fcb5 	bl	8003474 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001b0a:	2001      	movs	r0, #1
 8001b0c:	4b02      	ldr	r3, [pc, #8]	@ (8001b18 <PWR_EnterStopMode+0x14>)
 8001b0e:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001b12:	f002 fec7 	bl	80048a4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001b16:	bd08      	pop	{r3, pc}
 8001b18:	58000400 	.word	0x58000400

08001b1c <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001b1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001b1e:	f001 fcb0 	bl	8003482 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001b22:	bd08      	pop	{r3, pc}

08001b24 <PWR_ExitStopMode>:
{
 8001b24:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001b26:	f001 fcac 	bl	8003482 <HAL_ResumeTick>
  vcom_Resume();
 8001b2a:	f000 fd17 	bl	800255c <vcom_Resume>
}
 8001b2e:	bd08      	pop	{r3, pc}

08001b30 <PWR_EnterSleepMode>:
{
 8001b30:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8001b32:	f001 fc9f 	bl	8003474 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001b36:	2101      	movs	r1, #1
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f002 fe57 	bl	80047ec <HAL_PWR_EnterSLEEPMode>
}
 8001b3e:	bd08      	pop	{r3, pc}

08001b40 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b40:	4770      	bx	lr

08001b42 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b42:	e7fe      	b.n	8001b42 <NMI_Handler>

08001b44 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <HardFault_Handler>

08001b46 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <MemManage_Handler>

08001b48 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b48:	e7fe      	b.n	8001b48 <BusFault_Handler>

08001b4a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <UsageFault_Handler>

08001b4c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	4770      	bx	lr

08001b4e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4e:	4770      	bx	lr

08001b50 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b50:	4770      	bx	lr

08001b52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b52:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b54:	f001 fc82 	bl	800345c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b58:	bd08      	pop	{r3, pc}

08001b5a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line 2 Interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b5a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b5c:	2004      	movs	r0, #4
 8001b5e:	f002 f923 	bl	8003da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b62:	bd08      	pop	{r3, pc}

08001b64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b66:	4802      	ldr	r0, [pc, #8]	@ (8001b70 <DMA1_Channel1_IRQHandler+0xc>)
 8001b68:	f001 ff3a 	bl	80039e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b6c:	bd08      	pop	{r3, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000534 	.word	0x20000534

08001b74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 Global Interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b76:	4809      	ldr	r0, [pc, #36]	@ (8001b9c <TIM2_IRQHandler+0x28>)
 8001b78:	f004 fe28 	bl	80067cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  if(currentPairingState == Paired)
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <TIM2_IRQHandler+0x2c>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d000      	beq.n	8001b86 <TIM2_IRQHandler+0x12>
  //
  //  uint32_t soc_new = CalculateSOC();
  //printf("Battery SOC = %ul\n\r", soc_new);

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b84:	bd08      	pop	{r3, pc}
	  if(!edgeTrigger2 && !edgeTrigger12)
 8001b86:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <TIM2_IRQHandler+0x30>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1fa      	bne.n	8001b84 <TIM2_IRQHandler+0x10>
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <TIM2_IRQHandler+0x34>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f6      	bne.n	8001b84 <TIM2_IRQHandler+0x10>
		  heartBeat();
 8001b96:	f001 fb27 	bl	80031e8 <heartBeat>
}
 8001b9a:	e7f3      	b.n	8001b84 <TIM2_IRQHandler+0x10>
 8001b9c:	20000470 	.word	0x20000470
 8001ba0:	2000032e 	.word	0x2000032e
 8001ba4:	20000962 	.word	0x20000962
 8001ba8:	20000961 	.word	0x20000961

08001bac <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event Interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bae:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <I2C1_EV_IRQHandler+0xc>)
 8001bb0:	f002 fdb2 	bl	8004718 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bb4:	bd08      	pop	{r3, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000288 	.word	0x20000288

08001bbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 Interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001bbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001bbe:	4802      	ldr	r0, [pc, #8]	@ (8001bc8 <SPI1_IRQHandler+0xc>)
 8001bc0:	f004 f94e 	bl	8005e60 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001bc4:	bd08      	pop	{r3, pc}
 8001bc6:	bf00      	nop
 8001bc8:	200003a0 	.word	0x200003a0

08001bcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bce:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <USART1_IRQHandler+0xc>)
 8001bd0:	f005 fc12 	bl	80073f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bd4:	bd08      	pop	{r3, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000660 	.word	0x20000660

08001bdc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bde:	4802      	ldr	r0, [pc, #8]	@ (8001be8 <USART2_IRQHandler+0xc>)
 8001be0:	f005 fc0a 	bl	80073f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001be4:	bd08      	pop	{r3, pc}
 8001be6:	bf00      	nop
 8001be8:	20000594 	.word	0x20000594

08001bec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001bee:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bf2:	f002 f8d9 	bl	8003da8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001bf6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001bfa:	f002 f8d5 	bl	8003da8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bfe:	bd08      	pop	{r3, pc}

08001c00 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c02:	4802      	ldr	r0, [pc, #8]	@ (8001c0c <RTC_Alarm_IRQHandler+0xc>)
 8001c04:	f003 fd7c 	bl	8005700 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c08:	bd08      	pop	{r3, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000330 	.word	0x20000330

08001c10 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c12:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <SUBGHZ_Radio_IRQHandler+0xc>)
 8001c14:	f004 fc74 	bl	8006500 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c18:	bd08      	pop	{r3, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000042c 	.word	0x2000042c

08001c20 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c20:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_8;
 8001c22:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <MX_SUBGHZ_Init+0x18>)
 8001c24:	2310      	movs	r3, #16
 8001c26:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c28:	f004 f9b8 	bl	8005f9c <HAL_SUBGHZ_Init>
 8001c2c:	b900      	cbnz	r0, 8001c30 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c2e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c30:	f7ff fc18 	bl	8001464 <Error_Handler>
}
 8001c34:	e7fb      	b.n	8001c2e <MX_SUBGHZ_Init+0xe>
 8001c36:	bf00      	nop
 8001c38:	2000042c 	.word	0x2000042c

08001c3c <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c3c:	b500      	push	{lr}
 8001c3e:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c44:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c54:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	4611      	mov	r1, r2
 8001c5a:	2032      	movs	r0, #50	@ 0x32
 8001c5c:	f001 fc96 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001c60:	2032      	movs	r0, #50	@ 0x32
 8001c62:	f001 fca3 	bl	80035ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001c66:	b003      	add	sp, #12
 8001c68:	f85d fb04 	ldr.w	pc, [sp], #4

08001c6c <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001c6c:	b40c      	push	{r2, r3}
 8001c6e:	b500      	push	{lr}
 8001c70:	b083      	sub	sp, #12
 8001c72:	ab04      	add	r3, sp, #16
 8001c74:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001c78:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001c7a:	f009 f937 	bl	800aeec <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001c7e:	b003      	add	sp, #12
 8001c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c84:	b002      	add	sp, #8
 8001c86:	4770      	bx	lr

08001c88 <TimestampNow>:
{
 8001c88:	b530      	push	{r4, r5, lr}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	4604      	mov	r4, r0
 8001c8e:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001c90:	a802      	add	r0, sp, #8
 8001c92:	f008 ff01 	bl	800aa98 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c96:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	9b02      	ldr	r3, [sp, #8]
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <TimestampNow+0x2c>)
 8001ca0:	2110      	movs	r1, #16
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f7ff ffe2 	bl	8001c6c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7fe fab9 	bl	8000220 <strlen>
 8001cae:	8028      	strh	r0, [r5, #0]
}
 8001cb0:	b005      	add	sp, #20
 8001cb2:	bd30      	pop	{r4, r5, pc}
 8001cb4:	0800dd94 	.word	0x0800dd94

08001cb8 <SystemApp_Init>:
{
 8001cb8:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001cba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cbe:	6893      	ldr	r3, [r2, #8]
 8001cc0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001cc4:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001cc6:	f008 ff09 	bl	800aadc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001cca:	2401      	movs	r4, #1
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <SystemApp_Init+0x44>)
 8001cce:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001cd0:	f000 f83e 	bl	8001d50 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001cd4:	f008 fc48 	bl	800a568 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001cd8:	4809      	ldr	r0, [pc, #36]	@ (8001d00 <SystemApp_Init+0x48>)
 8001cda:	f008 fc5f 	bl	800a59c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f008 fc62 	bl	800a5a8 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 8001ce4:	f008 fd70 	bl	800a7c8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001ce8:	4621      	mov	r1, r4
 8001cea:	4620      	mov	r0, r4
 8001cec:	f008 fd8c 	bl	800a808 <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	4620      	mov	r0, r4
 8001cf4:	f008 fd72 	bl	800a7dc <UTIL_LPM_SetStopMode>
}
 8001cf8:	bd10      	pop	{r4, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000468 	.word	0x20000468
 8001d00:	08001c89 	.word	0x08001c89

08001d04 <UTIL_SEQ_Idle>:
{
 8001d04:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001d06:	f008 fd95 	bl	800a834 <UTIL_LPM_EnterLowPower>
}
 8001d0a:	bd08      	pop	{r3, pc}

08001d0c <UTIL_ADV_TRACE_PreSendHook>:
{
 8001d0c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001d0e:	2101      	movs	r1, #1
 8001d10:	2002      	movs	r0, #2
 8001d12:	f008 fd63 	bl	800a7dc <UTIL_LPM_SetStopMode>
}
 8001d16:	bd08      	pop	{r3, pc}

08001d18 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001d18:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f008 fd5d 	bl	800a7dc <UTIL_LPM_SetStopMode>
}
 8001d22:	bd08      	pop	{r3, pc}

08001d24 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001d24:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001d26:	4b04      	ldr	r3, [pc, #16]	@ (8001d38 <HAL_GetTick+0x14>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	b90b      	cbnz	r3, 8001d30 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001d2c:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001d2e:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001d30:	f000 f94e 	bl	8001fd0 <TIMER_IF_GetTimerValue>
 8001d34:	e7fb      	b.n	8001d2e <HAL_GetTick+0xa>
 8001d36:	bf00      	nop
 8001d38:	20000468 	.word	0x20000468

08001d3c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d3c:	b500      	push	{lr}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d42:	9801      	ldr	r0, [sp, #4]
 8001d44:	f000 fa2a 	bl	800219c <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d48:	b003      	add	sp, #12
 8001d4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001d50 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d54:	b088      	sub	sp, #32
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001d56:	4a2d      	ldr	r2, [pc, #180]	@ (8001e0c <DBG_Init+0xbc>)
 8001d58:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8001d5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001d64:	f001 fb94 	bl	8003490 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001d68:	f001 fb9a 	bl	80034a0 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001d6c:	f001 fba0 	bl	80034b0 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001d70:	2400      	movs	r4, #0
 8001d72:	9403      	str	r4, [sp, #12]
 8001d74:	9404      	str	r4, [sp, #16]
 8001d76:	9405      	str	r4, [sp, #20]
 8001d78:	9406      	str	r4, [sp, #24]
 8001d7a:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001d7c:	2501      	movs	r5, #1
 8001d7e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d80:	2303      	movs	r3, #3
 8001d82:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d8a:	432a      	orrs	r2, r5
 8001d8c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d90:	402a      	ands	r2, r5
 8001d92:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001d94:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d98:	432a      	orrs	r2, r5
 8001d9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d9e:	402a      	ands	r2, r5
 8001da0:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001da2:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001da4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001da6:	f042 0202 	orr.w	r2, r2, #2
 8001daa:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001db4:	9b00      	ldr	r3, [sp, #0]
  /* Enable the GPIO Clock */
  PROBE_LINE2_CLK_ENABLE();
  PROBE_LINE3_CLK_ENABLE();
  PROBE_LINE4_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001db6:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001db8:	a903      	add	r1, sp, #12
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dbe:	f001 fe97 	bl	8003af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001dc2:	f04f 0802 	mov.w	r8, #2
 8001dc6:	f8cd 800c 	str.w	r8, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001dca:	a903      	add	r1, sp, #12
 8001dcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd0:	f001 fe8e 	bl	8003af0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001dd4:	f44f 7780 	mov.w	r7, #256	@ 0x100
 8001dd8:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001dda:	4e0d      	ldr	r6, [pc, #52]	@ (8001e10 <DBG_Init+0xc0>)
 8001ddc:	a903      	add	r1, sp, #12
 8001dde:	4630      	mov	r0, r6
 8001de0:	f001 fe86 	bl	8003af0 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001de4:	4622      	mov	r2, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dec:	f001 ffd7 	bl	8003d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001df0:	4622      	mov	r2, r4
 8001df2:	4641      	mov	r1, r8
 8001df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001df8:	f001 ffd1 	bl	8003d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	4639      	mov	r1, r7
 8001e00:	4630      	mov	r0, r6
 8001e02:	f001 ffcc 	bl	8003d9e <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e06:	b008      	add	sp, #32
 8001e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e0c:	58000800 	.word	0x58000800
 8001e10:	48000400 	.word	0x48000400

08001e14 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001e14:	2001      	movs	r0, #1
 8001e16:	4770      	bx	lr

08001e18 <_kill>:

int _kill(int pid, int sig)
{
 8001e18:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e1a:	f009 ffbb 	bl	800bd94 <__errno>
 8001e1e:	2316      	movs	r3, #22
 8001e20:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	bd08      	pop	{r3, pc}

08001e28 <_exit>:

void _exit (int status)
{
 8001e28:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001e2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2e:	f7ff fff3 	bl	8001e18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e32:	e7fe      	b.n	8001e32 <_exit+0xa>

08001e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e34:	b570      	push	{r4, r5, r6, lr}
 8001e36:	460c      	mov	r4, r1
 8001e38:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	2500      	movs	r5, #0
 8001e3c:	e006      	b.n	8001e4c <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001e3e:	f3af 8000 	nop.w
 8001e42:	4621      	mov	r1, r4
 8001e44:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001e4a:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	42b5      	cmp	r5, r6
 8001e4e:	dbf6      	blt.n	8001e3e <_read+0xa>
  }

  return len;
}
 8001e50:	4630      	mov	r0, r6
 8001e52:	bd70      	pop	{r4, r5, r6, pc}

08001e54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	460c      	mov	r4, r1
 8001e58:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5a:	2500      	movs	r5, #0
 8001e5c:	e004      	b.n	8001e68 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001e5e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001e62:	f7ff f99b 	bl	800119c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	3501      	adds	r5, #1
 8001e68:	42b5      	cmp	r5, r6
 8001e6a:	dbf8      	blt.n	8001e5e <_write+0xa>
  }
  return len;
}
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	bd70      	pop	{r4, r5, r6, pc}

08001e70 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	4770      	bx	lr

08001e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001e76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e7a:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	4770      	bx	lr

08001e80 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001e80:	2001      	movs	r0, #1
 8001e82:	4770      	bx	lr

08001e84 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001e84:	2000      	movs	r0, #0
 8001e86:	4770      	bx	lr

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b510      	push	{r4, lr}
 8001e8a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ec0 <_sbrk+0x38>)
 8001e8e:	490d      	ldr	r1, [pc, #52]	@ (8001ec4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	480d      	ldr	r0, [pc, #52]	@ (8001ec8 <_sbrk+0x40>)
 8001e92:	6800      	ldr	r0, [r0, #0]
 8001e94:	b140      	cbz	r0, 8001ea8 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <_sbrk+0x40>)
 8001e98:	6800      	ldr	r0, [r0, #0]
 8001e9a:	4403      	add	r3, r0
 8001e9c:	1a52      	subs	r2, r2, r1
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d806      	bhi.n	8001eb0 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ea2:	4a09      	ldr	r2, [pc, #36]	@ (8001ec8 <_sbrk+0x40>)
 8001ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001ea6:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ea8:	4807      	ldr	r0, [pc, #28]	@ (8001ec8 <_sbrk+0x40>)
 8001eaa:	4c08      	ldr	r4, [pc, #32]	@ (8001ecc <_sbrk+0x44>)
 8001eac:	6004      	str	r4, [r0, #0]
 8001eae:	e7f2      	b.n	8001e96 <_sbrk+0xe>
    errno = ENOMEM;
 8001eb0:	f009 ff70 	bl	800bd94 <__errno>
 8001eb4:	230c      	movs	r3, #12
 8001eb6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	e7f3      	b.n	8001ea6 <_sbrk+0x1e>
 8001ebe:	bf00      	nop
 8001ec0:	20010000 	.word	0x20010000
 8001ec4:	00000800 	.word	0x00000800
 8001ec8:	2000046c 	.word	0x2000046c
 8001ecc:	20000f98 	.word	0x20000f98

08001ed0 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ed0:	b500      	push	{lr}
 8001ed2:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9304      	str	r3, [sp, #16]
 8001ed8:	9305      	str	r3, [sp, #20]
 8001eda:	9306      	str	r3, [sp, #24]
 8001edc:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	9302      	str	r3, [sp, #8]
 8001ee2:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee4:	4815      	ldr	r0, [pc, #84]	@ (8001f3c <MX_TIM2_Init+0x6c>)
 8001ee6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eea:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 9599;
 8001eec:	f242 527f 	movw	r2, #9599	@ 0x257f
 8001ef0:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 20000;
 8001ef4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001ef8:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efa:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efc:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001efe:	f004 fe4d 	bl	8006b9c <HAL_TIM_Base_Init>
 8001f02:	b990      	cbnz	r0, 8001f2a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f08:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f0a:	a904      	add	r1, sp, #16
 8001f0c:	480b      	ldr	r0, [pc, #44]	@ (8001f3c <MX_TIM2_Init+0x6c>)
 8001f0e:	f004 fd7d 	bl	8006a0c <HAL_TIM_ConfigClockSource>
 8001f12:	b968      	cbnz	r0, 8001f30 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f18:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f1a:	a901      	add	r1, sp, #4
 8001f1c:	4807      	ldr	r0, [pc, #28]	@ (8001f3c <MX_TIM2_Init+0x6c>)
 8001f1e:	f004 fe77 	bl	8006c10 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	b940      	cbnz	r0, 8001f36 <MX_TIM2_Init+0x66>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f24:	b009      	add	sp, #36	@ 0x24
 8001f26:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001f2a:	f7ff fa9b 	bl	8001464 <Error_Handler>
 8001f2e:	e7e9      	b.n	8001f04 <MX_TIM2_Init+0x34>
    Error_Handler();
 8001f30:	f7ff fa98 	bl	8001464 <Error_Handler>
 8001f34:	e7ee      	b.n	8001f14 <MX_TIM2_Init+0x44>
    Error_Handler();
 8001f36:	f7ff fa95 	bl	8001464 <Error_Handler>
}
 8001f3a:	e7f3      	b.n	8001f24 <MX_TIM2_Init+0x54>
 8001f3c:	20000470 	.word	0x20000470

08001f40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8001f40:	6803      	ldr	r3, [r0, #0]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f46:	d000      	beq.n	8001f4a <HAL_TIM_Base_MspInit+0xa>
 8001f48:	4770      	bx	lr
{
 8001f4a:	b500      	push	{lr}
 8001f4c:	b083      	sub	sp, #12
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001f62:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	4611      	mov	r1, r2
 8001f68:	201b      	movs	r0, #27
 8001f6a:	f001 fb0f 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f6e:	201b      	movs	r0, #27
 8001f70:	f001 fb1c 	bl	80035ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001f74:	b003      	add	sp, #12
 8001f76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001f7c <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001f7c:	4b06      	ldr	r3, [pc, #24]	@ (8001f98 <TIMER_IF_SetTimerContext+0x1c>)
 8001f7e:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f80:	e001      	b.n	8001f86 <TIMER_IF_SetTimerContext+0xa>
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <TIMER_IF_SetTimerContext+0x1c>)
 8001f84:	6898      	ldr	r0, [r3, #8]
 8001f86:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <TIMER_IF_SetTimerContext+0x1c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4283      	cmp	r3, r0
 8001f8c:	d1f9      	bne.n	8001f82 <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001f8e:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001f90:	4b02      	ldr	r3, [pc, #8]	@ (8001f9c <TIMER_IF_SetTimerContext+0x20>)
 8001f92:	6018      	str	r0, [r3, #0]
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	40002800 	.word	0x40002800
 8001f9c:	2000052c 	.word	0x2000052c

08001fa0 <TIMER_IF_GetTimerContext>:
}
 8001fa0:	4b01      	ldr	r3, [pc, #4]	@ (8001fa8 <TIMER_IF_GetTimerContext+0x8>)
 8001fa2:	6818      	ldr	r0, [r3, #0]
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	2000052c 	.word	0x2000052c

08001fac <TIMER_IF_GetTimerElapsedTime>:
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001fae:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001fb0:	e001      	b.n	8001fb6 <TIMER_IF_GetTimerElapsedTime+0xa>
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001fb4:	6898      	ldr	r0, [r3, #8]
 8001fb6:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	4283      	cmp	r3, r0
 8001fbc:	d1f9      	bne.n	8001fb2 <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001fbe:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001fc0:	4b02      	ldr	r3, [pc, #8]	@ (8001fcc <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	1ac0      	subs	r0, r0, r3
 8001fc6:	4770      	bx	lr
 8001fc8:	40002800 	.word	0x40002800
 8001fcc:	2000052c 	.word	0x2000052c

08001fd0 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <TIMER_IF_GetTimerValue+0x20>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b153      	cbz	r3, 8001fec <TIMER_IF_GetTimerValue+0x1c>
 8001fd6:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <TIMER_IF_GetTimerValue+0x24>)
 8001fd8:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001fda:	e001      	b.n	8001fe0 <TIMER_IF_GetTimerValue+0x10>
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <TIMER_IF_GetTimerValue+0x24>)
 8001fde:	6898      	ldr	r0, [r3, #8]
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <TIMER_IF_GetTimerValue+0x24>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4283      	cmp	r3, r0
 8001fe6:	d1f9      	bne.n	8001fdc <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001fe8:	43c0      	mvns	r0, r0
 8001fea:	4770      	bx	lr
  uint32_t ret = 0;
 8001fec:	2000      	movs	r0, #0
}
 8001fee:	4770      	bx	lr
 8001ff0:	20000530 	.word	0x20000530
 8001ff4:	40002800 	.word	0x40002800

08001ff8 <TIMER_IF_GetMinimumTimeout>:
}
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	4770      	bx	lr

08001ffc <TIMER_IF_Convert_ms2Tick>:
{
 8001ffc:	b508      	push	{r3, lr}
 8001ffe:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002000:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002004:	2300      	movs	r3, #0
 8002006:	0280      	lsls	r0, r0, #10
 8002008:	0d89      	lsrs	r1, r1, #22
 800200a:	f7fe fda5 	bl	8000b58 <__aeabi_uldivmod>
}
 800200e:	bd08      	pop	{r3, pc}

08002010 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002010:	0ec2      	lsrs	r2, r0, #27
 8002012:	0143      	lsls	r3, r0, #5
 8002014:	1a1b      	subs	r3, r3, r0
 8002016:	f162 0200 	sbc.w	r2, r2, #0
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	181b      	adds	r3, r3, r0
 8002024:	f142 0000 	adc.w	r0, r2, #0
 8002028:	00c0      	lsls	r0, r0, #3
 800202a:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 800202e:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002032:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8002036:	4770      	bx	lr

08002038 <TIMER_IF_StopTimer>:
{
 8002038:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <TIMER_IF_StopTimer+0x20>)
 800203c:	2201      	movs	r2, #1
 800203e:	65da      	str	r2, [r3, #92]	@ 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002040:	4c06      	ldr	r4, [pc, #24]	@ (800205c <TIMER_IF_StopTimer+0x24>)
 8002042:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002046:	4620      	mov	r0, r4
 8002048:	f003 fb1a 	bl	8005680 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800204c:	f04f 33ff 	mov.w	r3, #4294967295
 8002050:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8002052:	2000      	movs	r0, #0
 8002054:	bd10      	pop	{r4, pc}
 8002056:	bf00      	nop
 8002058:	40002800 	.word	0x40002800
 800205c:	20000330 	.word	0x20000330

08002060 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002060:	b508      	push	{r3, lr}
 8002062:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002064:	2102      	movs	r1, #2
 8002066:	4802      	ldr	r0, [pc, #8]	@ (8002070 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002068:	f003 fe1c 	bl	8005ca4 <HAL_RTCEx_BKUPWrite>
}
 800206c:	bd08      	pop	{r3, pc}
 800206e:	bf00      	nop
 8002070:	20000330 	.word	0x20000330

08002074 <TIMER_IF_Init>:
{
 8002074:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002076:	4b0f      	ldr	r3, [pc, #60]	@ (80020b4 <TIMER_IF_Init+0x40>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b10b      	cbz	r3, 8002080 <TIMER_IF_Init+0xc>
}
 800207c:	2000      	movs	r0, #0
 800207e:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002080:	4c0d      	ldr	r4, [pc, #52]	@ (80020b8 <TIMER_IF_Init+0x44>)
 8002082:	f04f 35ff 	mov.w	r5, #4294967295
 8002086:	6325      	str	r5, [r4, #48]	@ 0x30
    MX_RTC_Init();
 8002088:	f7ff fc0c 	bl	80018a4 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 800208c:	f7ff ffd4 	bl	8002038 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002090:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002094:	4620      	mov	r0, r4
 8002096:	f003 faf3 	bl	8005680 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800209a:	6325      	str	r5, [r4, #48]	@ 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800209c:	4620      	mov	r0, r4
 800209e:	f003 fdd9 	bl	8005c54 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff ffdc 	bl	8002060 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 80020a8:	f7ff ff68 	bl	8001f7c <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 80020ac:	4b01      	ldr	r3, [pc, #4]	@ (80020b4 <TIMER_IF_Init+0x40>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e7e3      	b.n	800207c <TIMER_IF_Init+0x8>
 80020b4:	20000530 	.word	0x20000530
 80020b8:	20000330 	.word	0x20000330

080020bc <TIMER_IF_BkUp_Write_Seconds>:
{
 80020bc:	b508      	push	{r3, lr}
 80020be:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80020c0:	2100      	movs	r1, #0
 80020c2:	4802      	ldr	r0, [pc, #8]	@ (80020cc <TIMER_IF_BkUp_Write_Seconds+0x10>)
 80020c4:	f003 fdee 	bl	8005ca4 <HAL_RTCEx_BKUPWrite>
}
 80020c8:	bd08      	pop	{r3, pc}
 80020ca:	bf00      	nop
 80020cc:	20000330 	.word	0x20000330

080020d0 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 80020d0:	b508      	push	{r3, lr}
 80020d2:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80020d4:	2101      	movs	r1, #1
 80020d6:	4802      	ldr	r0, [pc, #8]	@ (80020e0 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 80020d8:	f003 fde4 	bl	8005ca4 <HAL_RTCEx_BKUPWrite>
}
 80020dc:	bd08      	pop	{r3, pc}
 80020de:	bf00      	nop
 80020e0:	20000330 	.word	0x20000330

080020e4 <TIMER_IF_StartTimer>:
{
 80020e4:	b510      	push	{r4, lr}
 80020e6:	b08c      	sub	sp, #48	@ 0x30
 80020e8:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 80020ea:	222c      	movs	r2, #44	@ 0x2c
 80020ec:	2100      	movs	r1, #0
 80020ee:	a801      	add	r0, sp, #4
 80020f0:	f009 fded 	bl	800bcce <memset>
  TIMER_IF_StopTimer();
 80020f4:	f7ff ffa0 	bl	8002038 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <TIMER_IF_StartTimer+0x48>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80020fe:	2300      	movs	r3, #0
 8002100:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002102:	43e4      	mvns	r4, r4
 8002104:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002106:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002108:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800210c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800210e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002112:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002114:	2201      	movs	r2, #1
 8002116:	a901      	add	r1, sp, #4
 8002118:	4805      	ldr	r0, [pc, #20]	@ (8002130 <TIMER_IF_StartTimer+0x4c>)
 800211a:	f003 fcdd 	bl	8005ad8 <HAL_RTC_SetAlarm_IT>
 800211e:	b910      	cbnz	r0, 8002126 <TIMER_IF_StartTimer+0x42>
}
 8002120:	2000      	movs	r0, #0
 8002122:	b00c      	add	sp, #48	@ 0x30
 8002124:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002126:	f7ff f99d 	bl	8001464 <Error_Handler>
 800212a:	e7f9      	b.n	8002120 <TIMER_IF_StartTimer+0x3c>
 800212c:	2000052c 	.word	0x2000052c
 8002130:	20000330 	.word	0x20000330

08002134 <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002134:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002136:	2102      	movs	r1, #2
 8002138:	4801      	ldr	r0, [pc, #4]	@ (8002140 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 800213a:	f003 fdba 	bl	8005cb2 <HAL_RTCEx_BKUPRead>
}
 800213e:	bd08      	pop	{r3, pc}
 8002140:	20000330 	.word	0x20000330

08002144 <TIMER_IF_GetTime>:
{
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	4605      	mov	r5, r0
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <TIMER_IF_GetTime+0x34>)
 800214a:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800214c:	e001      	b.n	8002152 <TIMER_IF_GetTime+0xe>
 800214e:	4b0a      	ldr	r3, [pc, #40]	@ (8002178 <TIMER_IF_GetTime+0x34>)
 8002150:	689c      	ldr	r4, [r3, #8]
 8002152:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <TIMER_IF_GetTime+0x34>)
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	42a2      	cmp	r2, r4
 8002158:	d1f9      	bne.n	800214e <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 800215a:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800215c:	f7ff ffea 	bl	8002134 <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002160:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002162:	0aa4      	lsrs	r4, r4, #10
 8002164:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002168:	f3c3 0009 	ubfx	r0, r3, #0, #10
 800216c:	f7ff ff50 	bl	8002010 <TIMER_IF_Convert_Tick2ms>
 8002170:	8028      	strh	r0, [r5, #0]
}
 8002172:	4620      	mov	r0, r4
 8002174:	bd38      	pop	{r3, r4, r5, pc}
 8002176:	bf00      	nop
 8002178:	40002800 	.word	0x40002800

0800217c <TIMER_IF_BkUp_Read_Seconds>:
{
 800217c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800217e:	2100      	movs	r1, #0
 8002180:	4801      	ldr	r0, [pc, #4]	@ (8002188 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002182:	f003 fd96 	bl	8005cb2 <HAL_RTCEx_BKUPRead>
}
 8002186:	bd08      	pop	{r3, pc}
 8002188:	20000330 	.word	0x20000330

0800218c <TIMER_IF_BkUp_Read_SubSeconds>:
{
 800218c:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800218e:	2101      	movs	r1, #1
 8002190:	4801      	ldr	r0, [pc, #4]	@ (8002198 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002192:	f003 fd8e 	bl	8005cb2 <HAL_RTCEx_BKUPRead>
}
 8002196:	bd08      	pop	{r3, pc}
 8002198:	20000330 	.word	0x20000330

0800219c <TIMER_IF_DelayMs>:
{
 800219c:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800219e:	f7ff ff2d 	bl	8001ffc <TIMER_IF_Convert_ms2Tick>
 80021a2:	4b0d      	ldr	r3, [pc, #52]	@ (80021d8 <TIMER_IF_DelayMs+0x3c>)
 80021a4:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80021a6:	e001      	b.n	80021ac <TIMER_IF_DelayMs+0x10>
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <TIMER_IF_DelayMs+0x3c>)
 80021aa:	6899      	ldr	r1, [r3, #8]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <TIMER_IF_DelayMs+0x3c>)
 80021ae:	6892      	ldr	r2, [r2, #8]
 80021b0:	428a      	cmp	r2, r1
 80021b2:	d1f9      	bne.n	80021a8 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 80021b4:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80021b6:	e00a      	b.n	80021ce <TIMER_IF_DelayMs+0x32>
 80021b8:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <TIMER_IF_DelayMs+0x3c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a06      	ldr	r2, [pc, #24]	@ (80021d8 <TIMER_IF_DelayMs+0x3c>)
 80021be:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d1f9      	bne.n	80021b8 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 80021c4:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 80021c6:	1a5b      	subs	r3, r3, r1
 80021c8:	4283      	cmp	r3, r0
 80021ca:	d203      	bcs.n	80021d4 <TIMER_IF_DelayMs+0x38>
    __NOP();
 80021cc:	bf00      	nop
 80021ce:	4b02      	ldr	r3, [pc, #8]	@ (80021d8 <TIMER_IF_DelayMs+0x3c>)
 80021d0:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80021d2:	e7f3      	b.n	80021bc <TIMER_IF_DelayMs+0x20>
}
 80021d4:	bd08      	pop	{r3, pc}
 80021d6:	bf00      	nop
 80021d8:	40002800 	.word	0x40002800

080021dc <HAL_RTC_AlarmAEventCallback>:
{
 80021dc:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 80021de:	f008 fda1 	bl	800ad24 <UTIL_TIMER_IRQ_Handler>
}
 80021e2:	bd08      	pop	{r3, pc}

080021e4 <HAL_RTCEx_SSRUEventCallback>:
{
 80021e4:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 80021e6:	f7ff ffa5 	bl	8002134 <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 80021ea:	3001      	adds	r0, #1
 80021ec:	f7ff ff38 	bl	8002060 <TIMER_IF_BkUp_Write_MSBticks>
}
 80021f0:	bd08      	pop	{r3, pc}
	...

080021f4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021f4:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021f6:	481b      	ldr	r0, [pc, #108]	@ (8002264 <MX_USART1_UART_Init+0x70>)
 80021f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <MX_USART1_UART_Init+0x74>)
 80021fa:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80021fc:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002200:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002202:	2300      	movs	r3, #0
 8002204:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002206:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002208:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800220a:	220c      	movs	r2, #12
 800220c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002210:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002212:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002214:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002216:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002218:	f005 fdaa 	bl	8007d70 <HAL_UART_Init>
 800221c:	b9a8      	cbnz	r0, 800224a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800221e:	2100      	movs	r1, #0
 8002220:	4810      	ldr	r0, [pc, #64]	@ (8002264 <MX_USART1_UART_Init+0x70>)
 8002222:	f005 ff63 	bl	80080ec <HAL_UARTEx_SetTxFifoThreshold>
 8002226:	b998      	cbnz	r0, 8002250 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002228:	2100      	movs	r1, #0
 800222a:	480e      	ldr	r0, [pc, #56]	@ (8002264 <MX_USART1_UART_Init+0x70>)
 800222c:	f005 ff83 	bl	8008136 <HAL_UARTEx_SetRxFifoThreshold>
 8002230:	b988      	cbnz	r0, 8002256 <MX_USART1_UART_Init+0x62>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002232:	480c      	ldr	r0, [pc, #48]	@ (8002264 <MX_USART1_UART_Init+0x70>)
 8002234:	f005 ff3b 	bl	80080ae <HAL_UARTEx_DisableFifoMode>
 8002238:	b980      	cbnz	r0, 800225c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */
//  UART_InitCallbacksToDefault(&huart1);
  memset(dataReceived, 0, sizeof(dataReceived));
 800223a:	490c      	ldr	r1, [pc, #48]	@ (800226c <MX_USART1_UART_Init+0x78>)
 800223c:	2300      	movs	r3, #0
 800223e:	700b      	strb	r3, [r1, #0]

  // Restart reception
  HAL_UART_Receive_IT(&huart1, dataReceived, sizeof(dataReceived));
 8002240:	2201      	movs	r2, #1
 8002242:	4808      	ldr	r0, [pc, #32]	@ (8002264 <MX_USART1_UART_Init+0x70>)
 8002244:	f005 fe74 	bl	8007f30 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8002248:	bd08      	pop	{r3, pc}
    Error_Handler();
 800224a:	f7ff f90b 	bl	8001464 <Error_Handler>
 800224e:	e7e6      	b.n	800221e <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8002250:	f7ff f908 	bl	8001464 <Error_Handler>
 8002254:	e7e8      	b.n	8002228 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8002256:	f7ff f905 	bl	8001464 <Error_Handler>
 800225a:	e7ea      	b.n	8002232 <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 800225c:	f7ff f902 	bl	8001464 <Error_Handler>
 8002260:	e7eb      	b.n	800223a <MX_USART1_UART_Init+0x46>
 8002262:	bf00      	nop
 8002264:	20000660 	.word	0x20000660
 8002268:	40013800 	.word	0x40013800
 800226c:	20000734 	.word	0x20000734

08002270 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002270:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002272:	4817      	ldr	r0, [pc, #92]	@ (80022d0 <MX_USART2_UART_Init+0x60>)
 8002274:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <MX_USART2_UART_Init+0x64>)
 8002276:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002278:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800227c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	2300      	movs	r3, #0
 8002280:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002282:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002284:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002286:	220c      	movs	r2, #12
 8002288:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228a:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800228c:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800228e:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002290:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002292:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002294:	f005 fd6c 	bl	8007d70 <HAL_UART_Init>
 8002298:	b970      	cbnz	r0, 80022b8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800229a:	2100      	movs	r1, #0
 800229c:	480c      	ldr	r0, [pc, #48]	@ (80022d0 <MX_USART2_UART_Init+0x60>)
 800229e:	f005 ff25 	bl	80080ec <HAL_UARTEx_SetTxFifoThreshold>
 80022a2:	b960      	cbnz	r0, 80022be <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a4:	2100      	movs	r1, #0
 80022a6:	480a      	ldr	r0, [pc, #40]	@ (80022d0 <MX_USART2_UART_Init+0x60>)
 80022a8:	f005 ff45 	bl	8008136 <HAL_UARTEx_SetRxFifoThreshold>
 80022ac:	b950      	cbnz	r0, 80022c4 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80022ae:	4808      	ldr	r0, [pc, #32]	@ (80022d0 <MX_USART2_UART_Init+0x60>)
 80022b0:	f005 fefd 	bl	80080ae <HAL_UARTEx_DisableFifoMode>
 80022b4:	b948      	cbnz	r0, 80022ca <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022b6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80022b8:	f7ff f8d4 	bl	8001464 <Error_Handler>
 80022bc:	e7ed      	b.n	800229a <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 80022be:	f7ff f8d1 	bl	8001464 <Error_Handler>
 80022c2:	e7ef      	b.n	80022a4 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80022c4:	f7ff f8ce 	bl	8001464 <Error_Handler>
 80022c8:	e7f1      	b.n	80022ae <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80022ca:	f7ff f8cb 	bl	8001464 <Error_Handler>
}
 80022ce:	e7f2      	b.n	80022b6 <MX_USART2_UART_Init+0x46>
 80022d0:	20000594 	.word	0x20000594
 80022d4:	40004400 	.word	0x40004400

080022d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022d8:	b530      	push	{r4, r5, lr}
 80022da:	b099      	sub	sp, #100	@ 0x64
 80022dc:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022de:	2100      	movs	r1, #0
 80022e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80022e2:	9114      	str	r1, [sp, #80]	@ 0x50
 80022e4:	9115      	str	r1, [sp, #84]	@ 0x54
 80022e6:	9116      	str	r1, [sp, #88]	@ 0x58
 80022e8:	9117      	str	r1, [sp, #92]	@ 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022ea:	2238      	movs	r2, #56	@ 0x38
 80022ec:	a805      	add	r0, sp, #20
 80022ee:	f009 fcee 	bl	800bcce <memset>
  if(uartHandle->Instance==USART1)
 80022f2:	6823      	ldr	r3, [r4, #0]
 80022f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002428 <HAL_UART_MspInit+0x150>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80022fa:	4a4c      	ldr	r2, [pc, #304]	@ (800242c <HAL_UART_MspInit+0x154>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d03a      	beq.n	8002376 <HAL_UART_MspInit+0x9e>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002300:	b019      	add	sp, #100	@ 0x64
 8002302:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002304:	2301      	movs	r3, #1
 8002306:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002308:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800230c:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230e:	a805      	add	r0, sp, #20
 8002310:	f003 f894 	bl	800543c <HAL_RCCEx_PeriphCLKConfig>
 8002314:	bb60      	cbnz	r0, 8002370 <HAL_UART_MspInit+0x98>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800231a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800231c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002320:	661a      	str	r2, [r3, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002322:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002324:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002328:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800232a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800232c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800232e:	f042 0201 	orr.w	r2, r2, #1
 8002332:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800233c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800233e:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 8002342:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2400      	movs	r4, #0
 800234a:	9415      	str	r4, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	9316      	str	r3, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002350:	2307      	movs	r3, #7
 8002352:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002354:	a913      	add	r1, sp, #76	@ 0x4c
 8002356:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800235a:	f001 fbc9 	bl	8003af0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800235e:	4622      	mov	r2, r4
 8002360:	4621      	mov	r1, r4
 8002362:	2024      	movs	r0, #36	@ 0x24
 8002364:	f001 f912 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002368:	2024      	movs	r0, #36	@ 0x24
 800236a:	f001 f91f 	bl	80035ac <HAL_NVIC_EnableIRQ>
 800236e:	e7c7      	b.n	8002300 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002370:	f7ff f878 	bl	8001464 <Error_Handler>
 8002374:	e7cf      	b.n	8002316 <HAL_UART_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002376:	2302      	movs	r3, #2
 8002378:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800237a:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 800237e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002380:	a805      	add	r0, sp, #20
 8002382:	f003 f85b 	bl	800543c <HAL_RCCEx_PeriphCLKConfig>
 8002386:	2800      	cmp	r0, #0
 8002388:	d144      	bne.n	8002414 <HAL_UART_MspInit+0x13c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002390:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002394:	659a      	str	r2, [r3, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002396:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002398:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800239c:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 800239e:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80023b0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023b2:	230c      	movs	r3, #12
 80023b4:	9313      	str	r3, [sp, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b6:	2302      	movs	r3, #2
 80023b8:	9314      	str	r3, [sp, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ba:	2500      	movs	r5, #0
 80023bc:	9515      	str	r5, [sp, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	9316      	str	r3, [sp, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c2:	2307      	movs	r3, #7
 80023c4:	9317      	str	r3, [sp, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	a913      	add	r1, sp, #76	@ 0x4c
 80023c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023cc:	f001 fb90 	bl	8003af0 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80023d0:	4817      	ldr	r0, [pc, #92]	@ (8002430 <HAL_UART_MspInit+0x158>)
 80023d2:	4b18      	ldr	r3, [pc, #96]	@ (8002434 <HAL_UART_MspInit+0x15c>)
 80023d4:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80023d6:	2314      	movs	r3, #20
 80023d8:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023da:	2310      	movs	r3, #16
 80023dc:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023de:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023e0:	2380      	movs	r3, #128	@ 0x80
 80023e2:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e4:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e6:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80023e8:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023ea:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023ec:	f001 f96a 	bl	80036c4 <HAL_DMA_Init>
 80023f0:	b998      	cbnz	r0, 800241a <HAL_UART_MspInit+0x142>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80023f2:	2110      	movs	r1, #16
 80023f4:	480e      	ldr	r0, [pc, #56]	@ (8002430 <HAL_UART_MspInit+0x158>)
 80023f6:	f001 fb67 	bl	8003ac8 <HAL_DMA_ConfigChannelAttributes>
 80023fa:	b988      	cbnz	r0, 8002420 <HAL_UART_MspInit+0x148>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <HAL_UART_MspInit+0x158>)
 80023fe:	67e3      	str	r3, [r4, #124]	@ 0x7c
 8002400:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	4611      	mov	r1, r2
 8002406:	2025      	movs	r0, #37	@ 0x25
 8002408:	f001 f8c0 	bl	800358c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800240c:	2025      	movs	r0, #37	@ 0x25
 800240e:	f001 f8cd 	bl	80035ac <HAL_NVIC_EnableIRQ>
}
 8002412:	e775      	b.n	8002300 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002414:	f7ff f826 	bl	8001464 <Error_Handler>
 8002418:	e7b7      	b.n	800238a <HAL_UART_MspInit+0xb2>
      Error_Handler();
 800241a:	f7ff f823 	bl	8001464 <Error_Handler>
 800241e:	e7e8      	b.n	80023f2 <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8002420:	f7ff f820 	bl	8001464 <Error_Handler>
 8002424:	e7ea      	b.n	80023fc <HAL_UART_MspInit+0x124>
 8002426:	bf00      	nop
 8002428:	40013800 	.word	0x40013800
 800242c:	40004400 	.word	0x40004400
 8002430:	20000534 	.word	0x20000534
 8002434:	40020008 	.word	0x40020008

08002438 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002438:	b510      	push	{r4, lr}

  if(uartHandle->Instance==USART1)
 800243a:	6803      	ldr	r3, [r0, #0]
 800243c:	4a14      	ldr	r2, [pc, #80]	@ (8002490 <HAL_UART_MspDeInit+0x58>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <HAL_UART_MspDeInit+0x14>
 8002442:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002444:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <HAL_UART_MspDeInit+0x5c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d010      	beq.n	800246c <HAL_UART_MspDeInit+0x34>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800244a:	bd10      	pop	{r4, pc}
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800244c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002450:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 8002452:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002456:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
 8002458:	f44f 51f0 	mov.w	r1, #7680	@ 0x1e00
 800245c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002460:	f001 fc18 	bl	8003c94 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002464:	2024      	movs	r0, #36	@ 0x24
 8002466:	f001 f8a5 	bl	80035b4 <HAL_NVIC_DisableIRQ>
 800246a:	e7ee      	b.n	800244a <HAL_UART_MspDeInit+0x12>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800246c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002470:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002472:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002476:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002478:	210c      	movs	r1, #12
 800247a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247e:	f001 fc09 	bl	8003c94 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002482:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002484:	f001 f990 	bl	80037a8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002488:	2025      	movs	r0, #37	@ 0x25
 800248a:	f001 f893 	bl	80035b4 <HAL_NVIC_DisableIRQ>
}
 800248e:	e7dc      	b.n	800244a <HAL_UART_MspDeInit+0x12>
 8002490:	40013800 	.word	0x40013800
 8002494:	40004400 	.word	0x40004400

08002498 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002498:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800249a:	4b07      	ldr	r3, [pc, #28]	@ (80024b8 <vcom_Init+0x20>)
 800249c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800249e:	f7fe fcd3 	bl	8000e48 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80024a2:	f7ff fee5 	bl	8002270 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80024a6:	4a05      	ldr	r2, [pc, #20]	@ (80024bc <vcom_Init+0x24>)
 80024a8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 80024ac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80024b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80024b4:	2000      	movs	r0, #0
 80024b6:	bd08      	pop	{r3, pc}
 80024b8:	20000730 	.word	0x20000730
 80024bc:	58000800 	.word	0x58000800

080024c0 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80024c0:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024c8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80024cc:	639a      	str	r2, [r3, #56]	@ 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80024ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024d0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80024d4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80024d6:	4804      	ldr	r0, [pc, #16]	@ (80024e8 <vcom_DeInit+0x28>)
 80024d8:	f7ff ffae 	bl	8002438 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80024dc:	200f      	movs	r0, #15
 80024de:	f001 f869 	bl	80035b4 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80024e2:	2000      	movs	r0, #0
 80024e4:	bd08      	pop	{r3, pc}
 80024e6:	bf00      	nop
 80024e8:	20000594 	.word	0x20000594

080024ec <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80024ec:	b508      	push	{r3, lr}
 80024ee:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80024f0:	4601      	mov	r1, r0
 80024f2:	4802      	ldr	r0, [pc, #8]	@ (80024fc <vcom_Trace_DMA+0x10>)
 80024f4:	f004 ff30 	bl	8007358 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80024f8:	2000      	movs	r0, #0
 80024fa:	bd08      	pop	{r3, pc}
 80024fc:	20000594 	.word	0x20000594

08002500 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002500:	b510      	push	{r4, lr}
 8002502:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <vcom_ReceiveInit+0x50>)
 8002506:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002508:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800250c:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800250e:	ab02      	add	r3, sp, #8
 8002510:	e913 0006 	ldmdb	r3, {r1, r2}
 8002514:	480f      	ldr	r0, [pc, #60]	@ (8002554 <vcom_ReceiveInit+0x54>)
 8002516:	f005 fd72 	bl	8007ffe <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <vcom_ReceiveInit+0x54>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 8002524:	d1f9      	bne.n	800251a <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002526:	69da      	ldr	r2, [r3, #28]
 8002528:	f412 0f80 	tst.w	r2, #4194304	@ 0x400000
 800252c:	d0fb      	beq.n	8002526 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002534:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002536:	4c07      	ldr	r4, [pc, #28]	@ (8002554 <vcom_ReceiveInit+0x54>)
 8002538:	4620      	mov	r0, r4
 800253a:	f005 fda1 	bl	8008080 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800253e:	2201      	movs	r2, #1
 8002540:	4905      	ldr	r1, [pc, #20]	@ (8002558 <vcom_ReceiveInit+0x58>)
 8002542:	4620      	mov	r0, r4
 8002544:	f005 fcf4 	bl	8007f30 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002548:	2000      	movs	r0, #0
 800254a:	b002      	add	sp, #8
 800254c:	bd10      	pop	{r4, pc}
 800254e:	bf00      	nop
 8002550:	2000072c 	.word	0x2000072c
 8002554:	20000594 	.word	0x20000594
 8002558:	20000735 	.word	0x20000735

0800255c <vcom_Resume>:

void vcom_Resume(void)
{
 800255c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800255e:	4807      	ldr	r0, [pc, #28]	@ (800257c <vcom_Resume+0x20>)
 8002560:	f005 fc06 	bl	8007d70 <HAL_UART_Init>
 8002564:	b920      	cbnz	r0, 8002570 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002566:	4806      	ldr	r0, [pc, #24]	@ (8002580 <vcom_Resume+0x24>)
 8002568:	f001 f8ac 	bl	80036c4 <HAL_DMA_Init>
 800256c:	b918      	cbnz	r0, 8002576 <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 800256e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002570:	f7fe ff78 	bl	8001464 <Error_Handler>
 8002574:	e7f7      	b.n	8002566 <vcom_Resume+0xa>
    Error_Handler();
 8002576:	f7fe ff75 	bl	8001464 <Error_Handler>
}
 800257a:	e7f8      	b.n	800256e <vcom_Resume+0x12>
 800257c:	20000594 	.word	0x20000594
 8002580:	20000534 	.word	0x20000534

08002584 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002584:	b538      	push	{r3, r4, r5, lr}
 8002586:	4604      	mov	r4, r0
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */
	 if (huart->Instance == USART1)
 8002588:	6802      	ldr	r2, [r0, #0]
 800258a:	4b10      	ldr	r3, [pc, #64]	@ (80025cc <HAL_UART_TxCpltCallback+0x48>)
 800258c:	429a      	cmp	r2, r3
 800258e:	d004      	beq.n	800259a <HAL_UART_TxCpltCallback+0x16>
		/* Print a new line */
		printf("\n\r");
	 }
  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002590:	6822      	ldr	r2, [r4, #0]
 8002592:	4b0f      	ldr	r3, [pc, #60]	@ (80025d0 <HAL_UART_TxCpltCallback+0x4c>)
 8002594:	429a      	cmp	r2, r3
 8002596:	d013      	beq.n	80025c0 <HAL_UART_TxCpltCallback+0x3c>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002598:	bd38      	pop	{r3, r4, r5, pc}
		printf("Transmitted UART1 data: \n\r");
 800259a:	480e      	ldr	r0, [pc, #56]	@ (80025d4 <HAL_UART_TxCpltCallback+0x50>)
 800259c:	f009 fb42 	bl	800bc24 <iprintf>
		for (int i = 0; i < huart->TxXferSize; ++i)
 80025a0:	2500      	movs	r5, #0
 80025a2:	e005      	b.n	80025b0 <HAL_UART_TxCpltCallback+0x2c>
			printf("%02X", huart->pTxBuffPtr[i]);
 80025a4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80025a6:	5d59      	ldrb	r1, [r3, r5]
 80025a8:	480b      	ldr	r0, [pc, #44]	@ (80025d8 <HAL_UART_TxCpltCallback+0x54>)
 80025aa:	f009 fb3b 	bl	800bc24 <iprintf>
		for (int i = 0; i < huart->TxXferSize; ++i)
 80025ae:	3501      	adds	r5, #1
 80025b0:	f8b4 3054 	ldrh.w	r3, [r4, #84]	@ 0x54
 80025b4:	42ab      	cmp	r3, r5
 80025b6:	dcf5      	bgt.n	80025a4 <HAL_UART_TxCpltCallback+0x20>
		printf("\n\r");
 80025b8:	4808      	ldr	r0, [pc, #32]	@ (80025dc <HAL_UART_TxCpltCallback+0x58>)
 80025ba:	f009 fb33 	bl	800bc24 <iprintf>
 80025be:	e7e7      	b.n	8002590 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
 80025c0:	4b07      	ldr	r3, [pc, #28]	@ (80025e0 <HAL_UART_TxCpltCallback+0x5c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2000      	movs	r0, #0
 80025c6:	4798      	blx	r3
}
 80025c8:	e7e6      	b.n	8002598 <HAL_UART_TxCpltCallback+0x14>
 80025ca:	bf00      	nop
 80025cc:	40013800 	.word	0x40013800
 80025d0:	40004400 	.word	0x40004400
 80025d4:	0800dde0 	.word	0x0800dde0
 80025d8:	0800ddfc 	.word	0x0800ddfc
 80025dc:	0800ddf8 	.word	0x0800ddf8
 80025e0:	20000730 	.word	0x20000730

080025e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */
	 if (huart->Instance == USART1)
 80025e4:	6802      	ldr	r2, [r0, #0]
 80025e6:	4b50      	ldr	r3, [pc, #320]	@ (8002728 <HAL_UART_RxCpltCallback+0x144>)
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d000      	beq.n	80025ee <HAL_UART_RxCpltCallback+0xa>
 80025ec:	4770      	bx	lr
{
 80025ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f0:	b083      	sub	sp, #12
 80025f2:	4604      	mov	r4, r0
	 {

		 // Print all received data
		 printf("Received Hex data: \n\r");
 80025f4:	484d      	ldr	r0, [pc, #308]	@ (800272c <HAL_UART_RxCpltCallback+0x148>)
 80025f6:	f009 fb15 	bl	800bc24 <iprintf>
		 for (int i = 0; i < sizeof(dataReceived); ++i)
 80025fa:	2500      	movs	r5, #0
 80025fc:	b315      	cbz	r5, 8002644 <HAL_UART_RxCpltCallback+0x60>
		 {
			 printf("%02X\n\r", dataReceived[i]);
		 }
		 printf("Received Char data: \n\r");
 80025fe:	484c      	ldr	r0, [pc, #304]	@ (8002730 <HAL_UART_RxCpltCallback+0x14c>)
 8002600:	f009 fb10 	bl	800bc24 <iprintf>
		 for (int i = 0; i < sizeof(dataReceived); ++i)
 8002604:	2500      	movs	r5, #0
 8002606:	b325      	cbz	r5, 8002652 <HAL_UART_RxCpltCallback+0x6e>
		 {
			 printf("%c\n\r", dataReceived[i]);
		 }


		 if(passCheck == true)
 8002608:	4b4a      	ldr	r3, [pc, #296]	@ (8002734 <HAL_UART_RxCpltCallback+0x150>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	b1a3      	cbz	r3, 8002638 <HAL_UART_RxCpltCallback+0x54>
		 {
			 passCheck = false;
 800260e:	4b49      	ldr	r3, [pc, #292]	@ (8002734 <HAL_UART_RxCpltCallback+0x150>)
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]


			// if (dataReceived[0] == '1')
			 //{
				if (dataReceived[0] == 0xF0)
 8002614:	4b48      	ldr	r3, [pc, #288]	@ (8002738 <HAL_UART_RxCpltCallback+0x154>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2bf0      	cmp	r3, #240	@ 0xf0
 800261a:	d021      	beq.n	8002660 <HAL_UART_RxCpltCallback+0x7c>
					memcpy(BufferTx, combinedBuffer, payloadSize);
					radio_send_wrapper(payloadSize);
					// HAL_Delay(100);
				}

				else if (dataReceived[0] == 0x0F)
 800261c:	2b0f      	cmp	r3, #15
 800261e:	d03b      	beq.n	8002698 <HAL_UART_RxCpltCallback+0xb4>
					memcpy(BufferTx, combinedBuffer, payloadSize);
					radio_send_wrapper(payloadSize);
					// HAL_Delay(100);
				}

				else if (dataReceived[0] == 0xFF)
 8002620:	2bff      	cmp	r3, #255	@ 0xff
 8002622:	d055      	beq.n	80026d0 <HAL_UART_RxCpltCallback+0xec>
//			for (int i = 0; i < sizeof(dataReceived) / sizeof(dataReceived[0]); i++)
//			{
//				dataReceived[i] = 0;
//			}

			 memset(dataReceived, 0, sizeof(dataReceived));
 8002624:	4944      	ldr	r1, [pc, #272]	@ (8002738 <HAL_UART_RxCpltCallback+0x154>)
 8002626:	2300      	movs	r3, #0
 8002628:	700b      	strb	r3, [r1, #0]

			// Restart reception
			HAL_UART_Receive_IT(huart, dataReceived, sizeof(dataReceived));
 800262a:	2201      	movs	r2, #1
 800262c:	4620      	mov	r0, r4
 800262e:	f005 fc7f 	bl	8007f30 <HAL_UART_Receive_IT>

			passCheck = true;
 8002632:	4b40      	ldr	r3, [pc, #256]	@ (8002734 <HAL_UART_RxCpltCallback+0x150>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8002638:	6822      	ldr	r2, [r4, #0]
 800263a:	4b40      	ldr	r3, [pc, #256]	@ (800273c <HAL_UART_RxCpltCallback+0x158>)
 800263c:	429a      	cmp	r2, r3
 800263e:	d064      	beq.n	800270a <HAL_UART_RxCpltCallback+0x126>
    HAL_UART_Receive_IT(huart, &charRx, 1);
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */
 }
  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002640:	b003      	add	sp, #12
 8002642:	bdf0      	pop	{r4, r5, r6, r7, pc}
			 printf("%02X\n\r", dataReceived[i]);
 8002644:	4b3c      	ldr	r3, [pc, #240]	@ (8002738 <HAL_UART_RxCpltCallback+0x154>)
 8002646:	5d59      	ldrb	r1, [r3, r5]
 8002648:	483d      	ldr	r0, [pc, #244]	@ (8002740 <HAL_UART_RxCpltCallback+0x15c>)
 800264a:	f009 faeb 	bl	800bc24 <iprintf>
		 for (int i = 0; i < sizeof(dataReceived); ++i)
 800264e:	3501      	adds	r5, #1
 8002650:	e7d4      	b.n	80025fc <HAL_UART_RxCpltCallback+0x18>
			 printf("%c\n\r", dataReceived[i]);
 8002652:	4b39      	ldr	r3, [pc, #228]	@ (8002738 <HAL_UART_RxCpltCallback+0x154>)
 8002654:	5d59      	ldrb	r1, [r3, r5]
 8002656:	483b      	ldr	r0, [pc, #236]	@ (8002744 <HAL_UART_RxCpltCallback+0x160>)
 8002658:	f009 fae4 	bl	800bc24 <iprintf>
		 for (int i = 0; i < sizeof(dataReceived); ++i)
 800265c:	3501      	adds	r5, #1
 800265e:	e7d2      	b.n	8002606 <HAL_UART_RxCpltCallback+0x22>
					CenterCheck = false;
 8002660:	4611      	mov	r1, r2
 8002662:	4b39      	ldr	r3, [pc, #228]	@ (8002748 <HAL_UART_RxCpltCallback+0x164>)
 8002664:	701a      	strb	r2, [r3, #0]
					memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8002666:	4d39      	ldr	r5, [pc, #228]	@ (800274c <HAL_UART_RxCpltCallback+0x168>)
 8002668:	22ff      	movs	r2, #255	@ 0xff
 800266a:	4628      	mov	r0, r5
 800266c:	f009 fb2f 	bl	800bcce <memset>
					memcpy(combinedBuffer, swappedCombinedDeviceID, strlen((char*)(swappedCombinedDeviceID)));
 8002670:	4e37      	ldr	r6, [pc, #220]	@ (8002750 <HAL_UART_RxCpltCallback+0x16c>)
 8002672:	4630      	mov	r0, r6
 8002674:	f7fd fdd4 	bl	8000220 <strlen>
 8002678:	4602      	mov	r2, r0
 800267a:	4631      	mov	r1, r6
 800267c:	4668      	mov	r0, sp
 800267e:	f009 fbb6 	bl	800bdee <memcpy>
					memcpy(combinedBuffer + sizeof(swappedCombinedDeviceID), &data, sizeof(data));
 8002682:	23f0      	movs	r3, #240	@ 0xf0
 8002684:	f88d 3004 	strb.w	r3, [sp, #4]
					memcpy(BufferTx, combinedBuffer, payloadSize);
 8002688:	9800      	ldr	r0, [sp, #0]
 800268a:	6028      	str	r0, [r5, #0]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	712b      	strb	r3, [r5, #4]
					radio_send_wrapper(payloadSize);
 8002690:	2005      	movs	r0, #5
 8002692:	f000 fb3f 	bl	8002d14 <radio_send_wrapper>
 8002696:	e7c5      	b.n	8002624 <HAL_UART_RxCpltCallback+0x40>
					CenterCheck = false;
 8002698:	2100      	movs	r1, #0
 800269a:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <HAL_UART_RxCpltCallback+0x164>)
 800269c:	7019      	strb	r1, [r3, #0]
					memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800269e:	4d2b      	ldr	r5, [pc, #172]	@ (800274c <HAL_UART_RxCpltCallback+0x168>)
 80026a0:	22ff      	movs	r2, #255	@ 0xff
 80026a2:	4628      	mov	r0, r5
 80026a4:	f009 fb13 	bl	800bcce <memset>
					memcpy(combinedBuffer, swappedCombinedDeviceID, strlen((char*)(swappedCombinedDeviceID)));
 80026a8:	4e29      	ldr	r6, [pc, #164]	@ (8002750 <HAL_UART_RxCpltCallback+0x16c>)
 80026aa:	4630      	mov	r0, r6
 80026ac:	f7fd fdb8 	bl	8000220 <strlen>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4631      	mov	r1, r6
 80026b4:	4668      	mov	r0, sp
 80026b6:	f009 fb9a 	bl	800bdee <memcpy>
					memcpy(combinedBuffer + sizeof(swappedCombinedDeviceID), &data, sizeof(data));
 80026ba:	230f      	movs	r3, #15
 80026bc:	f88d 3004 	strb.w	r3, [sp, #4]
					memcpy(BufferTx, combinedBuffer, payloadSize);
 80026c0:	9800      	ldr	r0, [sp, #0]
 80026c2:	6028      	str	r0, [r5, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	712b      	strb	r3, [r5, #4]
					radio_send_wrapper(payloadSize);
 80026c8:	2005      	movs	r0, #5
 80026ca:	f000 fb23 	bl	8002d14 <radio_send_wrapper>
 80026ce:	e7a9      	b.n	8002624 <HAL_UART_RxCpltCallback+0x40>
					CenterCheck = true;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <HAL_UART_RxCpltCallback+0x164>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
					memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 80026d6:	4d1d      	ldr	r5, [pc, #116]	@ (800274c <HAL_UART_RxCpltCallback+0x168>)
 80026d8:	26ff      	movs	r6, #255	@ 0xff
 80026da:	4632      	mov	r2, r6
 80026dc:	2100      	movs	r1, #0
 80026de:	4628      	mov	r0, r5
 80026e0:	f009 faf5 	bl	800bcce <memset>
					memcpy(combinedBuffer, swappedCombinedDeviceID, strlen((char*)(swappedCombinedDeviceID)));
 80026e4:	4f1a      	ldr	r7, [pc, #104]	@ (8002750 <HAL_UART_RxCpltCallback+0x16c>)
 80026e6:	4638      	mov	r0, r7
 80026e8:	f7fd fd9a 	bl	8000220 <strlen>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4639      	mov	r1, r7
 80026f0:	4668      	mov	r0, sp
 80026f2:	f009 fb7c 	bl	800bdee <memcpy>
					memcpy(combinedBuffer + sizeof(swappedCombinedDeviceID), &data, sizeof(data));
 80026f6:	f88d 6004 	strb.w	r6, [sp, #4]
					memcpy(BufferTx, combinedBuffer, payloadSize);
 80026fa:	9800      	ldr	r0, [sp, #0]
 80026fc:	6028      	str	r0, [r5, #0]
 80026fe:	b2f3      	uxtb	r3, r6
 8002700:	712b      	strb	r3, [r5, #4]
					radio_send_wrapper(payloadSize);
 8002702:	2005      	movs	r0, #5
 8002704:	f000 fb06 	bl	8002d14 <radio_send_wrapper>
 8002708:	e78c      	b.n	8002624 <HAL_UART_RxCpltCallback+0x40>
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800270a:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <HAL_UART_RxCpltCallback+0x170>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	b12b      	cbz	r3, 800271c <HAL_UART_RxCpltCallback+0x138>
 8002710:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8002714:	b912      	cbnz	r2, 800271c <HAL_UART_RxCpltCallback+0x138>
      RxCpltCallback(&charRx, 1, 0);
 8002716:	2101      	movs	r1, #1
 8002718:	480f      	ldr	r0, [pc, #60]	@ (8002758 <HAL_UART_RxCpltCallback+0x174>)
 800271a:	4798      	blx	r3
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800271c:	2201      	movs	r2, #1
 800271e:	490e      	ldr	r1, [pc, #56]	@ (8002758 <HAL_UART_RxCpltCallback+0x174>)
 8002720:	4620      	mov	r0, r4
 8002722:	f005 fc05 	bl	8007f30 <HAL_UART_Receive_IT>
}
 8002726:	e78b      	b.n	8002640 <HAL_UART_RxCpltCallback+0x5c>
 8002728:	40013800 	.word	0x40013800
 800272c:	0800de04 	.word	0x0800de04
 8002730:	0800de1c 	.word	0x0800de1c
 8002734:	20000001 	.word	0x20000001
 8002738:	20000734 	.word	0x20000734
 800273c:	40004400 	.word	0x40004400
 8002740:	0800e508 	.word	0x0800e508
 8002744:	0800de34 	.word	0x0800de34
 8002748:	20000000 	.word	0x20000000
 800274c:	20000740 	.word	0x20000740
 8002750:	20000324 	.word	0x20000324
 8002754:	2000072c 	.word	0x2000072c
 8002758:	20000735 	.word	0x20000735

0800275c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800275c:	480d      	ldr	r0, [pc, #52]	@ (8002794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800275e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002760:	f000 fe3d 	bl	80033de <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002764:	480c      	ldr	r0, [pc, #48]	@ (8002798 <LoopForever+0x6>)
  ldr r1, =_edata
 8002766:	490d      	ldr	r1, [pc, #52]	@ (800279c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002768:	4a0d      	ldr	r2, [pc, #52]	@ (80027a0 <LoopForever+0xe>)
  movs r3, #0
 800276a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800276c:	e002      	b.n	8002774 <LoopCopyDataInit>

0800276e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002772:	3304      	adds	r3, #4

08002774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002778:	d3f9      	bcc.n	800276e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800277a:	4a0a      	ldr	r2, [pc, #40]	@ (80027a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800277c:	4c0a      	ldr	r4, [pc, #40]	@ (80027a8 <LoopForever+0x16>)
  movs r3, #0
 800277e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002780:	e001      	b.n	8002786 <LoopFillZerobss>

08002782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002784:	3204      	adds	r2, #4

08002786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002788:	d3fb      	bcc.n	8002782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800278a:	f009 fb09 	bl	800bda0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278e:	f7fe feb5 	bl	80014fc <main>

08002792 <LoopForever>:

LoopForever:
    b LoopForever
 8002792:	e7fe      	b.n	8002792 <LoopForever>
  ldr   r0, =_estack
 8002794:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800279c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80027a0:	0800e9a8 	.word	0x0800e9a8
  ldr r2, =_sbss
 80027a4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80027a8:	20000f98 	.word	0x20000f98

080027ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027ac:	e7fe      	b.n	80027ac <ADC_IRQHandler>

080027ae <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80027ae:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80027b0:	f7ff fa82 	bl	8001cb8 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 80027b4:	f000 fa00 	bl	8002bb8 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80027b8:	bd08      	pop	{r3, pc}

080027ba <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 80027ba:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f008 f8a4 	bl	800a90c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 80027c4:	bd08      	pop	{r3, pc}
	...

080027c8 <OnRxError>:

  /* USER CODE END OnRxTimeout */
}

static void OnRxError(void)
{
 80027c8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnRxError */

	 // APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
	 /* Update the State of the FSM*/
	 State = RX_ERROR;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <OnRxError+0x34>)
 80027cc:	2202      	movs	r2, #2
 80027ce:	701a      	strb	r2, [r3, #0]

 	  printf("\n\r");
 80027d0:	480b      	ldr	r0, [pc, #44]	@ (8002800 <OnRxError+0x38>)
 80027d2:	f009 fa27 	bl	800bc24 <iprintf>

 	  for(int i = 0; i < RxBufferSize; i++)
 80027d6:	2400      	movs	r4, #0
 80027d8:	e006      	b.n	80027e8 <OnRxError+0x20>
 	  {
 		  printf("BufferRx[%d]: %04X\n\r", i, BufferRx[i]);
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <OnRxError+0x3c>)
 80027dc:	5d1a      	ldrb	r2, [r3, r4]
 80027de:	4621      	mov	r1, r4
 80027e0:	4809      	ldr	r0, [pc, #36]	@ (8002808 <OnRxError+0x40>)
 80027e2:	f009 fa1f 	bl	800bc24 <iprintf>
 	  for(int i = 0; i < RxBufferSize; i++)
 80027e6:	3401      	adds	r4, #1
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <OnRxError+0x44>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	42a3      	cmp	r3, r4
 80027ee:	dcf4      	bgt.n	80027da <OnRxError+0x12>
 	  }



	 /* Run PingPong process in background*/
	 UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80027f0:	2100      	movs	r1, #0
 80027f2:	2001      	movs	r0, #1
 80027f4:	f008 f856 	bl	800a8a4 <UTIL_SEQ_SetTask>

  /* USER CODE END OnRxError */
}
 80027f8:	bd10      	pop	{r4, pc}
 80027fa:	bf00      	nop
 80027fc:	2000093f 	.word	0x2000093f
 8002800:	0800ddf8 	.word	0x0800ddf8
 8002804:	20000840 	.word	0x20000840
 8002808:	0800de4c 	.word	0x0800de4c
 800280c:	2000073e 	.word	0x2000073e

08002810 <OnRxTimeout>:
{
 8002810:	b508      	push	{r3, lr}
	State = RX_TIMEOUT;
 8002812:	2001      	movs	r0, #1
 8002814:	4b02      	ldr	r3, [pc, #8]	@ (8002820 <OnRxTimeout+0x10>)
 8002816:	7018      	strb	r0, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8002818:	2100      	movs	r1, #0
 800281a:	f008 f843 	bl	800a8a4 <UTIL_SEQ_SetTask>
}
 800281e:	bd08      	pop	{r3, pc}
 8002820:	2000093f 	.word	0x2000093f

08002824 <OnTxTimeout>:
{
 8002824:	b508      	push	{r3, lr}
	State = TX_TIMEOUT;
 8002826:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <OnTxTimeout+0x14>)
 8002828:	2204      	movs	r2, #4
 800282a:	701a      	strb	r2, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800282c:	2100      	movs	r1, #0
 800282e:	2001      	movs	r0, #1
 8002830:	f008 f838 	bl	800a8a4 <UTIL_SEQ_SetTask>
}
 8002834:	bd08      	pop	{r3, pc}
 8002836:	bf00      	nop
 8002838:	2000093f 	.word	0x2000093f

0800283c <OnTxDone>:
{
 800283c:	b510      	push	{r4, lr}
	 printf("\n\r");
 800283e:	480c      	ldr	r0, [pc, #48]	@ (8002870 <OnTxDone+0x34>)
 8002840:	f009 f9f0 	bl	800bc24 <iprintf>
     for(int i = 0; i < 5; i++)
 8002844:	2400      	movs	r4, #0
 8002846:	e006      	b.n	8002856 <OnTxDone+0x1a>
		  printf("In OnTxDone: BufferTx[%d] = %04X\n\r", i, BufferTx[i]);
 8002848:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <OnTxDone+0x38>)
 800284a:	5d1a      	ldrb	r2, [r3, r4]
 800284c:	4621      	mov	r1, r4
 800284e:	480a      	ldr	r0, [pc, #40]	@ (8002878 <OnTxDone+0x3c>)
 8002850:	f009 f9e8 	bl	800bc24 <iprintf>
     for(int i = 0; i < 5; i++)
 8002854:	3401      	adds	r4, #1
 8002856:	2c04      	cmp	r4, #4
 8002858:	ddf6      	ble.n	8002848 <OnTxDone+0xc>
     printf("\n\r");
 800285a:	4805      	ldr	r0, [pc, #20]	@ (8002870 <OnTxDone+0x34>)
 800285c:	f009 f9e2 	bl	800bc24 <iprintf>
	 State = TX;
 8002860:	4b06      	ldr	r3, [pc, #24]	@ (800287c <OnTxDone+0x40>)
 8002862:	2203      	movs	r2, #3
 8002864:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8002866:	2100      	movs	r1, #0
 8002868:	2001      	movs	r0, #1
 800286a:	f008 f81b 	bl	800a8a4 <UTIL_SEQ_SetTask>
}
 800286e:	bd10      	pop	{r4, pc}
 8002870:	0800ddf8 	.word	0x0800ddf8
 8002874:	20000740 	.word	0x20000740
 8002878:	0800de64 	.word	0x0800de64
 800287c:	2000093f 	.word	0x2000093f

08002880 <OnRxDone>:
{
 8002880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002884:	4607      	mov	r7, r0
 8002886:	460d      	mov	r5, r1
 8002888:	4616      	mov	r6, r2
	  SnrValue = 0; /*not applicable in GFSK*/
 800288a:	2400      	movs	r4, #0
 800288c:	4b0c      	ldr	r3, [pc, #48]	@ (80028c0 <OnRxDone+0x40>)
 800288e:	701c      	strb	r4, [r3, #0]
	  State = RX;
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <OnRxDone+0x44>)
 8002892:	701c      	strb	r4, [r3, #0]
	  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8002894:	f8df 8030 	ldr.w	r8, [pc, #48]	@ 80028c8 <OnRxDone+0x48>
 8002898:	22ff      	movs	r2, #255	@ 0xff
 800289a:	4621      	mov	r1, r4
 800289c:	4640      	mov	r0, r8
 800289e:	f009 fa16 	bl	800bcce <memset>
	  RxBufferSize = size;
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <OnRxDone+0x4c>)
 80028a4:	801d      	strh	r5, [r3, #0]
	  memcpy(BufferRx, payload, RxBufferSize);
 80028a6:	462a      	mov	r2, r5
 80028a8:	4639      	mov	r1, r7
 80028aa:	4640      	mov	r0, r8
 80028ac:	f009 fa9f 	bl	800bdee <memcpy>
	  RssiValue = rssi;
 80028b0:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <OnRxDone+0x50>)
 80028b2:	701e      	strb	r6, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80028b4:	4621      	mov	r1, r4
 80028b6:	2001      	movs	r0, #1
 80028b8:	f007 fff4 	bl	800a8a4 <UTIL_SEQ_SetTask>
}
 80028bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028c0:	2000073c 	.word	0x2000073c
 80028c4:	2000093f 	.word	0x2000093f
 80028c8:	20000840 	.word	0x20000840
 80028cc:	2000073e 	.word	0x2000073e
 80028d0:	2000073d 	.word	0x2000073d

080028d4 <StormEq_WCS>:

/* USER CODE BEGIN PrFD */

void StormEq_WCS(void) // PingPong_Process
{
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	b082      	sub	sp, #8
	  Radio.Sleep();
 80028d8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b50 <StormEq_WCS+0x27c>)
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	4798      	blx	r3
	  switch (State)
 80028de:	4b9d      	ldr	r3, [pc, #628]	@ (8002b54 <StormEq_WCS+0x280>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d816      	bhi.n	8002914 <StormEq_WCS+0x40>
 80028e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80028ea:	0005      	.short	0x0005
 80028ec:	01180112 	.word	0x01180112
 80028f0:	0125010c 	.word	0x0125010c
	      // memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
	      // start reception

	      HAL_StatusTypeDef UART_Check = HAL_OK;

	      if(currentPairingState == Paired)
 80028f4:	4b98      	ldr	r3, [pc, #608]	@ (8002b58 <StormEq_WCS+0x284>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b06      	cmp	r3, #6
 80028fa:	d00d      	beq.n	8002918 <StormEq_WCS+0x44>
			  }
		  }

		  else
		  {
			  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 80028fc:	4b97      	ldr	r3, [pc, #604]	@ (8002b5c <StormEq_WCS+0x288>)
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	2aff      	cmp	r2, #255	@ 0xff
 8002902:	f240 80f9 	bls.w	8002af8 <StormEq_WCS+0x224>
					memcpy(BufferRx, payload, RxBufferSize);
			  }
		  }


	      Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8002906:	4b92      	ldr	r3, [pc, #584]	@ (8002b50 <StormEq_WCS+0x27c>)
 8002908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290a:	4a95      	ldr	r2, [pc, #596]	@ (8002b60 <StormEq_WCS+0x28c>)
 800290c:	6810      	ldr	r0, [r2, #0]
 800290e:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 8002912:	4798      	blx	r3
	      break;

	    default:
	      break;
	  }
}
 8002914:	b002      	add	sp, #8
 8002916:	bd70      	pop	{r4, r5, r6, pc}
			  uint8_t dataToSend[] = {0x00, 0x00, 0x00};
 8002918:	4b92      	ldr	r3, [pc, #584]	@ (8002b64 <StormEq_WCS+0x290>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002920:	0c1b      	lsrs	r3, r3, #16
 8002922:	f88d 3006 	strb.w	r3, [sp, #6]
			  combinedBytes1 = (BufferRx[1] << 8) | BufferRx[0];
 8002926:	4b90      	ldr	r3, [pc, #576]	@ (8002b68 <StormEq_WCS+0x294>)
 8002928:	7859      	ldrb	r1, [r3, #1]
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002930:	4c8e      	ldr	r4, [pc, #568]	@ (8002b6c <StormEq_WCS+0x298>)
 8002932:	8022      	strh	r2, [r4, #0]
			  combinedBytes2 = (BufferRx[3] << 8) | BufferRx[2];
 8002934:	78da      	ldrb	r2, [r3, #3]
 8002936:	789b      	ldrb	r3, [r3, #2]
 8002938:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800293c:	4e8c      	ldr	r6, [pc, #560]	@ (8002b70 <StormEq_WCS+0x29c>)
 800293e:	8033      	strh	r3, [r6, #0]
			  printf("deviceIds.combinedDeviceID[0] = %04X\n\r", deviceIds.combinedDeviceID[0]);
 8002940:	4d8c      	ldr	r5, [pc, #560]	@ (8002b74 <StormEq_WCS+0x2a0>)
 8002942:	88a9      	ldrh	r1, [r5, #4]
 8002944:	488c      	ldr	r0, [pc, #560]	@ (8002b78 <StormEq_WCS+0x2a4>)
 8002946:	f009 f96d 	bl	800bc24 <iprintf>
			  printf("deviceIds.combinedDeviceID[1] = %04X\n\r", deviceIds.combinedDeviceID[1]);
 800294a:	88e9      	ldrh	r1, [r5, #6]
 800294c:	488b      	ldr	r0, [pc, #556]	@ (8002b7c <StormEq_WCS+0x2a8>)
 800294e:	f009 f969 	bl	800bc24 <iprintf>
			  printf("combinedBytes1 = %04X\n\r", combinedBytes1);
 8002952:	8821      	ldrh	r1, [r4, #0]
 8002954:	488a      	ldr	r0, [pc, #552]	@ (8002b80 <StormEq_WCS+0x2ac>)
 8002956:	f009 f965 	bl	800bc24 <iprintf>
			  printf("combinedBytes2 = %04X\n\r", combinedBytes2);
 800295a:	8831      	ldrh	r1, [r6, #0]
 800295c:	4889      	ldr	r0, [pc, #548]	@ (8002b84 <StormEq_WCS+0x2b0>)
 800295e:	f009 f961 	bl	800bc24 <iprintf>
			  if((combinedBytes1 == deviceIds.combinedDeviceID[0]) && (combinedBytes2 == deviceIds.combinedDeviceID[1]))
 8002962:	88aa      	ldrh	r2, [r5, #4]
 8002964:	8823      	ldrh	r3, [r4, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d103      	bne.n	8002972 <StormEq_WCS+0x9e>
 800296a:	88ea      	ldrh	r2, [r5, #6]
 800296c:	8833      	ldrh	r3, [r6, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d003      	beq.n	800297a <StormEq_WCS+0xa6>
				  printf("First two bytes DO NOT Match!!!\n\r");
 8002972:	4885      	ldr	r0, [pc, #532]	@ (8002b88 <StormEq_WCS+0x2b4>)
 8002974:	f009 f956 	bl	800bc24 <iprintf>
 8002978:	e7c5      	b.n	8002906 <StormEq_WCS+0x32>
				  printf("The first Two Bytes Match!!!!\n\r");
 800297a:	4884      	ldr	r0, [pc, #528]	@ (8002b8c <StormEq_WCS+0x2b8>)
 800297c:	f009 f952 	bl	800bc24 <iprintf>
				  uint8_t encodedPayload = BufferRx[4];
 8002980:	4b79      	ldr	r3, [pc, #484]	@ (8002b68 <StormEq_WCS+0x294>)
 8002982:	791c      	ldrb	r4, [r3, #4]
			      printf("The encodedPayload is: %02X\n\r", encodedPayload);
 8002984:	4621      	mov	r1, r4
 8002986:	4882      	ldr	r0, [pc, #520]	@ (8002b90 <StormEq_WCS+0x2bc>)
 8002988:	f009 f94c 	bl	800bc24 <iprintf>
			      uint8_t encodedPlowBatteryCharge = (encodedPayload >> 4) & 0xFF;
 800298c:	0925      	lsrs	r5, r4, #4
			      uint8_t encodedPlowAngle = encodedPayload & 0x0F;
 800298e:	f004 040f 	and.w	r4, r4, #15
			      printf("encodedPlowBatteryCharge = %02X\n\r", encodedPlowBatteryCharge); // 0 -> 0%, 9 -> 90%, 10 -> 100%
 8002992:	4629      	mov	r1, r5
 8002994:	487f      	ldr	r0, [pc, #508]	@ (8002b94 <StormEq_WCS+0x2c0>)
 8002996:	f009 f945 	bl	800bc24 <iprintf>
			      printf("encodedPlowAngle = %02X\n\r", encodedPlowAngle); // See encoding algorithm sheet
 800299a:	4621      	mov	r1, r4
 800299c:	487e      	ldr	r0, [pc, #504]	@ (8002b98 <StormEq_WCS+0x2c4>)
 800299e:	f009 f941 	bl	800bc24 <iprintf>
			      dataToSend[0] = 0x03;
 80029a2:	2303      	movs	r3, #3
 80029a4:	f88d 3004 	strb.w	r3, [sp, #4]
			      switch(encodedPlowAngle)
 80029a8:	2c0f      	cmp	r4, #15
 80029aa:	d853      	bhi.n	8002a54 <StormEq_WCS+0x180>
 80029ac:	e8df f004 	tbb	[pc, r4]
 80029b0:	1e1a1608 	.word	0x1e1a1608
 80029b4:	2e2a2622 	.word	0x2e2a2622
 80029b8:	3e3a3632 	.word	0x3e3a3632
 80029bc:	4e4a4642 	.word	0x4e4a4642
			              dataToSend[1] = 0x00;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f88d 3005 	strb.w	r3, [sp, #5]
			       switch(encodedPlowBatteryCharge)
 80029c6:	2d0a      	cmp	r5, #10
 80029c8:	f200 8081 	bhi.w	8002ace <StormEq_WCS+0x1fa>
 80029cc:	e8df f005 	tbb	[pc, r5]
 80029d0:	5f5b5746 	.word	0x5f5b5746
 80029d4:	6f6b6763 	.word	0x6f6b6763
 80029d8:	7773      	.short	0x7773
 80029da:	7b          	.byte	0x7b
 80029db:	00          	.byte	0x00
			              dataToSend[1] = 0x10;
 80029dc:	2310      	movs	r3, #16
 80029de:	f88d 3005 	strb.w	r3, [sp, #5]
			              break;
 80029e2:	e7f0      	b.n	80029c6 <StormEq_WCS+0xf2>
			              dataToSend[1] = 0x20;
 80029e4:	2320      	movs	r3, #32
 80029e6:	f88d 3005 	strb.w	r3, [sp, #5]
			              break;
 80029ea:	e7ec      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x30;
 80029ec:	2330      	movs	r3, #48	@ 0x30
 80029ee:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 80029f2:	e7e8      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x40;
 80029f4:	2340      	movs	r3, #64	@ 0x40
 80029f6:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 80029fa:	e7e4      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x50;
 80029fc:	2350      	movs	r3, #80	@ 0x50
 80029fe:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a02:	e7e0      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x60;
 8002a04:	2360      	movs	r3, #96	@ 0x60
 8002a06:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a0a:	e7dc      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x70;
 8002a0c:	2370      	movs	r3, #112	@ 0x70
 8002a0e:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a12:	e7d8      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x01;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a1a:	e7d4      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x02;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a22:	e7d0      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x03;
 8002a24:	2303      	movs	r3, #3
 8002a26:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a2a:	e7cc      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x04;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a32:	e7c8      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x05;
 8002a34:	2305      	movs	r3, #5
 8002a36:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a3a:	e7c4      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x06;
 8002a3c:	2306      	movs	r3, #6
 8002a3e:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a42:	e7c0      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x07;
 8002a44:	2307      	movs	r3, #7
 8002a46:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a4a:	e7bc      	b.n	80029c6 <StormEq_WCS+0xf2>
						  dataToSend[1] = 0x08;
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	f88d 3005 	strb.w	r3, [sp, #5]
						  break;
 8002a52:	e7b8      	b.n	80029c6 <StormEq_WCS+0xf2>
			        	  printf("Entered the defualt case!!! ERROR\n\r");
 8002a54:	4851      	ldr	r0, [pc, #324]	@ (8002b9c <StormEq_WCS+0x2c8>)
 8002a56:	f009 f8e5 	bl	800bc24 <iprintf>
			        	  break;
 8002a5a:	e7b4      	b.n	80029c6 <StormEq_WCS+0xf2>
			       		   dataToSend[2] = 0xE;
 8002a5c:	230e      	movs	r3, #14
 8002a5e:	f88d 3006 	strb.w	r3, [sp, #6]
{
 8002a62:	2400      	movs	r4, #0
			       for(int i = 0; i < sizeof(dataToSend); i++)
 8002a64:	2c02      	cmp	r4, #2
 8002a66:	d836      	bhi.n	8002ad6 <StormEq_WCS+0x202>
			    	    printf("dataToSend[%d] = %02X\n\r", i, dataToSend[i]);
 8002a68:	f104 0308 	add.w	r3, r4, #8
 8002a6c:	446b      	add	r3, sp
 8002a6e:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8002a72:	4621      	mov	r1, r4
 8002a74:	484a      	ldr	r0, [pc, #296]	@ (8002ba0 <StormEq_WCS+0x2cc>)
 8002a76:	f009 f8d5 	bl	800bc24 <iprintf>
			       for(int i = 0; i < sizeof(dataToSend); i++)
 8002a7a:	3401      	adds	r4, #1
 8002a7c:	e7f2      	b.n	8002a64 <StormEq_WCS+0x190>
			       		   dataToSend[2] = 0x26;
 8002a7e:	2326      	movs	r3, #38	@ 0x26
 8002a80:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002a84:	e7ed      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0x3E;
 8002a86:	233e      	movs	r3, #62	@ 0x3e
 8002a88:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002a8c:	e7e9      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0x56;
 8002a8e:	2356      	movs	r3, #86	@ 0x56
 8002a90:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002a94:	e7e5      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0x6E;
 8002a96:	236e      	movs	r3, #110	@ 0x6e
 8002a98:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002a9c:	e7e1      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0x86;
 8002a9e:	2386      	movs	r3, #134	@ 0x86
 8002aa0:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002aa4:	e7dd      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0x9E;
 8002aa6:	239e      	movs	r3, #158	@ 0x9e
 8002aa8:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002aac:	e7d9      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0xB6;
 8002aae:	23b6      	movs	r3, #182	@ 0xb6
 8002ab0:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002ab4:	e7d5      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0xCE;
 8002ab6:	23ce      	movs	r3, #206	@ 0xce
 8002ab8:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002abc:	e7d1      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0xE6;
 8002abe:	23e6      	movs	r3, #230	@ 0xe6
 8002ac0:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002ac4:	e7cd      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   dataToSend[2] = 0xFE;
 8002ac6:	23fe      	movs	r3, #254	@ 0xfe
 8002ac8:	f88d 3006 	strb.w	r3, [sp, #6]
			       		   break;
 8002acc:	e7c9      	b.n	8002a62 <StormEq_WCS+0x18e>
			       		   printf("Entered default case!!!! ERROR\n\r");
 8002ace:	4835      	ldr	r0, [pc, #212]	@ (8002ba4 <StormEq_WCS+0x2d0>)
 8002ad0:	f009 f8a8 	bl	800bc24 <iprintf>
			       		   break;
 8002ad4:	e7c5      	b.n	8002a62 <StormEq_WCS+0x18e>
			       UART_Check = HAL_UART_Transmit(&huart1, dataToSend, sizeof(dataToSend), HAL_MAX_DELAY);
 8002ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ada:	2203      	movs	r2, #3
 8002adc:	a901      	add	r1, sp, #4
 8002ade:	4832      	ldr	r0, [pc, #200]	@ (8002ba8 <StormEq_WCS+0x2d4>)
 8002ae0:	f005 f8a9 	bl	8007c36 <HAL_UART_Transmit>
				   if(UART_Check == HAL_OK)
 8002ae4:	4601      	mov	r1, r0
 8002ae6:	b918      	cbnz	r0, 8002af0 <StormEq_WCS+0x21c>
					   printf("UART message sent successfully\n\r");
 8002ae8:	4830      	ldr	r0, [pc, #192]	@ (8002bac <StormEq_WCS+0x2d8>)
 8002aea:	f009 f89b 	bl	800bc24 <iprintf>
 8002aee:	e70a      	b.n	8002906 <StormEq_WCS+0x32>
					   printf("UART message failed, error %d\n\r", UART_Check);
 8002af0:	482f      	ldr	r0, [pc, #188]	@ (8002bb0 <StormEq_WCS+0x2dc>)
 8002af2:	f009 f897 	bl	800bc24 <iprintf>
 8002af6:	e706      	b.n	8002906 <StormEq_WCS+0x32>
					memcpy(BufferRx, payload, RxBufferSize);
 8002af8:	492e      	ldr	r1, [pc, #184]	@ (8002bb4 <StormEq_WCS+0x2e0>)
 8002afa:	481b      	ldr	r0, [pc, #108]	@ (8002b68 <StormEq_WCS+0x294>)
 8002afc:	f009 f977 	bl	800bdee <memcpy>
 8002b00:	e701      	b.n	8002906 <StormEq_WCS+0x32>
	      Radio.Rx(RX_TIMEOUT_VALUE);
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <StormEq_WCS+0x27c>)
 8002b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b0a:	4798      	blx	r3
	      break;
 8002b0c:	e702      	b.n	8002914 <StormEq_WCS+0x40>
	      Radio.Rx(RX_TIMEOUT_VALUE);
 8002b0e:	4b10      	ldr	r3, [pc, #64]	@ (8002b50 <StormEq_WCS+0x27c>)
 8002b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b12:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b16:	4798      	blx	r3
	      break;
 8002b18:	e6fc      	b.n	8002914 <StormEq_WCS+0x40>
	      HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 8002b1a:	4c0d      	ldr	r4, [pc, #52]	@ (8002b50 <StormEq_WCS+0x27c>)
 8002b1c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002b1e:	4798      	blx	r3
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <StormEq_WCS+0x28c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4418      	add	r0, r3
 8002b26:	f7ff f909 	bl	8001d3c <HAL_Delay>
	      Radio.Rx(RX_TIMEOUT_VALUE);
 8002b2a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b30:	4798      	blx	r3
	      break;
 8002b32:	e6ef      	b.n	8002914 <StormEq_WCS+0x40>
	      HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 8002b34:	4c06      	ldr	r4, [pc, #24]	@ (8002b50 <StormEq_WCS+0x27c>)
 8002b36:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002b38:	4798      	blx	r3
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <StormEq_WCS+0x28c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4418      	add	r0, r3
 8002b40:	f7ff f8fc 	bl	8001d3c <HAL_Delay>
	      Radio.Rx(RX_TIMEOUT_VALUE);
 8002b44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002b46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b4a:	4798      	blx	r3
}
 8002b4c:	e6e2      	b.n	8002914 <StormEq_WCS+0x40>
 8002b4e:	bf00      	nop
 8002b50:	0800e46c 	.word	0x0800e46c
 8002b54:	2000093f 	.word	0x2000093f
 8002b58:	2000032e 	.word	0x2000032e
 8002b5c:	2000073e 	.word	0x2000073e
 8002b60:	20000738 	.word	0x20000738
 8002b64:	0800d9c0 	.word	0x0800d9c0
 8002b68:	20000840 	.word	0x20000840
 8002b6c:	2000095e 	.word	0x2000095e
 8002b70:	2000095c 	.word	0x2000095c
 8002b74:	2000030c 	.word	0x2000030c
 8002b78:	0800de88 	.word	0x0800de88
 8002b7c:	0800deb0 	.word	0x0800deb0
 8002b80:	0800ded8 	.word	0x0800ded8
 8002b84:	0800def0 	.word	0x0800def0
 8002b88:	0800e02c 	.word	0x0800e02c
 8002b8c:	0800df08 	.word	0x0800df08
 8002b90:	0800df28 	.word	0x0800df28
 8002b94:	0800df48 	.word	0x0800df48
 8002b98:	0800df6c 	.word	0x0800df6c
 8002b9c:	0800df88 	.word	0x0800df88
 8002ba0:	0800dfd0 	.word	0x0800dfd0
 8002ba4:	0800dfac 	.word	0x0800dfac
 8002ba8:	20000660 	.word	0x20000660
 8002bac:	0800dfe8 	.word	0x0800dfe8
 8002bb0:	0800e00c 	.word	0x0800e00c
 8002bb4:	2000032c 	.word	0x2000032c

08002bb8 <SubghzApp_Init>:
{
 8002bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bbc:	b08b      	sub	sp, #44	@ 0x2c
	printf( "\n\rPING PONG\n\r");
 8002bbe:	4841      	ldr	r0, [pc, #260]	@ (8002cc4 <SubghzApp_Init+0x10c>)
 8002bc0:	f009 f830 	bl	800bc24 <iprintf>
	printf( "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	2203      	movs	r2, #3
 8002bc8:	2101      	movs	r1, #1
 8002bca:	483f      	ldr	r0, [pc, #252]	@ (8002cc8 <SubghzApp_Init+0x110>)
 8002bcc:	f009 f82a 	bl	800bc24 <iprintf>
	printf( "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	483d      	ldr	r0, [pc, #244]	@ (8002ccc <SubghzApp_Init+0x114>)
 8002bd8:	f009 f824 	bl	800bc24 <iprintf>
  RadioEvents.TxDone = OnTxDone;
 8002bdc:	483c      	ldr	r0, [pc, #240]	@ (8002cd0 <SubghzApp_Init+0x118>)
 8002bde:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd4 <SubghzApp_Init+0x11c>)
 8002be0:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 8002be2:	4b3d      	ldr	r3, [pc, #244]	@ (8002cd8 <SubghzApp_Init+0x120>)
 8002be4:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8002be6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <SubghzApp_Init+0x124>)
 8002be8:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8002bea:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <SubghzApp_Init+0x128>)
 8002bec:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 8002bee:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce4 <SubghzApp_Init+0x12c>)
 8002bf0:	6103      	str	r3, [r0, #16]
  Radio.Init(&RadioEvents);
 8002bf2:	4d3d      	ldr	r5, [pc, #244]	@ (8002ce8 <SubghzApp_Init+0x130>)
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	4798      	blx	r3
     random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8002bf8:	696b      	ldr	r3, [r5, #20]
 8002bfa:	4798      	blx	r3
 8002bfc:	0d80      	lsrs	r0, r0, #22
 8002bfe:	4f3b      	ldr	r7, [pc, #236]	@ (8002cec <SubghzApp_Init+0x134>)
 8002c00:	6038      	str	r0, [r7, #0]
     Radio.SetChannel(RF_FREQUENCY);
 8002c02:	68eb      	ldr	r3, [r5, #12]
 8002c04:	483a      	ldr	r0, [pc, #232]	@ (8002cf0 <SubghzApp_Init+0x138>)
 8002c06:	4798      	blx	r3
      printf( "---------------\n\r");
 8002c08:	483a      	ldr	r0, [pc, #232]	@ (8002cf4 <SubghzApp_Init+0x13c>)
 8002c0a:	f009 f80b 	bl	800bc24 <iprintf>
      printf( "FSK_MODULATION\n\r");
 8002c0e:	483a      	ldr	r0, [pc, #232]	@ (8002cf8 <SubghzApp_Init+0x140>)
 8002c10:	f009 f808 	bl	800bc24 <iprintf>
      printf( "FSK_BW=%d Hz\n\r", FSK_BANDWIDTH);
 8002c14:	f649 4140 	movw	r1, #40000	@ 0x9c40
 8002c18:	4838      	ldr	r0, [pc, #224]	@ (8002cfc <SubghzApp_Init+0x144>)
 8002c1a:	f009 f803 	bl	800bc24 <iprintf>
      printf( "FSK_DR=%d bits/s\n\r", FSK_DATARATE);
 8002c1e:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8002c22:	4837      	ldr	r0, [pc, #220]	@ (8002d00 <SubghzApp_Init+0x148>)
 8002c24:	f008 fffe 	bl	800bc24 <iprintf>
      Radio.SetTxConfig(MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 8002c28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c2c:	9308      	str	r3, [sp, #32]
 8002c2e:	2400      	movs	r4, #0
 8002c30:	9407      	str	r4, [sp, #28]
 8002c32:	9406      	str	r4, [sp, #24]
 8002c34:	9405      	str	r4, [sp, #20]
 8002c36:	2601      	movs	r6, #1
 8002c38:	9604      	str	r6, [sp, #16]
 8002c3a:	9403      	str	r4, [sp, #12]
 8002c3c:	f04f 0905 	mov.w	r9, #5
 8002c40:	f8cd 9008 	str.w	r9, [sp, #8]
 8002c44:	9401      	str	r4, [sp, #4]
 8002c46:	f644 6820 	movw	r8, #20000	@ 0x4e20
 8002c4a:	f8cd 8000 	str.w	r8, [sp]
 8002c4e:	4623      	mov	r3, r4
 8002c50:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002c54:	210e      	movs	r1, #14
 8002c56:	4620      	mov	r0, r4
 8002c58:	f8d5 c01c 	ldr.w	ip, [r5, #28]
 8002c5c:	47e0      	blx	ip
      Radio.SetRxConfig(MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 8002c5e:	9609      	str	r6, [sp, #36]	@ 0x24
 8002c60:	9408      	str	r4, [sp, #32]
 8002c62:	9407      	str	r4, [sp, #28]
 8002c64:	9406      	str	r4, [sp, #24]
 8002c66:	9605      	str	r6, [sp, #20]
 8002c68:	9404      	str	r4, [sp, #16]
 8002c6a:	9403      	str	r4, [sp, #12]
 8002c6c:	9402      	str	r4, [sp, #8]
 8002c6e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002c72:	4b24      	ldr	r3, [pc, #144]	@ (8002d04 <SubghzApp_Init+0x14c>)
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4623      	mov	r3, r4
 8002c78:	4642      	mov	r2, r8
 8002c7a:	f649 4140 	movw	r1, #40000	@ 0x9c40
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8002c84:	47e0      	blx	ip
      Radio.SetMaxPayloadLength(MODEM_FSK, MAX_APP_BUFFER_SIZE);
 8002c86:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002c88:	21ff      	movs	r1, #255	@ 0xff
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4798      	blx	r3
      memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8002c8e:	22ff      	movs	r2, #255	@ 0xff
 8002c90:	4621      	mov	r1, r4
 8002c92:	481d      	ldr	r0, [pc, #116]	@ (8002d08 <SubghzApp_Init+0x150>)
 8002c94:	f009 f81b 	bl	800bcce <memset>
      APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <SubghzApp_Init+0x154>)
 8002c9e:	4632      	mov	r2, r6
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f007 fcd4 	bl	800a650 <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8002ca8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002caa:	6838      	ldr	r0, [r7, #0]
 8002cac:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 8002cb0:	4798      	blx	r3
      UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, StormEq_WCS);
 8002cb2:	4a17      	ldr	r2, [pc, #92]	@ (8002d10 <SubghzApp_Init+0x158>)
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f007 febe 	bl	800aa38 <UTIL_SEQ_RegTask>
}
 8002cbc:	b00b      	add	sp, #44	@ 0x2c
 8002cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cc2:	bf00      	nop
 8002cc4:	0800e050 	.word	0x0800e050
 8002cc8:	0800e060 	.word	0x0800e060
 8002ccc:	0800e084 	.word	0x0800e084
 8002cd0:	20000940 	.word	0x20000940
 8002cd4:	0800283d 	.word	0x0800283d
 8002cd8:	08002881 	.word	0x08002881
 8002cdc:	08002825 	.word	0x08002825
 8002ce0:	08002811 	.word	0x08002811
 8002ce4:	080027c9 	.word	0x080027c9
 8002ce8:	0800e46c 	.word	0x0800e46c
 8002cec:	20000738 	.word	0x20000738
 8002cf0:	363d7f80 	.word	0x363d7f80
 8002cf4:	0800e0a8 	.word	0x0800e0a8
 8002cf8:	0800e0bc 	.word	0x0800e0bc
 8002cfc:	0800e0d0 	.word	0x0800e0d0
 8002d00:	0800e0e0 	.word	0x0800e0e0
 8002d04:	00014585 	.word	0x00014585
 8002d08:	20000740 	.word	0x20000740
 8002d0c:	0800e0f4 	.word	0x0800e0f4
 8002d10:	080028d5 	.word	0x080028d5

08002d14 <radio_send_wrapper>:
{
 8002d14:	b538      	push	{r3, r4, r5, lr}
 8002d16:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8002d18:	4d0a      	ldr	r5, [pc, #40]	@ (8002d44 <radio_send_wrapper+0x30>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d20:	4628      	mov	r0, r5
 8002d22:	f001 f83c 	bl	8003d9e <HAL_GPIO_WritePin>
	Radio.Send(BufferTx, payloadSize);
 8002d26:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <radio_send_wrapper+0x34>)
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	b2e1      	uxtb	r1, r4
 8002d2c:	4807      	ldr	r0, [pc, #28]	@ (8002d4c <radio_send_wrapper+0x38>)
 8002d2e:	4798      	blx	r3
	HAL_Delay(10);
 8002d30:	200a      	movs	r0, #10
 8002d32:	f7ff f803 	bl	8001d3c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8002d36:	2200      	movs	r2, #0
 8002d38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	f001 f82e 	bl	8003d9e <HAL_GPIO_WritePin>
}
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	48000400 	.word	0x48000400
 8002d48:	0800e46c 	.word	0x0800e46c
 8002d4c:	20000740 	.word	0x20000740

08002d50 <encodeDeviceId>:
{
 8002d50:	b538      	push	{r3, r4, r5, lr}
 8002d52:	4604      	mov	r4, r0
 8002d54:	460d      	mov	r5, r1
  printf("Entered encodeDeviceId function.\n\r");
 8002d56:	4811      	ldr	r0, [pc, #68]	@ (8002d9c <encodeDeviceId+0x4c>)
 8002d58:	f008 ff64 	bl	800bc24 <iprintf>
  HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_RESET);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2101      	movs	r1, #1
 8002d60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d64:	f001 f81b 	bl	8003d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_RESET);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d72:	f001 f814 	bl	8003d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_SET);
 8002d76:	2201      	movs	r2, #1
 8002d78:	2102      	movs	r1, #2
 8002d7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d7e:	f001 f80e 	bl	8003d9e <HAL_GPIO_WritePin>
  payload[0] = (uint8_t)(deviceId & 0xFF);
 8002d82:	b2e3      	uxtb	r3, r4
 8002d84:	702b      	strb	r3, [r5, #0]
  payload[1] = (uint8_t)((deviceId >> 8) & 0xFF);
 8002d86:	0a24      	lsrs	r4, r4, #8
 8002d88:	706c      	strb	r4, [r5, #1]
  deviceIds.deviceID = ((uint16_t)(payload[0] | payload[1] << 8));
 8002d8a:	ea43 2104 	orr.w	r1, r3, r4, lsl #8
 8002d8e:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <encodeDeviceId+0x50>)
 8002d90:	8019      	strh	r1, [r3, #0]
  printf("This Device ID is (struct): 0x%04X\n\r", deviceIds.deviceID);
 8002d92:	4804      	ldr	r0, [pc, #16]	@ (8002da4 <encodeDeviceId+0x54>)
 8002d94:	f008 ff46 	bl	800bc24 <iprintf>
}
 8002d98:	bd38      	pop	{r3, r4, r5, pc}
 8002d9a:	bf00      	nop
 8002d9c:	0800e100 	.word	0x0800e100
 8002da0:	2000030c 	.word	0x2000030c
 8002da4:	0800e124 	.word	0x0800e124

08002da8 <broadcastDeviceId>:
{
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	4607      	mov	r7, r0
	printf("Entered BroadcastDeviceID function.\n\r");
 8002dac:	4860      	ldr	r0, [pc, #384]	@ (8002f30 <broadcastDeviceId+0x188>)
 8002dae:	f008 ff39 	bl	800bc24 <iprintf>
	HAL_GPIO_WritePin(PAIR_LIGHT_PORT, RED_PIN, GPIO_PIN_RESET);
 8002db2:	2200      	movs	r2, #0
 8002db4:	2101      	movs	r1, #1
 8002db6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dba:	f000 fff0 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAIR_LIGHT_PORT, GREEN_PIN, GPIO_PIN_RESET);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dc8:	f000 ffe9 	bl	8003d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PAIR_LIGHT_PORT, BLUE_PIN, GPIO_PIN_SET);
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2102      	movs	r1, #2
 8002dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dd4:	f000 ffe3 	bl	8003d9e <HAL_GPIO_WritePin>
	while(!isAck1Received)
 8002dd8:	4b56      	ldr	r3, [pc, #344]	@ (8002f34 <broadcastDeviceId+0x18c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d13e      	bne.n	8002e5e <broadcastDeviceId+0xb6>
		printf("Cab PCB transmitting this DeviceID, then listening for Ack\n\r");
 8002de0:	4855      	ldr	r0, [pc, #340]	@ (8002f38 <broadcastDeviceId+0x190>)
 8002de2:	f008 ff1f 	bl	800bc24 <iprintf>
		memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);  // Clear the BufferTx array
 8002de6:	4e55      	ldr	r6, [pc, #340]	@ (8002f3c <broadcastDeviceId+0x194>)
 8002de8:	25ff      	movs	r5, #255	@ 0xff
 8002dea:	462a      	mov	r2, r5
 8002dec:	2100      	movs	r1, #0
 8002dee:	4630      	mov	r0, r6
 8002df0:	f008 ff6d 	bl	800bcce <memset>
		size_t payloadSize = strlen((char*)payload);
 8002df4:	4638      	mov	r0, r7
 8002df6:	f7fd fa13 	bl	8000220 <strlen>
 8002dfa:	4604      	mov	r4, r0
		memcpy(BufferTx, payload, payloadSize);  // Copy the payload to BufferTx
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4639      	mov	r1, r7
 8002e00:	4630      	mov	r0, r6
 8002e02:	f008 fff4 	bl	800bdee <memcpy>
		radio_send_wrapper(payloadSize);
 8002e06:	4620      	mov	r0, r4
 8002e08:	f7ff ff84 	bl	8002d14 <radio_send_wrapper>
		HAL_Delay(100);
 8002e0c:	2064      	movs	r0, #100	@ 0x64
 8002e0e:	f7fe ff95 	bl	8001d3c <HAL_Delay>
		HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 8002e12:	4c4b      	ldr	r4, [pc, #300]	@ (8002f40 <broadcastDeviceId+0x198>)
 8002e14:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002e16:	4798      	blx	r3
 8002e18:	f7fe ff90 	bl	8001d3c <HAL_Delay>
		printf("Listen for Ack1\n\r");
 8002e1c:	4849      	ldr	r0, [pc, #292]	@ (8002f44 <broadcastDeviceId+0x19c>)
 8002e1e:	f008 ff01 	bl	800bc24 <iprintf>
		memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8002e22:	462a      	mov	r2, r5
 8002e24:	2100      	movs	r1, #0
 8002e26:	4848      	ldr	r0, [pc, #288]	@ (8002f48 <broadcastDeviceId+0x1a0>)
 8002e28:	f008 ff51 	bl	800bcce <memset>
		Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8002e2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e2e:	4a47      	ldr	r2, [pc, #284]	@ (8002f4c <broadcastDeviceId+0x1a4>)
 8002e30:	6810      	ldr	r0, [r2, #0]
 8002e32:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 8002e36:	4798      	blx	r3
		HAL_Delay(100);
 8002e38:	2064      	movs	r0, #100	@ 0x64
 8002e3a:	f7fe ff7f 	bl	8001d3c <HAL_Delay>
		if(RxBufferSize >= sizeof(uint8_t))
 8002e3e:	4b44      	ldr	r3, [pc, #272]	@ (8002f50 <broadcastDeviceId+0x1a8>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0c8      	beq.n	8002dd8 <broadcastDeviceId+0x30>
			memcpy(&receivedAck, BufferRx, sizeof(uint8_t));
 8002e46:	4b40      	ldr	r3, [pc, #256]	@ (8002f48 <broadcastDeviceId+0x1a0>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4a42      	ldr	r2, [pc, #264]	@ (8002f54 <broadcastDeviceId+0x1ac>)
 8002e4c:	7013      	strb	r3, [r2, #0]
			if(receivedAck == 0x0F)
 8002e4e:	2b0f      	cmp	r3, #15
 8002e50:	d1c2      	bne.n	8002dd8 <broadcastDeviceId+0x30>
				printf("\n\r\n\rAck1 message received!!\n\r");
 8002e52:	4841      	ldr	r0, [pc, #260]	@ (8002f58 <broadcastDeviceId+0x1b0>)
 8002e54:	f008 fee6 	bl	800bc24 <iprintf>
				isAck1Received = true;
 8002e58:	4b36      	ldr	r3, [pc, #216]	@ (8002f34 <broadcastDeviceId+0x18c>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
    printf("CAB PCB listening for otherDeviceID.\n\r");
 8002e5e:	483f      	ldr	r0, [pc, #252]	@ (8002f5c <broadcastDeviceId+0x1b4>)
 8002e60:	f008 fee0 	bl	800bc24 <iprintf>
		memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8002e64:	22ff      	movs	r2, #255	@ 0xff
 8002e66:	2100      	movs	r1, #0
 8002e68:	4837      	ldr	r0, [pc, #220]	@ (8002f48 <broadcastDeviceId+0x1a0>)
 8002e6a:	f008 ff30 	bl	800bcce <memset>
		Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8002e6e:	4b34      	ldr	r3, [pc, #208]	@ (8002f40 <broadcastDeviceId+0x198>)
 8002e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e72:	4a36      	ldr	r2, [pc, #216]	@ (8002f4c <broadcastDeviceId+0x1a4>)
 8002e74:	6810      	ldr	r0, [r2, #0]
 8002e76:	f500 707a 	add.w	r0, r0, #1000	@ 0x3e8
 8002e7a:	4798      	blx	r3
		HAL_Delay(100);
 8002e7c:	2064      	movs	r0, #100	@ 0x64
 8002e7e:	f7fe ff5d 	bl	8001d3c <HAL_Delay>
		if(RxBufferSize >= sizeof(uint16_t))
 8002e82:	4b33      	ldr	r3, [pc, #204]	@ (8002f50 <broadcastDeviceId+0x1a8>)
 8002e84:	881b      	ldrh	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d9ec      	bls.n	8002e64 <broadcastDeviceId+0xbc>
			memcpy(&otherDeviceID, BufferRx, sizeof(uint16_t));
 8002e8a:	4b2f      	ldr	r3, [pc, #188]	@ (8002f48 <broadcastDeviceId+0x1a0>)
 8002e8c:	8819      	ldrh	r1, [r3, #0]
 8002e8e:	4c34      	ldr	r4, [pc, #208]	@ (8002f60 <broadcastDeviceId+0x1b8>)
 8002e90:	8021      	strh	r1, [r4, #0]
			printf("Received Payload is: 0x%04X\n\r", otherDeviceID);
 8002e92:	4834      	ldr	r0, [pc, #208]	@ (8002f64 <broadcastDeviceId+0x1bc>)
 8002e94:	f008 fec6 	bl	800bc24 <iprintf>
			if((otherDeviceID != 0x0F) && (otherDeviceID != 0xF0) && (otherDeviceID != 0x0000))
 8002e98:	8823      	ldrh	r3, [r4, #0]
 8002e9a:	2b0f      	cmp	r3, #15
 8002e9c:	d0e2      	beq.n	8002e64 <broadcastDeviceId+0xbc>
 8002e9e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002ea0:	d0e0      	beq.n	8002e64 <broadcastDeviceId+0xbc>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0de      	beq.n	8002e64 <broadcastDeviceId+0xbc>
				deviceIds.otherDeviceID              = otherDeviceID; // assign the other deviceId to the struct (should be the sent encoded value)
 8002ea6:	4c30      	ldr	r4, [pc, #192]	@ (8002f68 <broadcastDeviceId+0x1c0>)
 8002ea8:	8063      	strh	r3, [r4, #2]
				deviceIds.combinedDeviceID[0]        = deviceIds.deviceID;
 8002eaa:	8821      	ldrh	r1, [r4, #0]
 8002eac:	80a1      	strh	r1, [r4, #4]
				deviceIds.combinedDeviceID[1]        = deviceIds.otherDeviceID;
 8002eae:	80e3      	strh	r3, [r4, #6]
				deviceIds.swappedCombinedDeviceID[0] = deviceIds.combinedDeviceID[1];
 8002eb0:	8123      	strh	r3, [r4, #8]
				deviceIds.swappedCombinedDeviceID[1] = deviceIds.combinedDeviceID[0];
 8002eb2:	8161      	strh	r1, [r4, #10]
				swappedCombinedDeviceID[0] 			 = deviceIds.swappedCombinedDeviceID[0];
 8002eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8002f6c <broadcastDeviceId+0x1c4>)
 8002eb6:	8013      	strh	r3, [r2, #0]
				swappedCombinedDeviceID[1] 			 = deviceIds.swappedCombinedDeviceID[1];
 8002eb8:	8051      	strh	r1, [r2, #2]
				printf("combinedDeviceID[0] = 0x%04X\n\r", deviceIds.combinedDeviceID[0]);
 8002eba:	482d      	ldr	r0, [pc, #180]	@ (8002f70 <broadcastDeviceId+0x1c8>)
 8002ebc:	f008 feb2 	bl	800bc24 <iprintf>
				printf("combinedDeviceID[1] = 0x%04X\n\r", deviceIds.combinedDeviceID[1]);
 8002ec0:	88e1      	ldrh	r1, [r4, #6]
 8002ec2:	482c      	ldr	r0, [pc, #176]	@ (8002f74 <broadcastDeviceId+0x1cc>)
 8002ec4:	f008 feae 	bl	800bc24 <iprintf>
				printf("swappedCombinedDeviceID[0] = 0x%04X\n\r", deviceIds.swappedCombinedDeviceID[0]);
 8002ec8:	8921      	ldrh	r1, [r4, #8]
 8002eca:	482b      	ldr	r0, [pc, #172]	@ (8002f78 <broadcastDeviceId+0x1d0>)
 8002ecc:	f008 feaa 	bl	800bc24 <iprintf>
				printf("swappedCombinedDeviceID[1] = 0x%04X\n\r", deviceIds.swappedCombinedDeviceID[1]);
 8002ed0:	8961      	ldrh	r1, [r4, #10]
 8002ed2:	482a      	ldr	r0, [pc, #168]	@ (8002f7c <broadcastDeviceId+0x1d4>)
 8002ed4:	f008 fea6 	bl	800bc24 <iprintf>
				saveIDsToEEPROM(&hi2c3, pairingId1, pairingId2, EEPROM_Start_Address);
 8002ed8:	4b29      	ldr	r3, [pc, #164]	@ (8002f80 <broadcastDeviceId+0x1d8>)
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	8862      	ldrh	r2, [r4, #2]
 8002ede:	8821      	ldrh	r1, [r4, #0]
 8002ee0:	4828      	ldr	r0, [pc, #160]	@ (8002f84 <broadcastDeviceId+0x1dc>)
 8002ee2:	f7fe f96b 	bl	80011bc <saveIDsToEEPROM>
				printf("\n\r\n\rOther Device ID is (Struct): 0x%04X\n\r\n\r", deviceIds.otherDeviceID);
 8002ee6:	8861      	ldrh	r1, [r4, #2]
 8002ee8:	4827      	ldr	r0, [pc, #156]	@ (8002f88 <broadcastDeviceId+0x1e0>)
 8002eea:	f008 fe9b 	bl	800bc24 <iprintf>
				HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 8002eee:	4b14      	ldr	r3, [pc, #80]	@ (8002f40 <broadcastDeviceId+0x198>)
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef2:	4798      	blx	r3
 8002ef4:	f7fe ff22 	bl	8001d3c <HAL_Delay>
				for(int i = 0; i < 5; i++)
 8002ef8:	2400      	movs	r4, #0
 8002efa:	e012      	b.n	8002f22 <broadcastDeviceId+0x17a>
					printf("Sending Ack1 x5\n\r");
 8002efc:	4823      	ldr	r0, [pc, #140]	@ (8002f8c <broadcastDeviceId+0x1e4>)
 8002efe:	f008 fe91 	bl	800bc24 <iprintf>
					memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);  // Clear the BufferTx array
 8002f02:	4d0e      	ldr	r5, [pc, #56]	@ (8002f3c <broadcastDeviceId+0x194>)
 8002f04:	22ff      	movs	r2, #255	@ 0xff
 8002f06:	2100      	movs	r1, #0
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f008 fee0 	bl	800bcce <memset>
					memcpy(BufferTx, Ack1, payloadSize);  // Copy the payload to BufferTx
 8002f0e:	4b20      	ldr	r3, [pc, #128]	@ (8002f90 <broadcastDeviceId+0x1e8>)
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	702b      	strb	r3, [r5, #0]
					radio_send_wrapper(payloadSize);
 8002f14:	2001      	movs	r0, #1
 8002f16:	f7ff fefd 	bl	8002d14 <radio_send_wrapper>
					HAL_Delay(100);
 8002f1a:	2064      	movs	r0, #100	@ 0x64
 8002f1c:	f7fe ff0e 	bl	8001d3c <HAL_Delay>
				for(int i = 0; i < 5; i++)
 8002f20:	3401      	adds	r4, #1
 8002f22:	2c04      	cmp	r4, #4
 8002f24:	ddea      	ble.n	8002efc <broadcastDeviceId+0x154>
				currentPairingState = Paired;
 8002f26:	4b1b      	ldr	r3, [pc, #108]	@ (8002f94 <broadcastDeviceId+0x1ec>)
 8002f28:	2206      	movs	r2, #6
 8002f2a:	701a      	strb	r2, [r3, #0]
}
 8002f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	0800e14c 	.word	0x0800e14c
 8002f34:	20000963 	.word	0x20000963
 8002f38:	0800e174 	.word	0x0800e174
 8002f3c:	20000740 	.word	0x20000740
 8002f40:	0800e46c 	.word	0x0800e46c
 8002f44:	0800e1b4 	.word	0x0800e1b4
 8002f48:	20000840 	.word	0x20000840
 8002f4c:	20000738 	.word	0x20000738
 8002f50:	2000073e 	.word	0x2000073e
 8002f54:	20000964 	.word	0x20000964
 8002f58:	0800e1c8 	.word	0x0800e1c8
 8002f5c:	0800e1e8 	.word	0x0800e1e8
 8002f60:	20000328 	.word	0x20000328
 8002f64:	0800e210 	.word	0x0800e210
 8002f68:	2000030c 	.word	0x2000030c
 8002f6c:	20000324 	.word	0x20000324
 8002f70:	0800e230 	.word	0x0800e230
 8002f74:	0800e250 	.word	0x0800e250
 8002f78:	0800e270 	.word	0x0800e270
 8002f7c:	0800e298 	.word	0x0800e298
 8002f80:	2000031a 	.word	0x2000031a
 8002f84:	20000204 	.word	0x20000204
 8002f88:	0800e2c0 	.word	0x0800e2c0
 8002f8c:	0800e2ec 	.word	0x0800e2ec
 8002f90:	20000004 	.word	0x20000004
 8002f94:	2000032e 	.word	0x2000032e

08002f98 <HAL_GPIO_EXTI_Callback>:
{
 8002f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f9a:	b083      	sub	sp, #12
	uint8_t dataToSend = 0x00;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f88d 3007 	strb.w	r3, [sp, #7]
	if (GPIO_Pin == GPIO_PIN_2) // Activate Right Wing
 8002fa2:	2804      	cmp	r0, #4
 8002fa4:	d009      	beq.n	8002fba <HAL_GPIO_EXTI_Callback+0x22>
	else if (GPIO_Pin == GPIO_PIN_12) // Activate Left Wing
 8002fa6:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 8002faa:	f000 8085 	beq.w	80030b8 <HAL_GPIO_EXTI_Callback+0x120>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2001      	movs	r0, #1
 8002fb2:	f007 fc77 	bl	800a8a4 <UTIL_SEQ_SetTask>
}
 8002fb6:	b003      	add	sp, #12
 8002fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_RESET) && (!edgeTrigger12)) // GPIOB2 is pushed down and GPIOB12 is not pushed down
 8002fba:	2104      	movs	r1, #4
 8002fbc:	4881      	ldr	r0, [pc, #516]	@ (80031c4 <HAL_GPIO_EXTI_Callback+0x22c>)
 8002fbe:	f000 fee7 	bl	8003d90 <HAL_GPIO_ReadPin>
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d139      	bne.n	800303a <HAL_GPIO_EXTI_Callback+0xa2>
 8002fc6:	4b80      	ldr	r3, [pc, #512]	@ (80031c8 <HAL_GPIO_EXTI_Callback+0x230>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d135      	bne.n	800303a <HAL_GPIO_EXTI_Callback+0xa2>
			if(CenterCheck == true)
 8002fce:	4b7f      	ldr	r3, [pc, #508]	@ (80031cc <HAL_GPIO_EXTI_Callback+0x234>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0eb      	beq.n	8002fae <HAL_GPIO_EXTI_Callback+0x16>
				dataToSend = 0x0F;
 8002fd6:	230f      	movs	r3, #15
 8002fd8:	f88d 3007 	strb.w	r3, [sp, #7]
				UART_Check = HAL_UART_Transmit(&huart1, &dataToSend, sizeof(dataToSend), HAL_MAX_DELAY);
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f10d 0107 	add.w	r1, sp, #7
 8002fe6:	487a      	ldr	r0, [pc, #488]	@ (80031d0 <HAL_GPIO_EXTI_Callback+0x238>)
 8002fe8:	f004 fe25 	bl	8007c36 <HAL_UART_Transmit>
				if(UART_Check == HAL_OK)
 8002fec:	4601      	mov	r1, r0
 8002fee:	bb00      	cbnz	r0, 8003032 <HAL_GPIO_EXTI_Callback+0x9a>
					printf("UART message sent successfully\n\r");
 8002ff0:	4878      	ldr	r0, [pc, #480]	@ (80031d4 <HAL_GPIO_EXTI_Callback+0x23c>)
 8002ff2:	f008 fe17 	bl	800bc24 <iprintf>
				edgeTrigger2 = true;
 8002ff6:	4b78      	ldr	r3, [pc, #480]	@ (80031d8 <HAL_GPIO_EXTI_Callback+0x240>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
				memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8002ffc:	4c77      	ldr	r4, [pc, #476]	@ (80031dc <HAL_GPIO_EXTI_Callback+0x244>)
 8002ffe:	22ff      	movs	r2, #255	@ 0xff
 8003000:	2100      	movs	r1, #0
 8003002:	4620      	mov	r0, r4
 8003004:	f008 fe63 	bl	800bcce <memset>
				memcpy(combinedBuffer, swappedCombinedDeviceID, strlen((char*)(swappedCombinedDeviceID)));
 8003008:	4e75      	ldr	r6, [pc, #468]	@ (80031e0 <HAL_GPIO_EXTI_Callback+0x248>)
 800300a:	4630      	mov	r0, r6
 800300c:	f7fd f908 	bl	8000220 <strlen>
 8003010:	4602      	mov	r2, r0
 8003012:	466d      	mov	r5, sp
 8003014:	4631      	mov	r1, r6
 8003016:	4628      	mov	r0, r5
 8003018:	f008 fee9 	bl	800bdee <memcpy>
				memcpy(combinedBuffer + sizeof(swappedCombinedDeviceID), &data, sizeof(data));
 800301c:	230f      	movs	r3, #15
 800301e:	f88d 3004 	strb.w	r3, [sp, #4]
				memcpy(BufferTx, combinedBuffer, payloadSize);
 8003022:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003026:	6020      	str	r0, [r4, #0]
 8003028:	7121      	strb	r1, [r4, #4]
				radio_send_wrapper(payloadSize);
 800302a:	2005      	movs	r0, #5
 800302c:	f7ff fe72 	bl	8002d14 <radio_send_wrapper>
 8003030:	e7bd      	b.n	8002fae <HAL_GPIO_EXTI_Callback+0x16>
					printf("UART message failed, error %d\n\r", UART_Check);
 8003032:	486c      	ldr	r0, [pc, #432]	@ (80031e4 <HAL_GPIO_EXTI_Callback+0x24c>)
 8003034:	f008 fdf6 	bl	800bc24 <iprintf>
 8003038:	e7dd      	b.n	8002ff6 <HAL_GPIO_EXTI_Callback+0x5e>
		else if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET) && (!edgeTrigger12))// GPIOB2 is released
 800303a:	2104      	movs	r1, #4
 800303c:	4861      	ldr	r0, [pc, #388]	@ (80031c4 <HAL_GPIO_EXTI_Callback+0x22c>)
 800303e:	f000 fea7 	bl	8003d90 <HAL_GPIO_ReadPin>
 8003042:	2801      	cmp	r0, #1
 8003044:	d1b3      	bne.n	8002fae <HAL_GPIO_EXTI_Callback+0x16>
 8003046:	4b60      	ldr	r3, [pc, #384]	@ (80031c8 <HAL_GPIO_EXTI_Callback+0x230>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1af      	bne.n	8002fae <HAL_GPIO_EXTI_Callback+0x16>
			if(CenterCheck == true)
 800304e:	4b5f      	ldr	r3, [pc, #380]	@ (80031cc <HAL_GPIO_EXTI_Callback+0x234>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0ab      	beq.n	8002fae <HAL_GPIO_EXTI_Callback+0x16>
				dataToSend = 0xFF;
 8003056:	23ff      	movs	r3, #255	@ 0xff
 8003058:	f88d 3007 	strb.w	r3, [sp, #7]
				UART_Check = HAL_UART_Transmit(&huart1, &dataToSend, sizeof(dataToSend), HAL_MAX_DELAY);
 800305c:	f04f 33ff 	mov.w	r3, #4294967295
 8003060:	2201      	movs	r2, #1
 8003062:	f10d 0107 	add.w	r1, sp, #7
 8003066:	485a      	ldr	r0, [pc, #360]	@ (80031d0 <HAL_GPIO_EXTI_Callback+0x238>)
 8003068:	f004 fde5 	bl	8007c36 <HAL_UART_Transmit>
				if(UART_Check == HAL_OK)
 800306c:	4601      	mov	r1, r0
 800306e:	b9f8      	cbnz	r0, 80030b0 <HAL_GPIO_EXTI_Callback+0x118>
					printf("UART message sent successfully\n\r");
 8003070:	4858      	ldr	r0, [pc, #352]	@ (80031d4 <HAL_GPIO_EXTI_Callback+0x23c>)
 8003072:	f008 fdd7 	bl	800bc24 <iprintf>
				edgeTrigger2 = false;
 8003076:	2100      	movs	r1, #0
 8003078:	4b57      	ldr	r3, [pc, #348]	@ (80031d8 <HAL_GPIO_EXTI_Callback+0x240>)
 800307a:	7019      	strb	r1, [r3, #0]
				memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800307c:	4c57      	ldr	r4, [pc, #348]	@ (80031dc <HAL_GPIO_EXTI_Callback+0x244>)
 800307e:	26ff      	movs	r6, #255	@ 0xff
 8003080:	4632      	mov	r2, r6
 8003082:	4620      	mov	r0, r4
 8003084:	f008 fe23 	bl	800bcce <memset>
				memcpy(combinedBuffer, swappedCombinedDeviceID, strlen((char*)(swappedCombinedDeviceID)));
 8003088:	4f55      	ldr	r7, [pc, #340]	@ (80031e0 <HAL_GPIO_EXTI_Callback+0x248>)
 800308a:	4638      	mov	r0, r7
 800308c:	f7fd f8c8 	bl	8000220 <strlen>
 8003090:	4602      	mov	r2, r0
 8003092:	466d      	mov	r5, sp
 8003094:	4639      	mov	r1, r7
 8003096:	4628      	mov	r0, r5
 8003098:	f008 fea9 	bl	800bdee <memcpy>
				memcpy(combinedBuffer + sizeof(swappedCombinedDeviceID), &data, sizeof(data));
 800309c:	f88d 6004 	strb.w	r6, [sp, #4]
				memcpy(BufferTx, combinedBuffer, payloadSize);
 80030a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80030a4:	6020      	str	r0, [r4, #0]
 80030a6:	7121      	strb	r1, [r4, #4]
				radio_send_wrapper(payloadSize);
 80030a8:	2005      	movs	r0, #5
 80030aa:	f7ff fe33 	bl	8002d14 <radio_send_wrapper>
 80030ae:	e77e      	b.n	8002fae <HAL_GPIO_EXTI_Callback+0x16>
					printf("UART message failed, error %d\n\r", UART_Check);
 80030b0:	484c      	ldr	r0, [pc, #304]	@ (80031e4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80030b2:	f008 fdb7 	bl	800bc24 <iprintf>
 80030b6:	e7de      	b.n	8003076 <HAL_GPIO_EXTI_Callback+0xde>
		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) && !edgeTrigger2) // GPIOB12 is pushed down and GPIOB2 is not pushed down
 80030b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030bc:	4841      	ldr	r0, [pc, #260]	@ (80031c4 <HAL_GPIO_EXTI_Callback+0x22c>)
 80030be:	f000 fe67 	bl	8003d90 <HAL_GPIO_ReadPin>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	d13a      	bne.n	800313c <HAL_GPIO_EXTI_Callback+0x1a4>
 80030c6:	4b44      	ldr	r3, [pc, #272]	@ (80031d8 <HAL_GPIO_EXTI_Callback+0x240>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d136      	bne.n	800313c <HAL_GPIO_EXTI_Callback+0x1a4>
			if(CenterCheck == true)
 80030ce:	4b3f      	ldr	r3, [pc, #252]	@ (80031cc <HAL_GPIO_EXTI_Callback+0x234>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	f43f af6b 	beq.w	8002fae <HAL_GPIO_EXTI_Callback+0x16>
				dataToSend = 0xF0;
 80030d8:	23f0      	movs	r3, #240	@ 0xf0
 80030da:	f88d 3007 	strb.w	r3, [sp, #7]
				UART_Check = HAL_UART_Transmit(&huart1, &dataToSend, sizeof(dataToSend), HAL_MAX_DELAY);
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	2201      	movs	r2, #1
 80030e4:	f10d 0107 	add.w	r1, sp, #7
 80030e8:	4839      	ldr	r0, [pc, #228]	@ (80031d0 <HAL_GPIO_EXTI_Callback+0x238>)
 80030ea:	f004 fda4 	bl	8007c36 <HAL_UART_Transmit>
				if(UART_Check == HAL_OK)
 80030ee:	4601      	mov	r1, r0
 80030f0:	bb00      	cbnz	r0, 8003134 <HAL_GPIO_EXTI_Callback+0x19c>
					printf("UART message sent successfully\n\r");
 80030f2:	4838      	ldr	r0, [pc, #224]	@ (80031d4 <HAL_GPIO_EXTI_Callback+0x23c>)
 80030f4:	f008 fd96 	bl	800bc24 <iprintf>
				edgeTrigger12 = true;
 80030f8:	4b33      	ldr	r3, [pc, #204]	@ (80031c8 <HAL_GPIO_EXTI_Callback+0x230>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
				memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 80030fe:	4c37      	ldr	r4, [pc, #220]	@ (80031dc <HAL_GPIO_EXTI_Callback+0x244>)
 8003100:	22ff      	movs	r2, #255	@ 0xff
 8003102:	2100      	movs	r1, #0
 8003104:	4620      	mov	r0, r4
 8003106:	f008 fde2 	bl	800bcce <memset>
				memcpy(combinedBuffer, swappedCombinedDeviceID, strlen((char*)(swappedCombinedDeviceID)));
 800310a:	4e35      	ldr	r6, [pc, #212]	@ (80031e0 <HAL_GPIO_EXTI_Callback+0x248>)
 800310c:	4630      	mov	r0, r6
 800310e:	f7fd f887 	bl	8000220 <strlen>
 8003112:	4602      	mov	r2, r0
 8003114:	466d      	mov	r5, sp
 8003116:	4631      	mov	r1, r6
 8003118:	4628      	mov	r0, r5
 800311a:	f008 fe68 	bl	800bdee <memcpy>
				memcpy(combinedBuffer + sizeof(swappedCombinedDeviceID), &data, sizeof(data));
 800311e:	23f0      	movs	r3, #240	@ 0xf0
 8003120:	f88d 3004 	strb.w	r3, [sp, #4]
				memcpy(BufferTx, combinedBuffer, payloadSize);
 8003124:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003128:	6020      	str	r0, [r4, #0]
 800312a:	7121      	strb	r1, [r4, #4]
				radio_send_wrapper(payloadSize);
 800312c:	2005      	movs	r0, #5
 800312e:	f7ff fdf1 	bl	8002d14 <radio_send_wrapper>
 8003132:	e73c      	b.n	8002fae <HAL_GPIO_EXTI_Callback+0x16>
					printf("UART message failed, error %d\n\r", UART_Check);
 8003134:	482b      	ldr	r0, [pc, #172]	@ (80031e4 <HAL_GPIO_EXTI_Callback+0x24c>)
 8003136:	f008 fd75 	bl	800bc24 <iprintf>
 800313a:	e7dd      	b.n	80030f8 <HAL_GPIO_EXTI_Callback+0x160>
		else if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_SET) && !edgeTrigger2)
 800313c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003140:	4820      	ldr	r0, [pc, #128]	@ (80031c4 <HAL_GPIO_EXTI_Callback+0x22c>)
 8003142:	f000 fe25 	bl	8003d90 <HAL_GPIO_ReadPin>
 8003146:	2801      	cmp	r0, #1
 8003148:	f47f af31 	bne.w	8002fae <HAL_GPIO_EXTI_Callback+0x16>
 800314c:	4b22      	ldr	r3, [pc, #136]	@ (80031d8 <HAL_GPIO_EXTI_Callback+0x240>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f47f af2c 	bne.w	8002fae <HAL_GPIO_EXTI_Callback+0x16>
			if(CenterCheck == true)
 8003156:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <HAL_GPIO_EXTI_Callback+0x234>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f43f af27 	beq.w	8002fae <HAL_GPIO_EXTI_Callback+0x16>
				dataToSend = 0xFF;
 8003160:	23ff      	movs	r3, #255	@ 0xff
 8003162:	f88d 3007 	strb.w	r3, [sp, #7]
				UART_Check = HAL_UART_Transmit(&huart1, &dataToSend, sizeof(dataToSend), HAL_MAX_DELAY);
 8003166:	f04f 33ff 	mov.w	r3, #4294967295
 800316a:	2201      	movs	r2, #1
 800316c:	f10d 0107 	add.w	r1, sp, #7
 8003170:	4817      	ldr	r0, [pc, #92]	@ (80031d0 <HAL_GPIO_EXTI_Callback+0x238>)
 8003172:	f004 fd60 	bl	8007c36 <HAL_UART_Transmit>
				if(UART_Check == HAL_OK)
 8003176:	4601      	mov	r1, r0
 8003178:	b9f8      	cbnz	r0, 80031ba <HAL_GPIO_EXTI_Callback+0x222>
					printf("UART message sent successfully\n\r");
 800317a:	4816      	ldr	r0, [pc, #88]	@ (80031d4 <HAL_GPIO_EXTI_Callback+0x23c>)
 800317c:	f008 fd52 	bl	800bc24 <iprintf>
				edgeTrigger12 = false;
 8003180:	2100      	movs	r1, #0
 8003182:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <HAL_GPIO_EXTI_Callback+0x230>)
 8003184:	7019      	strb	r1, [r3, #0]
				memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8003186:	4c15      	ldr	r4, [pc, #84]	@ (80031dc <HAL_GPIO_EXTI_Callback+0x244>)
 8003188:	26ff      	movs	r6, #255	@ 0xff
 800318a:	4632      	mov	r2, r6
 800318c:	4620      	mov	r0, r4
 800318e:	f008 fd9e 	bl	800bcce <memset>
				memcpy(combinedBuffer, swappedCombinedDeviceID, strlen((char*)(swappedCombinedDeviceID)));
 8003192:	4f13      	ldr	r7, [pc, #76]	@ (80031e0 <HAL_GPIO_EXTI_Callback+0x248>)
 8003194:	4638      	mov	r0, r7
 8003196:	f7fd f843 	bl	8000220 <strlen>
 800319a:	4602      	mov	r2, r0
 800319c:	466d      	mov	r5, sp
 800319e:	4639      	mov	r1, r7
 80031a0:	4628      	mov	r0, r5
 80031a2:	f008 fe24 	bl	800bdee <memcpy>
				memcpy(combinedBuffer + sizeof(swappedCombinedDeviceID), &data, sizeof(data));
 80031a6:	f88d 6004 	strb.w	r6, [sp, #4]
				memcpy(BufferTx, combinedBuffer, payloadSize);
 80031aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031ae:	6020      	str	r0, [r4, #0]
 80031b0:	7121      	strb	r1, [r4, #4]
				radio_send_wrapper(payloadSize);
 80031b2:	2005      	movs	r0, #5
 80031b4:	f7ff fdae 	bl	8002d14 <radio_send_wrapper>
 80031b8:	e6f9      	b.n	8002fae <HAL_GPIO_EXTI_Callback+0x16>
					printf("UART message failed, error %d\n\r", UART_Check);
 80031ba:	480a      	ldr	r0, [pc, #40]	@ (80031e4 <HAL_GPIO_EXTI_Callback+0x24c>)
 80031bc:	f008 fd32 	bl	800bc24 <iprintf>
 80031c0:	e7de      	b.n	8003180 <HAL_GPIO_EXTI_Callback+0x1e8>
 80031c2:	bf00      	nop
 80031c4:	48000400 	.word	0x48000400
 80031c8:	20000961 	.word	0x20000961
 80031cc:	20000000 	.word	0x20000000
 80031d0:	20000660 	.word	0x20000660
 80031d4:	0800dfe8 	.word	0x0800dfe8
 80031d8:	20000962 	.word	0x20000962
 80031dc:	20000740 	.word	0x20000740
 80031e0:	20000324 	.word	0x20000324
 80031e4:	0800e00c 	.word	0x0800e00c

080031e8 <heartBeat>:
	if(currentPairingState == Paired)
 80031e8:	4b1d      	ldr	r3, [pc, #116]	@ (8003260 <heartBeat+0x78>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b06      	cmp	r3, #6
 80031ee:	d000      	beq.n	80031f2 <heartBeat+0xa>
 80031f0:	4770      	bx	lr
{
 80031f2:	b570      	push	{r4, r5, r6, lr}
 80031f4:	b082      	sub	sp, #8
		memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 80031f6:	4c1b      	ldr	r4, [pc, #108]	@ (8003264 <heartBeat+0x7c>)
 80031f8:	22ff      	movs	r2, #255	@ 0xff
 80031fa:	2100      	movs	r1, #0
 80031fc:	4620      	mov	r0, r4
 80031fe:	f008 fd66 	bl	800bcce <memset>
		memcpy(combinedBuffer, swappedCombinedDeviceID, strlen((char*)(swappedCombinedDeviceID)));
 8003202:	4e19      	ldr	r6, [pc, #100]	@ (8003268 <heartBeat+0x80>)
 8003204:	4630      	mov	r0, r6
 8003206:	f7fd f80b 	bl	8000220 <strlen>
 800320a:	4602      	mov	r2, r0
 800320c:	466d      	mov	r5, sp
 800320e:	4631      	mov	r1, r6
 8003210:	4628      	mov	r0, r5
 8003212:	f008 fdec 	bl	800bdee <memcpy>
		memcpy(combinedBuffer + sizeof(swappedCombinedDeviceID), &data, sizeof(data));
 8003216:	2311      	movs	r3, #17
 8003218:	f88d 3004 	strb.w	r3, [sp, #4]
		memcpy(BufferTx, combinedBuffer, payloadSize);
 800321c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003220:	6020      	str	r0, [r4, #0]
 8003222:	7121      	strb	r1, [r4, #4]
		printf("\n\r");
 8003224:	4811      	ldr	r0, [pc, #68]	@ (800326c <heartBeat+0x84>)
 8003226:	f008 fcfd 	bl	800bc24 <iprintf>
		printf("HEARTBEAT: \n\r");
 800322a:	4811      	ldr	r0, [pc, #68]	@ (8003270 <heartBeat+0x88>)
 800322c:	f008 fcfa 	bl	800bc24 <iprintf>
		for (size_t i = 0; i < 5; ++i)
 8003230:	2400      	movs	r4, #0
 8003232:	e006      	b.n	8003242 <heartBeat+0x5a>
			printf("In HeartBeat: BufferTx[%d] = %02x\n\r", i, BufferTx[i]);
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <heartBeat+0x7c>)
 8003236:	5d1a      	ldrb	r2, [r3, r4]
 8003238:	4621      	mov	r1, r4
 800323a:	480e      	ldr	r0, [pc, #56]	@ (8003274 <heartBeat+0x8c>)
 800323c:	f008 fcf2 	bl	800bc24 <iprintf>
		for (size_t i = 0; i < 5; ++i)
 8003240:	3401      	adds	r4, #1
 8003242:	2c04      	cmp	r4, #4
 8003244:	d9f6      	bls.n	8003234 <heartBeat+0x4c>
		printf("\n\r");
 8003246:	4809      	ldr	r0, [pc, #36]	@ (800326c <heartBeat+0x84>)
 8003248:	f008 fcec 	bl	800bc24 <iprintf>
		radio_send_wrapper(payloadSize);
 800324c:	2005      	movs	r0, #5
 800324e:	f7ff fd61 	bl	8002d14 <radio_send_wrapper>
		 UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8003252:	2100      	movs	r1, #0
 8003254:	2001      	movs	r0, #1
 8003256:	f007 fb25 	bl	800a8a4 <UTIL_SEQ_SetTask>
}
 800325a:	b002      	add	sp, #8
 800325c:	bd70      	pop	{r4, r5, r6, pc}
 800325e:	bf00      	nop
 8003260:	2000032e 	.word	0x2000032e
 8003264:	20000740 	.word	0x20000740
 8003268:	20000324 	.word	0x20000324
 800326c:	0800ddf8 	.word	0x0800ddf8
 8003270:	0800e300 	.word	0x0800e300
 8003274:	0800e310 	.word	0x0800e310

08003278 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8003278:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800327a:	f000 f815 	bl	80032a8 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800327e:	bd08      	pop	{r3, pc}

08003280 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8003280:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8003282:	f000 f853 	bl	800332c <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8003286:	bd08      	pop	{r3, pc}

08003288 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8003288:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800328a:	f000 f89d 	bl	80033c8 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800328e:	bd08      	pop	{r3, pc}

08003290 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8003290:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8003292:	f000 f89b 	bl	80033cc <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8003296:	bd08      	pop	{r3, pc}

08003298 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8003298:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800329a:	f000 f899 	bl	80033d0 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800329e:	bd08      	pop	{r3, pc}

080032a0 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80032a0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80032a2:	f000 f897 	bl	80033d4 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80032a6:	bd08      	pop	{r3, pc}

080032a8 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80032a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ac:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80032ae:	2400      	movs	r4, #0
 80032b0:	9401      	str	r4, [sp, #4]
 80032b2:	9402      	str	r4, [sp, #8]
 80032b4:	9403      	str	r4, [sp, #12]
 80032b6:	9404      	str	r4, [sp, #16]
 80032b8:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80032ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032c0:	f042 0204 	orr.w	r2, r2, #4
 80032c4:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80032c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80032ce:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80032d0:	2710      	movs	r7, #16
 80032d2:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80032d4:	2301      	movs	r3, #1
 80032d6:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d8:	2303      	movs	r3, #3
 80032da:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80032dc:	4d12      	ldr	r5, [pc, #72]	@ (8003328 <BSP_RADIO_Init+0x80>)
 80032de:	a901      	add	r1, sp, #4
 80032e0:	4628      	mov	r0, r5
 80032e2:	f000 fc05 	bl	8003af0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80032e6:	f04f 0820 	mov.w	r8, #32
 80032ea:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80032ee:	a901      	add	r1, sp, #4
 80032f0:	4628      	mov	r0, r5
 80032f2:	f000 fbfd 	bl	8003af0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80032f6:	2608      	movs	r6, #8
 80032f8:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80032fa:	a901      	add	r1, sp, #4
 80032fc:	4628      	mov	r0, r5
 80032fe:	f000 fbf7 	bl	8003af0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003302:	4622      	mov	r2, r4
 8003304:	4641      	mov	r1, r8
 8003306:	4628      	mov	r0, r5
 8003308:	f000 fd49 	bl	8003d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800330c:	4622      	mov	r2, r4
 800330e:	4639      	mov	r1, r7
 8003310:	4628      	mov	r0, r5
 8003312:	f000 fd44 	bl	8003d9e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8003316:	4622      	mov	r2, r4
 8003318:	4631      	mov	r1, r6
 800331a:	4628      	mov	r0, r5
 800331c:	f000 fd3f 	bl	8003d9e <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8003320:	4620      	mov	r0, r4
 8003322:	b006      	add	sp, #24
 8003324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003328:	48000800 	.word	0x48000800

0800332c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800332c:	b510      	push	{r4, lr}
  switch (Config)
 800332e:	2803      	cmp	r0, #3
 8003330:	d813      	bhi.n	800335a <BSP_RADIO_ConfigRFSwitch+0x2e>
 8003332:	e8df f000 	tbb	[pc, r0]
 8003336:	1402      	.short	0x1402
 8003338:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 800333a:	4c22      	ldr	r4, [pc, #136]	@ (80033c4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 800333c:	2200      	movs	r2, #0
 800333e:	2108      	movs	r1, #8
 8003340:	4620      	mov	r0, r4
 8003342:	f000 fd2c 	bl	8003d9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	2110      	movs	r1, #16
 800334a:	4620      	mov	r0, r4
 800334c:	f000 fd27 	bl	8003d9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8003350:	2200      	movs	r2, #0
 8003352:	2120      	movs	r1, #32
 8003354:	4620      	mov	r0, r4
 8003356:	f000 fd22 	bl	8003d9e <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 800335a:	2000      	movs	r0, #0
 800335c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800335e:	4c19      	ldr	r4, [pc, #100]	@ (80033c4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003360:	2201      	movs	r2, #1
 8003362:	2108      	movs	r1, #8
 8003364:	4620      	mov	r0, r4
 8003366:	f000 fd1a 	bl	8003d9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800336a:	2201      	movs	r2, #1
 800336c:	2110      	movs	r1, #16
 800336e:	4620      	mov	r0, r4
 8003370:	f000 fd15 	bl	8003d9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003374:	2200      	movs	r2, #0
 8003376:	2120      	movs	r1, #32
 8003378:	4620      	mov	r0, r4
 800337a:	f000 fd10 	bl	8003d9e <HAL_GPIO_WritePin>
      break;
 800337e:	e7ec      	b.n	800335a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8003380:	4c10      	ldr	r4, [pc, #64]	@ (80033c4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8003382:	2201      	movs	r2, #1
 8003384:	2108      	movs	r1, #8
 8003386:	4620      	mov	r0, r4
 8003388:	f000 fd09 	bl	8003d9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800338c:	2201      	movs	r2, #1
 800338e:	2110      	movs	r1, #16
 8003390:	4620      	mov	r0, r4
 8003392:	f000 fd04 	bl	8003d9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003396:	2201      	movs	r2, #1
 8003398:	2120      	movs	r1, #32
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fcff 	bl	8003d9e <HAL_GPIO_WritePin>
      break;
 80033a0:	e7db      	b.n	800335a <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80033a2:	4c08      	ldr	r4, [pc, #32]	@ (80033c4 <BSP_RADIO_ConfigRFSwitch+0x98>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	2108      	movs	r1, #8
 80033a8:	4620      	mov	r0, r4
 80033aa:	f000 fcf8 	bl	8003d9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80033ae:	2200      	movs	r2, #0
 80033b0:	2110      	movs	r1, #16
 80033b2:	4620      	mov	r0, r4
 80033b4:	f000 fcf3 	bl	8003d9e <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80033b8:	2201      	movs	r2, #1
 80033ba:	2120      	movs	r1, #32
 80033bc:	4620      	mov	r0, r4
 80033be:	f000 fcee 	bl	8003d9e <HAL_GPIO_WritePin>
      break;
 80033c2:	e7ca      	b.n	800335a <BSP_RADIO_ConfigRFSwitch+0x2e>
 80033c4:	48000800 	.word	0x48000800

080033c8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 80033c8:	2000      	movs	r0, #0
 80033ca:	4770      	bx	lr

080033cc <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 80033cc:	2001      	movs	r0, #1
 80033ce:	4770      	bx	lr

080033d0 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 80033d0:	2001      	movs	r0, #1
 80033d2:	4770      	bx	lr

080033d4 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80033d4:	b908      	cbnz	r0, 80033da <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80033d6:	200f      	movs	r0, #15
 80033d8:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80033da:	2016      	movs	r0, #22
  }

  return ret;
}
 80033dc:	4770      	bx	lr

080033de <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80033de:	4770      	bx	lr

080033e0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033e0:	4b11      	ldr	r3, [pc, #68]	@ (8003428 <HAL_InitTick+0x48>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b90b      	cbnz	r3, 80033ea <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80033e6:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80033e8:	4770      	bx	lr
{
 80033ea:	b510      	push	{r4, lr}
 80033ec:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033ee:	f001 fb7f 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_InitTick+0x48>)
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80033fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003402:	f000 f8db 	bl	80035bc <HAL_SYSTICK_Config>
 8003406:	b968      	cbnz	r0, 8003424 <HAL_InitTick+0x44>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003408:	2c0f      	cmp	r4, #15
 800340a:	d901      	bls.n	8003410 <HAL_InitTick+0x30>
        status = HAL_ERROR;
 800340c:	2001      	movs	r0, #1
 800340e:	e00a      	b.n	8003426 <HAL_InitTick+0x46>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003410:	2200      	movs	r2, #0
 8003412:	4621      	mov	r1, r4
 8003414:	f04f 30ff 	mov.w	r0, #4294967295
 8003418:	f000 f8b8 	bl	800358c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800341c:	4b03      	ldr	r3, [pc, #12]	@ (800342c <HAL_InitTick+0x4c>)
 800341e:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8003420:	2000      	movs	r0, #0
 8003422:	e000      	b.n	8003426 <HAL_InitTick+0x46>
      status = HAL_ERROR;
 8003424:	2001      	movs	r0, #1
}
 8003426:	bd10      	pop	{r4, pc}
 8003428:	2000000c 	.word	0x2000000c
 800342c:	20000010 	.word	0x20000010

08003430 <HAL_Init>:
{
 8003430:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003432:	2003      	movs	r0, #3
 8003434:	f000 f898 	bl	8003568 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003438:	f001 fb5a 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 800343c:	4b06      	ldr	r3, [pc, #24]	@ (8003458 <HAL_Init+0x28>)
 800343e:	6018      	str	r0, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003440:	200f      	movs	r0, #15
 8003442:	f7ff ffcd 	bl	80033e0 <HAL_InitTick>
 8003446:	b110      	cbz	r0, 800344e <HAL_Init+0x1e>
    status = HAL_ERROR;
 8003448:	2401      	movs	r4, #1
}
 800344a:	4620      	mov	r0, r4
 800344c:	bd10      	pop	{r4, pc}
 800344e:	4604      	mov	r4, r0
    HAL_MspInit();
 8003450:	f7fe fb76 	bl	8001b40 <HAL_MspInit>
 8003454:	e7f9      	b.n	800344a <HAL_Init+0x1a>
 8003456:	bf00      	nop
 8003458:	20000008 	.word	0x20000008

0800345c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800345c:	4b03      	ldr	r3, [pc, #12]	@ (800346c <HAL_IncTick+0x10>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	4a03      	ldr	r2, [pc, #12]	@ (8003470 <HAL_IncTick+0x14>)
 8003462:	6811      	ldr	r1, [r2, #0]
 8003464:	440b      	add	r3, r1
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	2000000c 	.word	0x2000000c
 8003470:	20000968 	.word	0x20000968

08003474 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003474:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003478:	6913      	ldr	r3, [r2, #16]
 800347a:	f023 0302 	bic.w	r3, r3, #2
 800347e:	6113      	str	r3, [r2, #16]
}
 8003480:	4770      	bx	lr

08003482 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003482:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003486:	6913      	ldr	r3, [r2, #16]
 8003488:	f043 0302 	orr.w	r3, r3, #2
 800348c:	6113      	str	r3, [r2, #16]
}
 800348e:	4770      	bx	lr

08003490 <HAL_DBGMCU_EnableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003490:	4a02      	ldr	r2, [pc, #8]	@ (800349c <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8003492:	6853      	ldr	r3, [r2, #4]
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 800349a:	4770      	bx	lr
 800349c:	e0042000 	.word	0xe0042000

080034a0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80034a0:	4a02      	ldr	r2, [pc, #8]	@ (80034ac <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80034a2:	6853      	ldr	r3, [r2, #4]
 80034a4:	f043 0302 	orr.w	r3, r3, #2
 80034a8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 80034aa:	4770      	bx	lr
 80034ac:	e0042000 	.word	0xe0042000

080034b0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80034b0:	4a02      	ldr	r2, [pc, #8]	@ (80034bc <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80034b2:	6853      	ldr	r3, [r2, #4]
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 80034ba:	4770      	bx	lr
 80034bc:	e0042000 	.word	0xe0042000

080034c0 <__NVIC_EnableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80034c0:	2800      	cmp	r0, #0
 80034c2:	db07      	blt.n	80034d4 <__NVIC_EnableIRQ+0x14>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c4:	f000 021f 	and.w	r2, r0, #31
 80034c8:	0940      	lsrs	r0, r0, #5
 80034ca:	2301      	movs	r3, #1
 80034cc:	4093      	lsls	r3, r2
 80034ce:	4a02      	ldr	r2, [pc, #8]	@ (80034d8 <__NVIC_EnableIRQ+0x18>)
 80034d0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	e000e100 	.word	0xe000e100

080034dc <__NVIC_DisableIRQ>:
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80034dc:	2800      	cmp	r0, #0
 80034de:	db0c      	blt.n	80034fa <__NVIC_DisableIRQ+0x1e>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034e0:	f000 021f 	and.w	r2, r0, #31
 80034e4:	0940      	lsrs	r0, r0, #5
 80034e6:	2301      	movs	r3, #1
 80034e8:	4093      	lsls	r3, r2
 80034ea:	3020      	adds	r0, #32
 80034ec:	4a03      	ldr	r2, [pc, #12]	@ (80034fc <__NVIC_DisableIRQ+0x20>)
 80034ee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034f2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80034f6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80034fa:	4770      	bx	lr
 80034fc:	e000e100 	.word	0xe000e100

08003500 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8003500:	2800      	cmp	r0, #0
 8003502:	db08      	blt.n	8003516 <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	0109      	lsls	r1, r1, #4
 8003506:	b2c9      	uxtb	r1, r1
 8003508:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800350c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003510:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003514:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003516:	f000 000f 	and.w	r0, r0, #15
 800351a:	0109      	lsls	r1, r1, #4
 800351c:	b2c9      	uxtb	r1, r1
 800351e:	4b01      	ldr	r3, [pc, #4]	@ (8003524 <__NVIC_SetPriority+0x24>)
 8003520:	5419      	strb	r1, [r3, r0]
  }
}
 8003522:	4770      	bx	lr
 8003524:	e000ed14 	.word	0xe000ed14

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800352a:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800352e:	f1c0 0c07 	rsb	ip, r0, #7
 8003532:	f1bc 0f04 	cmp.w	ip, #4
 8003536:	bf28      	it	cs
 8003538:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353c:	1d03      	adds	r3, r0, #4
 800353e:	2b06      	cmp	r3, #6
 8003540:	d90f      	bls.n	8003562 <NVIC_EncodePriority+0x3a>
 8003542:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	f04f 3eff 	mov.w	lr, #4294967295
 8003548:	fa0e f00c 	lsl.w	r0, lr, ip
 800354c:	ea21 0100 	bic.w	r1, r1, r0
 8003550:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003552:	fa0e fe03 	lsl.w	lr, lr, r3
 8003556:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 800355a:	ea41 0002 	orr.w	r0, r1, r2
 800355e:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003562:	2300      	movs	r3, #0
 8003564:	e7ee      	b.n	8003544 <NVIC_EncodePriority+0x1c>
	...

08003568 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003568:	4a07      	ldr	r2, [pc, #28]	@ (8003588 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800356a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800356c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003570:	041b      	lsls	r3, r3, #16
 8003572:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003574:	0200      	lsls	r0, r0, #8
 8003576:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800357a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800357c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003580:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003584:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800358c:	b510      	push	{r4, lr}
 800358e:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003590:	4b05      	ldr	r3, [pc, #20]	@ (80035a8 <HAL_NVIC_SetPriority+0x1c>)
 8003592:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003594:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8003598:	f7ff ffc6 	bl	8003528 <NVIC_EncodePriority>
 800359c:	4601      	mov	r1, r0
 800359e:	4620      	mov	r0, r4
 80035a0:	f7ff ffae 	bl	8003500 <__NVIC_SetPriority>
}
 80035a4:	bd10      	pop	{r4, pc}
 80035a6:	bf00      	nop
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ac:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ae:	f7ff ff87 	bl	80034c0 <__NVIC_EnableIRQ>
}
 80035b2:	bd08      	pop	{r3, pc}

080035b4 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035b4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80035b6:	f7ff ff91 	bl	80034dc <__NVIC_DisableIRQ>
}
 80035ba:	bd08      	pop	{r3, pc}

080035bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035bc:	3801      	subs	r0, #1
 80035be:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80035c2:	d20b      	bcs.n	80035dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80035c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ca:	4a05      	ldr	r2, [pc, #20]	@ (80035e0 <HAL_SYSTICK_Config+0x24>)
 80035cc:	21f0      	movs	r1, #240	@ 0xf0
 80035ce:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d2:	2000      	movs	r0, #0
 80035d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035d6:	2207      	movs	r2, #7
 80035d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80035dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e4:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035e6:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 80035e8:	f8d0 c050 	ldr.w	ip, [r0, #80]	@ 0x50
 80035ec:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80035f0:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80035f2:	b124      	cbz	r4, 80035fe <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035f4:	6d84      	ldr	r4, [r0, #88]	@ 0x58
 80035f6:	f8d0 c05c 	ldr.w	ip, [r0, #92]	@ 0x5c
 80035fa:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035fe:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003600:	f004 0c1c 	and.w	ip, r4, #28
 8003604:	2401      	movs	r4, #1
 8003606:	fa04 f40c 	lsl.w	r4, r4, ip
 800360a:	f8d0 c040 	ldr.w	ip, [r0, #64]	@ 0x40
 800360e:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003612:	6804      	ldr	r4, [r0, #0]
 8003614:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003616:	6883      	ldr	r3, [r0, #8]
 8003618:	2b10      	cmp	r3, #16
 800361a:	d005      	beq.n	8003628 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800361c:	6803      	ldr	r3, [r0, #0]
 800361e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003620:	6803      	ldr	r3, [r0, #0]
 8003622:	60da      	str	r2, [r3, #12]
  }
}
 8003624:	bc10      	pop	{r4}
 8003626:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8003628:	6803      	ldr	r3, [r0, #0]
 800362a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800362c:	6803      	ldr	r3, [r0, #0]
 800362e:	60d9      	str	r1, [r3, #12]
 8003630:	e7f8      	b.n	8003624 <DMA_SetConfig+0x40>
	...

08003634 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003634:	6803      	ldr	r3, [r0, #0]
 8003636:	4a14      	ldr	r2, [pc, #80]	@ (8003688 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d816      	bhi.n	800366a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800363c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800363e:	f022 0203 	bic.w	r2, r2, #3
 8003642:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003646:	f502 3202 	add.w	r2, r2, #133120	@ 0x20800
 800364a:	6482      	str	r2, [r0, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800364c:	b2db      	uxtb	r3, r3
 800364e:	3b08      	subs	r3, #8
 8003650:	4a0e      	ldr	r2, [pc, #56]	@ (800368c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003658:	4a0d      	ldr	r2, [pc, #52]	@ (8003690 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800365a:	64c2      	str	r2, [r0, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800365c:	f003 031f 	and.w	r3, r3, #31
 8003660:	2201      	movs	r2, #1
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	6503      	str	r3, [r0, #80]	@ 0x50
}
 8003668:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800366a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800366c:	f022 0103 	bic.w	r1, r2, #3
 8003670:	4a08      	ldr	r2, [pc, #32]	@ (8003694 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8003672:	440a      	add	r2, r1
 8003674:	6482      	str	r2, [r0, #72]	@ 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003676:	b2db      	uxtb	r3, r3
 8003678:	3b08      	subs	r3, #8
 800367a:	4a04      	ldr	r2, [pc, #16]	@ (800368c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	3307      	adds	r3, #7
 8003684:	e7e8      	b.n	8003658 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8003686:	bf00      	nop
 8003688:	40020407 	.word	0x40020407
 800368c:	cccccccd 	.word	0xcccccccd
 8003690:	40020880 	.word	0x40020880
 8003694:	4002081c 	.word	0x4002081c

08003698 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003698:	6843      	ldr	r3, [r0, #4]
 800369a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800369e:	4a07      	ldr	r2, [pc, #28]	@ (80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80036a0:	441a      	add	r2, r3
 80036a2:	0092      	lsls	r2, r2, #2
 80036a4:	6542      	str	r2, [r0, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036a6:	4a06      	ldr	r2, [pc, #24]	@ (80036c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80036a8:	6582      	str	r2, [r0, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80036aa:	3b01      	subs	r3, #1
 80036ac:	f003 0303 	and.w	r3, r3, #3
 80036b0:	2201      	movs	r2, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	65c3      	str	r3, [r0, #92]	@ 0x5c
}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	1000823f 	.word	0x1000823f
 80036c0:	40020940 	.word	0x40020940

080036c4 <HAL_DMA_Init>:
  if (hdma == NULL)
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d060      	beq.n	800378a <HAL_DMA_Init+0xc6>
{
 80036c8:	b510      	push	{r4, lr}
 80036ca:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80036cc:	6802      	ldr	r2, [r0, #0]
 80036ce:	4b30      	ldr	r3, [pc, #192]	@ (8003790 <HAL_DMA_Init+0xcc>)
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d842      	bhi.n	800375a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80036d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003794 <HAL_DMA_Init+0xd0>)
 80036d6:	4413      	add	r3, r2
 80036d8:	492f      	ldr	r1, [pc, #188]	@ (8003798 <HAL_DMA_Init+0xd4>)
 80036da:	fba1 1303 	umull	r1, r3, r1, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80036e4:	4b2d      	ldr	r3, [pc, #180]	@ (800379c <HAL_DMA_Init+0xd8>)
 80036e6:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80036e8:	2302      	movs	r3, #2
 80036ea:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80036ee:	6813      	ldr	r3, [r2, #0]
 80036f0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80036f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f8:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036fa:	6821      	ldr	r1, [r4, #0]
 80036fc:	680a      	ldr	r2, [r1, #0]
 80036fe:	68a3      	ldr	r3, [r4, #8]
 8003700:	68e0      	ldr	r0, [r4, #12]
 8003702:	4303      	orrs	r3, r0
 8003704:	6920      	ldr	r0, [r4, #16]
 8003706:	4303      	orrs	r3, r0
 8003708:	6960      	ldr	r0, [r4, #20]
 800370a:	4303      	orrs	r3, r0
 800370c:	69a0      	ldr	r0, [r4, #24]
 800370e:	4303      	orrs	r3, r0
 8003710:	69e0      	ldr	r0, [r4, #28]
 8003712:	4303      	orrs	r3, r0
 8003714:	6a20      	ldr	r0, [r4, #32]
 8003716:	4303      	orrs	r3, r0
 8003718:	4313      	orrs	r3, r2
 800371a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800371c:	4620      	mov	r0, r4
 800371e:	f7ff ff89 	bl	8003634 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003722:	68a3      	ldr	r3, [r4, #8]
 8003724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003728:	d022      	beq.n	8003770 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800372a:	6863      	ldr	r3, [r4, #4]
 800372c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800372e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003732:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003734:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8003736:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003738:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800373a:	6863      	ldr	r3, [r4, #4]
 800373c:	3b01      	subs	r3, #1
 800373e:	2b03      	cmp	r3, #3
 8003740:	d919      	bls.n	8003776 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003746:	65a3      	str	r3, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003748:	65e3      	str	r3, [r4, #92]	@ 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374a:	2000      	movs	r0, #0
 800374c:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800374e:	2301      	movs	r3, #1
 8003750:	f884 3025 	strb.w	r3, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003754:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8003758:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800375a:	4b11      	ldr	r3, [pc, #68]	@ (80037a0 <HAL_DMA_Init+0xdc>)
 800375c:	4413      	add	r3, r2
 800375e:	490e      	ldr	r1, [pc, #56]	@ (8003798 <HAL_DMA_Init+0xd4>)
 8003760:	fba1 1303 	umull	r1, r3, r1, r3
 8003764:	091b      	lsrs	r3, r3, #4
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <HAL_DMA_Init+0xe0>)
 800376c:	6403      	str	r3, [r0, #64]	@ 0x40
 800376e:	e7bb      	b.n	80036e8 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003770:	2300      	movs	r3, #0
 8003772:	6063      	str	r3, [r4, #4]
 8003774:	e7d9      	b.n	800372a <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003776:	4620      	mov	r0, r4
 8003778:	f7ff ff8e 	bl	8003698 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800377c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003782:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003784:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003786:	605a      	str	r2, [r3, #4]
 8003788:	e7df      	b.n	800374a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800378a:	2001      	movs	r0, #1
}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40020407 	.word	0x40020407
 8003794:	bffdfff8 	.word	0xbffdfff8
 8003798:	cccccccd 	.word	0xcccccccd
 800379c:	40020000 	.word	0x40020000
 80037a0:	bffdfbf8 	.word	0xbffdfbf8
 80037a4:	40020400 	.word	0x40020400

080037a8 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d04b      	beq.n	8003844 <HAL_DMA_DeInit+0x9c>
{
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80037b0:	6802      	ldr	r2, [r0, #0]
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80037ba:	6802      	ldr	r2, [r0, #0]
 80037bc:	4b22      	ldr	r3, [pc, #136]	@ (8003848 <HAL_DMA_DeInit+0xa0>)
 80037be:	429a      	cmp	r2, r3
 80037c0:	d82c      	bhi.n	800381c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80037c2:	4b22      	ldr	r3, [pc, #136]	@ (800384c <HAL_DMA_DeInit+0xa4>)
 80037c4:	4413      	add	r3, r2
 80037c6:	4922      	ldr	r1, [pc, #136]	@ (8003850 <HAL_DMA_DeInit+0xa8>)
 80037c8:	fba1 1303 	umull	r1, r3, r1, r3
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80037d2:	4b20      	ldr	r3, [pc, #128]	@ (8003854 <HAL_DMA_DeInit+0xac>)
 80037d4:	6403      	str	r3, [r0, #64]	@ 0x40
  hdma->Instance->CCR = 0U;
 80037d6:	2500      	movs	r5, #0
 80037d8:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80037dc:	f003 021c 	and.w	r2, r3, #28
 80037e0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80037e2:	2301      	movs	r3, #1
 80037e4:	4093      	lsls	r3, r2
 80037e6:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037e8:	4620      	mov	r0, r4
 80037ea:	f7ff ff23 	bl	8003634 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80037ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80037f0:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037f2:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80037f4:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 80037f6:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80037f8:	6863      	ldr	r3, [r4, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d918      	bls.n	8003832 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8003800:	2000      	movs	r0, #0
 8003802:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003804:	65a0      	str	r0, [r4, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003806:	65e0      	str	r0, [r4, #92]	@ 0x5c
  hdma->XferCpltCallback = NULL;
 8003808:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800380a:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 800380c:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 800380e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003810:	63e0      	str	r0, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8003812:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
  __HAL_UNLOCK(hdma);
 8003816:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 800381a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800381c:	4b0e      	ldr	r3, [pc, #56]	@ (8003858 <HAL_DMA_DeInit+0xb0>)
 800381e:	4413      	add	r3, r2
 8003820:	490b      	ldr	r1, [pc, #44]	@ (8003850 <HAL_DMA_DeInit+0xa8>)
 8003822:	fba1 1303 	umull	r1, r3, r1, r3
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	6443      	str	r3, [r0, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_DMA_DeInit+0xb4>)
 800382e:	6403      	str	r3, [r0, #64]	@ 0x40
 8003830:	e7d1      	b.n	80037d6 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003832:	4620      	mov	r0, r4
 8003834:	f7ff ff30 	bl	8003698 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003838:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800383a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800383c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800383e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003840:	605a      	str	r2, [r3, #4]
 8003842:	e7dd      	b.n	8003800 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8003844:	2001      	movs	r0, #1
}
 8003846:	4770      	bx	lr
 8003848:	40020407 	.word	0x40020407
 800384c:	bffdfff8 	.word	0xbffdfff8
 8003850:	cccccccd 	.word	0xcccccccd
 8003854:	40020000 	.word	0x40020000
 8003858:	bffdfbf8 	.word	0xbffdfbf8
 800385c:	40020400 	.word	0x40020400

08003860 <HAL_DMA_Start_IT>:
{
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003864:	f890 0024 	ldrb.w	r0, [r0, #36]	@ 0x24
 8003868:	2801      	cmp	r0, #1
 800386a:	d043      	beq.n	80038f4 <HAL_DMA_Start_IT+0x94>
 800386c:	2001      	movs	r0, #1
 800386e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8003872:	f894 0025 	ldrb.w	r0, [r4, #37]	@ 0x25
 8003876:	b2c0      	uxtb	r0, r0
 8003878:	2801      	cmp	r0, #1
 800387a:	d006      	beq.n	800388a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800387c:	2380      	movs	r3, #128	@ 0x80
 800387e:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8003880:	2300      	movs	r3, #0
 8003882:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    status = HAL_ERROR;
 8003886:	2001      	movs	r0, #1
}
 8003888:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800388a:	2002      	movs	r0, #2
 800388c:	f884 0025 	strb.w	r0, [r4, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003890:	2000      	movs	r0, #0
 8003892:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003894:	6825      	ldr	r5, [r4, #0]
 8003896:	6828      	ldr	r0, [r5, #0]
 8003898:	f020 0001 	bic.w	r0, r0, #1
 800389c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800389e:	4620      	mov	r0, r4
 80038a0:	f7ff fea0 	bl	80035e4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80038a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80038a6:	b1d3      	cbz	r3, 80038de <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	f043 030e 	orr.w	r3, r3, #14
 80038b0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80038b2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
 80038ba:	d003      	beq.n	80038c4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038c2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 80038c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80038c6:	b11b      	cbz	r3, 80038d0 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80038d0:	6822      	ldr	r2, [r4, #0]
 80038d2:	6813      	ldr	r3, [r2, #0]
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038da:	2000      	movs	r0, #0
 80038dc:	e7d4      	b.n	8003888 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	6813      	ldr	r3, [r2, #0]
 80038e2:	f023 0304 	bic.w	r3, r3, #4
 80038e6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	f043 030a 	orr.w	r3, r3, #10
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e7de      	b.n	80038b2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80038f4:	2002      	movs	r0, #2
 80038f6:	e7c7      	b.n	8003888 <HAL_DMA_Start_IT+0x28>

080038f8 <HAL_DMA_Abort>:
  if (NULL == hdma)
 80038f8:	4603      	mov	r3, r0
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d034      	beq.n	8003968 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038fe:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	2a02      	cmp	r2, #2
 8003906:	d006      	beq.n	8003916 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003908:	2204      	movs	r2, #4
 800390a:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 800390c:	2200      	movs	r2, #0
 800390e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    return HAL_ERROR;
 8003912:	2001      	movs	r0, #1
 8003914:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003916:	6801      	ldr	r1, [r0, #0]
 8003918:	680a      	ldr	r2, [r1, #0]
 800391a:	f022 020e 	bic.w	r2, r2, #14
 800391e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003920:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8003922:	680a      	ldr	r2, [r1, #0]
 8003924:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003928:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800392a:	6801      	ldr	r1, [r0, #0]
 800392c:	680a      	ldr	r2, [r1, #0]
 800392e:	f022 0201 	bic.w	r2, r2, #1
 8003932:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003934:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003936:	f002 011c 	and.w	r1, r2, #28
 800393a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800393c:	2201      	movs	r2, #1
 800393e:	408a      	lsls	r2, r1
 8003940:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003944:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003946:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8003948:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800394a:	b132      	cbz	r2, 800395a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800394c:	6811      	ldr	r1, [r2, #0]
 800394e:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8003952:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003954:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003956:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8003958:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003960:	2000      	movs	r0, #0
 8003962:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  return HAL_OK;
 8003966:	4770      	bx	lr
    return HAL_ERROR;
 8003968:	2001      	movs	r0, #1
}
 800396a:	4770      	bx	lr

0800396c <HAL_DMA_Abort_IT>:
{
 800396c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800396e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d003      	beq.n	8003980 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003978:	2304      	movs	r3, #4
 800397a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800397c:	2001      	movs	r0, #1
}
 800397e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003980:	6802      	ldr	r2, [r0, #0]
 8003982:	6813      	ldr	r3, [r2, #0]
 8003984:	f023 030e 	bic.w	r3, r3, #14
 8003988:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800398a:	6802      	ldr	r2, [r0, #0]
 800398c:	6813      	ldr	r3, [r2, #0]
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003994:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8003996:	6813      	ldr	r3, [r2, #0]
 8003998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800399c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800399e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80039a0:	f003 021c 	and.w	r2, r3, #28
 80039a4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 80039a6:	2301      	movs	r3, #1
 80039a8:	4093      	lsls	r3, r2
 80039aa:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ac:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80039ae:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80039b0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80039b2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80039b4:	b133      	cbz	r3, 80039c4 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039be:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80039c0:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80039c2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80039c4:	2301      	movs	r3, #1
 80039c6:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80039ca:	2300      	movs	r3, #0
 80039cc:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 80039d0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80039d2:	b113      	cbz	r3, 80039da <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80039d4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2000      	movs	r0, #0
 80039d8:	e7d1      	b.n	800397e <HAL_DMA_Abort_IT+0x12>
 80039da:	2000      	movs	r0, #0
 80039dc:	e7cf      	b.n	800397e <HAL_DMA_Abort_IT+0x12>
	...

080039e0 <HAL_DMA_IRQHandler>:
{
 80039e0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039e2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80039e4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80039e6:	6804      	ldr	r4, [r0, #0]
 80039e8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80039ea:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80039ec:	f003 031c 	and.w	r3, r3, #28
 80039f0:	2204      	movs	r2, #4
 80039f2:	409a      	lsls	r2, r3
 80039f4:	420a      	tst	r2, r1
 80039f6:	d015      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x44>
 80039f8:	f015 0f04 	tst.w	r5, #4
 80039fc:	d012      	beq.n	8003a24 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	f013 0f20 	tst.w	r3, #32
 8003a04:	d103      	bne.n	8003a0e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a06:	6823      	ldr	r3, [r4, #0]
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003a0e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003a10:	f003 021c 	and.w	r2, r3, #28
 8003a14:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003a16:	2304      	movs	r3, #4
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8003a1c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003a1e:	b103      	cbz	r3, 8003a22 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8003a20:	4798      	blx	r3
}
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003a24:	2202      	movs	r2, #2
 8003a26:	409a      	lsls	r2, r3
 8003a28:	420a      	tst	r2, r1
 8003a2a:	d028      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x9e>
 8003a2c:	f015 0f02 	tst.w	r5, #2
 8003a30:	d025      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	f013 0f20 	tst.w	r3, #32
 8003a38:	d106      	bne.n	8003a48 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	f023 030a 	bic.w	r3, r3, #10
 8003a40:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8003a42:	2301      	movs	r3, #1
 8003a44:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a48:	6802      	ldr	r2, [r0, #0]
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003abc <HAL_DMA_IRQHandler+0xdc>)
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d90e      	bls.n	8003a6e <HAL_DMA_IRQHandler+0x8e>
 8003a50:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003a52:	f003 021c 	and.w	r2, r3, #28
 8003a56:	2302      	movs	r3, #2
 8003a58:	4093      	lsls	r3, r2
 8003a5a:	4a19      	ldr	r2, [pc, #100]	@ (8003ac0 <HAL_DMA_IRQHandler+0xe0>)
 8003a5c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
      if (hdma->XferCpltCallback != NULL)
 8003a64:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0db      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8003a6a:	4798      	blx	r3
 8003a6c:	e7d9      	b.n	8003a22 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a6e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003a70:	f003 021c 	and.w	r2, r3, #28
 8003a74:	2302      	movs	r3, #2
 8003a76:	4093      	lsls	r3, r2
 8003a78:	4a12      	ldr	r2, [pc, #72]	@ (8003ac4 <HAL_DMA_IRQHandler+0xe4>)
 8003a7a:	6053      	str	r3, [r2, #4]
 8003a7c:	e7ef      	b.n	8003a5e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a7e:	2208      	movs	r2, #8
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	420b      	tst	r3, r1
 8003a86:	d0cc      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x42>
 8003a88:	f015 0f08 	tst.w	r5, #8
 8003a8c:	d0c9      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	f023 030e 	bic.w	r3, r3, #14
 8003a94:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a96:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8003a98:	f003 031c 	and.w	r3, r3, #28
 8003a9c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aa6:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003aa8:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8003aac:	2300      	movs	r3, #0
 8003aae:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 8003ab2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0b4      	beq.n	8003a22 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8003ab8:	4798      	blx	r3
  return;
 8003aba:	e7b2      	b.n	8003a22 <HAL_DMA_IRQHandler+0x42>
 8003abc:	40020080 	.word	0x40020080
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40020000 	.word	0x40020000

08003ac8 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8003ac8:	b178      	cbz	r0, 8003aea <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8003aca:	6803      	ldr	r3, [r0, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003ace:	f011 0f10 	tst.w	r1, #16
 8003ad2:	d004      	beq.n	8003ade <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003ad4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8003ad8:	d004      	beq.n	8003ae4 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003ada:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003ade:	601a      	str	r2, [r3, #0]
  return status;
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003ae4:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8003ae8:	e7f9      	b.n	8003ade <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8003aea:	2001      	movs	r0, #1
}
 8003aec:	4770      	bx	lr
	...

08003af0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af0:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8003af2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af4:	e069      	b.n	8003bca <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af6:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003af8:	005e      	lsls	r6, r3, #1
 8003afa:	2403      	movs	r4, #3
 8003afc:	40b4      	lsls	r4, r6
 8003afe:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b02:	68cc      	ldr	r4, [r1, #12]
 8003b04:	40b4      	lsls	r4, r6
 8003b06:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003b08:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b0a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b0c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b10:	684c      	ldr	r4, [r1, #4]
 8003b12:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8003b16:	409c      	lsls	r4, r3
 8003b18:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8003b1a:	6044      	str	r4, [r0, #4]
 8003b1c:	e066      	b.n	8003bec <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b1e:	08dd      	lsrs	r5, r3, #3
 8003b20:	3508      	adds	r5, #8
 8003b22:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b26:	f003 0c07 	and.w	ip, r3, #7
 8003b2a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003b2e:	f04f 0e0f 	mov.w	lr, #15
 8003b32:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003b36:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b3a:	690c      	ldr	r4, [r1, #16]
 8003b3c:	fa04 f40c 	lsl.w	r4, r4, ip
 8003b40:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8003b44:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8003b48:	e067      	b.n	8003c1a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b4a:	2402      	movs	r4, #2
 8003b4c:	e000      	b.n	8003b50 <HAL_GPIO_Init+0x60>
 8003b4e:	2400      	movs	r4, #0
 8003b50:	fa04 f40e 	lsl.w	r4, r4, lr
 8003b54:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b56:	f10c 0c02 	add.w	ip, ip, #2
 8003b5a:	4d4b      	ldr	r5, [pc, #300]	@ (8003c88 <HAL_GPIO_Init+0x198>)
 8003b5c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b60:	4c4a      	ldr	r4, [pc, #296]	@ (8003c8c <HAL_GPIO_Init+0x19c>)
 8003b62:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8003b64:	43d4      	mvns	r4, r2
 8003b66:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b6a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003b6e:	f41c 1f80 	tst.w	ip, #1048576	@ 0x100000
 8003b72:	d001      	beq.n	8003b78 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8003b74:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8003b78:	4d44      	ldr	r5, [pc, #272]	@ (8003c8c <HAL_GPIO_Init+0x19c>)
 8003b7a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8003b7c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8003b7e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b82:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003b86:	f41c 1f00 	tst.w	ip, #2097152	@ 0x200000
 8003b8a:	d001      	beq.n	8003b90 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8003b8c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8003b90:	4d3e      	ldr	r5, [pc, #248]	@ (8003c8c <HAL_GPIO_Init+0x19c>)
 8003b92:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003b94:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b98:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b9c:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8003ba0:	f41c 3f80 	tst.w	ip, #65536	@ 0x10000
 8003ba4:	d001      	beq.n	8003baa <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8003ba6:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003baa:	4d38      	ldr	r5, [pc, #224]	@ (8003c8c <HAL_GPIO_Init+0x19c>)
 8003bac:	f8c5 6080 	str.w	r6, [r5, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003bb0:	f8d5 5084 	ldr.w	r5, [r5, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003bb4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bb6:	684e      	ldr	r6, [r1, #4]
 8003bb8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8003bbc:	d001      	beq.n	8003bc2 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8003bbe:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003bc2:	4a32      	ldr	r2, [pc, #200]	@ (8003c8c <HAL_GPIO_Init+0x19c>)
 8003bc4:	f8c2 4084 	str.w	r4, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003bc8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bca:	680a      	ldr	r2, [r1, #0]
 8003bcc:	fa32 f403 	lsrs.w	r4, r2, r3
 8003bd0:	d058      	beq.n	8003c84 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bd2:	f04f 0c01 	mov.w	ip, #1
 8003bd6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8003bda:	ea1c 0202 	ands.w	r2, ip, r2
 8003bde:	d0f3      	beq.n	8003bc8 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003be0:	684c      	ldr	r4, [r1, #4]
 8003be2:	f004 0403 	and.w	r4, r4, #3
 8003be6:	3c01      	subs	r4, #1
 8003be8:	2c01      	cmp	r4, #1
 8003bea:	d984      	bls.n	8003af6 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bec:	684c      	ldr	r4, [r1, #4]
 8003bee:	f004 0403 	and.w	r4, r4, #3
 8003bf2:	2c03      	cmp	r4, #3
 8003bf4:	d00c      	beq.n	8003c10 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8003bf6:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bf8:	005d      	lsls	r5, r3, #1
 8003bfa:	f04f 0c03 	mov.w	ip, #3
 8003bfe:	fa0c fc05 	lsl.w	ip, ip, r5
 8003c02:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c06:	688c      	ldr	r4, [r1, #8]
 8003c08:	40ac      	lsls	r4, r5
 8003c0a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8003c0e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c10:	684c      	ldr	r4, [r1, #4]
 8003c12:	f004 0403 	and.w	r4, r4, #3
 8003c16:	2c02      	cmp	r4, #2
 8003c18:	d081      	beq.n	8003b1e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8003c1a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c1c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003c20:	f04f 0c03 	mov.w	ip, #3
 8003c24:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003c28:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c2c:	684c      	ldr	r4, [r1, #4]
 8003c2e:	f004 0403 	and.w	r4, r4, #3
 8003c32:	fa04 f40e 	lsl.w	r4, r4, lr
 8003c36:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8003c3a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c3c:	684c      	ldr	r4, [r1, #4]
 8003c3e:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
 8003c42:	d0c1      	beq.n	8003bc8 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8003c44:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8003c48:	f10c 0502 	add.w	r5, ip, #2
 8003c4c:	4c0e      	ldr	r4, [pc, #56]	@ (8003c88 <HAL_GPIO_Init+0x198>)
 8003c4e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003c52:	f003 0e03 	and.w	lr, r3, #3
 8003c56:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8003c5a:	2407      	movs	r4, #7
 8003c5c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003c60:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c64:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8003c68:	f43f af71 	beq.w	8003b4e <HAL_GPIO_Init+0x5e>
 8003c6c:	4c08      	ldr	r4, [pc, #32]	@ (8003c90 <HAL_GPIO_Init+0x1a0>)
 8003c6e:	42a0      	cmp	r0, r4
 8003c70:	d006      	beq.n	8003c80 <HAL_GPIO_Init+0x190>
 8003c72:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003c76:	42a0      	cmp	r0, r4
 8003c78:	f43f af67 	beq.w	8003b4a <HAL_GPIO_Init+0x5a>
 8003c7c:	2407      	movs	r4, #7
 8003c7e:	e767      	b.n	8003b50 <HAL_GPIO_Init+0x60>
 8003c80:	2401      	movs	r4, #1
 8003c82:	e765      	b.n	8003b50 <HAL_GPIO_Init+0x60>
  }
}
 8003c84:	bd70      	pop	{r4, r5, r6, pc}
 8003c86:	bf00      	nop
 8003c88:	40010000 	.word	0x40010000
 8003c8c:	58000800 	.word	0x58000800
 8003c90:	48000400 	.word	0x48000400

08003c94 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8003c94:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003c96:	fa31 f203 	lsrs.w	r2, r1, r3
 8003c9a:	d071      	beq.n	8003d80 <HAL_GPIO_DeInit+0xec>
{
 8003c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c9e:	e02e      	b.n	8003cfe <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003ca0:	2502      	movs	r5, #2
 8003ca2:	e000      	b.n	8003ca6 <HAL_GPIO_DeInit+0x12>
 8003ca4:	2500      	movs	r5, #0
 8003ca6:	fa05 f50c 	lsl.w	r5, r5, ip
 8003caa:	42a5      	cmp	r5, r4
 8003cac:	d049      	beq.n	8003d42 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003cae:	6804      	ldr	r4, [r0, #0]
 8003cb0:	005d      	lsls	r5, r3, #1
 8003cb2:	f04f 0c03 	mov.w	ip, #3
 8003cb6:	fa0c fc05 	lsl.w	ip, ip, r5
 8003cba:	ea44 040c 	orr.w	r4, r4, ip
 8003cbe:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003cc0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8003cc4:	f10e 0e08 	add.w	lr, lr, #8
 8003cc8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8003ccc:	f003 0607 	and.w	r6, r3, #7
 8003cd0:	00b6      	lsls	r6, r6, #2
 8003cd2:	250f      	movs	r5, #15
 8003cd4:	40b5      	lsls	r5, r6
 8003cd6:	ea24 0405 	bic.w	r4, r4, r5
 8003cda:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cde:	6884      	ldr	r4, [r0, #8]
 8003ce0:	ea24 040c 	bic.w	r4, r4, ip
 8003ce4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ce6:	6844      	ldr	r4, [r0, #4]
 8003ce8:	ea24 0202 	bic.w	r2, r4, r2
 8003cec:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cee:	68c2      	ldr	r2, [r0, #12]
 8003cf0:	ea22 020c 	bic.w	r2, r2, ip
 8003cf4:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8003cf6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8003cf8:	fa31 f203 	lsrs.w	r2, r1, r3
 8003cfc:	d03f      	beq.n	8003d7e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003cfe:	2201      	movs	r2, #1
 8003d00:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8003d02:	ea12 0701 	ands.w	r7, r2, r1
 8003d06:	d0f6      	beq.n	8003cf6 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8003d08:	089e      	lsrs	r6, r3, #2
 8003d0a:	1cb5      	adds	r5, r6, #2
 8003d0c:	4c1d      	ldr	r4, [pc, #116]	@ (8003d84 <HAL_GPIO_DeInit+0xf0>)
 8003d0e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003d12:	f003 0c03 	and.w	ip, r3, #3
 8003d16:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003d1a:	f04f 0e07 	mov.w	lr, #7
 8003d1e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8003d22:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003d26:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8003d2a:	d0bb      	beq.n	8003ca4 <HAL_GPIO_DeInit+0x10>
 8003d2c:	4d16      	ldr	r5, [pc, #88]	@ (8003d88 <HAL_GPIO_DeInit+0xf4>)
 8003d2e:	42a8      	cmp	r0, r5
 8003d30:	d005      	beq.n	8003d3e <HAL_GPIO_DeInit+0xaa>
 8003d32:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003d36:	42a8      	cmp	r0, r5
 8003d38:	d0b2      	beq.n	8003ca0 <HAL_GPIO_DeInit+0xc>
 8003d3a:	2507      	movs	r5, #7
 8003d3c:	e7b3      	b.n	8003ca6 <HAL_GPIO_DeInit+0x12>
 8003d3e:	2501      	movs	r5, #1
 8003d40:	e7b1      	b.n	8003ca6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8003d42:	4c12      	ldr	r4, [pc, #72]	@ (8003d8c <HAL_GPIO_DeInit+0xf8>)
 8003d44:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 8003d48:	ea25 0507 	bic.w	r5, r5, r7
 8003d4c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003d50:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
 8003d54:	ea25 0507 	bic.w	r5, r5, r7
 8003d58:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8003d5c:	6825      	ldr	r5, [r4, #0]
 8003d5e:	ea25 0507 	bic.w	r5, r5, r7
 8003d62:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003d64:	6865      	ldr	r5, [r4, #4]
 8003d66:	ea25 0507 	bic.w	r5, r5, r7
 8003d6a:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003d6c:	4d05      	ldr	r5, [pc, #20]	@ (8003d84 <HAL_GPIO_DeInit+0xf0>)
 8003d6e:	3602      	adds	r6, #2
 8003d70:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8003d74:	ea24 040e 	bic.w	r4, r4, lr
 8003d78:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8003d7c:	e797      	b.n	8003cae <HAL_GPIO_DeInit+0x1a>
  }
}
 8003d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40010000 	.word	0x40010000
 8003d88:	48000400 	.word	0x48000400
 8003d8c:	58000800 	.word	0x58000800

08003d90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d90:	6903      	ldr	r3, [r0, #16]
 8003d92:	4219      	tst	r1, r3
 8003d94:	d001      	beq.n	8003d9a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8003d96:	2001      	movs	r0, #1
 8003d98:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003d9c:	4770      	bx	lr

08003d9e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d9e:	b10a      	cbz	r2, 8003da4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003da0:	6181      	str	r1, [r0, #24]
 8003da2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003da4:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8003da6:	4770      	bx	lr

08003da8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003da8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003daa:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	4203      	tst	r3, r0
 8003db0:	d100      	bne.n	8003db4 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8003db2:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003db4:	4b02      	ldr	r3, [pc, #8]	@ (8003dc0 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8003db6:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003db8:	f7ff f8ee 	bl	8002f98 <HAL_GPIO_EXTI_Callback>
}
 8003dbc:	e7f9      	b.n	8003db2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8003dbe:	bf00      	nop
 8003dc0:	58000800 	.word	0x58000800

08003dc4 <HAL_I2C_MasterTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_I2C_MasterRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_I2C_SlaveTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003dc8:	4770      	bx	lr

08003dca <HAL_I2C_SlaveRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003dca:	4770      	bx	lr

08003dcc <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003dcc:	4770      	bx	lr

08003dce <HAL_I2C_ListenCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_I2C_MemTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_I2C_MemRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_I2C_ErrorCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003dd4:	4770      	bx	lr

08003dd6 <HAL_I2C_AbortCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003dd6:	4770      	bx	lr

08003dd8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003dd8:	6803      	ldr	r3, [r0, #0]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	f012 0f02 	tst.w	r2, #2
 8003de0:	d001      	beq.n	8003de6 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003de2:	2200      	movs	r2, #0
 8003de4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de6:	6803      	ldr	r3, [r0, #0]
 8003de8:	699a      	ldr	r2, [r3, #24]
 8003dea:	f012 0f01 	tst.w	r2, #1
 8003dee:	d103      	bne.n	8003df8 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003df0:	699a      	ldr	r2, [r3, #24]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	619a      	str	r2, [r3, #24]
  }
}
 8003df8:	4770      	bx	lr

08003dfa <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003dfa:	b410      	push	{r4}
 8003dfc:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003dfe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003e02:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e06:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e08:	4321      	orrs	r1, r4
 8003e0a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e0e:	6802      	ldr	r2, [r0, #0]
 8003e10:	6853      	ldr	r3, [r2, #4]
 8003e12:	0d64      	lsrs	r4, r4, #21
 8003e14:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8003e18:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 8003e1c:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 8003e20:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8003e24:	f044 0403 	orr.w	r4, r4, #3
 8003e28:	ea23 0304 	bic.w	r3, r3, r4
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e30:	bc10      	pop	{r4}
 8003e32:	4770      	bx	lr

08003e34 <I2C_IsErrorOccurred>:
{
 8003e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e38:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e3a:	6803      	ldr	r3, [r0, #0]
 8003e3c:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e3e:	f016 0610 	ands.w	r6, r6, #16
 8003e42:	d07c      	beq.n	8003f3e <I2C_IsErrorOccurred+0x10a>
 8003e44:	460d      	mov	r5, r1
 8003e46:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e48:	2210      	movs	r2, #16
 8003e4a:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8003e4c:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	6998      	ldr	r0, [r3, #24]
 8003e54:	f010 0f20 	tst.w	r0, #32
 8003e58:	d130      	bne.n	8003ebc <I2C_IsErrorOccurred+0x88>
 8003e5a:	bb7f      	cbnz	r7, 8003ebc <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8003e5c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003e60:	d0f6      	beq.n	8003e50 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e62:	f7fd ff5f 	bl	8001d24 <HAL_GetTick>
 8003e66:	eba0 0008 	sub.w	r0, r0, r8
 8003e6a:	42a8      	cmp	r0, r5
 8003e6c:	d801      	bhi.n	8003e72 <I2C_IsErrorOccurred+0x3e>
 8003e6e:	2d00      	cmp	r5, #0
 8003e70:	d1ee      	bne.n	8003e50 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e72:	6821      	ldr	r1, [r4, #0]
 8003e74:	684b      	ldr	r3, [r1, #4]
 8003e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          tmp2 = hi2c->Mode;
 8003e7a:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8003e7e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e80:	6988      	ldr	r0, [r1, #24]
 8003e82:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8003e86:	d002      	beq.n	8003e8e <I2C_IsErrorOccurred+0x5a>
 8003e88:	b90b      	cbnz	r3, 8003e8e <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8003e8a:	2a20      	cmp	r2, #32
 8003e8c:	d10e      	bne.n	8003eac <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f013 0f20 	tst.w	r3, #32
 8003e96:	d1db      	bne.n	8003e50 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e98:	f7fd ff44 	bl	8001d24 <HAL_GetTick>
 8003e9c:	eba0 0008 	sub.w	r0, r0, r8
 8003ea0:	2819      	cmp	r0, #25
 8003ea2:	d9f4      	bls.n	8003e8e <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003ea4:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 8003ea8:	2701      	movs	r7, #1
              break;
 8003eaa:	e7d1      	b.n	8003e50 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003eac:	684b      	ldr	r3, [r1, #4]
 8003eae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eb2:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8003eb4:	f7fd ff36 	bl	8001d24 <HAL_GetTick>
 8003eb8:	4680      	mov	r8, r0
 8003eba:	e7e8      	b.n	8003e8e <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 8003ebc:	b90f      	cbnz	r7, 8003ec2 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003ec2:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 8003ec6:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8003ec8:	6822      	ldr	r2, [r4, #0]
 8003eca:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ecc:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003ed0:	d005      	beq.n	8003ede <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 8003ed2:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ed6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003eda:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8003edc:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ede:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003ee2:	d006      	beq.n	8003ef2 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 8003ee4:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003eee:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8003ef0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ef2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003ef6:	d024      	beq.n	8003f42 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ef8:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003efc:	6823      	ldr	r3, [r4, #0]
 8003efe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f02:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8003f04:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 8003f06:	4620      	mov	r0, r4
 8003f08:	f7ff ff66 	bl	8003dd8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003f0c:	6822      	ldr	r2, [r4, #0]
 8003f0e:	6853      	ldr	r3, [r2, #4]
 8003f10:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8003f14:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8003f18:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8003f1c:	f023 0301 	bic.w	r3, r3, #1
 8003f20:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8003f22:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003f24:	4333      	orrs	r3, r6
 8003f26:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	2320      	movs	r3, #32
 8003f2a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8003f34:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8003f38:	4628      	mov	r0, r5
 8003f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2500      	movs	r5, #0
 8003f40:	e7c2      	b.n	8003ec8 <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8003f42:	2d00      	cmp	r5, #0
 8003f44:	d0f8      	beq.n	8003f38 <I2C_IsErrorOccurred+0x104>
 8003f46:	e7de      	b.n	8003f06 <I2C_IsErrorOccurred+0xd2>

08003f48 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	460d      	mov	r5, r1
 8003f4e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	f013 0f02 	tst.w	r3, #2
 8003f58:	d11d      	bne.n	8003f96 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f5a:	4632      	mov	r2, r6
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	4620      	mov	r0, r4
 8003f60:	f7ff ff68 	bl	8003e34 <I2C_IsErrorOccurred>
 8003f64:	b9c8      	cbnz	r0, 8003f9a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003f6a:	d0f1      	beq.n	8003f50 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6c:	f7fd feda 	bl	8001d24 <HAL_GetTick>
 8003f70:	1b80      	subs	r0, r0, r6
 8003f72:	42a8      	cmp	r0, r5
 8003f74:	d801      	bhi.n	8003f7a <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8003f76:	2d00      	cmp	r5, #0
 8003f78:	d1ea      	bne.n	8003f50 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f7a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003f7c:	f043 0320 	orr.w	r3, r3, #32
 8003f80:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	2320      	movs	r3, #32
 8003f84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8003f8e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8003f92:	2001      	movs	r0, #1
 8003f94:	e000      	b.n	8003f98 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8003f96:	2000      	movs	r0, #0
}
 8003f98:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	e7fc      	b.n	8003f98 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08003f9e <I2C_WaitOnFlagUntilTimeout>:
{
 8003f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa2:	4606      	mov	r6, r0
 8003fa4:	4688      	mov	r8, r1
 8003fa6:	4617      	mov	r7, r2
 8003fa8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003faa:	6834      	ldr	r4, [r6, #0]
 8003fac:	69a4      	ldr	r4, [r4, #24]
 8003fae:	ea38 0404 	bics.w	r4, r8, r4
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2401      	moveq	r4, #1
 8003fb6:	2400      	movne	r4, #0
 8003fb8:	42bc      	cmp	r4, r7
 8003fba:	d118      	bne.n	8003fee <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003fc0:	d0f3      	beq.n	8003faa <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7fd feaf 	bl	8001d24 <HAL_GetTick>
 8003fc6:	9b06      	ldr	r3, [sp, #24]
 8003fc8:	1ac0      	subs	r0, r0, r3
 8003fca:	42a8      	cmp	r0, r5
 8003fcc:	d801      	bhi.n	8003fd2 <I2C_WaitOnFlagUntilTimeout+0x34>
 8003fce:	2d00      	cmp	r5, #0
 8003fd0:	d1eb      	bne.n	8003faa <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fd2:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 8003fd4:	f043 0320 	orr.w	r3, r3, #32
 8003fd8:	6473      	str	r3, [r6, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	2320      	movs	r3, #32
 8003fdc:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f886 3042 	strb.w	r3, [r6, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 8003fe6:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_ERROR;
 8003fea:	2001      	movs	r0, #1
 8003fec:	e000      	b.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8003fee:	2000      	movs	r0, #0
}
 8003ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ff4 <I2C_RequestMemoryWrite>:
{
 8003ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4690      	mov	r8, r2
 8003ffe:	461d      	mov	r5, r3
 8004000:	9e08      	ldr	r6, [sp, #32]
 8004002:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004004:	4b19      	ldr	r3, [pc, #100]	@ (800406c <I2C_RequestMemoryWrite+0x78>)
 8004006:	9300      	str	r3, [sp, #0]
 8004008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800400c:	b2ea      	uxtb	r2, r5
 800400e:	f7ff fef4 	bl	8003dfa <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004012:	463a      	mov	r2, r7
 8004014:	4631      	mov	r1, r6
 8004016:	4620      	mov	r0, r4
 8004018:	f7ff ff96 	bl	8003f48 <I2C_WaitOnTXISFlagUntilTimeout>
 800401c:	b9f8      	cbnz	r0, 800405e <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800401e:	2d01      	cmp	r5, #1
 8004020:	d10e      	bne.n	8004040 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	fa5f f288 	uxtb.w	r2, r8
 8004028:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800402a:	9700      	str	r7, [sp, #0]
 800402c:	4633      	mov	r3, r6
 800402e:	2200      	movs	r2, #0
 8004030:	2180      	movs	r1, #128	@ 0x80
 8004032:	4620      	mov	r0, r4
 8004034:	f7ff ffb3 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 8004038:	b9a8      	cbnz	r0, 8004066 <I2C_RequestMemoryWrite+0x72>
}
 800403a:	b002      	add	sp, #8
 800403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8004046:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004048:	463a      	mov	r2, r7
 800404a:	4631      	mov	r1, r6
 800404c:	4620      	mov	r0, r4
 800404e:	f7ff ff7b 	bl	8003f48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004052:	b930      	cbnz	r0, 8004062 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004054:	6823      	ldr	r3, [r4, #0]
 8004056:	fa5f f288 	uxtb.w	r2, r8
 800405a:	629a      	str	r2, [r3, #40]	@ 0x28
 800405c:	e7e5      	b.n	800402a <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 800405e:	2001      	movs	r0, #1
 8004060:	e7eb      	b.n	800403a <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8004062:	2001      	movs	r0, #1
 8004064:	e7e9      	b.n	800403a <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8004066:	2001      	movs	r0, #1
 8004068:	e7e7      	b.n	800403a <I2C_RequestMemoryWrite+0x46>
 800406a:	bf00      	nop
 800406c:	80002000 	.word	0x80002000

08004070 <I2C_RequestMemoryRead>:
{
 8004070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	4604      	mov	r4, r0
 8004078:	4690      	mov	r8, r2
 800407a:	461d      	mov	r5, r3
 800407c:	9e08      	ldr	r6, [sp, #32]
 800407e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004080:	4b18      	ldr	r3, [pc, #96]	@ (80040e4 <I2C_RequestMemoryRead+0x74>)
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	b2ea      	uxtb	r2, r5
 8004088:	f7ff feb7 	bl	8003dfa <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408c:	463a      	mov	r2, r7
 800408e:	4631      	mov	r1, r6
 8004090:	4620      	mov	r0, r4
 8004092:	f7ff ff59 	bl	8003f48 <I2C_WaitOnTXISFlagUntilTimeout>
 8004096:	b9f8      	cbnz	r0, 80040d8 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004098:	2d01      	cmp	r5, #1
 800409a:	d10e      	bne.n	80040ba <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	fa5f f288 	uxtb.w	r2, r8
 80040a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80040a4:	9700      	str	r7, [sp, #0]
 80040a6:	4633      	mov	r3, r6
 80040a8:	2200      	movs	r2, #0
 80040aa:	2140      	movs	r1, #64	@ 0x40
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff ff76 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 80040b2:	b9a8      	cbnz	r0, 80040e0 <I2C_RequestMemoryRead+0x70>
}
 80040b4:	b002      	add	sp, #8
 80040b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80040ba:	6823      	ldr	r3, [r4, #0]
 80040bc:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80040c0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c2:	463a      	mov	r2, r7
 80040c4:	4631      	mov	r1, r6
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff ff3e 	bl	8003f48 <I2C_WaitOnTXISFlagUntilTimeout>
 80040cc:	b930      	cbnz	r0, 80040dc <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80040ce:	6823      	ldr	r3, [r4, #0]
 80040d0:	fa5f f288 	uxtb.w	r2, r8
 80040d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80040d6:	e7e5      	b.n	80040a4 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80040d8:	2001      	movs	r0, #1
 80040da:	e7eb      	b.n	80040b4 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80040dc:	2001      	movs	r0, #1
 80040de:	e7e9      	b.n	80040b4 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80040e0:	2001      	movs	r0, #1
 80040e2:	e7e7      	b.n	80040b4 <I2C_RequestMemoryRead+0x44>
 80040e4:	80002000 	.word	0x80002000

080040e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	4605      	mov	r5, r0
 80040ec:	460c      	mov	r4, r1
 80040ee:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	f013 0f20 	tst.w	r3, #32
 80040f8:	d11a      	bne.n	8004130 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040fa:	4632      	mov	r2, r6
 80040fc:	4621      	mov	r1, r4
 80040fe:	4628      	mov	r0, r5
 8004100:	f7ff fe98 	bl	8003e34 <I2C_IsErrorOccurred>
 8004104:	b9b0      	cbnz	r0, 8004134 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fd fe0d 	bl	8001d24 <HAL_GetTick>
 800410a:	1b80      	subs	r0, r0, r6
 800410c:	42a0      	cmp	r0, r4
 800410e:	d801      	bhi.n	8004114 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8004110:	2c00      	cmp	r4, #0
 8004112:	d1ed      	bne.n	80040f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8004116:	f043 0320 	orr.w	r3, r3, #32
 800411a:	646b      	str	r3, [r5, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800411c:	2320      	movs	r3, #32
 800411e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004122:	2300      	movs	r3, #0
 8004124:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004128:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
      return HAL_ERROR;
 800412c:	2001      	movs	r0, #1
}
 800412e:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8004130:	2000      	movs	r0, #0
 8004132:	e7fc      	b.n	800412e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8004134:	2001      	movs	r0, #1
 8004136:	e7fa      	b.n	800412e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08004138 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004138:	2800      	cmp	r0, #0
 800413a:	d072      	beq.n	8004222 <HAL_I2C_Init+0xea>
{
 800413c:	b510      	push	{r4, lr}
 800413e:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004140:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004144:	b9db      	cbnz	r3, 800417e <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 8004146:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 800414a:	4b37      	ldr	r3, [pc, #220]	@ (8004228 <HAL_I2C_Init+0xf0>)
 800414c:	6543      	str	r3, [r0, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 800414e:	4b37      	ldr	r3, [pc, #220]	@ (800422c <HAL_I2C_Init+0xf4>)
 8004150:	6583      	str	r3, [r0, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8004152:	4b37      	ldr	r3, [pc, #220]	@ (8004230 <HAL_I2C_Init+0xf8>)
 8004154:	65c3      	str	r3, [r0, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8004156:	4b37      	ldr	r3, [pc, #220]	@ (8004234 <HAL_I2C_Init+0xfc>)
 8004158:	6603      	str	r3, [r0, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 800415a:	4b37      	ldr	r3, [pc, #220]	@ (8004238 <HAL_I2C_Init+0x100>)
 800415c:	6643      	str	r3, [r0, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 800415e:	4b37      	ldr	r3, [pc, #220]	@ (800423c <HAL_I2C_Init+0x104>)
 8004160:	6683      	str	r3, [r0, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8004162:	4b37      	ldr	r3, [pc, #220]	@ (8004240 <HAL_I2C_Init+0x108>)
 8004164:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8004166:	4b37      	ldr	r3, [pc, #220]	@ (8004244 <HAL_I2C_Init+0x10c>)
 8004168:	6703      	str	r3, [r0, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 800416a:	4b37      	ldr	r3, [pc, #220]	@ (8004248 <HAL_I2C_Init+0x110>)
 800416c:	6743      	str	r3, [r0, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 800416e:	4b37      	ldr	r3, [pc, #220]	@ (800424c <HAL_I2C_Init+0x114>)
 8004170:	6783      	str	r3, [r0, #120]	@ 0x78
    if (hi2c->MspInitCallback == NULL)
 8004172:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8004174:	2b00      	cmp	r3, #0
 8004176:	d046      	beq.n	8004206 <HAL_I2C_Init+0xce>
    hi2c->MspInitCallback(hi2c);
 8004178:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 800417a:	4620      	mov	r0, r4
 800417c:	4798      	blx	r3
  hi2c->State = HAL_I2C_STATE_BUSY;
 800417e:	2324      	movs	r3, #36	@ 0x24
 8004180:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8004184:	6822      	ldr	r2, [r4, #0]
 8004186:	6813      	ldr	r3, [r2, #0]
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800418e:	6863      	ldr	r3, [r4, #4]
 8004190:	6822      	ldr	r2, [r4, #0]
 8004192:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8004196:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004198:	6822      	ldr	r2, [r4, #0]
 800419a:	6893      	ldr	r3, [r2, #8]
 800419c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041a0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041a2:	68e3      	ldr	r3, [r4, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d031      	beq.n	800420c <HAL_I2C_Init+0xd4>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041a8:	68a3      	ldr	r3, [r4, #8]
 80041aa:	6822      	ldr	r2, [r4, #0]
 80041ac:	f443 4304 	orr.w	r3, r3, #33792	@ 0x8400
 80041b0:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d02f      	beq.n	8004218 <HAL_I2C_Init+0xe0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041b8:	6822      	ldr	r2, [r4, #0]
 80041ba:	6853      	ldr	r3, [r2, #4]
 80041bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c4:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041c6:	6822      	ldr	r2, [r4, #0]
 80041c8:	68d3      	ldr	r3, [r2, #12]
 80041ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041ce:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d0:	6923      	ldr	r3, [r4, #16]
 80041d2:	6962      	ldr	r2, [r4, #20]
 80041d4:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041d6:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80041de:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80041e0:	69e3      	ldr	r3, [r4, #28]
 80041e2:	6a21      	ldr	r1, [r4, #32]
 80041e4:	6822      	ldr	r2, [r4, #0]
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	6813      	ldr	r3, [r2, #0]
 80041ee:	f043 0301 	orr.w	r3, r3, #1
 80041f2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f4:	2000      	movs	r0, #0
 80041f6:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	2320      	movs	r3, #32
 80041fa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041fe:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8004204:	bd10      	pop	{r4, pc}
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8004206:	4b12      	ldr	r3, [pc, #72]	@ (8004250 <HAL_I2C_Init+0x118>)
 8004208:	67c3      	str	r3, [r0, #124]	@ 0x7c
 800420a:	e7b5      	b.n	8004178 <HAL_I2C_Init+0x40>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800420c:	68a3      	ldr	r3, [r4, #8]
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004214:	6093      	str	r3, [r2, #8]
 8004216:	e7cc      	b.n	80041b2 <HAL_I2C_Init+0x7a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	e7ca      	b.n	80041b8 <HAL_I2C_Init+0x80>
    return HAL_ERROR;
 8004222:	2001      	movs	r0, #1
}
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	08003dc5 	.word	0x08003dc5
 800422c:	08003dc7 	.word	0x08003dc7
 8004230:	08003dc9 	.word	0x08003dc9
 8004234:	08003dcb 	.word	0x08003dcb
 8004238:	08003dcf 	.word	0x08003dcf
 800423c:	08003dd1 	.word	0x08003dd1
 8004240:	08003dd3 	.word	0x08003dd3
 8004244:	08003dd5 	.word	0x08003dd5
 8004248:	08003dd7 	.word	0x08003dd7
 800424c:	08003dcd 	.word	0x08003dcd
 8004250:	08001061 	.word	0x08001061

08004254 <HAL_I2C_Mem_Write>:
{
 8004254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	b083      	sub	sp, #12
 800425a:	460e      	mov	r6, r1
 800425c:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8004260:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004262:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8004266:	b2c9      	uxtb	r1, r1
 8004268:	2920      	cmp	r1, #32
 800426a:	f040 80bb 	bne.w	80043e4 <HAL_I2C_Mem_Write+0x190>
 800426e:	4604      	mov	r4, r0
 8004270:	4690      	mov	r8, r2
 8004272:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8004274:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004276:	b1cb      	cbz	r3, 80042ac <HAL_I2C_Mem_Write+0x58>
 8004278:	f1ba 0f00 	cmp.w	sl, #0
 800427c:	d016      	beq.n	80042ac <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 800427e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8004282:	2b01      	cmp	r3, #1
 8004284:	f000 80b2 	beq.w	80043ec <HAL_I2C_Mem_Write+0x198>
 8004288:	f04f 0b01 	mov.w	fp, #1
 800428c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8004290:	f7fd fd48 	bl	8001d24 <HAL_GetTick>
 8004294:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004296:	9000      	str	r0, [sp, #0]
 8004298:	2319      	movs	r3, #25
 800429a:	465a      	mov	r2, fp
 800429c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff fe7c 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 80042a6:	b130      	cbz	r0, 80042b6 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 80042a8:	2001      	movs	r0, #1
 80042aa:	e09c      	b.n	80043e6 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042b0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80042b2:	2001      	movs	r0, #1
 80042b4:	e097      	b.n	80043e6 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042b6:	2321      	movs	r3, #33	@ 0x21
 80042b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042bc:	2340      	movs	r3, #64	@ 0x40
 80042be:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80042c6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80042c8:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042ca:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042ce:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042d0:	9701      	str	r7, [sp, #4]
 80042d2:	9500      	str	r5, [sp, #0]
 80042d4:	464b      	mov	r3, r9
 80042d6:	4642      	mov	r2, r8
 80042d8:	4631      	mov	r1, r6
 80042da:	4620      	mov	r0, r4
 80042dc:	f7ff fe8a 	bl	8003ff4 <I2C_RequestMemoryWrite>
 80042e0:	b970      	cbnz	r0, 8004300 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2bff      	cmp	r3, #255	@ 0xff
 80042e8:	d90f      	bls.n	800430a <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042ea:	22ff      	movs	r2, #255	@ 0xff
 80042ec:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042ee:	2300      	movs	r3, #0
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042f6:	4631      	mov	r1, r6
 80042f8:	4620      	mov	r0, r4
 80042fa:	f7ff fd7e 	bl	8003dfa <I2C_TransferConfig>
 80042fe:	e021      	b.n	8004344 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 8004300:	2300      	movs	r3, #0
 8004302:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8004306:	4658      	mov	r0, fp
 8004308:	e06d      	b.n	80043e6 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 800430a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800430c:	b292      	uxth	r2, r2
 800430e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004310:	2300      	movs	r3, #0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	4631      	mov	r1, r6
 800431c:	4620      	mov	r0, r4
 800431e:	f7ff fd6c 	bl	8003dfa <I2C_TransferConfig>
 8004322:	e00f      	b.n	8004344 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8004324:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004326:	b292      	uxth	r2, r2
 8004328:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432a:	2300      	movs	r3, #0
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	4631      	mov	r1, r6
 8004336:	4620      	mov	r0, r4
 8004338:	f7ff fd5f 	bl	8003dfa <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800433c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d033      	beq.n	80043ac <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004344:	463a      	mov	r2, r7
 8004346:	4629      	mov	r1, r5
 8004348:	4620      	mov	r0, r4
 800434a:	f7ff fdfd 	bl	8003f48 <I2C_WaitOnTXISFlagUntilTimeout>
 800434e:	2800      	cmp	r0, #0
 8004350:	d14e      	bne.n	80043f0 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004352:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004354:	6823      	ldr	r3, [r4, #0]
 8004356:	7812      	ldrb	r2, [r2, #0]
 8004358:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 800435a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800435c:	3301      	adds	r3, #1
 800435e:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004360:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29b      	uxth	r3, r3
 8004368:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800436a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800436c:	3b01      	subs	r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004372:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004374:	b292      	uxth	r2, r2
 8004376:	2a00      	cmp	r2, #0
 8004378:	d0e0      	beq.n	800433c <HAL_I2C_Mem_Write+0xe8>
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1de      	bne.n	800433c <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800437e:	9700      	str	r7, [sp, #0]
 8004380:	462b      	mov	r3, r5
 8004382:	2200      	movs	r2, #0
 8004384:	2180      	movs	r1, #128	@ 0x80
 8004386:	4620      	mov	r0, r4
 8004388:	f7ff fe09 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 800438c:	bb90      	cbnz	r0, 80043f4 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800438e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2bff      	cmp	r3, #255	@ 0xff
 8004394:	d9c6      	bls.n	8004324 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004396:	22ff      	movs	r2, #255	@ 0xff
 8004398:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800439a:	2300      	movs	r3, #0
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043a2:	4631      	mov	r1, r6
 80043a4:	4620      	mov	r0, r4
 80043a6:	f7ff fd28 	bl	8003dfa <I2C_TransferConfig>
 80043aa:	e7c7      	b.n	800433c <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ac:	463a      	mov	r2, r7
 80043ae:	4629      	mov	r1, r5
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7ff fe99 	bl	80040e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80043b6:	b9f8      	cbnz	r0, 80043f8 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	2220      	movs	r2, #32
 80043bc:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80043be:	6821      	ldr	r1, [r4, #0]
 80043c0:	684b      	ldr	r3, [r1, #4]
 80043c2:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 80043c6:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 80043ca:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043d4:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043d8:	2300      	movs	r3, #0
 80043da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 80043de:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 80043e2:	e000      	b.n	80043e6 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 80043e4:	2002      	movs	r0, #2
}
 80043e6:	b003      	add	sp, #12
 80043e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80043ec:	2002      	movs	r0, #2
 80043ee:	e7fa      	b.n	80043e6 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
 80043f2:	e7f8      	b.n	80043e6 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 80043f4:	2001      	movs	r0, #1
 80043f6:	e7f6      	b.n	80043e6 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 80043f8:	2001      	movs	r0, #1
 80043fa:	e7f4      	b.n	80043e6 <HAL_I2C_Mem_Write+0x192>

080043fc <HAL_I2C_Mem_Read>:
{
 80043fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004400:	b083      	sub	sp, #12
 8004402:	460e      	mov	r6, r1
 8004404:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8004408:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 800440a:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800440e:	b2c9      	uxtb	r1, r1
 8004410:	2920      	cmp	r1, #32
 8004412:	f040 80bc 	bne.w	800458e <HAL_I2C_Mem_Read+0x192>
 8004416:	4604      	mov	r4, r0
 8004418:	4690      	mov	r8, r2
 800441a:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 800441c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800441e:	b1cb      	cbz	r3, 8004454 <HAL_I2C_Mem_Read+0x58>
 8004420:	f1ba 0f00 	cmp.w	sl, #0
 8004424:	d016      	beq.n	8004454 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8004426:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800442a:	2b01      	cmp	r3, #1
 800442c:	f000 80b3 	beq.w	8004596 <HAL_I2C_Mem_Read+0x19a>
 8004430:	f04f 0b01 	mov.w	fp, #1
 8004434:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8004438:	f7fd fc74 	bl	8001d24 <HAL_GetTick>
 800443c:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800443e:	9000      	str	r0, [sp, #0]
 8004440:	2319      	movs	r3, #25
 8004442:	465a      	mov	r2, fp
 8004444:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004448:	4620      	mov	r0, r4
 800444a:	f7ff fda8 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 800444e:	b130      	cbz	r0, 800445e <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8004450:	2001      	movs	r0, #1
 8004452:	e09d      	b.n	8004590 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004454:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004458:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 800445a:	2001      	movs	r0, #1
 800445c:	e098      	b.n	8004590 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800445e:	2322      	movs	r3, #34	@ 0x22
 8004460:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004464:	2340      	movs	r3, #64	@ 0x40
 8004466:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800446a:	2300      	movs	r3, #0
 800446c:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 800446e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004470:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004472:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004476:	6363      	str	r3, [r4, #52]	@ 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004478:	9701      	str	r7, [sp, #4]
 800447a:	9500      	str	r5, [sp, #0]
 800447c:	464b      	mov	r3, r9
 800447e:	4642      	mov	r2, r8
 8004480:	4631      	mov	r1, r6
 8004482:	4620      	mov	r0, r4
 8004484:	f7ff fdf4 	bl	8004070 <I2C_RequestMemoryRead>
 8004488:	b970      	cbnz	r0, 80044a8 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800448a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2bff      	cmp	r3, #255	@ 0xff
 8004490:	d90f      	bls.n	80044b2 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004492:	22ff      	movs	r2, #255	@ 0xff
 8004494:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004496:	4b44      	ldr	r3, [pc, #272]	@ (80045a8 <HAL_I2C_Mem_Read+0x1ac>)
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800449e:	4631      	mov	r1, r6
 80044a0:	4620      	mov	r0, r4
 80044a2:	f7ff fcaa 	bl	8003dfa <I2C_TransferConfig>
 80044a6:	e021      	b.n	80044ec <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 80044a8:	2300      	movs	r3, #0
 80044aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80044ae:	4658      	mov	r0, fp
 80044b0:	e06e      	b.n	8004590 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 80044b2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80044b4:	b292      	uxth	r2, r2
 80044b6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044b8:	4b3b      	ldr	r3, [pc, #236]	@ (80045a8 <HAL_I2C_Mem_Read+0x1ac>)
 80044ba:	9300      	str	r3, [sp, #0]
 80044bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	4631      	mov	r1, r6
 80044c4:	4620      	mov	r0, r4
 80044c6:	f7ff fc98 	bl	8003dfa <I2C_TransferConfig>
 80044ca:	e00f      	b.n	80044ec <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80044cc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80044ce:	b292      	uxth	r2, r2
 80044d0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044d2:	2300      	movs	r3, #0
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	4631      	mov	r1, r6
 80044de:	4620      	mov	r0, r4
 80044e0:	f7ff fc8b 	bl	8003dfa <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80044e4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d034      	beq.n	8004556 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80044ec:	9700      	str	r7, [sp, #0]
 80044ee:	462b      	mov	r3, r5
 80044f0:	2200      	movs	r2, #0
 80044f2:	2104      	movs	r1, #4
 80044f4:	4620      	mov	r0, r4
 80044f6:	f7ff fd52 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d14d      	bne.n	800459a <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004502:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004504:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004506:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004508:	3301      	adds	r3, #1
 800450a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 800450c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800450e:	3a01      	subs	r2, #1
 8004510:	b292      	uxth	r2, r2
 8004512:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8004514:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004516:	b29b      	uxth	r3, r3
 8004518:	3b01      	subs	r3, #1
 800451a:	b29b      	uxth	r3, r3
 800451c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800451e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0de      	beq.n	80044e4 <HAL_I2C_Mem_Read+0xe8>
 8004526:	2a00      	cmp	r2, #0
 8004528:	d1dc      	bne.n	80044e4 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800452a:	9700      	str	r7, [sp, #0]
 800452c:	462b      	mov	r3, r5
 800452e:	2180      	movs	r1, #128	@ 0x80
 8004530:	4620      	mov	r0, r4
 8004532:	f7ff fd34 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 8004536:	bb90      	cbnz	r0, 800459e <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004538:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800453a:	b29b      	uxth	r3, r3
 800453c:	2bff      	cmp	r3, #255	@ 0xff
 800453e:	d9c5      	bls.n	80044cc <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004540:	22ff      	movs	r2, #255	@ 0xff
 8004542:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004544:	2300      	movs	r3, #0
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800454c:	4631      	mov	r1, r6
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff fc53 	bl	8003dfa <I2C_TransferConfig>
 8004554:	e7c6      	b.n	80044e4 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004556:	463a      	mov	r2, r7
 8004558:	4629      	mov	r1, r5
 800455a:	4620      	mov	r0, r4
 800455c:	f7ff fdc4 	bl	80040e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004560:	b9f8      	cbnz	r0, 80045a2 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	2220      	movs	r2, #32
 8004566:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8004568:	6821      	ldr	r1, [r4, #0]
 800456a:	684b      	ldr	r3, [r1, #4]
 800456c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8004570:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8004574:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004582:	2300      	movs	r3, #0
 8004584:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8004588:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 800458c:	e000      	b.n	8004590 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 800458e:	2002      	movs	r0, #2
}
 8004590:	b003      	add	sp, #12
 8004592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8004596:	2002      	movs	r0, #2
 8004598:	e7fa      	b.n	8004590 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 800459a:	2001      	movs	r0, #1
 800459c:	e7f8      	b.n	8004590 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 800459e:	2001      	movs	r0, #1
 80045a0:	e7f6      	b.n	8004590 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
 80045a4:	e7f4      	b.n	8004590 <HAL_I2C_Mem_Read+0x194>
 80045a6:	bf00      	nop
 80045a8:	80002400 	.word	0x80002400

080045ac <HAL_I2C_IsDeviceReady>:
{
 80045ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045b0:	b085      	sub	sp, #20
 80045b2:	461d      	mov	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 809e 	bne.w	8004700 <HAL_I2C_IsDeviceReady+0x154>
 80045c4:	4606      	mov	r6, r0
 80045c6:	4689      	mov	r9, r1
 80045c8:	4690      	mov	r8, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80045ca:	6803      	ldr	r3, [r0, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80045d2:	f040 8097 	bne.w	8004704 <HAL_I2C_IsDeviceReady+0x158>
    __HAL_LOCK(hi2c);
 80045d6:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80045da:	2b01      	cmp	r3, #1
 80045dc:	f000 8094 	beq.w	8004708 <HAL_I2C_IsDeviceReady+0x15c>
 80045e0:	2301      	movs	r3, #1
 80045e2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e6:	2324      	movs	r3, #36	@ 0x24
 80045e8:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045ec:	2300      	movs	r3, #0
 80045ee:	6443      	str	r3, [r0, #68]	@ 0x44
 80045f0:	e044      	b.n	800467c <HAL_I2C_IsDeviceReady+0xd0>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80045f2:	f3c9 0309 	ubfx	r3, r9, #0, #10
 80045f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045fe:	e044      	b.n	800468a <HAL_I2C_IsDeviceReady+0xde>
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004600:	6833      	ldr	r3, [r6, #0]
 8004602:	699c      	ldr	r4, [r3, #24]
 8004604:	f3c4 1440 	ubfx	r4, r4, #5, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800460e:	b9c4      	cbnz	r4, 8004642 <HAL_I2C_IsDeviceReady+0x96>
 8004610:	b9bb      	cbnz	r3, 8004642 <HAL_I2C_IsDeviceReady+0x96>
        if (Timeout != HAL_MAX_DELAY)
 8004612:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004616:	d0f3      	beq.n	8004600 <HAL_I2C_IsDeviceReady+0x54>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004618:	f7fd fb84 	bl	8001d24 <HAL_GetTick>
 800461c:	1bc0      	subs	r0, r0, r7
 800461e:	42a8      	cmp	r0, r5
 8004620:	d801      	bhi.n	8004626 <HAL_I2C_IsDeviceReady+0x7a>
 8004622:	2d00      	cmp	r5, #0
 8004624:	d1ec      	bne.n	8004600 <HAL_I2C_IsDeviceReady+0x54>
            hi2c->State = HAL_I2C_STATE_READY;
 8004626:	2320      	movs	r3, #32
 8004628:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800462c:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800462e:	f043 0320 	orr.w	r3, r3, #32
 8004632:	6473      	str	r3, [r6, #68]	@ 0x44
            __HAL_UNLOCK(hi2c);
 8004634:	2300      	movs	r3, #0
 8004636:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
            return HAL_ERROR;
 800463a:	2001      	movs	r0, #1
}
 800463c:	b005      	add	sp, #20
 800463e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004642:	6833      	ldr	r3, [r6, #0]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	f013 0f10 	tst.w	r3, #16
 800464a:	d02b      	beq.n	80046a4 <HAL_I2C_IsDeviceReady+0xf8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800464c:	9700      	str	r7, [sp, #0]
 800464e:	462b      	mov	r3, r5
 8004650:	2200      	movs	r2, #0
 8004652:	2120      	movs	r1, #32
 8004654:	4630      	mov	r0, r6
 8004656:	f7ff fca2 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 800465a:	2800      	cmp	r0, #0
 800465c:	d158      	bne.n	8004710 <HAL_I2C_IsDeviceReady+0x164>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	6833      	ldr	r3, [r6, #0]
 8004660:	2210      	movs	r2, #16
 8004662:	61da      	str	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004664:	6833      	ldr	r3, [r6, #0]
 8004666:	2220      	movs	r2, #32
 8004668:	61da      	str	r2, [r3, #28]
      if (I2C_Trials == Trials)
 800466a:	9b03      	ldr	r3, [sp, #12]
 800466c:	4543      	cmp	r3, r8
 800466e:	d02a      	beq.n	80046c6 <HAL_I2C_IsDeviceReady+0x11a>
      I2C_Trials++;
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	9303      	str	r3, [sp, #12]
    } while (I2C_Trials < Trials);
 8004676:	9b03      	ldr	r3, [sp, #12]
 8004678:	4543      	cmp	r3, r8
 800467a:	d235      	bcs.n	80046e8 <HAL_I2C_IsDeviceReady+0x13c>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800467c:	68f3      	ldr	r3, [r6, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d0b7      	beq.n	80045f2 <HAL_I2C_IsDeviceReady+0x46>
 8004682:	f3c9 0309 	ubfx	r3, r9, #0, #10
 8004686:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800468a:	6832      	ldr	r2, [r6, #0]
 800468c:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 800468e:	f7fd fb49 	bl	8001d24 <HAL_GetTick>
 8004692:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004694:	6833      	ldr	r3, [r6, #0]
 8004696:	699c      	ldr	r4, [r3, #24]
 8004698:	f3c4 1440 	ubfx	r4, r4, #5, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f3c3 1300 	ubfx	r3, r3, #4, #1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80046a2:	e7b4      	b.n	800460e <HAL_I2C_IsDeviceReady+0x62>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80046a4:	9700      	str	r7, [sp, #0]
 80046a6:	462b      	mov	r3, r5
 80046a8:	2200      	movs	r2, #0
 80046aa:	2120      	movs	r1, #32
 80046ac:	4630      	mov	r0, r6
 80046ae:	f7ff fc76 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 80046b2:	bb58      	cbnz	r0, 800470c <HAL_I2C_IsDeviceReady+0x160>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b4:	6832      	ldr	r2, [r6, #0]
 80046b6:	2320      	movs	r3, #32
 80046b8:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 80046ba:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
        __HAL_UNLOCK(hi2c);
 80046be:	2300      	movs	r3, #0
 80046c0:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
        return HAL_OK;
 80046c4:	e7ba      	b.n	800463c <HAL_I2C_IsDeviceReady+0x90>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046c6:	6832      	ldr	r2, [r6, #0]
 80046c8:	6853      	ldr	r3, [r2, #4]
 80046ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046ce:	6053      	str	r3, [r2, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80046d0:	9700      	str	r7, [sp, #0]
 80046d2:	462b      	mov	r3, r5
 80046d4:	2200      	movs	r2, #0
 80046d6:	2120      	movs	r1, #32
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff fc60 	bl	8003f9e <I2C_WaitOnFlagUntilTimeout>
 80046de:	b9c8      	cbnz	r0, 8004714 <HAL_I2C_IsDeviceReady+0x168>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046e0:	6833      	ldr	r3, [r6, #0]
 80046e2:	2220      	movs	r2, #32
 80046e4:	61da      	str	r2, [r3, #28]
 80046e6:	e7c3      	b.n	8004670 <HAL_I2C_IsDeviceReady+0xc4>
    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	2320      	movs	r3, #32
 80046ea:	f886 3041 	strb.w	r3, [r6, #65]	@ 0x41
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046ee:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 80046f0:	f043 0320 	orr.w	r3, r3, #32
 80046f4:	6473      	str	r3, [r6, #68]	@ 0x44
    __HAL_UNLOCK(hi2c);
 80046f6:	2300      	movs	r3, #0
 80046f8:	f886 3040 	strb.w	r3, [r6, #64]	@ 0x40
    return HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
 80046fe:	e79d      	b.n	800463c <HAL_I2C_IsDeviceReady+0x90>
    return HAL_BUSY;
 8004700:	2002      	movs	r0, #2
 8004702:	e79b      	b.n	800463c <HAL_I2C_IsDeviceReady+0x90>
      return HAL_BUSY;
 8004704:	2002      	movs	r0, #2
 8004706:	e799      	b.n	800463c <HAL_I2C_IsDeviceReady+0x90>
    __HAL_LOCK(hi2c);
 8004708:	2002      	movs	r0, #2
 800470a:	e797      	b.n	800463c <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
 800470c:	2001      	movs	r0, #1
 800470e:	e795      	b.n	800463c <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
 8004710:	2001      	movs	r0, #1
 8004712:	e793      	b.n	800463c <HAL_I2C_IsDeviceReady+0x90>
          return HAL_ERROR;
 8004714:	2001      	movs	r0, #1
 8004716:	e791      	b.n	800463c <HAL_I2C_IsDeviceReady+0x90>

08004718 <HAL_I2C_EV_IRQHandler>:
{
 8004718:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800471a:	6803      	ldr	r3, [r0, #0]
 800471c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800471e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004720:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004722:	b103      	cbz	r3, 8004726 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004724:	4798      	blx	r3
}
 8004726:	bd08      	pop	{r3, pc}

08004728 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004728:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	2a20      	cmp	r2, #32
 8004732:	d123      	bne.n	800477c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004734:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004738:	2a01      	cmp	r2, #1
 800473a:	d021      	beq.n	8004780 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 800473c:	2201      	movs	r2, #1
 800473e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004742:	2224      	movs	r2, #36	@ 0x24
 8004744:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004748:	6800      	ldr	r0, [r0, #0]
 800474a:	6802      	ldr	r2, [r0, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	6802      	ldr	r2, [r0, #0]
 8004756:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800475a:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	6802      	ldr	r2, [r0, #0]
 8004760:	4311      	orrs	r1, r2
 8004762:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004764:	6819      	ldr	r1, [r3, #0]
 8004766:	680a      	ldr	r2, [r1, #0]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004774:	2000      	movs	r0, #0
 8004776:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 800477a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800477c:	2002      	movs	r0, #2
 800477e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004780:	2002      	movs	r0, #2
  }
}
 8004782:	4770      	bx	lr

08004784 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004784:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004786:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	2a20      	cmp	r2, #32
 800478e:	d121      	bne.n	80047d4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004790:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8004794:	2a01      	cmp	r2, #1
 8004796:	d01f      	beq.n	80047d8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004798:	2201      	movs	r2, #1
 800479a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800479e:	2224      	movs	r2, #36	@ 0x24
 80047a0:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047a4:	6800      	ldr	r0, [r0, #0]
 80047a6:	6802      	ldr	r2, [r0, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047b2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80047b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80047ba:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047bc:	6819      	ldr	r1, [r3, #0]
 80047be:	680a      	ldr	r2, [r1, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047cc:	2000      	movs	r0, #0
 80047ce:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 80047d2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2002      	movs	r0, #2
 80047d6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80047d8:	2002      	movs	r0, #2
  }
}
 80047da:	4770      	bx	lr

080047dc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047dc:	4a02      	ldr	r2, [pc, #8]	@ (80047e8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e4:	6013      	str	r3, [r2, #0]
}
 80047e6:	4770      	bx	lr
 80047e8:	58000400 	.word	0x58000400

080047ec <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80047ec:	b510      	push	{r4, lr}
 80047ee:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80047f0:	b9a0      	cbnz	r0, 800481c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80047f2:	4b0f      	ldr	r3, [pc, #60]	@ (8004830 <HAL_PWR_EnterSLEEPMode+0x44>)
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80047fa:	d10a      	bne.n	8004812 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80047fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004834 <HAL_PWR_EnterSLEEPMode+0x48>)
 80047fe:	6913      	ldr	r3, [r2, #16]
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004806:	2c01      	cmp	r4, #1
 8004808:	d010      	beq.n	800482c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800480a:	bf40      	sev
    __WFE();
 800480c:	bf20      	wfe
    __WFE();
 800480e:	bf20      	wfe
  }
}
 8004810:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004812:	f000 f821 	bl	8004858 <HAL_PWREx_DisableLowPowerRunMode>
 8004816:	2800      	cmp	r0, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_PWR_EnterSLEEPMode+0x10>
 800481a:	e7f9      	b.n	8004810 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800481c:	4b04      	ldr	r3, [pc, #16]	@ (8004830 <HAL_PWR_EnterSLEEPMode+0x44>)
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8004824:	d1ea      	bne.n	80047fc <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8004826:	f000 f80f 	bl	8004848 <HAL_PWREx_EnableLowPowerRunMode>
 800482a:	e7e7      	b.n	80047fc <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800482c:	bf30      	wfi
 800482e:	e7ef      	b.n	8004810 <HAL_PWR_EnterSLEEPMode+0x24>
 8004830:	58000400 	.word	0x58000400
 8004834:	e000ed00 	.word	0xe000ed00

08004838 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8004838:	4b02      	ldr	r3, [pc, #8]	@ (8004844 <HAL_PWREx_GetVoltageRange+0xc>)
 800483a:	6818      	ldr	r0, [r3, #0]
}
 800483c:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	58000400 	.word	0x58000400

08004848 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004848:	4a02      	ldr	r2, [pc, #8]	@ (8004854 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800484a:	6813      	ldr	r3, [r2, #0]
 800484c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004850:	6013      	str	r3, [r2, #0]
}
 8004852:	4770      	bx	lr
 8004854:	58000400 	.word	0x58000400

08004858 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004858:	4a0f      	ldr	r2, [pc, #60]	@ (8004898 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004860:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004862:	4b0e      	ldr	r3, [pc, #56]	@ (800489c <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2232      	movs	r2, #50	@ 0x32
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	4a0c      	ldr	r2, [pc, #48]	@ (80048a0 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004874:	e000      	b.n	8004878 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8004876:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004878:	4a07      	ldr	r2, [pc, #28]	@ (8004898 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800487a:	6952      	ldr	r2, [r2, #20]
 800487c:	f412 7f00 	tst.w	r2, #512	@ 0x200
 8004880:	d001      	beq.n	8004886 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f7      	bne.n	8004876 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004886:	4b04      	ldr	r3, [pc, #16]	@ (8004898 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800488e:	d101      	bne.n	8004894 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8004890:	2000      	movs	r0, #0
 8004892:	4770      	bx	lr
    return HAL_TIMEOUT;
 8004894:	2003      	movs	r0, #3
}
 8004896:	4770      	bx	lr
 8004898:	58000400 	.word	0x58000400
 800489c:	20000008 	.word	0x20000008
 80048a0:	431bde83 	.word	0x431bde83

080048a4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80048a4:	4a0c      	ldr	r2, [pc, #48]	@ (80048d8 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	f023 0307 	bic.w	r3, r3, #7
 80048ac:	f043 0302 	orr.w	r3, r3, #2
 80048b0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80048b2:	4a0a      	ldr	r2, [pc, #40]	@ (80048dc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80048b4:	6913      	ldr	r3, [r2, #16]
 80048b6:	f043 0304 	orr.w	r3, r3, #4
 80048ba:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80048bc:	2801      	cmp	r0, #1
 80048be:	d008      	beq.n	80048d2 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80048c0:	bf40      	sev
    __WFE();
 80048c2:	bf20      	wfe
    __WFE();
 80048c4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80048c6:	4a05      	ldr	r2, [pc, #20]	@ (80048dc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80048c8:	6913      	ldr	r3, [r2, #16]
 80048ca:	f023 0304 	bic.w	r3, r3, #4
 80048ce:	6113      	str	r3, [r2, #16]
}
 80048d0:	4770      	bx	lr
    __WFI();
 80048d2:	bf30      	wfi
 80048d4:	e7f7      	b.n	80048c6 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80048d6:	bf00      	nop
 80048d8:	58000400 	.word	0x58000400
 80048dc:	e000ed00 	.word	0xe000ed00

080048e0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80048e0:	b530      	push	{r4, r5, lr}
 80048e2:	b089      	sub	sp, #36	@ 0x24
 80048e4:	4604      	mov	r4, r0
 80048e6:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80048e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004994 <RCC_SetFlashLatency+0xb4>)
 80048ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80048ee:	9006      	str	r0, [sp, #24]
 80048f0:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80048f4:	f103 0208 	add.w	r2, r3, #8
 80048f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048fc:	9004      	str	r0, [sp, #16]
 80048fe:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8004902:	ad01      	add	r5, sp, #4
 8004904:	3310      	adds	r3, #16
 8004906:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800490a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800490e:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 8004912:	d007      	beq.n	8004924 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004914:	2300      	movs	r3, #0
 8004916:	e014      	b.n	8004942 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8004918:	aa08      	add	r2, sp, #32
 800491a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800491e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8004922:	e01e      	b.n	8004962 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004924:	2300      	movs	r3, #0
 8004926:	2b02      	cmp	r3, #2
 8004928:	d808      	bhi.n	800493c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800492a:	aa08      	add	r2, sp, #32
 800492c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8004930:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8004934:	42a2      	cmp	r2, r4
 8004936:	d2ef      	bcs.n	8004918 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004938:	3301      	adds	r3, #1
 800493a:	e7f4      	b.n	8004926 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800493c:	2500      	movs	r5, #0
 800493e:	e010      	b.n	8004962 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004940:	3301      	adds	r3, #1
 8004942:	2b02      	cmp	r3, #2
 8004944:	d80c      	bhi.n	8004960 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004946:	aa08      	add	r2, sp, #32
 8004948:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800494c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8004950:	42a2      	cmp	r2, r4
 8004952:	d3f5      	bcc.n	8004940 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004954:	aa08      	add	r2, sp, #32
 8004956:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800495a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800495e:	e000      	b.n	8004962 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004960:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004962:	4a0d      	ldr	r2, [pc, #52]	@ (8004998 <RCC_SetFlashLatency+0xb8>)
 8004964:	6813      	ldr	r3, [r2, #0]
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	432b      	orrs	r3, r5
 800496c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800496e:	f7fd f9d9 	bl	8001d24 <HAL_GetTick>
 8004972:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004974:	4b08      	ldr	r3, [pc, #32]	@ (8004998 <RCC_SetFlashLatency+0xb8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	42ab      	cmp	r3, r5
 800497e:	d006      	beq.n	800498e <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004980:	f7fd f9d0 	bl	8001d24 <HAL_GetTick>
 8004984:	1b00      	subs	r0, r0, r4
 8004986:	2802      	cmp	r0, #2
 8004988:	d9f4      	bls.n	8004974 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800498a:	2003      	movs	r0, #3
 800498c:	e000      	b.n	8004990 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800498e:	2000      	movs	r0, #0
}
 8004990:	b009      	add	sp, #36	@ 0x24
 8004992:	bd30      	pop	{r4, r5, pc}
 8004994:	0800d9c4 	.word	0x0800d9c4
 8004998:	58004000 	.word	0x58004000

0800499c <RCC_SetFlashLatencyFromMSIRange>:
{
 800499c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800499e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80049a2:	4b0c      	ldr	r3, [pc, #48]	@ (80049d4 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80049a4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80049b0:	f003 030f 	and.w	r3, r3, #15
 80049b4:	4a08      	ldr	r2, [pc, #32]	@ (80049d8 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80049b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049ba:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80049be:	f7ff ff3b 	bl	8004838 <HAL_PWREx_GetVoltageRange>
 80049c2:	4601      	mov	r1, r0
 80049c4:	4b05      	ldr	r3, [pc, #20]	@ (80049dc <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80049c6:	fba3 3404 	umull	r3, r4, r3, r4
 80049ca:	0ca0      	lsrs	r0, r4, #18
 80049cc:	f7ff ff88 	bl	80048e0 <RCC_SetFlashLatency>
}
 80049d0:	bd10      	pop	{r4, pc}
 80049d2:	bf00      	nop
 80049d4:	0800e334 	.word	0x0800e334
 80049d8:	0800e394 	.word	0x0800e394
 80049dc:	431bde83 	.word	0x431bde83

080049e0 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80049e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049e4:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80049ec:	f011 010c 	ands.w	r1, r1, #12
 80049f0:	d00a      	beq.n	8004a08 <HAL_RCC_GetSysClockFreq+0x28>
 80049f2:	290c      	cmp	r1, #12
 80049f4:	d006      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049f6:	2904      	cmp	r1, #4
 80049f8:	d047      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049fa:	2908      	cmp	r1, #8
 80049fc:	d03b      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80049fe:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8004a00:	4610      	mov	r0, r2
 8004a02:	e026      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d1f6      	bne.n	80049f6 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f013 0308 	ands.w	r3, r3, #8
 8004a12:	d00d      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x50>
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f013 0308 	ands.w	r3, r3, #8
 8004a1e:	d124      	bne.n	8004a6a <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004a20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a24:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004a28:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a2e:	e00e      	b.n	8004a4e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	f012 0f08 	tst.w	r2, #8
 8004a3a:	d112      	bne.n	8004a62 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a44:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8004a48:	4a26      	ldr	r2, [pc, #152]	@ (8004ae4 <HAL_RCC_GetSysClockFreq+0x104>)
 8004a4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a4e:	b1d1      	cbz	r1, 8004a86 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8004a50:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	d01a      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8004a60:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004a62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004a66:	6812      	ldr	r2, [r2, #0]
 8004a68:	e7ee      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x68>
 8004a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a6e:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004a70:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a74:	e7d8      	b.n	8004a28 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	f412 1280 	ands.w	r2, r2, #1048576	@ 0x100000
 8004a80:	d106      	bne.n	8004a90 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8004a82:	4819      	ldr	r0, [pc, #100]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a84:	e7e5      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8004a86:	4610      	mov	r0, r2
 8004a88:	e7e3      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004a8a:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8004a8c:	4817      	ldr	r0, [pc, #92]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a8e:	e7e0      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8004a90:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8004a92:	4816      	ldr	r0, [pc, #88]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a94:	e7dd      	b.n	8004a52 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xd8>
 8004aa4:	2b03      	cmp	r3, #3
 8004aa6:	d108      	bne.n	8004aba <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8004ab2:	d115      	bne.n	8004ae0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8004ab4:	4a0c      	ldr	r2, [pc, #48]	@ (8004ae8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8004ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004aba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004abe:	68cb      	ldr	r3, [r1, #12]
 8004ac0:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004ac4:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004ac8:	68cb      	ldr	r3, [r1, #12]
 8004aca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004ad4:	68c8      	ldr	r0, [r1, #12]
 8004ad6:	0f40      	lsrs	r0, r0, #29
 8004ad8:	3001      	adds	r0, #1
 8004ada:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8004ade:	e7bf      	b.n	8004a60 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8004ae0:	4a02      	ldr	r2, [pc, #8]	@ (8004aec <HAL_RCC_GetSysClockFreq+0x10c>)
 8004ae2:	e7ea      	b.n	8004aba <HAL_RCC_GetSysClockFreq+0xda>
 8004ae4:	0800e334 	.word	0x0800e334
 8004ae8:	01e84800 	.word	0x01e84800
 8004aec:	00f42400 	.word	0x00f42400

08004af0 <HAL_RCC_GetHCLKFreq>:
{
 8004af0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004af2:	f7ff ff75 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004b00:	4a02      	ldr	r2, [pc, #8]	@ (8004b0c <HAL_RCC_GetHCLKFreq+0x1c>)
 8004b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8004b06:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b0a:	bd08      	pop	{r3, pc}
 8004b0c:	0800e394 	.word	0x0800e394

08004b10 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f000 8311 	beq.w	8005138 <HAL_RCC_OscConfig+0x628>
{
 8004b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b18:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1e:	689d      	ldr	r5, [r3, #8]
 8004b20:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004b24:	68de      	ldr	r6, [r3, #12]
 8004b26:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b2a:	6803      	ldr	r3, [r0, #0]
 8004b2c:	f013 0f20 	tst.w	r3, #32
 8004b30:	d02a      	beq.n	8004b88 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	d065      	beq.n	8004c02 <HAL_RCC_OscConfig+0xf2>
 8004b36:	2d0c      	cmp	r5, #12
 8004b38:	d061      	beq.n	8004bfe <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b3a:	6a23      	ldr	r3, [r4, #32]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80bf 	beq.w	8004cc0 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004b42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	f043 0301 	orr.w	r3, r3, #1
 8004b4c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b4e:	f7fd f8e9 	bl	8001d24 <HAL_GetTick>
 8004b52:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f013 0f02 	tst.w	r3, #2
 8004b5e:	f000 80a7 	beq.w	8004cb0 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	f042 0208 	orr.w	r2, r2, #8
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004b74:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004b76:	430a      	orrs	r2, r1
 8004b78:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b7a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004b82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b86:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	f013 0f01 	tst.w	r3, #1
 8004b8e:	f000 80b5 	beq.w	8004cfc <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004b92:	2d08      	cmp	r5, #8
 8004b94:	f000 80ae 	beq.w	8004cf4 <HAL_RCC_OscConfig+0x1e4>
 8004b98:	2d0c      	cmp	r5, #12
 8004b9a:	f000 80a8 	beq.w	8004cee <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8004b9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004ba8:	68a1      	ldr	r1, [r4, #8]
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bae:	6863      	ldr	r3, [r4, #4]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bb4:	f000 80c4 	beq.w	8004d40 <HAL_RCC_OscConfig+0x230>
 8004bb8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004bbc:	f000 80c5 	beq.w	8004d4a <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004bca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 8004bd2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bd4:	6863      	ldr	r3, [r4, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 80c2 	beq.w	8004d60 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8004bdc:	f7fd f8a2 	bl	8001d24 <HAL_GetTick>
 8004be0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004bec:	f040 8086 	bne.w	8004cfc <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf0:	f7fd f898 	bl	8001d24 <HAL_GetTick>
 8004bf4:	1bc0      	subs	r0, r0, r7
 8004bf6:	2864      	cmp	r0, #100	@ 0x64
 8004bf8:	d9f3      	bls.n	8004be2 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8004bfa:	2003      	movs	r0, #3
 8004bfc:	e2a9      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bfe:	2e01      	cmp	r6, #1
 8004c00:	d19b      	bne.n	8004b3a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c02:	6a23      	ldr	r3, [r4, #32]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 8299 	beq.w	800513c <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c0a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f013 0f08 	tst.w	r3, #8
 8004c16:	d029      	beq.n	8004c6c <HAL_RCC_OscConfig+0x15c>
 8004c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c22:	4298      	cmp	r0, r3
 8004c24:	d92a      	bls.n	8004c7c <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c26:	f7ff feb9 	bl	800499c <RCC_SetFlashLatencyFromMSIRange>
 8004c2a:	2800      	cmp	r0, #0
 8004c2c:	f040 8288 	bne.w	8005140 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	f042 0208 	orr.w	r2, r2, #8
 8004c3a:	601a      	str	r2, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004c42:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004c44:	430a      	orrs	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c48:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004c50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c54:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004c56:	f7ff ff4b 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 8004c5a:	4bba      	ldr	r3, [pc, #744]	@ (8004f44 <HAL_RCC_OscConfig+0x434>)
 8004c5c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004c5e:	4bba      	ldr	r3, [pc, #744]	@ (8004f48 <HAL_RCC_OscConfig+0x438>)
 8004c60:	6818      	ldr	r0, [r3, #0]
 8004c62:	f7fe fbbd 	bl	80033e0 <HAL_InitTick>
        if (status != HAL_OK)
 8004c66:	2800      	cmp	r0, #0
 8004c68:	d08e      	beq.n	8004b88 <HAL_RCC_OscConfig+0x78>
 8004c6a:	e272      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c7a:	e7d2      	b.n	8004c22 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	f042 0208 	orr.w	r2, r2, #8
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004c8e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8004c90:	430a      	orrs	r2, r1
 8004c92:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c94:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004c9c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004ca0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ca2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8004ca4:	f7ff fe7a 	bl	800499c <RCC_SetFlashLatencyFromMSIRange>
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d0d4      	beq.n	8004c56 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8004cac:	2001      	movs	r0, #1
 8004cae:	e250      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cb0:	f7fd f838 	bl	8001d24 <HAL_GetTick>
 8004cb4:	1bc0      	subs	r0, r0, r7
 8004cb6:	2802      	cmp	r0, #2
 8004cb8:	f67f af4c 	bls.w	8004b54 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8004cbc:	2003      	movs	r0, #3
 8004cbe:	e248      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004cc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cc4:	6813      	ldr	r3, [r2, #0]
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ccc:	f7fd f82a 	bl	8001d24 <HAL_GetTick>
 8004cd0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004cd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f013 0f02 	tst.w	r3, #2
 8004cdc:	f43f af54 	beq.w	8004b88 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ce0:	f7fd f820 	bl	8001d24 <HAL_GetTick>
 8004ce4:	1bc0      	subs	r0, r0, r7
 8004ce6:	2802      	cmp	r0, #2
 8004ce8:	d9f3      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8004cea:	2003      	movs	r0, #3
 8004cec:	e231      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cee:	2e03      	cmp	r6, #3
 8004cf0:	f47f af55 	bne.w	8004b9e <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 8224 	beq.w	8005144 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	f013 0f02 	tst.w	r3, #2
 8004d02:	d056      	beq.n	8004db2 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d04:	2d04      	cmp	r5, #4
 8004d06:	d03d      	beq.n	8004d84 <HAL_RCC_OscConfig+0x274>
 8004d08:	2d0c      	cmp	r5, #12
 8004d0a:	d039      	beq.n	8004d80 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d0c:	6923      	ldr	r3, [r4, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	f000 808a 	beq.w	8004e28 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d20:	f7fd f800 	bl	8001d24 <HAL_GetTick>
 8004d24:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004d30:	d136      	bne.n	8004da0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d32:	f7fc fff7 	bl	8001d24 <HAL_GetTick>
 8004d36:	1b80      	subs	r0, r0, r6
 8004d38:	2802      	cmp	r0, #2
 8004d3a:	d9f4      	bls.n	8004d26 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8004d3c:	2003      	movs	r0, #3
 8004d3e:	e208      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d40:	6813      	ldr	r3, [r2, #0]
 8004d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d46:	6013      	str	r3, [r2, #0]
}
 8004d48:	e744      	b.n	8004bd4 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 8004d54:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004d5c:	601a      	str	r2, [r3, #0]
}
 8004d5e:	e739      	b.n	8004bd4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8004d60:	f7fc ffe0 	bl	8001d24 <HAL_GetTick>
 8004d64:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004d70:	d0c4      	beq.n	8004cfc <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d72:	f7fc ffd7 	bl	8001d24 <HAL_GetTick>
 8004d76:	1bc0      	subs	r0, r0, r7
 8004d78:	2864      	cmp	r0, #100	@ 0x64
 8004d7a:	d9f4      	bls.n	8004d66 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8004d7c:	2003      	movs	r0, #3
 8004d7e:	e1e8      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004d80:	2e02      	cmp	r6, #2
 8004d82:	d1c3      	bne.n	8004d0c <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d84:	6923      	ldr	r3, [r4, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 81de 	beq.w	8005148 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004d8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d92:	6853      	ldr	r3, [r2, #4]
 8004d94:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004d98:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d9c:	6053      	str	r3, [r2, #4]
}
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004da2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004da6:	6853      	ldr	r3, [r2, #4]
 8004da8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004dac:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004db0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	f013 0f08 	tst.w	r3, #8
 8004db8:	d07e      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dba:	69a3      	ldr	r3, [r4, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d062      	beq.n	8004e86 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8004dc8:	69e1      	ldr	r1, [r4, #28]
 8004dca:	f003 0210 	and.w	r2, r3, #16
 8004dce:	4291      	cmp	r1, r2
 8004dd0:	d011      	beq.n	8004df6 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8004dd2:	f003 0203 	and.w	r2, r3, #3
 8004dd6:	2a02      	cmp	r2, #2
 8004dd8:	f000 81b8 	beq.w	800514c <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8004ddc:	f013 0f01 	tst.w	r3, #1
 8004de0:	d138      	bne.n	8004e54 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8004de2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004de6:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004dea:	f023 0310 	bic.w	r3, r3, #16
 8004dee:	69e1      	ldr	r1, [r4, #28]
 8004df0:	430b      	orrs	r3, r1
 8004df2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004df6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dfa:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004e06:	f7fc ff8d 	bl	8001d24 <HAL_GetTick>
 8004e0a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e14:	f013 0f02 	tst.w	r3, #2
 8004e18:	d14e      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e1a:	f7fc ff83 	bl	8001d24 <HAL_GetTick>
 8004e1e:	1b80      	subs	r0, r0, r6
 8004e20:	2811      	cmp	r0, #17
 8004e22:	d9f3      	bls.n	8004e0c <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8004e24:	2003      	movs	r0, #3
 8004e26:	e194      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004e28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e2c:	6813      	ldr	r3, [r2, #0]
 8004e2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e32:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e34:	f7fc ff76 	bl	8001d24 <HAL_GetTick>
 8004e38:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004e44:	d0b5      	beq.n	8004db2 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e46:	f7fc ff6d 	bl	8001d24 <HAL_GetTick>
 8004e4a:	1b80      	subs	r0, r0, r6
 8004e4c:	2802      	cmp	r0, #2
 8004e4e:	d9f4      	bls.n	8004e3a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8004e50:	2003      	movs	r0, #3
 8004e52:	e17e      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e58:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004e5c:	f023 0301 	bic.w	r3, r3, #1
 8004e60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
          tickstart = HAL_GetTick();
 8004e64:	f7fc ff5e 	bl	8001d24 <HAL_GetTick>
 8004e68:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e72:	f013 0f02 	tst.w	r3, #2
 8004e76:	d0b4      	beq.n	8004de2 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e78:	f7fc ff54 	bl	8001d24 <HAL_GetTick>
 8004e7c:	1b80      	subs	r0, r0, r6
 8004e7e:	2811      	cmp	r0, #17
 8004e80:	d9f3      	bls.n	8004e6a <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8004e82:	2003      	movs	r0, #3
 8004e84:	e165      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004e86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e8a:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004e8e:	f023 0301 	bic.w	r3, r3, #1
 8004e92:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004e96:	f7fc ff45 	bl	8001d24 <HAL_GetTick>
 8004e9a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea4:	f013 0f02 	tst.w	r3, #2
 8004ea8:	d006      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eaa:	f7fc ff3b 	bl	8001d24 <HAL_GetTick>
 8004eae:	1b80      	subs	r0, r0, r6
 8004eb0:	2811      	cmp	r0, #17
 8004eb2:	d9f3      	bls.n	8004e9c <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8004eb4:	2003      	movs	r0, #3
 8004eb6:	e14c      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	f013 0f04 	tst.w	r3, #4
 8004ebe:	f000 80b8 	beq.w	8005032 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004ec2:	4b22      	ldr	r3, [pc, #136]	@ (8004f4c <HAL_RCC_OscConfig+0x43c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004eca:	d110      	bne.n	8004eee <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 8004ecc:	f7ff fc86 	bl	80047dc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8004ed0:	f7fc ff28 	bl	8001d24 <HAL_GetTick>
 8004ed4:	4606      	mov	r6, r0
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <HAL_RCC_OscConfig+0x43c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004ede:	d106      	bne.n	8004eee <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee0:	f7fc ff20 	bl	8001d24 <HAL_GetTick>
 8004ee4:	1b80      	subs	r0, r0, r6
 8004ee6:	2802      	cmp	r0, #2
 8004ee8:	d9f5      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 8004eea:	2003      	movs	r0, #3
 8004eec:	e131      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004eee:	68e3      	ldr	r3, [r4, #12]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d068      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8004ef4:	2b85      	cmp	r3, #133	@ 0x85
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8004ef8:	2b05      	cmp	r3, #5
 8004efa:	d107      	bne.n	8004f0c <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004efc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f00:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f04:	f043 0304 	orr.w	r3, r3, #4
 8004f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004f0c:	f7fc ff0a 	bl	8001d24 <HAL_GetTick>
 8004f10:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f16:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f1a:	f043 0301 	orr.w	r3, r3, #1
 8004f1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2a:	f013 0f02 	tst.w	r3, #2
 8004f2e:	d10f      	bne.n	8004f50 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f30:	f7fc fef8 	bl	8001d24 <HAL_GetTick>
 8004f34:	1b80      	subs	r0, r0, r6
 8004f36:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f3a:	4298      	cmp	r0, r3
 8004f3c:	d9f1      	bls.n	8004f22 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 8004f3e:	2003      	movs	r0, #3
 8004f40:	e107      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
 8004f42:	bf00      	nop
 8004f44:	20000008 	.word	0x20000008
 8004f48:	20000010 	.word	0x20000010
 8004f4c:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8004f50:	68e3      	ldr	r3, [r4, #12]
 8004f52:	2b81      	cmp	r3, #129	@ 0x81
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8004f56:	2b85      	cmp	r3, #133	@ 0x85
 8004f58:	d11a      	bne.n	8004f90 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 8004f5a:	f7fc fee3 	bl	8001d24 <HAL_GetTick>
 8004f5e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f64:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f78:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004f7c:	d159      	bne.n	8005032 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f7e:	f7fc fed1 	bl	8001d24 <HAL_GetTick>
 8004f82:	1b80      	subs	r0, r0, r6
 8004f84:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f88:	4298      	cmp	r0, r3
 8004f8a:	d9f1      	bls.n	8004f70 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 8004f8c:	2003      	movs	r0, #3
 8004f8e:	e0e0      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8004f90:	f7fc fec8 	bl	8001d24 <HAL_GetTick>
 8004f94:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f9a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fa2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fae:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004fb2:	d03e      	beq.n	8005032 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb4:	f7fc feb6 	bl	8001d24 <HAL_GetTick>
 8004fb8:	1b80      	subs	r0, r0, r6
 8004fba:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004fbe:	4298      	cmp	r0, r3
 8004fc0:	d9f1      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8004fc2:	2003      	movs	r0, #3
 8004fc4:	e0c5      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8004fc6:	f7fc fead 	bl	8001d24 <HAL_GetTick>
 8004fca:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004fcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004fd0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fe4:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8004fe8:	d008      	beq.n	8004ffc <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fea:	f7fc fe9b 	bl	8001d24 <HAL_GetTick>
 8004fee:	1b80      	subs	r0, r0, r6
 8004ff0:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ff4:	4298      	cmp	r0, r3
 8004ff6:	d9f1      	bls.n	8004fdc <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8004ff8:	2003      	movs	r0, #3
 8004ffa:	e0aa      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8004ffc:	f7fc fe92 	bl	8001d24 <HAL_GetTick>
 8005000:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005002:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005006:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501a:	f013 0f02 	tst.w	r3, #2
 800501e:	d008      	beq.n	8005032 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f7fc fe80 	bl	8001d24 <HAL_GetTick>
 8005024:	1b80      	subs	r0, r0, r6
 8005026:	f241 3388 	movw	r3, #5000	@ 0x1388
 800502a:	4298      	cmp	r0, r3
 800502c:	d9f1      	bls.n	8005012 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800502e:	2003      	movs	r0, #3
 8005030:	e08f      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005032:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 808b 	beq.w	8005150 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800503a:	2d0c      	cmp	r5, #12
 800503c:	d060      	beq.n	8005100 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800503e:	2b02      	cmp	r3, #2
 8005040:	d016      	beq.n	8005070 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005042:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005046:	6813      	ldr	r3, [r2, #0]
 8005048:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800504e:	f7fc fe69 	bl	8001d24 <HAL_GetTick>
 8005052:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800505e:	d148      	bne.n	80050f2 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005060:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005064:	68d1      	ldr	r1, [r2, #12]
 8005066:	4b41      	ldr	r3, [pc, #260]	@ (800516c <HAL_RCC_OscConfig+0x65c>)
 8005068:	400b      	ands	r3, r1
 800506a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800506c:	2000      	movs	r0, #0
 800506e:	e070      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005070:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005074:	6813      	ldr	r3, [r2, #0]
 8005076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800507a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800507c:	f7fc fe52 	bl	8001d24 <HAL_GetTick>
 8005080:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800508c:	d12a      	bne.n	80050e4 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800508e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005092:	68d3      	ldr	r3, [r2, #12]
 8005094:	4936      	ldr	r1, [pc, #216]	@ (8005170 <HAL_RCC_OscConfig+0x660>)
 8005096:	4019      	ands	r1, r3
 8005098:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800509a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800509c:	4303      	orrs	r3, r0
 800509e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80050a0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80050a4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80050a6:	4303      	orrs	r3, r0
 80050a8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80050aa:	4303      	orrs	r3, r0
 80050ac:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80050ae:	4303      	orrs	r3, r0
 80050b0:	4319      	orrs	r1, r3
 80050b2:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80050b4:	6813      	ldr	r3, [r2, #0]
 80050b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ba:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050bc:	68d3      	ldr	r3, [r2, #12]
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 80050c4:	f7fc fe2e 	bl	8001d24 <HAL_GetTick>
 80050c8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80050ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80050d4:	d13e      	bne.n	8005154 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d6:	f7fc fe25 	bl	8001d24 <HAL_GetTick>
 80050da:	1b00      	subs	r0, r0, r4
 80050dc:	280a      	cmp	r0, #10
 80050de:	d9f4      	bls.n	80050ca <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 80050e0:	2003      	movs	r0, #3
 80050e2:	e036      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e4:	f7fc fe1e 	bl	8001d24 <HAL_GetTick>
 80050e8:	1b40      	subs	r0, r0, r5
 80050ea:	280a      	cmp	r0, #10
 80050ec:	d9c9      	bls.n	8005082 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 80050ee:	2003      	movs	r0, #3
 80050f0:	e02f      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f2:	f7fc fe17 	bl	8001d24 <HAL_GetTick>
 80050f6:	1b00      	subs	r0, r0, r4
 80050f8:	280a      	cmp	r0, #10
 80050fa:	d9ab      	bls.n	8005054 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 80050fc:	2003      	movs	r0, #3
 80050fe:	e028      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005100:	2b01      	cmp	r3, #1
 8005102:	d029      	beq.n	8005158 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8005104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005108:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800510a:	f003 0103 	and.w	r1, r3, #3
 800510e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005110:	4291      	cmp	r1, r2
 8005112:	d123      	bne.n	800515c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005114:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800511a:	428a      	cmp	r2, r1
 800511c:	d120      	bne.n	8005160 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800511e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005122:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005124:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005128:	d11c      	bne.n	8005164 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800512a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 800512e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8005130:	4293      	cmp	r3, r2
 8005132:	d119      	bne.n	8005168 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8005134:	2000      	movs	r0, #0
 8005136:	e00c      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005138:	2001      	movs	r0, #1
}
 800513a:	4770      	bx	lr
        return HAL_ERROR;
 800513c:	2001      	movs	r0, #1
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8005140:	2001      	movs	r0, #1
 8005142:	e006      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005144:	2001      	movs	r0, #1
 8005146:	e004      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005148:	2001      	movs	r0, #1
 800514a:	e002      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800514c:	2001      	movs	r0, #1
 800514e:	e000      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8005150:	2000      	movs	r0, #0
}
 8005152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005154:	2000      	movs	r0, #0
 8005156:	e7fc      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005158:	2001      	movs	r0, #1
 800515a:	e7fa      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800515c:	2001      	movs	r0, #1
 800515e:	e7f8      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
 8005160:	2001      	movs	r0, #1
 8005162:	e7f6      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
 8005164:	2001      	movs	r0, #1
 8005166:	e7f4      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
 8005168:	2001      	movs	r0, #1
 800516a:	e7f2      	b.n	8005152 <HAL_RCC_OscConfig+0x642>
 800516c:	eefefffc 	.word	0xeefefffc
 8005170:	11c1808c 	.word	0x11c1808c

08005174 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005174:	2800      	cmp	r0, #0
 8005176:	f000 8127 	beq.w	80053c8 <HAL_RCC_ClockConfig+0x254>
{
 800517a:	b570      	push	{r4, r5, r6, lr}
 800517c:	460c      	mov	r4, r1
 800517e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005180:	4b93      	ldr	r3, [pc, #588]	@ (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	428b      	cmp	r3, r1
 800518a:	d32d      	bcc.n	80051e8 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800518c:	682b      	ldr	r3, [r5, #0]
 800518e:	f013 0f02 	tst.w	r3, #2
 8005192:	d13f      	bne.n	8005214 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	f013 0f20 	tst.w	r3, #32
 800519a:	d153      	bne.n	8005244 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80051a2:	d16a      	bne.n	800527a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	f013 0f04 	tst.w	r3, #4
 80051aa:	f040 8083 	bne.w	80052b4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ae:	682b      	ldr	r3, [r5, #0]
 80051b0:	f013 0f08 	tst.w	r3, #8
 80051b4:	f040 8097 	bne.w	80052e6 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b8:	682b      	ldr	r3, [r5, #0]
 80051ba:	f013 0f01 	tst.w	r3, #1
 80051be:	f000 80de 	beq.w	800537e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c2:	686b      	ldr	r3, [r5, #4]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	f000 80a8 	beq.w	800531a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	f000 80ad 	beq.w	800532a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f040 80b2 	bne.w	800533a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80051d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051da:	6812      	ldr	r2, [r2, #0]
 80051dc:	f012 0f02 	tst.w	r2, #2
 80051e0:	f040 80b1 	bne.w	8005346 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 80051e4:	2001      	movs	r0, #1
 80051e6:	e0ee      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e8:	4a79      	ldr	r2, [pc, #484]	@ (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	f023 0307 	bic.w	r3, r3, #7
 80051f0:	430b      	orrs	r3, r1
 80051f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80051f4:	f7fc fd96 	bl	8001d24 <HAL_GetTick>
 80051f8:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fa:	4b75      	ldr	r3, [pc, #468]	@ (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	42a3      	cmp	r3, r4
 8005204:	d0c2      	beq.n	800518c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005206:	f7fc fd8d 	bl	8001d24 <HAL_GetTick>
 800520a:	1b80      	subs	r0, r0, r6
 800520c:	2802      	cmp	r0, #2
 800520e:	d9f4      	bls.n	80051fa <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005210:	2003      	movs	r0, #3
 8005212:	e0d8      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005214:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005216:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800521a:	688a      	ldr	r2, [r1, #8]
 800521c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005220:	4313      	orrs	r3, r2
 8005222:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005224:	f7fc fd7e 	bl	8001d24 <HAL_GetTick>
 8005228:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800522a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005234:	d1ae      	bne.n	8005194 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005236:	f7fc fd75 	bl	8001d24 <HAL_GetTick>
 800523a:	1b80      	subs	r0, r0, r6
 800523c:	2802      	cmp	r0, #2
 800523e:	d9f4      	bls.n	800522a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005240:	2003      	movs	r0, #3
 8005242:	e0c0      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005244:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005246:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800524a:	f8d1 2108 	ldr.w	r2, [r1, #264]	@ 0x108
 800524e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8005258:	f7fc fd64 	bl	8001d24 <HAL_GetTick>
 800525c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005262:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005266:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800526a:	d197      	bne.n	800519c <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800526c:	f7fc fd5a 	bl	8001d24 <HAL_GetTick>
 8005270:	1b80      	subs	r0, r0, r6
 8005272:	2802      	cmp	r0, #2
 8005274:	d9f3      	bls.n	800525e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8005276:	2003      	movs	r0, #3
 8005278:	e0a5      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800527a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800527c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005280:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
 8005284:	f023 030f 	bic.w	r3, r3, #15
 8005288:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 800528c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
    tickstart = HAL_GetTick();
 8005290:	f7fc fd48 	bl	8001d24 <HAL_GetTick>
 8005294:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800529a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800529e:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80052a2:	f47f af7f 	bne.w	80051a4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052a6:	f7fc fd3d 	bl	8001d24 <HAL_GetTick>
 80052aa:	1b80      	subs	r0, r0, r6
 80052ac:	2802      	cmp	r0, #2
 80052ae:	d9f2      	bls.n	8005296 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80052b0:	2003      	movs	r0, #3
 80052b2:	e088      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80052b4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80052b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052ba:	688a      	ldr	r2, [r1, #8]
 80052bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80052c0:	4313      	orrs	r3, r2
 80052c2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80052c4:	f7fc fd2e 	bl	8001d24 <HAL_GetTick>
 80052c8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80052ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80052d4:	f47f af6b 	bne.w	80051ae <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052d8:	f7fc fd24 	bl	8001d24 <HAL_GetTick>
 80052dc:	1b80      	subs	r0, r0, r6
 80052de:	2802      	cmp	r0, #2
 80052e0:	d9f3      	bls.n	80052ca <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 80052e2:	2003      	movs	r0, #3
 80052e4:	e06f      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80052e6:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80052e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052ec:	6893      	ldr	r3, [r2, #8]
 80052ee:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80052f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80052f6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80052f8:	f7fc fd14 	bl	8001d24 <HAL_GetTick>
 80052fc:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80052fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8005308:	f47f af56 	bne.w	80051b8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800530c:	f7fc fd0a 	bl	8001d24 <HAL_GetTick>
 8005310:	1b80      	subs	r0, r0, r6
 8005312:	2802      	cmp	r0, #2
 8005314:	d9f3      	bls.n	80052fe <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8005316:	2003      	movs	r0, #3
 8005318:	e055      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800531a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005324:	d10f      	bne.n	8005346 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005326:	2001      	movs	r0, #1
 8005328:	e04d      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800532a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8005334:	d107      	bne.n	8005346 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005336:	2001      	movs	r0, #1
 8005338:	e045      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800533a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800533e:	6812      	ldr	r2, [r2, #0]
 8005340:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8005344:	d042      	beq.n	80053cc <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800534a:	688a      	ldr	r2, [r1, #8]
 800534c:	f022 0203 	bic.w	r2, r2, #3
 8005350:	4313      	orrs	r3, r2
 8005352:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005354:	f7fc fce6 	bl	8001d24 <HAL_GetTick>
 8005358:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005364:	686a      	ldr	r2, [r5, #4]
 8005366:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800536a:	d008      	beq.n	800537e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800536c:	f7fc fcda 	bl	8001d24 <HAL_GetTick>
 8005370:	1b80      	subs	r0, r0, r6
 8005372:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005376:	4298      	cmp	r0, r3
 8005378:	d9ef      	bls.n	800535a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800537a:	2003      	movs	r0, #3
 800537c:	e023      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800537e:	4b14      	ldr	r3, [pc, #80]	@ (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	42a3      	cmp	r3, r4
 8005388:	d915      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800538a:	4a11      	ldr	r2, [pc, #68]	@ (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 800538c:	6813      	ldr	r3, [r2, #0]
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	4323      	orrs	r3, r4
 8005394:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005396:	f7fc fcc5 	bl	8001d24 <HAL_GetTick>
 800539a:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539c:	4b0c      	ldr	r3, [pc, #48]	@ (80053d0 <HAL_RCC_ClockConfig+0x25c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	42a3      	cmp	r3, r4
 80053a6:	d006      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053a8:	f7fc fcbc 	bl	8001d24 <HAL_GetTick>
 80053ac:	1b40      	subs	r0, r0, r5
 80053ae:	2802      	cmp	r0, #2
 80053b0:	d9f4      	bls.n	800539c <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 80053b2:	2003      	movs	r0, #3
 80053b4:	e007      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053b6:	f7ff fb9b 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
 80053ba:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <HAL_RCC_ClockConfig+0x260>)
 80053bc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80053be:	4b06      	ldr	r3, [pc, #24]	@ (80053d8 <HAL_RCC_ClockConfig+0x264>)
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	f7fe f80d 	bl	80033e0 <HAL_InitTick>
}
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80053c8:	2001      	movs	r0, #1
}
 80053ca:	4770      	bx	lr
        return HAL_ERROR;
 80053cc:	2001      	movs	r0, #1
 80053ce:	e7fa      	b.n	80053c6 <HAL_RCC_ClockConfig+0x252>
 80053d0:	58004000 	.word	0x58004000
 80053d4:	20000008 	.word	0x20000008
 80053d8:	20000010 	.word	0x20000010

080053dc <HAL_RCC_GetPCLK1Freq>:
{
 80053dc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053de:	f7ff fb87 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80053ec:	4a02      	ldr	r2, [pc, #8]	@ (80053f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80053ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80053f2:	40d8      	lsrs	r0, r3
 80053f4:	bd08      	pop	{r3, pc}
 80053f6:	bf00      	nop
 80053f8:	0800e374 	.word	0x0800e374

080053fc <HAL_RCC_GetPCLK2Freq>:
{
 80053fc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80053fe:	f7ff fb77 	bl	8004af0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800540c:	4a02      	ldr	r2, [pc, #8]	@ (8005418 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800540e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005412:	40d8      	lsrs	r0, r3
 8005414:	bd08      	pop	{r3, pc}
 8005416:	bf00      	nop
 8005418:	0800e374 	.word	0x0800e374

0800541c <LL_RCC_SetI2CClockSource>:
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800541c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005420:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005424:	0902      	lsrs	r2, r0, #4
 8005426:	f402 227f 	and.w	r2, r2, #1044480	@ 0xff000
 800542a:	ea23 0302 	bic.w	r3, r3, r2
 800542e:	0100      	lsls	r0, r0, #4
 8005430:	f400 207f 	and.w	r0, r0, #1044480	@ 0xff000
 8005434:	4303      	orrs	r3, r0
 8005436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800543a:	4770      	bx	lr

0800543c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005440:	6803      	ldr	r3, [r0, #0]
 8005442:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005446:	f040 80aa 	bne.w	800559e <HAL_RCCEx_PeriphCLKConfig+0x162>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800544a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	f013 0f01 	tst.w	r3, #1
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005454:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005456:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800545a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800545e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005462:	b292      	uxth	r2, r2
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	f013 0f02 	tst.w	r3, #2
 8005470:	d00a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005472:	68a2      	ldr	r2, [r4, #8]
 8005474:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005478:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 800547c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005480:	b292      	uxth	r2, r2
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	f013 0f20 	tst.w	r3, #32
 800548e:	d009      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005490:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005492:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005496:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800549a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	f413 7f00 	tst.w	r3, #512	@ 0x200
 80054aa:	d00c      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ac:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80054ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80054b6:	0c02      	lsrs	r2, r0, #16
 80054b8:	0412      	lsls	r2, r2, #16
 80054ba:	ea23 0302 	bic.w	r3, r3, r2
 80054be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80054c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80054cc:	d00c      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80054ce:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80054d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054d4:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80054d8:	0c02      	lsrs	r2, r0, #16
 80054da:	0412      	lsls	r2, r2, #16
 80054dc:	ea23 0302 	bic.w	r3, r3, r2
 80054e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80054e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80054e8:	6823      	ldr	r3, [r4, #0]
 80054ea:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80054ee:	d00c      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80054f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80054f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054f6:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80054fa:	0c02      	lsrs	r2, r0, #16
 80054fc:	0412      	lsls	r2, r2, #16
 80054fe:	ea23 0302 	bic.w	r3, r3, r2
 8005502:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005510:	f040 809d 	bne.w	800564e <HAL_RCCEx_PeriphCLKConfig+0x212>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800551a:	f040 809c 	bne.w	8005656 <HAL_RCCEx_PeriphCLKConfig+0x21a>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005524:	f040 809b 	bne.w	800565e <HAL_RCCEx_PeriphCLKConfig+0x222>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	f013 0f10 	tst.w	r3, #16
 800552e:	d00e      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005530:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005532:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005536:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800553a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800553e:	4313      	orrs	r3, r2
 8005540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005544:	68e3      	ldr	r3, [r4, #12]
 8005546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800554a:	f000 808c 	beq.w	8005666 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 8005554:	d00f      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005556:	6b23      	ldr	r3, [r4, #48]	@ 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005558:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800555c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005560:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800556a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800556c:	b91b      	cbnz	r3, 8005576 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800556e:	68cb      	ldr	r3, [r1, #12]
 8005570:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005574:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 800557c:	d00d      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800557e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005580:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005584:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005588:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005592:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005598:	d06a      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x234>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 800559a:	4628      	mov	r0, r5
 800559c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 800559e:	f7ff f91d 	bl	80047dc <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 80055a2:	f7fc fbbf 	bl	8001d24 <HAL_GetTick>
 80055a6:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80055a8:	4b34      	ldr	r3, [pc, #208]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80055b0:	d106      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055b2:	f7fc fbb7 	bl	8001d24 <HAL_GetTick>
 80055b6:	1b40      	subs	r0, r0, r5
 80055b8:	2802      	cmp	r0, #2
 80055ba:	d9f5      	bls.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
        ret = HAL_TIMEOUT;
 80055bc:	2503      	movs	r5, #3
 80055be:	e000      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80055c0:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	f47f af42 	bne.w	800544c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80055c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80055d4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d024      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055de:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80055e2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055e6:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80055ea:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 80055ee:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80055f2:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 80055f6:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80055fa:	f8c3 1090 	str.w	r1, [r3, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 80055fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005602:	f012 0f02 	tst.w	r2, #2
 8005606:	d10f      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      if (ret == HAL_OK)
 8005608:	2d00      	cmp	r5, #0
 800560a:	f47f af1f 	bne.w	800544c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005610:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005614:	f8d1 2090 	ldr.w	r2, [r1, #144]	@ 0x90
 8005618:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8005622:	e713      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8005624:	2200      	movs	r2, #0
 8005626:	e7ec      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
        tickstart = HAL_GetTick();
 8005628:	f7fc fb7c 	bl	8001d24 <HAL_GetTick>
 800562c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800562e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005636:	f013 0f02 	tst.w	r3, #2
 800563a:	d1e5      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800563c:	f7fc fb72 	bl	8001d24 <HAL_GetTick>
 8005640:	1b80      	subs	r0, r0, r6
 8005642:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005646:	4298      	cmp	r0, r3
 8005648:	d9f1      	bls.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x1f2>
            ret = HAL_TIMEOUT;
 800564a:	2503      	movs	r5, #3
 800564c:	e7dc      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564e:	6960      	ldr	r0, [r4, #20]
 8005650:	f7ff fee4 	bl	800541c <LL_RCC_SetI2CClockSource>
 8005654:	e75e      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005656:	69a0      	ldr	r0, [r4, #24]
 8005658:	f7ff fee0 	bl	800541c <LL_RCC_SetI2CClockSource>
 800565c:	e75f      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800565e:	69e0      	ldr	r0, [r4, #28]
 8005660:	f7ff fedc 	bl	800541c <LL_RCC_SetI2CClockSource>
 8005664:	e760      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005666:	68cb      	ldr	r3, [r1, #12]
 8005668:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800566c:	60cb      	str	r3, [r1, #12]
 800566e:	e76e      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005670:	68cb      	ldr	r3, [r1, #12]
 8005672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005676:	60cb      	str	r3, [r1, #12]
 8005678:	e78f      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800567a:	bf00      	nop
 800567c:	58000400 	.word	0x58000400

08005680 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005680:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005682:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8005686:	2a01      	cmp	r2, #1
 8005688:	d035      	beq.n	80056f6 <HAL_RTC_DeactivateAlarm+0x76>
 800568a:	2201      	movs	r2, #1
 800568c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005690:	2202      	movs	r2, #2
 8005692:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005696:	4a19      	ldr	r2, [pc, #100]	@ (80056fc <HAL_RTC_DeactivateAlarm+0x7c>)
 8005698:	20ca      	movs	r0, #202	@ 0xca
 800569a:	6250      	str	r0, [r2, #36]	@ 0x24
 800569c:	2053      	movs	r0, #83	@ 0x53
 800569e:	6250      	str	r0, [r2, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80056a0:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80056a4:	d018      	beq.n	80056d8 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80056a6:	4a15      	ldr	r2, [pc, #84]	@ (80056fc <HAL_RTC_DeactivateAlarm+0x7c>)
 80056a8:	6991      	ldr	r1, [r2, #24]
 80056aa:	f421 5108 	bic.w	r1, r1, #8704	@ 0x2200
 80056ae:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80056b0:	6cd1      	ldr	r1, [r2, #76]	@ 0x4c
 80056b2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80056b6:	64d1      	str	r1, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80056b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056ba:	f021 0102 	bic.w	r1, r1, #2
 80056be:	6319      	str	r1, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80056c0:	2102      	movs	r1, #2
 80056c2:	65d1      	str	r1, [r2, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056c4:	4a0d      	ldr	r2, [pc, #52]	@ (80056fc <HAL_RTC_DeactivateAlarm+0x7c>)
 80056c6:	21ff      	movs	r1, #255	@ 0xff
 80056c8:	6251      	str	r1, [r2, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056d0:	2000      	movs	r0, #0
 80056d2:	f883 002c 	strb.w	r0, [r3, #44]	@ 0x2c

  return HAL_OK;
 80056d6:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80056d8:	6991      	ldr	r1, [r2, #24]
 80056da:	f421 5188 	bic.w	r1, r1, #4352	@ 0x1100
 80056de:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80056e0:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80056e2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80056e6:	6451      	str	r1, [r2, #68]	@ 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80056e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056ea:	f021 0101 	bic.w	r1, r1, #1
 80056ee:	6319      	str	r1, [r3, #48]	@ 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80056f0:	2101      	movs	r1, #1
 80056f2:	65d1      	str	r1, [r2, #92]	@ 0x5c
 80056f4:	e7e6      	b.n	80056c4 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 80056f6:	2002      	movs	r0, #2
}
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40002800 	.word	0x40002800

08005700 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005700:	b538      	push	{r3, r4, r5, lr}
 8005702:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8005704:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <HAL_RTC_AlarmIRQHandler+0x38>)
 8005706:	6d5d      	ldr	r5, [r3, #84]	@ 0x54
 8005708:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800570a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800570c:	f015 0f01 	tst.w	r5, #1
 8005710:	d004      	beq.n	800571c <HAL_RTC_AlarmIRQHandler+0x1c>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005712:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <HAL_RTC_AlarmIRQHandler+0x38>)
 8005714:	2201      	movs	r2, #1
 8005716:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
 8005718:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800571a:	4798      	blx	r3
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800571c:	f015 0f02 	tst.w	r5, #2
 8005720:	d005      	beq.n	800572e <HAL_RTC_AlarmIRQHandler+0x2e>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005722:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <HAL_RTC_AlarmIRQHandler+0x38>)
 8005724:	2202      	movs	r2, #2
 8005726:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
 8005728:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800572a:	4620      	mov	r0, r4
 800572c:	4798      	blx	r3
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800572e:	2301      	movs	r3, #1
 8005730:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005734:	bd38      	pop	{r3, r4, r5, pc}
 8005736:	bf00      	nop
 8005738:	40002800 	.word	0x40002800

0800573c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800573c:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800573e:	4a0b      	ldr	r2, [pc, #44]	@ (800576c <HAL_RTC_WaitForSynchro+0x30>)
 8005740:	68d3      	ldr	r3, [r2, #12]
 8005742:	f023 0320 	bic.w	r3, r3, #32
 8005746:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005748:	f7fc faec 	bl	8001d24 <HAL_GetTick>
 800574c:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800574e:	4b07      	ldr	r3, [pc, #28]	@ (800576c <HAL_RTC_WaitForSynchro+0x30>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f013 0f20 	tst.w	r3, #32
 8005756:	d107      	bne.n	8005768 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005758:	f7fc fae4 	bl	8001d24 <HAL_GetTick>
 800575c:	1b00      	subs	r0, r0, r4
 800575e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8005762:	d9f4      	bls.n	800574e <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8005764:	2003      	movs	r0, #3
 8005766:	e000      	b.n	800576a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005768:	2000      	movs	r0, #0
}
 800576a:	bd10      	pop	{r4, pc}
 800576c:	40002800 	.word	0x40002800

08005770 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005770:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005772:	4b11      	ldr	r3, [pc, #68]	@ (80057b8 <RTC_EnterInitMode+0x48>)
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800577a:	d002      	beq.n	8005782 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800577c:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800577e:	4620      	mov	r0, r4
 8005780:	bd70      	pop	{r4, r5, r6, pc}
 8005782:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005784:	4a0c      	ldr	r2, [pc, #48]	@ (80057b8 <RTC_EnterInitMode+0x48>)
 8005786:	68d3      	ldr	r3, [r2, #12]
 8005788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800578c:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800578e:	f7fc fac9 	bl	8001d24 <HAL_GetTick>
 8005792:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8005794:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005796:	4b08      	ldr	r3, [pc, #32]	@ (80057b8 <RTC_EnterInitMode+0x48>)
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800579e:	d1ee      	bne.n	800577e <RTC_EnterInitMode+0xe>
 80057a0:	2c03      	cmp	r4, #3
 80057a2:	d0ec      	beq.n	800577e <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80057a4:	f7fc fabe 	bl	8001d24 <HAL_GetTick>
 80057a8:	1b43      	subs	r3, r0, r5
 80057aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057ae:	d9f2      	bls.n	8005796 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057b0:	2403      	movs	r4, #3
 80057b2:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
 80057b6:	e7ee      	b.n	8005796 <RTC_EnterInitMode+0x26>
 80057b8:	40002800 	.word	0x40002800

080057bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057bc:	b510      	push	{r4, lr}
 80057be:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80057c0:	4b10      	ldr	r3, [pc, #64]	@ (8005804 <RTC_ExitInitMode+0x48>)
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f013 0f20 	tst.w	r3, #32
 80057d0:	d106      	bne.n	80057e0 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057d2:	f7ff ffb3 	bl	800573c <HAL_RTC_WaitForSynchro>
 80057d6:	b198      	cbz	r0, 8005800 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057d8:	2003      	movs	r0, #3
 80057da:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 80057de:	e00f      	b.n	8005800 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057e0:	4a08      	ldr	r2, [pc, #32]	@ (8005804 <RTC_ExitInitMode+0x48>)
 80057e2:	6993      	ldr	r3, [r2, #24]
 80057e4:	f023 0320 	bic.w	r3, r3, #32
 80057e8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057ea:	f7ff ffa7 	bl	800573c <HAL_RTC_WaitForSynchro>
 80057ee:	b110      	cbz	r0, 80057f6 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057f0:	2003      	movs	r0, #3
 80057f2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80057f6:	4a03      	ldr	r2, [pc, #12]	@ (8005804 <RTC_ExitInitMode+0x48>)
 80057f8:	6993      	ldr	r3, [r2, #24]
 80057fa:	f043 0320 	orr.w	r3, r3, #32
 80057fe:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8005800:	bd10      	pop	{r4, pc}
 8005802:	bf00      	nop
 8005804:	40002800 	.word	0x40002800

08005808 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8005808:	2800      	cmp	r0, #0
 800580a:	d077      	beq.n	80058fc <HAL_RTC_Init+0xf4>
{
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005810:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8005814:	bb03      	cbnz	r3, 8005858 <HAL_RTC_Init+0x50>
      hrtc->Lock = HAL_UNLOCKED;
 8005816:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 800581a:	4b39      	ldr	r3, [pc, #228]	@ (8005900 <HAL_RTC_Init+0xf8>)
 800581c:	6383      	str	r3, [r0, #56]	@ 0x38
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 800581e:	4b39      	ldr	r3, [pc, #228]	@ (8005904 <HAL_RTC_Init+0xfc>)
 8005820:	63c3      	str	r3, [r0, #60]	@ 0x3c
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 8005822:	4b39      	ldr	r3, [pc, #228]	@ (8005908 <HAL_RTC_Init+0x100>)
 8005824:	6403      	str	r3, [r0, #64]	@ 0x40
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 8005826:	4b39      	ldr	r3, [pc, #228]	@ (800590c <HAL_RTC_Init+0x104>)
 8005828:	6443      	str	r3, [r0, #68]	@ 0x44
      hrtc->SSRUEventCallback            =  HAL_RTCEx_SSRUEventCallback;             /* Legacy weak SSRUEventCallback */
 800582a:	4b39      	ldr	r3, [pc, #228]	@ (8005910 <HAL_RTC_Init+0x108>)
 800582c:	6483      	str	r3, [r0, #72]	@ 0x48
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
 800582e:	4b39      	ldr	r3, [pc, #228]	@ (8005914 <HAL_RTC_Init+0x10c>)
 8005830:	64c3      	str	r3, [r0, #76]	@ 0x4c
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 8005832:	4b39      	ldr	r3, [pc, #228]	@ (8005918 <HAL_RTC_Init+0x110>)
 8005834:	6503      	str	r3, [r0, #80]	@ 0x50
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
 8005836:	4b39      	ldr	r3, [pc, #228]	@ (800591c <HAL_RTC_Init+0x114>)
 8005838:	6543      	str	r3, [r0, #84]	@ 0x54
      hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;  /* Legacy weak InternalTamper3EventCallback */
 800583a:	4b39      	ldr	r3, [pc, #228]	@ (8005920 <HAL_RTC_Init+0x118>)
 800583c:	6583      	str	r3, [r0, #88]	@ 0x58
      hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;  /* Legacy weak InternalTamper5EventCallback */
 800583e:	4b39      	ldr	r3, [pc, #228]	@ (8005924 <HAL_RTC_Init+0x11c>)
 8005840:	65c3      	str	r3, [r0, #92]	@ 0x5c
      hrtc->InternalTamper6EventCallback =  HAL_RTCEx_InternalTamper6EventCallback;  /* Legacy weak InternalTamper6EventCallback */
 8005842:	4b39      	ldr	r3, [pc, #228]	@ (8005928 <HAL_RTC_Init+0x120>)
 8005844:	6603      	str	r3, [r0, #96]	@ 0x60
      hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;  /* Legacy weak InternalTamper8EventCallback */
 8005846:	4b39      	ldr	r3, [pc, #228]	@ (800592c <HAL_RTC_Init+0x124>)
 8005848:	6643      	str	r3, [r0, #100]	@ 0x64
      if (hrtc->MspInitCallback == NULL)
 800584a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800584c:	b18b      	cbz	r3, 8005872 <HAL_RTC_Init+0x6a>
      hrtc->MspInitCallback(hrtc);
 800584e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8005850:	4620      	mov	r0, r4
 8005852:	4798      	blx	r3
      if (hrtc->MspDeInitCallback == NULL)
 8005854:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005856:	b17b      	cbz	r3, 8005878 <HAL_RTC_Init+0x70>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005858:	2302      	movs	r3, #2
 800585a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800585e:	4b34      	ldr	r3, [pc, #208]	@ (8005930 <HAL_RTC_Init+0x128>)
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	f013 0f10 	tst.w	r3, #16
 8005866:	d00a      	beq.n	800587e <HAL_RTC_Init+0x76>
      status = HAL_OK;
 8005868:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 800586a:	2301      	movs	r3, #1
 800586c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
}
 8005870:	bd38      	pop	{r3, r4, r5, pc}
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 8005872:	4b30      	ldr	r3, [pc, #192]	@ (8005934 <HAL_RTC_Init+0x12c>)
 8005874:	6683      	str	r3, [r0, #104]	@ 0x68
 8005876:	e7ea      	b.n	800584e <HAL_RTC_Init+0x46>
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8005878:	4b2f      	ldr	r3, [pc, #188]	@ (8005938 <HAL_RTC_Init+0x130>)
 800587a:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800587c:	e7ec      	b.n	8005858 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800587e:	4b2c      	ldr	r3, [pc, #176]	@ (8005930 <HAL_RTC_Init+0x128>)
 8005880:	22ca      	movs	r2, #202	@ 0xca
 8005882:	625a      	str	r2, [r3, #36]	@ 0x24
 8005884:	2253      	movs	r2, #83	@ 0x53
 8005886:	625a      	str	r2, [r3, #36]	@ 0x24
      status = RTC_EnterInitMode(hrtc);
 8005888:	4620      	mov	r0, r4
 800588a:	f7ff ff71 	bl	8005770 <RTC_EnterInitMode>
      if (status == HAL_OK)
 800588e:	b118      	cbz	r0, 8005898 <HAL_RTC_Init+0x90>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005890:	4b27      	ldr	r3, [pc, #156]	@ (8005930 <HAL_RTC_Init+0x128>)
 8005892:	22ff      	movs	r2, #255	@ 0xff
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 8005896:	e7eb      	b.n	8005870 <HAL_RTC_Init+0x68>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8005898:	4b25      	ldr	r3, [pc, #148]	@ (8005930 <HAL_RTC_Init+0x128>)
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	f022 628e 	bic.w	r2, r2, #74448896	@ 0x4700000
 80058a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058a4:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80058a6:	6999      	ldr	r1, [r3, #24]
 80058a8:	6862      	ldr	r2, [r4, #4]
 80058aa:	6920      	ldr	r0, [r4, #16]
 80058ac:	4302      	orrs	r2, r0
 80058ae:	69a0      	ldr	r0, [r4, #24]
 80058b0:	4302      	orrs	r2, r0
 80058b2:	430a      	orrs	r2, r1
 80058b4:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80058b6:	68e2      	ldr	r2, [r4, #12]
 80058b8:	68a1      	ldr	r1, [r4, #8]
 80058ba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80058be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80058c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80058c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80058ca:	4301      	orrs	r1, r0
 80058cc:	430a      	orrs	r2, r1
 80058ce:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff ff73 	bl	80057bc <RTC_ExitInitMode>
        if (status == HAL_OK)
 80058d6:	b118      	cbz	r0, 80058e0 <HAL_RTC_Init+0xd8>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058d8:	4b15      	ldr	r3, [pc, #84]	@ (8005930 <HAL_RTC_Init+0x128>)
 80058da:	22ff      	movs	r2, #255	@ 0xff
 80058dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (status == HAL_OK)
 80058de:	e7c7      	b.n	8005870 <HAL_RTC_Init+0x68>
          MODIFY_REG(RTC->CR, \
 80058e0:	4913      	ldr	r1, [pc, #76]	@ (8005930 <HAL_RTC_Init+0x128>)
 80058e2:	698b      	ldr	r3, [r1, #24]
 80058e4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80058e8:	6a22      	ldr	r2, [r4, #32]
 80058ea:	69e5      	ldr	r5, [r4, #28]
 80058ec:	432a      	orrs	r2, r5
 80058ee:	6965      	ldr	r5, [r4, #20]
 80058f0:	432a      	orrs	r2, r5
 80058f2:	4313      	orrs	r3, r2
 80058f4:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80058f6:	23ff      	movs	r3, #255	@ 0xff
 80058f8:	624b      	str	r3, [r1, #36]	@ 0x24
    if (status == HAL_OK)
 80058fa:	e7b6      	b.n	800586a <HAL_RTC_Init+0x62>
  HAL_StatusTypeDef status = HAL_ERROR;
 80058fc:	2001      	movs	r0, #1
}
 80058fe:	4770      	bx	lr
 8005900:	080021dd 	.word	0x080021dd
 8005904:	08005c95 	.word	0x08005c95
 8005908:	08005c51 	.word	0x08005c51
 800590c:	08005c53 	.word	0x08005c53
 8005910:	080021e5 	.word	0x080021e5
 8005914:	08005c97 	.word	0x08005c97
 8005918:	08005c99 	.word	0x08005c99
 800591c:	08005c9b 	.word	0x08005c9b
 8005920:	08005c9d 	.word	0x08005c9d
 8005924:	08005c9f 	.word	0x08005c9f
 8005928:	08005ca1 	.word	0x08005ca1
 800592c:	08005ca3 	.word	0x08005ca3
 8005930:	40002800 	.word	0x40002800
 8005934:	08001979 	.word	0x08001979
 8005938:	080019e9 	.word	0x080019e9

0800593c <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800593c:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800593e:	e002      	b.n	8005946 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8005940:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8005942:	380a      	subs	r0, #10
 8005944:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 8005946:	2809      	cmp	r0, #9
 8005948:	d8fa      	bhi.n	8005940 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800594a:	011b      	lsls	r3, r3, #4
 800594c:	b2db      	uxtb	r3, r3
}
 800594e:	4318      	orrs	r0, r3
 8005950:	4770      	bx	lr
	...

08005954 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 8005954:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005958:	2b01      	cmp	r3, #1
 800595a:	d063      	beq.n	8005a24 <HAL_RTC_SetTime+0xd0>
{
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 8005964:	2301      	movs	r3, #1
 8005966:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800596a:	2302      	movs	r3, #2
 800596c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005970:	4b2d      	ldr	r3, [pc, #180]	@ (8005a28 <HAL_RTC_SetTime+0xd4>)
 8005972:	22ca      	movs	r2, #202	@ 0xca
 8005974:	625a      	str	r2, [r3, #36]	@ 0x24
 8005976:	2253      	movs	r2, #83	@ 0x53
 8005978:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 800597a:	f7ff fef9 	bl	8005770 <RTC_EnterInitMode>
  if (status == HAL_OK)
 800597e:	2800      	cmp	r0, #0
 8005980:	d130      	bne.n	80059e4 <HAL_RTC_SetTime+0x90>
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8005982:	4b29      	ldr	r3, [pc, #164]	@ (8005a28 <HAL_RTC_SetTime+0xd4>)
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800598a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800598e:	d029      	beq.n	80059e4 <HAL_RTC_SetTime+0x90>
      if (Format == RTC_FORMAT_BIN)
 8005990:	2e00      	cmp	r6, #0
 8005992:	d135      	bne.n	8005a00 <HAL_RTC_SetTime+0xac>
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005994:	4b24      	ldr	r3, [pc, #144]	@ (8005a28 <HAL_RTC_SetTime+0xd4>)
 8005996:	699b      	ldr	r3, [r3, #24]
 8005998:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800599c:	d101      	bne.n	80059a2 <HAL_RTC_SetTime+0x4e>
          sTime->TimeFormat = 0x00U;
 800599e:	2300      	movs	r3, #0
 80059a0:	70eb      	strb	r3, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059a2:	7828      	ldrb	r0, [r5, #0]
 80059a4:	f7ff ffca 	bl	800593c <RTC_ByteToBcd2>
 80059a8:	0406      	lsls	r6, r0, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059aa:	7868      	ldrb	r0, [r5, #1]
 80059ac:	f7ff ffc6 	bl	800593c <RTC_ByteToBcd2>
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059b0:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80059b4:	78a8      	ldrb	r0, [r5, #2]
 80059b6:	f7ff ffc1 	bl	800593c <RTC_ByteToBcd2>
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80059ba:	ea46 0300 	orr.w	r3, r6, r0
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80059be:	78ea      	ldrb	r2, [r5, #3]
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059c0:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80059c4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80059c8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059cc:	4a16      	ldr	r2, [pc, #88]	@ (8005a28 <HAL_RTC_SetTime+0xd4>)
 80059ce:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80059d0:	6993      	ldr	r3, [r2, #24]
 80059d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059d6:	6193      	str	r3, [r2, #24]
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80059d8:	6993      	ldr	r3, [r2, #24]
 80059da:	68e9      	ldr	r1, [r5, #12]
 80059dc:	6928      	ldr	r0, [r5, #16]
 80059de:	4301      	orrs	r1, r0
 80059e0:	430b      	orrs	r3, r1
 80059e2:	6193      	str	r3, [r2, #24]
  status = RTC_ExitInitMode(hrtc);
 80059e4:	4620      	mov	r0, r4
 80059e6:	f7ff fee9 	bl	80057bc <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ea:	4a0f      	ldr	r2, [pc, #60]	@ (8005a28 <HAL_RTC_SetTime+0xd4>)
 80059ec:	21ff      	movs	r1, #255	@ 0xff
 80059ee:	6251      	str	r1, [r2, #36]	@ 0x24
  if (status == HAL_OK)
 80059f0:	b910      	cbnz	r0, 80059f8 <HAL_RTC_SetTime+0xa4>
    hrtc->State = HAL_RTC_STATE_READY;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 80059f8:	2300      	movs	r3, #0
 80059fa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005a00:	4b09      	ldr	r3, [pc, #36]	@ (8005a28 <HAL_RTC_SetTime+0xd4>)
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005a08:	d101      	bne.n	8005a0e <HAL_RTC_SetTime+0xba>
          sTime->TimeFormat = 0x00U;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	70eb      	strb	r3, [r5, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a0e:	782a      	ldrb	r2, [r5, #0]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a10:	786b      	ldrb	r3, [r5, #1]
 8005a12:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005a18:	78aa      	ldrb	r2, [r5, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a1a:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a1c:	78ea      	ldrb	r2, [r5, #3]
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a1e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8005a22:	e7cf      	b.n	80059c4 <HAL_RTC_SetTime+0x70>
  __HAL_LOCK(hrtc);
 8005a24:	2002      	movs	r0, #2
}
 8005a26:	4770      	bx	lr
 8005a28:	40002800 	.word	0x40002800

08005a2c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8005a2c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d04d      	beq.n	8005ad0 <HAL_RTC_SetDate+0xa4>
{
 8005a34:	b570      	push	{r4, r5, r6, lr}
 8005a36:	4605      	mov	r5, r0
 8005a38:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a40:	2302      	movs	r3, #2
 8005a42:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a46:	b1ca      	cbz	r2, 8005a7c <HAL_RTC_SetDate+0x50>
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a48:	78cb      	ldrb	r3, [r1, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a4a:	784c      	ldrb	r4, [r1, #1]
 8005a4c:	0224      	lsls	r4, r4, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a4e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005a52:	788b      	ldrb	r3, [r1, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005a54:	431c      	orrs	r4, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005a56:	780b      	ldrb	r3, [r1, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005a58:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ad4 <HAL_RTC_SetDate+0xa8>)
 8005a5e:	22ca      	movs	r2, #202	@ 0xca
 8005a60:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a62:	2253      	movs	r2, #83	@ 0x53
 8005a64:	625a      	str	r2, [r3, #36]	@ 0x24
  status = RTC_EnterInitMode(hrtc);
 8005a66:	4628      	mov	r0, r5
 8005a68:	f7ff fe82 	bl	8005770 <RTC_EnterInitMode>
  if (status == HAL_OK)
 8005a6c:	b1f8      	cbz	r0, 8005aae <HAL_RTC_SetDate+0x82>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a6e:	4b19      	ldr	r3, [pc, #100]	@ (8005ad4 <HAL_RTC_SetDate+0xa8>)
 8005a70:	22ff      	movs	r2, #255	@ 0xff
 8005a72:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_UNLOCK(hrtc);
 8005a74:	2300      	movs	r3, #0
 8005a76:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
}
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a7c:	784b      	ldrb	r3, [r1, #1]
 8005a7e:	f013 0f10 	tst.w	r3, #16
 8005a82:	d003      	beq.n	8005a8c <HAL_RTC_SetDate+0x60>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005a84:	f003 03ef 	and.w	r3, r3, #239	@ 0xef
 8005a88:	330a      	adds	r3, #10
 8005a8a:	704b      	strb	r3, [r1, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a8c:	78f0      	ldrb	r0, [r6, #3]
 8005a8e:	f7ff ff55 	bl	800593c <RTC_ByteToBcd2>
 8005a92:	0404      	lsls	r4, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005a94:	7870      	ldrb	r0, [r6, #1]
 8005a96:	f7ff ff51 	bl	800593c <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005a9a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005a9e:	78b0      	ldrb	r0, [r6, #2]
 8005aa0:	f7ff ff4c 	bl	800593c <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005aa4:	4304      	orrs	r4, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005aa6:	7833      	ldrb	r3, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005aa8:	ea44 3443 	orr.w	r4, r4, r3, lsl #13
 8005aac:	e7d6      	b.n	8005a5c <HAL_RTC_SetDate+0x30>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005aae:	f024 447f 	bic.w	r4, r4, #4278190080	@ 0xff000000
 8005ab2:	f024 04c0 	bic.w	r4, r4, #192	@ 0xc0
 8005ab6:	4e07      	ldr	r6, [pc, #28]	@ (8005ad4 <HAL_RTC_SetDate+0xa8>)
 8005ab8:	6074      	str	r4, [r6, #4]
    status = RTC_ExitInitMode(hrtc);
 8005aba:	4628      	mov	r0, r5
 8005abc:	f7ff fe7e 	bl	80057bc <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ac0:	22ff      	movs	r2, #255	@ 0xff
 8005ac2:	6272      	str	r2, [r6, #36]	@ 0x24
  if (status == HAL_OK)
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d1d5      	bne.n	8005a74 <HAL_RTC_SetDate+0x48>
    hrtc->State = HAL_RTC_STATE_READY ;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
 8005ace:	e7d1      	b.n	8005a74 <HAL_RTC_SetDate+0x48>
  __HAL_LOCK(hrtc);
 8005ad0:	2002      	movs	r0, #2
}
 8005ad2:	4770      	bx	lr
 8005ad4:	40002800 	.word	0x40002800

08005ad8 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005ad8:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f000 80b0 	beq.w	8005c42 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8005ae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 8005aea:	2301      	movs	r3, #1
 8005aec:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005af0:	2302      	movs	r3, #2
 8005af2:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8005af6:	4b54      	ldr	r3, [pc, #336]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005af8:	68de      	ldr	r6, [r3, #12]
 8005afa:	f406 7640 	and.w	r6, r6, #768	@ 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8005afe:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8005b02:	d043      	beq.n	8005b8c <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8005b04:	bb12      	cbnz	r2, 8005b4c <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005b0c:	d101      	bne.n	8005b12 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8005b12:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b16:	7820      	ldrb	r0, [r4, #0]
 8005b18:	f7ff ff10 	bl	800593c <RTC_ByteToBcd2>
 8005b1c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b1e:	7860      	ldrb	r0, [r4, #1]
 8005b20:	f7ff ff0c 	bl	800593c <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b24:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b28:	78a0      	ldrb	r0, [r4, #2]
 8005b2a:	f7ff ff07 	bl	800593c <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b2e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b30:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b32:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b36:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 8005b3a:	f7ff feff 	bl	800593c <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b3e:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b42:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b44:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b46:	ea48 0000 	orr.w	r0, r8, r0
 8005b4a:	e020      	b.n	8005b8e <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8005b4c:	6948      	ldr	r0, [r1, #20]
 8005b4e:	f1b0 3f80 	cmp.w	r0, #2155905152	@ 0x80808080
 8005b52:	d009      	beq.n	8005b68 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8005b54:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8005b58:	d006      	beq.n	8005b68 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8005b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005b62:	d101      	bne.n	8005b68 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b68:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b6a:	7863      	ldrb	r3, [r4, #1]
 8005b6c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b72:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005b74:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b76:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005b78:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b7c:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005b80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005b84:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005b86:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005b88:	4318      	orrs	r0, r3
 8005b8a:	e000      	b.n	8005b8e <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 8005b8c:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005b90:	22ca      	movs	r2, #202	@ 0xca
 8005b92:	625a      	str	r2, [r3, #36]	@ 0x24
 8005b94:	2253      	movs	r2, #83	@ 0x53
 8005b96:	625a      	str	r2, [r3, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005b98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b9e:	d02a      	beq.n	8005bf6 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005ba0:	4b29      	ldr	r3, [pc, #164]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	f422 5208 	bic.w	r2, r2, #8704	@ 0x2200
 8005ba8:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8005baa:	2202      	movs	r2, #2
 8005bac:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005bae:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8005bb2:	d040      	beq.n	8005c36 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8005bb4:	4b24      	ldr	r3, [pc, #144]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005bb6:	6498      	str	r0, [r3, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8005bb8:	69a2      	ldr	r2, [r4, #24]
 8005bba:	64da      	str	r2, [r3, #76]	@ 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8005bbc:	6862      	ldr	r2, [r4, #4]
 8005bbe:	4b22      	ldr	r3, [pc, #136]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005bc0:	675a      	str	r2, [r3, #116]	@ 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8005bc2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005bc4:	f042 0202 	orr.w	r2, r2, #2
 8005bc8:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8005bca:	699a      	ldr	r2, [r3, #24]
 8005bcc:	f442 5208 	orr.w	r2, r2, #8704	@ 0x2200
 8005bd0:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8005c4c <HAL_RTC_SetAlarm_IT+0x174>)
 8005bd4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8005bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005be0:	4b19      	ldr	r3, [pc, #100]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005be2:	22ff      	movs	r2, #255	@ 0xff
 8005be4:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f885 302d 	strb.w	r3, [r5, #45]	@ 0x2d
  __HAL_UNLOCK(hrtc);
 8005bec:	2000      	movs	r0, #0
 8005bee:	f885 002c 	strb.w	r0, [r5, #44]	@ 0x2c
}
 8005bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005bf6:	4b14      	ldr	r3, [pc, #80]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8005bfe:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005c00:	2201      	movs	r2, #1
 8005c02:	65da      	str	r2, [r3, #92]	@ 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8005c04:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8005c08:	d00f      	beq.n	8005c2a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005c0c:	6418      	str	r0, [r3, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005c0e:	69a2      	ldr	r2, [r4, #24]
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005c12:	6862      	ldr	r2, [r4, #4]
 8005c14:	4b0c      	ldr	r3, [pc, #48]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005c16:	671a      	str	r2, [r3, #112]	@ 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005c18:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8005c1a:	f042 0201 	orr.w	r2, r2, #1
 8005c1e:	632a      	str	r2, [r5, #48]	@ 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	f442 5288 	orr.w	r2, r2, #4352	@ 0x1100
 8005c26:	619a      	str	r2, [r3, #24]
 8005c28:	e7d3      	b.n	8005bd2 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8005c2a:	69a3      	ldr	r3, [r4, #24]
 8005c2c:	69e2      	ldr	r2, [r4, #28]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	4a05      	ldr	r2, [pc, #20]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005c32:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c34:	e7ed      	b.n	8005c12 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005c36:	69a3      	ldr	r3, [r4, #24]
 8005c38:	69e2      	ldr	r2, [r4, #28]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	4a02      	ldr	r2, [pc, #8]	@ (8005c48 <HAL_RTC_SetAlarm_IT+0x170>)
 8005c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c40:	e7bc      	b.n	8005bbc <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8005c42:	2002      	movs	r0, #2
}
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40002800 	.word	0x40002800
 8005c4c:	58000800 	.word	0x58000800

08005c50 <HAL_RTCEx_TimeStampEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8005c50:	4770      	bx	lr

08005c52 <HAL_RTCEx_WakeUpTimerEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005c52:	4770      	bx	lr

08005c54 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c54:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d017      	beq.n	8005c8c <HAL_RTCEx_EnableBypassShadow+0x38>
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	f880 102c 	strb.w	r1, [r0, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c62:	2302      	movs	r3, #2
 8005c64:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c68:	4b09      	ldr	r3, [pc, #36]	@ (8005c90 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8005c6a:	22ca      	movs	r2, #202	@ 0xca
 8005c6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c6e:	2253      	movs	r2, #83	@ 0x53
 8005c70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005c72:	699a      	ldr	r2, [r3, #24]
 8005c74:	f042 0220 	orr.w	r2, r2, #32
 8005c78:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c7a:	22ff      	movs	r2, #255	@ 0xff
 8005c7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c7e:	f880 102d 	strb.w	r1, [r0, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c82:	2300      	movs	r3, #0
 8005c84:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c

  return HAL_OK;
 8005c88:	4618      	mov	r0, r3
 8005c8a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8005c8c:	2002      	movs	r0, #2
}
 8005c8e:	4770      	bx	lr
 8005c90:	40002800 	.word	0x40002800

08005c94 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8005c94:	4770      	bx	lr

08005c96 <HAL_RTCEx_Tamper1EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8005c96:	4770      	bx	lr

08005c98 <HAL_RTCEx_Tamper2EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8005c98:	4770      	bx	lr

08005c9a <HAL_RTCEx_Tamper3EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8005c9a:	4770      	bx	lr

08005c9c <HAL_RTCEx_InternalTamper3EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 8005c9c:	4770      	bx	lr

08005c9e <HAL_RTCEx_InternalTamper5EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_RTCEx_InternalTamper6EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper6EventCallback could be implemented in the user file
   */
}
 8005ca0:	4770      	bx	lr

08005ca2 <HAL_RTCEx_InternalTamper8EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper8EventCallback could be implemented in the user file
   */
}
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005ca4:	0089      	lsls	r1, r1, #2
 8005ca6:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005caa:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005cae:	600a      	str	r2, [r1, #0]
}
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8005cb2:	0089      	lsls	r1, r1, #2
 8005cb4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8005cb8:	f501 4131 	add.w	r1, r1, #45312	@ 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005cbc:	6808      	ldr	r0, [r1, #0]
}
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_SPI_TxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_SPI_RxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005cc2:	4770      	bx	lr

08005cc4 <HAL_SPI_TxRxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005cc4:	4770      	bx	lr

08005cc6 <HAL_SPI_TxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_SPI_RxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005cc8:	4770      	bx	lr

08005cca <HAL_SPI_TxRxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005cca:	4770      	bx	lr

08005ccc <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ccc:	4770      	bx	lr

08005cce <HAL_SPI_AbortCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8005cce:	4770      	bx	lr

08005cd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005cd0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005cd2:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  hspi->RxXferCount = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8005cda:	87c3      	strh	r3, [r0, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8005cdc:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8005cde:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ce0:	bd08      	pop	{r3, pc}
	...

08005ce4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f000 80a6 	beq.w	8005e36 <HAL_SPI_Init+0x152>
{
 8005cea:	b510      	push	{r4, lr}
 8005cec:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005cf0:	b933      	cbnz	r3, 8005d00 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cf2:	6843      	ldr	r3, [r0, #4]
 8005cf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cf8:	d005      	beq.n	8005d06 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61c3      	str	r3, [r0, #28]
 8005cfe:	e002      	b.n	8005d06 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d00:	2300      	movs	r3, #0
 8005d02:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d04:	6143      	str	r3, [r0, #20]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d06:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8005d0a:	b9d3      	cbnz	r3, 8005d42 <HAL_SPI_Init+0x5e>
    hspi->Lock = HAL_UNLOCKED;
 8005d0c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8005d10:	4b4a      	ldr	r3, [pc, #296]	@ (8005e3c <HAL_SPI_Init+0x158>)
 8005d12:	6663      	str	r3, [r4, #100]	@ 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8005d14:	4b4a      	ldr	r3, [pc, #296]	@ (8005e40 <HAL_SPI_Init+0x15c>)
 8005d16:	66a3      	str	r3, [r4, #104]	@ 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8005d18:	4b4a      	ldr	r3, [pc, #296]	@ (8005e44 <HAL_SPI_Init+0x160>)
 8005d1a:	66e3      	str	r3, [r4, #108]	@ 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8005d1c:	4b4a      	ldr	r3, [pc, #296]	@ (8005e48 <HAL_SPI_Init+0x164>)
 8005d1e:	6723      	str	r3, [r4, #112]	@ 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8005d20:	4b4a      	ldr	r3, [pc, #296]	@ (8005e4c <HAL_SPI_Init+0x168>)
 8005d22:	6763      	str	r3, [r4, #116]	@ 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8005d24:	4b4a      	ldr	r3, [pc, #296]	@ (8005e50 <HAL_SPI_Init+0x16c>)
 8005d26:	67a3      	str	r3, [r4, #120]	@ 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8005d28:	4b4a      	ldr	r3, [pc, #296]	@ (8005e54 <HAL_SPI_Init+0x170>)
 8005d2a:	67e3      	str	r3, [r4, #124]	@ 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8005d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8005e58 <HAL_SPI_Init+0x174>)
 8005d2e:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    if (hspi->MspInitCallback == NULL)
 8005d32:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d05e      	beq.n	8005df8 <HAL_SPI_Init+0x114>
    hspi->MspInitCallback(hspi);
 8005d3a:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4798      	blx	r3
  hspi->State = HAL_SPI_STATE_BUSY;
 8005d42:	2302      	movs	r3, #2
 8005d44:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	6813      	ldr	r3, [r2, #0]
 8005d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d50:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d58:	d952      	bls.n	8005e00 <HAL_SPI_Init+0x11c>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d5a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d5c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005d60:	d004      	beq.n	8005d6c <HAL_SPI_Init+0x88>
 8005d62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d66:	d001      	beq.n	8005d6c <HAL_SPI_Init+0x88>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005d72:	68a1      	ldr	r1, [r4, #8]
 8005d74:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	6921      	ldr	r1, [r4, #16]
 8005d7c:	f001 0102 	and.w	r1, r1, #2
 8005d80:	430b      	orrs	r3, r1
 8005d82:	6961      	ldr	r1, [r4, #20]
 8005d84:	f001 0101 	and.w	r1, r1, #1
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	69a1      	ldr	r1, [r4, #24]
 8005d8c:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 8005d90:	430b      	orrs	r3, r1
 8005d92:	69e1      	ldr	r1, [r4, #28]
 8005d94:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6a21      	ldr	r1, [r4, #32]
 8005d9c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8005da0:	430b      	orrs	r3, r1
 8005da2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005da4:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8005da8:	6820      	ldr	r0, [r4, #0]
 8005daa:	430b      	orrs	r3, r1
 8005dac:	6003      	str	r3, [r0, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005db4:	d027      	beq.n	8005e06 <HAL_SPI_Init+0x122>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005db6:	8b63      	ldrh	r3, [r4, #26]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005dbe:	f001 0110 	and.w	r1, r1, #16
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005dc6:	f001 0108 	and.w	r1, r1, #8
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	68e1      	ldr	r1, [r4, #12]
 8005dce:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	6821      	ldr	r1, [r4, #0]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005ddc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005de0:	d025      	beq.n	8005e2e <HAL_SPI_Init+0x14a>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005de2:	6822      	ldr	r2, [r4, #0]
 8005de4:	69d3      	ldr	r3, [r2, #28]
 8005de6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005dea:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dec:	2000      	movs	r0, #0
 8005dee:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8005df6:	bd10      	pop	{r4, pc}
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8005df8:	4b18      	ldr	r3, [pc, #96]	@ (8005e5c <HAL_SPI_Init+0x178>)
 8005dfa:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8005dfe:	e79c      	b.n	8005d3a <HAL_SPI_Init+0x56>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e00:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e04:	e7aa      	b.n	8005d5c <HAL_SPI_Init+0x78>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005e06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005e08:	b92b      	cbnz	r3, 8005e16 <HAL_SPI_Init+0x132>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e0a:	68e3      	ldr	r3, [r4, #12]
 8005e0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e10:	d90a      	bls.n	8005e28 <HAL_SPI_Init+0x144>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005e12:	2302      	movs	r3, #2
 8005e14:	6323      	str	r3, [r4, #48]	@ 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8005e16:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d1cc      	bne.n	8005db6 <HAL_SPI_Init+0xd2>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8005e1c:	6821      	ldr	r1, [r4, #0]
 8005e1e:	680b      	ldr	r3, [r1, #0]
 8005e20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005e24:	600b      	str	r3, [r1, #0]
 8005e26:	e7c6      	b.n	8005db6 <HAL_SPI_Init+0xd2>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005e28:	2301      	movs	r3, #1
 8005e2a:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e2c:	e7f3      	b.n	8005e16 <HAL_SPI_Init+0x132>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8005e32:	611a      	str	r2, [r3, #16]
 8005e34:	e7d5      	b.n	8005de2 <HAL_SPI_Init+0xfe>
    return HAL_ERROR;
 8005e36:	2001      	movs	r0, #1
}
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	08005cc1 	.word	0x08005cc1
 8005e40:	08005cc3 	.word	0x08005cc3
 8005e44:	08005cc5 	.word	0x08005cc5
 8005e48:	08005cc7 	.word	0x08005cc7
 8005e4c:	08005cc9 	.word	0x08005cc9
 8005e50:	08005ccb 	.word	0x08005ccb
 8005e54:	08005ccd 	.word	0x08005ccd
 8005e58:	08005ccf 	.word	0x08005ccf
 8005e5c:	08001a65 	.word	0x08001a65

08005e60 <HAL_SPI_IRQHandler>:
{
 8005e60:	b510      	push	{r4, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 8005e66:	6802      	ldr	r2, [r0, #0]
 8005e68:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005e6a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005e6c:	f003 0041 	and.w	r0, r3, #65	@ 0x41
 8005e70:	2801      	cmp	r0, #1
 8005e72:	d067      	beq.n	8005f44 <HAL_SPI_IRQHandler+0xe4>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005e74:	f013 0f02 	tst.w	r3, #2
 8005e78:	d002      	beq.n	8005e80 <HAL_SPI_IRQHandler+0x20>
 8005e7a:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005e7e:	d168      	bne.n	8005f52 <HAL_SPI_IRQHandler+0xf2>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e80:	f413 7fb0 	tst.w	r3, #352	@ 0x160
 8005e84:	d068      	beq.n	8005f58 <HAL_SPI_IRQHandler+0xf8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e86:	f011 0f20 	tst.w	r1, #32
 8005e8a:	d065      	beq.n	8005f58 <HAL_SPI_IRQHandler+0xf8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e8c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8005e90:	d00f      	beq.n	8005eb2 <HAL_SPI_IRQHandler+0x52>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e92:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
 8005e96:	b2c0      	uxtb	r0, r0
 8005e98:	2803      	cmp	r0, #3
 8005e9a:	d05f      	beq.n	8005f5c <HAL_SPI_IRQHandler+0xfc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e9c:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005e9e:	f040 0004 	orr.w	r0, r0, #4
 8005ea2:	6620      	str	r0, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ea4:	2000      	movs	r0, #0
 8005ea6:	9000      	str	r0, [sp, #0]
 8005ea8:	68d0      	ldr	r0, [r2, #12]
 8005eaa:	9000      	str	r0, [sp, #0]
 8005eac:	6890      	ldr	r0, [r2, #8]
 8005eae:	9000      	str	r0, [sp, #0]
 8005eb0:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005eb2:	f013 0f20 	tst.w	r3, #32
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_SPI_IRQHandler+0x72>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005eb8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005eba:	f040 0001 	orr.w	r0, r0, #1
 8005ebe:	6620      	str	r0, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	9002      	str	r0, [sp, #8]
 8005ec4:	6890      	ldr	r0, [r2, #8]
 8005ec6:	9002      	str	r0, [sp, #8]
 8005ec8:	6810      	ldr	r0, [r2, #0]
 8005eca:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8005ece:	6010      	str	r0, [r2, #0]
 8005ed0:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ed2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005ed6:	d009      	beq.n	8005eec <HAL_SPI_IRQHandler+0x8c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ed8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005eda:	f043 0308 	orr.w	r3, r3, #8
 8005ede:	6623      	str	r3, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9303      	str	r3, [sp, #12]
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	9303      	str	r3, [sp, #12]
 8005eea:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eec:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d032      	beq.n	8005f58 <HAL_SPI_IRQHandler+0xf8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ef2:	6822      	ldr	r2, [r4, #0]
 8005ef4:	6853      	ldr	r3, [r2, #4]
 8005ef6:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8005efa:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f02:	f011 0f03 	tst.w	r1, #3
 8005f06:	d031      	beq.n	8005f6c <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f08:	6822      	ldr	r2, [r4, #0]
 8005f0a:	6853      	ldr	r3, [r2, #4]
 8005f0c:	f023 0303 	bic.w	r3, r3, #3
 8005f10:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8005f12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f14:	b14b      	cbz	r3, 8005f2a <HAL_SPI_IRQHandler+0xca>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f16:	4a17      	ldr	r2, [pc, #92]	@ (8005f74 <HAL_SPI_IRQHandler+0x114>)
 8005f18:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f1a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f1c:	f7fd fd26 	bl	800396c <HAL_DMA_Abort_IT>
 8005f20:	b118      	cbz	r0, 8005f2a <HAL_SPI_IRQHandler+0xca>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f22:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f28:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8005f2a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005f2c:	b1a3      	cbz	r3, 8005f58 <HAL_SPI_IRQHandler+0xf8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f2e:	4a11      	ldr	r2, [pc, #68]	@ (8005f74 <HAL_SPI_IRQHandler+0x114>)
 8005f30:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f32:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005f34:	f7fd fd1a 	bl	800396c <HAL_DMA_Abort_IT>
 8005f38:	b170      	cbz	r0, 8005f58 <HAL_SPI_IRQHandler+0xf8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f3a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f40:	6623      	str	r3, [r4, #96]	@ 0x60
 8005f42:	e009      	b.n	8005f58 <HAL_SPI_IRQHandler+0xf8>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005f44:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8005f48:	d094      	beq.n	8005e74 <HAL_SPI_IRQHandler+0x14>
    hspi->RxISR(hspi);
 8005f4a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	4798      	blx	r3
    return;
 8005f50:	e002      	b.n	8005f58 <HAL_SPI_IRQHandler+0xf8>
    hspi->TxISR(hspi);
 8005f52:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8005f54:	4620      	mov	r0, r4
 8005f56:	4798      	blx	r3
}
 8005f58:	b004      	add	sp, #16
 8005f5a:	bd10      	pop	{r4, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	68d3      	ldr	r3, [r2, #12]
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	6893      	ldr	r3, [r2, #8]
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	9b01      	ldr	r3, [sp, #4]
        return;
 8005f6a:	e7f5      	b.n	8005f58 <HAL_SPI_IRQHandler+0xf8>
        hspi->ErrorCallback(hspi);
 8005f6c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8005f6e:	4620      	mov	r0, r4
 8005f70:	4798      	blx	r3
    return;
 8005f72:	e7f1      	b.n	8005f58 <HAL_SPI_IRQHandler+0xf8>
 8005f74:	08005cd1 	.word	0x08005cd1

08005f78 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005f78:	4b07      	ldr	r3, [pc, #28]	@ (8005f98 <SUBGHZSPI_Init+0x20>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f80:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8005f82:	f440 7041 	orr.w	r0, r0, #772	@ 0x304
 8005f86:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8005f88:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005f8c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f94:	601a      	str	r2, [r3, #0]
}
 8005f96:	4770      	bx	lr
 8005f98:	58010000 	.word	0x58010000

08005f9c <HAL_SUBGHZ_Init>:
{
 8005f9c:	b530      	push	{r4, r5, lr}
 8005f9e:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	d076      	beq.n	8006092 <HAL_SUBGHZ_Init+0xf6>
 8005fa4:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8005fa6:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8005fa8:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8005fac:	b10b      	cbz	r3, 8005fb2 <HAL_SUBGHZ_Init+0x16>
 8005fae:	2d03      	cmp	r5, #3
 8005fb0:	d121      	bne.n	8005ff6 <HAL_SUBGHZ_Init+0x5a>
    hsubghz->Lock = HAL_UNLOCKED;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	7163      	strb	r3, [r4, #5]
    hsubghz->TxCpltCallback              = HAL_SUBGHZ_TxCpltCallback;
 8005fb6:	4b38      	ldr	r3, [pc, #224]	@ (8006098 <HAL_SUBGHZ_Init+0xfc>)
 8005fb8:	60e3      	str	r3, [r4, #12]
    hsubghz->RxCpltCallback              = HAL_SUBGHZ_RxCpltCallback;
 8005fba:	4b38      	ldr	r3, [pc, #224]	@ (800609c <HAL_SUBGHZ_Init+0x100>)
 8005fbc:	6123      	str	r3, [r4, #16]
    hsubghz->PreambleDetectedCallback    = HAL_SUBGHZ_PreambleDetectedCallback;
 8005fbe:	4b38      	ldr	r3, [pc, #224]	@ (80060a0 <HAL_SUBGHZ_Init+0x104>)
 8005fc0:	6163      	str	r3, [r4, #20]
    hsubghz->SyncWordValidCallback       = HAL_SUBGHZ_SyncWordValidCallback;
 8005fc2:	4b38      	ldr	r3, [pc, #224]	@ (80060a4 <HAL_SUBGHZ_Init+0x108>)
 8005fc4:	61a3      	str	r3, [r4, #24]
    hsubghz->HeaderValidCallback         = HAL_SUBGHZ_HeaderValidCallback;
 8005fc6:	4b38      	ldr	r3, [pc, #224]	@ (80060a8 <HAL_SUBGHZ_Init+0x10c>)
 8005fc8:	61e3      	str	r3, [r4, #28]
    hsubghz->HeaderErrorCallback         = HAL_SUBGHZ_HeaderErrorCallback;
 8005fca:	4b38      	ldr	r3, [pc, #224]	@ (80060ac <HAL_SUBGHZ_Init+0x110>)
 8005fcc:	6223      	str	r3, [r4, #32]
    hsubghz->CRCErrorCallback            = HAL_SUBGHZ_CRCErrorCallback;
 8005fce:	4b38      	ldr	r3, [pc, #224]	@ (80060b0 <HAL_SUBGHZ_Init+0x114>)
 8005fd0:	6263      	str	r3, [r4, #36]	@ 0x24
    hsubghz->CADStatusCallback           = HAL_SUBGHZ_CADStatusCallback;
 8005fd2:	4b38      	ldr	r3, [pc, #224]	@ (80060b4 <HAL_SUBGHZ_Init+0x118>)
 8005fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
    hsubghz->RxTxTimeoutCallback         = HAL_SUBGHZ_RxTxTimeoutCallback;
 8005fd6:	4b38      	ldr	r3, [pc, #224]	@ (80060b8 <HAL_SUBGHZ_Init+0x11c>)
 8005fd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hsubghz->LrFhssHopCallback           = HAL_SUBGHZ_LrFhssHopCallback;
 8005fda:	4b38      	ldr	r3, [pc, #224]	@ (80060bc <HAL_SUBGHZ_Init+0x120>)
 8005fdc:	63a3      	str	r3, [r4, #56]	@ 0x38
    if (hsubghz->MspInitCallback == NULL)
 8005fde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005fe0:	b1db      	cbz	r3, 800601a <HAL_SUBGHZ_Init+0x7e>
    hsubghz->MspInitCallback(hsubghz);
 8005fe2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4798      	blx	r3
  SET_BIT(EXTI->IMR2, ExtiLine);
 8005fe8:	4a35      	ldr	r2, [pc, #212]	@ (80060c0 <HAL_SUBGHZ_Init+0x124>)
 8005fea:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005fee:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ff2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8005ff6:	b19d      	cbz	r5, 8006020 <HAL_SUBGHZ_Init+0x84>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8005ff8:	4b32      	ldr	r3, [pc, #200]	@ (80060c4 <HAL_SUBGHZ_Init+0x128>)
 8005ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ffe:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 8006000:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006002:	6820      	ldr	r0, [r4, #0]
 8006004:	f7ff ffb8 	bl	8005f78 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006008:	2301      	movs	r3, #1
 800600a:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800600c:	2300      	movs	r3, #0
 800600e:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006010:	2301      	movs	r3, #1
 8006012:	71a3      	strb	r3, [r4, #6]
}
 8006014:	4628      	mov	r0, r5
 8006016:	b003      	add	sp, #12
 8006018:	bd30      	pop	{r4, r5, pc}
      hsubghz->MspInitCallback = HAL_SUBGHZ_MspInit; /* Legacy weak MspInit  */
 800601a:	4b2b      	ldr	r3, [pc, #172]	@ (80060c8 <HAL_SUBGHZ_Init+0x12c>)
 800601c:	6323      	str	r3, [r4, #48]	@ 0x30
 800601e:	e7e0      	b.n	8005fe2 <HAL_SUBGHZ_Init+0x46>
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006020:	2302      	movs	r3, #2
 8006022:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006024:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006028:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 800602c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006030:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006034:	4b25      	ldr	r3, [pc, #148]	@ (80060cc <HAL_SUBGHZ_Init+0x130>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800603c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006040:	2264      	movs	r2, #100	@ 0x64
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	e014      	b.n	8006074 <HAL_SUBGHZ_Init+0xd8>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800604a:	2501      	movs	r5, #1
 800604c:	60a5      	str	r5, [r4, #8]
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800604e:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <HAL_SUBGHZ_Init+0x128>)
 8006050:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006054:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006062:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006068:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 800606a:	2d00      	cmp	r5, #0
 800606c:	d1d0      	bne.n	8006010 <HAL_SUBGHZ_Init+0x74>
 800606e:	e7c8      	b.n	8006002 <HAL_SUBGHZ_Init+0x66>
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ec      	beq.n	800604e <HAL_SUBGHZ_Init+0xb2>
      if (count == 0U)
 8006074:	9b01      	ldr	r3, [sp, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0e7      	beq.n	800604a <HAL_SUBGHZ_Init+0xae>
      count--;
 800607a:	9b01      	ldr	r3, [sp, #4]
 800607c:	3b01      	subs	r3, #1
 800607e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006088:	f413 4380 	ands.w	r3, r3, #16384	@ 0x4000
 800608c:	d0f0      	beq.n	8006070 <HAL_SUBGHZ_Init+0xd4>
 800608e:	2301      	movs	r3, #1
 8006090:	e7ee      	b.n	8006070 <HAL_SUBGHZ_Init+0xd4>
    return status;
 8006092:	2501      	movs	r5, #1
 8006094:	e7be      	b.n	8006014 <HAL_SUBGHZ_Init+0x78>
 8006096:	bf00      	nop
 8006098:	0800a2fd 	.word	0x0800a2fd
 800609c:	0800a30d 	.word	0x0800a30d
 80060a0:	0800a375 	.word	0x0800a375
 80060a4:	0800a385 	.word	0x0800a385
 80060a8:	0800a395 	.word	0x0800a395
 80060ac:	0800a365 	.word	0x0800a365
 80060b0:	0800a31d 	.word	0x0800a31d
 80060b4:	0800a32d 	.word	0x0800a32d
 80060b8:	0800a351 	.word	0x0800a351
 80060bc:	0800a3a5 	.word	0x0800a3a5
 80060c0:	58000800 	.word	0x58000800
 80060c4:	58000400 	.word	0x58000400
 80060c8:	08001c3d 	.word	0x08001c3d
 80060cc:	20000008 	.word	0x20000008

080060d0 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80060d0:	b082      	sub	sp, #8
 80060d2:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80060d4:	4b1a      	ldr	r3, [pc, #104]	@ (8006140 <SUBGHZSPI_Transmit+0x70>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80060dc:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80060e0:	2064      	movs	r0, #100	@ 0x64
 80060e2:	fb00 f303 	mul.w	r3, r0, r3
 80060e6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80060e8:	9b01      	ldr	r3, [sp, #4]
 80060ea:	b14b      	cbz	r3, 8006100 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80060f2:	4b14      	ldr	r3, [pc, #80]	@ (8006144 <SUBGHZSPI_Transmit+0x74>)
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f013 0f02 	tst.w	r3, #2
 80060fa:	d0f5      	beq.n	80060e8 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80060fc:	2000      	movs	r0, #0
 80060fe:	e001      	b.n	8006104 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006100:	2001      	movs	r0, #1
 8006102:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006104:	4b0f      	ldr	r3, [pc, #60]	@ (8006144 <SUBGHZSPI_Transmit+0x74>)
 8006106:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006108:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <SUBGHZSPI_Transmit+0x70>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006110:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006114:	2164      	movs	r1, #100	@ 0x64
 8006116:	fb01 f303 	mul.w	r3, r1, r3
 800611a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800611c:	9b01      	ldr	r3, [sp, #4]
 800611e:	b143      	cbz	r3, 8006132 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006120:	9b01      	ldr	r3, [sp, #4]
 8006122:	3b01      	subs	r3, #1
 8006124:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8006126:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <SUBGHZSPI_Transmit+0x74>)
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	f013 0f01 	tst.w	r3, #1
 800612e:	d0f5      	beq.n	800611c <SUBGHZSPI_Transmit+0x4c>
 8006130:	e001      	b.n	8006136 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006132:	2001      	movs	r0, #1
 8006134:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8006136:	4b03      	ldr	r3, [pc, #12]	@ (8006144 <SUBGHZSPI_Transmit+0x74>)
 8006138:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800613a:	b002      	add	sp, #8
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20000008 	.word	0x20000008
 8006144:	58010000 	.word	0x58010000

08006148 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8006148:	b082      	sub	sp, #8
 800614a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800614c:	4b1c      	ldr	r3, [pc, #112]	@ (80061c0 <SUBGHZSPI_Receive+0x78>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006154:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006158:	2064      	movs	r0, #100	@ 0x64
 800615a:	fb00 f303 	mul.w	r3, r0, r3
 800615e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8006160:	9b01      	ldr	r3, [sp, #4]
 8006162:	b14b      	cbz	r3, 8006178 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	3b01      	subs	r3, #1
 8006168:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800616a:	4b16      	ldr	r3, [pc, #88]	@ (80061c4 <SUBGHZSPI_Receive+0x7c>)
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f013 0f02 	tst.w	r3, #2
 8006172:	d0f5      	beq.n	8006160 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006174:	2000      	movs	r0, #0
 8006176:	e001      	b.n	800617c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006178:	2001      	movs	r0, #1
 800617a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 800617c:	4b11      	ldr	r3, [pc, #68]	@ (80061c4 <SUBGHZSPI_Receive+0x7c>)
 800617e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8006182:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006186:	4b0e      	ldr	r3, [pc, #56]	@ (80061c0 <SUBGHZSPI_Receive+0x78>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800618e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006192:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8006196:	fb0c f303 	mul.w	r3, ip, r3
 800619a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800619c:	9b01      	ldr	r3, [sp, #4]
 800619e:	b143      	cbz	r3, 80061b2 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80061a0:	9b01      	ldr	r3, [sp, #4]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80061a6:	4b07      	ldr	r3, [pc, #28]	@ (80061c4 <SUBGHZSPI_Receive+0x7c>)
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f013 0f01 	tst.w	r3, #1
 80061ae:	d0f5      	beq.n	800619c <SUBGHZSPI_Receive+0x54>
 80061b0:	e001      	b.n	80061b6 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80061b2:	2001      	movs	r0, #1
 80061b4:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80061b6:	4b03      	ldr	r3, [pc, #12]	@ (80061c4 <SUBGHZSPI_Receive+0x7c>)
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	700b      	strb	r3, [r1, #0]

  return status;
}
 80061bc:	b002      	add	sp, #8
 80061be:	4770      	bx	lr
 80061c0:	20000008 	.word	0x20000008
 80061c4:	58010000 	.word	0x58010000

080061c8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80061c8:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80061ca:	4b13      	ldr	r3, [pc, #76]	@ (8006218 <SUBGHZ_WaitOnBusy+0x50>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80061d2:	f3c3 434b 	ubfx	r3, r3, #17, #12
 80061d6:	2264      	movs	r2, #100	@ 0x64
 80061d8:	fb02 f303 	mul.w	r3, r2, r3
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	e006      	b.n	80061ee <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80061e0:	2302      	movs	r3, #2
 80061e2:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 80061e4:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 80061e6:	b002      	add	sp, #8
 80061e8:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80061ea:	4213      	tst	r3, r2
 80061ec:	d012      	beq.n	8006214 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80061ee:	4b0b      	ldr	r3, [pc, #44]	@ (800621c <SUBGHZ_WaitOnBusy+0x54>)
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f013 0304 	ands.w	r3, r3, #4
 80061f6:	d000      	beq.n	80061fa <SUBGHZ_WaitOnBusy+0x32>
 80061f8:	2301      	movs	r3, #1
    if (count == 0U)
 80061fa:	9a01      	ldr	r2, [sp, #4]
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d0ef      	beq.n	80061e0 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006200:	9a01      	ldr	r2, [sp, #4]
 8006202:	3a01      	subs	r2, #1
 8006204:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006206:	4a05      	ldr	r2, [pc, #20]	@ (800621c <SUBGHZ_WaitOnBusy+0x54>)
 8006208:	6952      	ldr	r2, [r2, #20]
 800620a:	f012 0202 	ands.w	r2, r2, #2
 800620e:	d0ec      	beq.n	80061ea <SUBGHZ_WaitOnBusy+0x22>
 8006210:	2201      	movs	r2, #1
 8006212:	e7ea      	b.n	80061ea <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006214:	2000      	movs	r0, #0
 8006216:	e7e6      	b.n	80061e6 <SUBGHZ_WaitOnBusy+0x1e>
 8006218:	20000008 	.word	0x20000008
 800621c:	58000400 	.word	0x58000400

08006220 <SUBGHZ_CheckDeviceReady>:
{
 8006220:	b500      	push	{lr}
 8006222:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006224:	7903      	ldrb	r3, [r0, #4]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d004      	beq.n	8006234 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800622a:	f7ff ffcd 	bl	80061c8 <SUBGHZ_WaitOnBusy>
}
 800622e:	b003      	add	sp, #12
 8006230:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006234:	4b0d      	ldr	r3, [pc, #52]	@ (800626c <SUBGHZ_CheckDeviceReady+0x4c>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800623c:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8006240:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006242:	4a0b      	ldr	r2, [pc, #44]	@ (8006270 <SUBGHZ_CheckDeviceReady+0x50>)
 8006244:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006248:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800624c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      count--;
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	3b01      	subs	r3, #1
 8006254:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f9      	bne.n	8006250 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800625c:	4a04      	ldr	r2, [pc, #16]	@ (8006270 <SUBGHZ_CheckDeviceReady+0x50>)
 800625e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800626a:	e7de      	b.n	800622a <SUBGHZ_CheckDeviceReady+0xa>
 800626c:	20000008 	.word	0x20000008
 8006270:	58000400 	.word	0x58000400

08006274 <HAL_SUBGHZ_WriteRegisters>:
{
 8006274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006278:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800627a:	7980      	ldrb	r0, [r0, #6]
 800627c:	fa5f f880 	uxtb.w	r8, r0
 8006280:	f1b8 0f01 	cmp.w	r8, #1
 8006284:	d13e      	bne.n	8006304 <HAL_SUBGHZ_WriteRegisters+0x90>
 8006286:	460c      	mov	r4, r1
 8006288:	4617      	mov	r7, r2
 800628a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800628c:	796b      	ldrb	r3, [r5, #5]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d03b      	beq.n	800630a <HAL_SUBGHZ_WriteRegisters+0x96>
 8006292:	2301      	movs	r3, #1
 8006294:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006296:	2302      	movs	r3, #2
 8006298:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800629a:	4628      	mov	r0, r5
 800629c:	f7ff ffc0 	bl	8006220 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80062a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006310 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80062a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80062a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80062ae:	210d      	movs	r1, #13
 80062b0:	4628      	mov	r0, r5
 80062b2:	f7ff ff0d 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80062b6:	0a21      	lsrs	r1, r4, #8
 80062b8:	4628      	mov	r0, r5
 80062ba:	f7ff ff09 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80062be:	b2e1      	uxtb	r1, r4
 80062c0:	4628      	mov	r0, r5
 80062c2:	f7ff ff05 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80062c6:	2400      	movs	r4, #0
 80062c8:	e005      	b.n	80062d6 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80062ca:	5d39      	ldrb	r1, [r7, r4]
 80062cc:	4628      	mov	r0, r5
 80062ce:	f7ff feff 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80062d2:	3401      	adds	r4, #1
 80062d4:	b2a4      	uxth	r4, r4
 80062d6:	42b4      	cmp	r4, r6
 80062d8:	d3f7      	bcc.n	80062ca <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80062da:	4a0d      	ldr	r2, [pc, #52]	@ (8006310 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 80062dc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80062e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7ff ff6d 	bl	80061c8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80062ee:	68ab      	ldr	r3, [r5, #8]
 80062f0:	b90b      	cbnz	r3, 80062f6 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 80062f2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80062f6:	2301      	movs	r3, #1
 80062f8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80062fa:	2300      	movs	r3, #0
 80062fc:	716b      	strb	r3, [r5, #5]
}
 80062fe:	4640      	mov	r0, r8
 8006300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006304:	f04f 0802 	mov.w	r8, #2
 8006308:	e7f9      	b.n	80062fe <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800630a:	f04f 0802 	mov.w	r8, #2
 800630e:	e7f6      	b.n	80062fe <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006310:	58000400 	.word	0x58000400

08006314 <HAL_SUBGHZ_ReadRegisters>:
{
 8006314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006318:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800631a:	7980      	ldrb	r0, [r0, #6]
 800631c:	fa5f f880 	uxtb.w	r8, r0
 8006320:	f1b8 0f01 	cmp.w	r8, #1
 8006324:	d141      	bne.n	80063aa <HAL_SUBGHZ_ReadRegisters+0x96>
 8006326:	460c      	mov	r4, r1
 8006328:	4615      	mov	r5, r2
 800632a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800632c:	7973      	ldrb	r3, [r6, #5]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d03e      	beq.n	80063b0 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006332:	2301      	movs	r3, #1
 8006334:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006336:	4630      	mov	r0, r6
 8006338:	f7ff ff72 	bl	8006220 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800633c:	4a1e      	ldr	r2, [pc, #120]	@ (80063b8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800633e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006342:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800634a:	211d      	movs	r1, #29
 800634c:	4630      	mov	r0, r6
 800634e:	f7ff febf 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006352:	0a21      	lsrs	r1, r4, #8
 8006354:	4630      	mov	r0, r6
 8006356:	f7ff febb 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800635a:	b2e1      	uxtb	r1, r4
 800635c:	4630      	mov	r0, r6
 800635e:	f7ff feb7 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006362:	2100      	movs	r1, #0
 8006364:	4630      	mov	r0, r6
 8006366:	f7ff feb3 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800636a:	2400      	movs	r4, #0
 800636c:	e006      	b.n	800637c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800636e:	4629      	mov	r1, r5
 8006370:	4630      	mov	r0, r6
 8006372:	f7ff fee9 	bl	8006148 <SUBGHZSPI_Receive>
      pData++;
 8006376:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006378:	3401      	adds	r4, #1
 800637a:	b2a4      	uxth	r4, r4
 800637c:	42bc      	cmp	r4, r7
 800637e:	d3f6      	bcc.n	800636e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006380:	4a0d      	ldr	r2, [pc, #52]	@ (80063b8 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8006382:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800638a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff ff1a 	bl	80061c8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006394:	68b3      	ldr	r3, [r6, #8]
 8006396:	b90b      	cbnz	r3, 800639c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8006398:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800639c:	2301      	movs	r3, #1
 800639e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80063a0:	2300      	movs	r3, #0
 80063a2:	7173      	strb	r3, [r6, #5]
}
 80063a4:	4640      	mov	r0, r8
 80063a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80063aa:	f04f 0802 	mov.w	r8, #2
 80063ae:	e7f9      	b.n	80063a4 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 80063b0:	f04f 0802 	mov.w	r8, #2
 80063b4:	e7f6      	b.n	80063a4 <HAL_SUBGHZ_ReadRegisters+0x90>
 80063b6:	bf00      	nop
 80063b8:	58000400 	.word	0x58000400

080063bc <HAL_SUBGHZ_ExecSetCmd>:
{
 80063bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c0:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80063c2:	7980      	ldrb	r0, [r0, #6]
 80063c4:	fa5f f980 	uxtb.w	r9, r0
 80063c8:	f1b9 0f01 	cmp.w	r9, #1
 80063cc:	d143      	bne.n	8006456 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 80063ce:	4688      	mov	r8, r1
 80063d0:	4617      	mov	r7, r2
 80063d2:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80063d4:	796b      	ldrb	r3, [r5, #5]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d040      	beq.n	800645c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 80063da:	2301      	movs	r3, #1
 80063dc:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80063de:	4628      	mov	r0, r5
 80063e0:	f7ff ff1e 	bl	8006220 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80063e4:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 80063e8:	d005      	beq.n	80063f6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 80063ea:	f1b8 0f94 	cmp.w	r8, #148	@ 0x94
 80063ee:	d002      	beq.n	80063f6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	712b      	strb	r3, [r5, #4]
 80063f4:	e001      	b.n	80063fa <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80063f6:	2301      	movs	r3, #1
 80063f8:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80063fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006464 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80063fc:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006400:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006408:	4641      	mov	r1, r8
 800640a:	4628      	mov	r0, r5
 800640c:	f7ff fe60 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006410:	2400      	movs	r4, #0
 8006412:	e005      	b.n	8006420 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006414:	5d39      	ldrb	r1, [r7, r4]
 8006416:	4628      	mov	r0, r5
 8006418:	f7ff fe5a 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800641c:	3401      	adds	r4, #1
 800641e:	b2a4      	uxth	r4, r4
 8006420:	42b4      	cmp	r4, r6
 8006422:	d3f7      	bcc.n	8006414 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006424:	4a0f      	ldr	r2, [pc, #60]	@ (8006464 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006426:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800642a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800642e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    if (Command != RADIO_SET_SLEEP)
 8006432:	f1b8 0f84 	cmp.w	r8, #132	@ 0x84
 8006436:	d10a      	bne.n	800644e <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006438:	68ab      	ldr	r3, [r5, #8]
 800643a:	b90b      	cbnz	r3, 8006440 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 800643c:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006440:	2301      	movs	r3, #1
 8006442:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006444:	2300      	movs	r3, #0
 8006446:	716b      	strb	r3, [r5, #5]
}
 8006448:	4648      	mov	r0, r9
 800644a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800644e:	4628      	mov	r0, r5
 8006450:	f7ff feba 	bl	80061c8 <SUBGHZ_WaitOnBusy>
 8006454:	e7f0      	b.n	8006438 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8006456:	f04f 0902 	mov.w	r9, #2
 800645a:	e7f5      	b.n	8006448 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 800645c:	f04f 0902 	mov.w	r9, #2
 8006460:	e7f2      	b.n	8006448 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8006462:	bf00      	nop
 8006464:	58000400 	.word	0x58000400

08006468 <HAL_SUBGHZ_ExecGetCmd>:
{
 8006468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800646c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800646e:	7980      	ldrb	r0, [r0, #6]
 8006470:	fa5f f880 	uxtb.w	r8, r0
 8006474:	f1b8 0f01 	cmp.w	r8, #1
 8006478:	d139      	bne.n	80064ee <HAL_SUBGHZ_ExecGetCmd+0x86>
 800647a:	460c      	mov	r4, r1
 800647c:	4615      	mov	r5, r2
 800647e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006480:	7973      	ldrb	r3, [r6, #5]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d036      	beq.n	80064f4 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8006486:	2301      	movs	r3, #1
 8006488:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff fec8 	bl	8006220 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006490:	4a1a      	ldr	r2, [pc, #104]	@ (80064fc <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006492:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006496:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800649a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800649e:	4621      	mov	r1, r4
 80064a0:	4630      	mov	r0, r6
 80064a2:	f7ff fe15 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80064a6:	2100      	movs	r1, #0
 80064a8:	4630      	mov	r0, r6
 80064aa:	f7ff fe11 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80064ae:	2400      	movs	r4, #0
 80064b0:	e006      	b.n	80064c0 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80064b2:	4629      	mov	r1, r5
 80064b4:	4630      	mov	r0, r6
 80064b6:	f7ff fe47 	bl	8006148 <SUBGHZSPI_Receive>
      pData++;
 80064ba:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80064bc:	3401      	adds	r4, #1
 80064be:	b2a4      	uxth	r4, r4
 80064c0:	42bc      	cmp	r4, r7
 80064c2:	d3f6      	bcc.n	80064b2 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80064c4:	4a0d      	ldr	r2, [pc, #52]	@ (80064fc <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80064c6:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80064ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80064d2:	4630      	mov	r0, r6
 80064d4:	f7ff fe78 	bl	80061c8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80064d8:	68b3      	ldr	r3, [r6, #8]
 80064da:	b90b      	cbnz	r3, 80064e0 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 80064dc:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80064e0:	2301      	movs	r3, #1
 80064e2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80064e4:	2300      	movs	r3, #0
 80064e6:	7173      	strb	r3, [r6, #5]
}
 80064e8:	4640      	mov	r0, r8
 80064ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80064ee:	f04f 0802 	mov.w	r8, #2
 80064f2:	e7f9      	b.n	80064e8 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80064f4:	f04f 0802 	mov.w	r8, #2
 80064f8:	e7f6      	b.n	80064e8 <HAL_SUBGHZ_ExecGetCmd+0x80>
 80064fa:	bf00      	nop
 80064fc:	58000400 	.word	0x58000400

08006500 <HAL_SUBGHZ_IRQHandler>:
{
 8006500:	b530      	push	{r4, r5, lr}
 8006502:	b083      	sub	sp, #12
 8006504:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006506:	2300      	movs	r3, #0
 8006508:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800650c:	2302      	movs	r3, #2
 800650e:	aa01      	add	r2, sp, #4
 8006510:	2112      	movs	r1, #18
 8006512:	f7ff ffa9 	bl	8006468 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006516:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800651a:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800651e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8006522:	b224      	sxth	r4, r4
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006524:	2302      	movs	r3, #2
 8006526:	aa01      	add	r2, sp, #4
 8006528:	4619      	mov	r1, r3
 800652a:	4628      	mov	r0, r5
 800652c:	f7ff ff46 	bl	80063bc <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006530:	f014 0f01 	tst.w	r4, #1
 8006534:	d002      	beq.n	800653c <HAL_SUBGHZ_IRQHandler+0x3c>
    hsubghz->TxCpltCallback(hsubghz);
 8006536:	68eb      	ldr	r3, [r5, #12]
 8006538:	4628      	mov	r0, r5
 800653a:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800653c:	f014 0f02 	tst.w	r4, #2
 8006540:	d002      	beq.n	8006548 <HAL_SUBGHZ_IRQHandler+0x48>
    hsubghz->RxCpltCallback(hsubghz);
 8006542:	692b      	ldr	r3, [r5, #16]
 8006544:	4628      	mov	r0, r5
 8006546:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006548:	f014 0f04 	tst.w	r4, #4
 800654c:	d002      	beq.n	8006554 <HAL_SUBGHZ_IRQHandler+0x54>
    hsubghz->PreambleDetectedCallback(hsubghz);
 800654e:	696b      	ldr	r3, [r5, #20]
 8006550:	4628      	mov	r0, r5
 8006552:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006554:	f014 0f08 	tst.w	r4, #8
 8006558:	d002      	beq.n	8006560 <HAL_SUBGHZ_IRQHandler+0x60>
    hsubghz->SyncWordValidCallback(hsubghz);
 800655a:	69ab      	ldr	r3, [r5, #24]
 800655c:	4628      	mov	r0, r5
 800655e:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006560:	f014 0f10 	tst.w	r4, #16
 8006564:	d002      	beq.n	800656c <HAL_SUBGHZ_IRQHandler+0x6c>
    hsubghz->HeaderValidCallback(hsubghz);
 8006566:	69eb      	ldr	r3, [r5, #28]
 8006568:	4628      	mov	r0, r5
 800656a:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800656c:	f014 0f20 	tst.w	r4, #32
 8006570:	d002      	beq.n	8006578 <HAL_SUBGHZ_IRQHandler+0x78>
    hsubghz->HeaderErrorCallback(hsubghz);
 8006572:	6a2b      	ldr	r3, [r5, #32]
 8006574:	4628      	mov	r0, r5
 8006576:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006578:	f014 0f40 	tst.w	r4, #64	@ 0x40
 800657c:	d002      	beq.n	8006584 <HAL_SUBGHZ_IRQHandler+0x84>
    hsubghz->CRCErrorCallback(hsubghz);
 800657e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8006580:	4628      	mov	r0, r5
 8006582:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006584:	f014 0f80 	tst.w	r4, #128	@ 0x80
 8006588:	d006      	beq.n	8006598 <HAL_SUBGHZ_IRQHandler+0x98>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800658a:	f414 7f80 	tst.w	r4, #256	@ 0x100
 800658e:	d011      	beq.n	80065b4 <HAL_SUBGHZ_IRQHandler+0xb4>
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006590:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8006592:	2101      	movs	r1, #1
 8006594:	4628      	mov	r0, r5
 8006596:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006598:	f414 7f00 	tst.w	r4, #512	@ 0x200
 800659c:	d002      	beq.n	80065a4 <HAL_SUBGHZ_IRQHandler+0xa4>
    hsubghz->RxTxTimeoutCallback(hsubghz);
 800659e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80065a0:	4628      	mov	r0, r5
 80065a2:	4798      	blx	r3
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80065a4:	f414 4f80 	tst.w	r4, #16384	@ 0x4000
 80065a8:	d002      	beq.n	80065b0 <HAL_SUBGHZ_IRQHandler+0xb0>
    hsubghz->LrFhssHopCallback(hsubghz);
 80065aa:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80065ac:	4628      	mov	r0, r5
 80065ae:	4798      	blx	r3
}
 80065b0:	b003      	add	sp, #12
 80065b2:	bd30      	pop	{r4, r5, pc}
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80065b4:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 80065b6:	2100      	movs	r1, #0
 80065b8:	4628      	mov	r0, r5
 80065ba:	4798      	blx	r3
 80065bc:	e7ec      	b.n	8006598 <HAL_SUBGHZ_IRQHandler+0x98>
	...

080065c0 <HAL_SUBGHZ_WriteBuffer>:
{
 80065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c4:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80065c6:	7980      	ldrb	r0, [r0, #6]
 80065c8:	fa5f f880 	uxtb.w	r8, r0
 80065cc:	f1b8 0f01 	cmp.w	r8, #1
 80065d0:	d138      	bne.n	8006644 <HAL_SUBGHZ_WriteBuffer+0x84>
 80065d2:	460c      	mov	r4, r1
 80065d4:	4617      	mov	r7, r2
 80065d6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80065d8:	796b      	ldrb	r3, [r5, #5]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d035      	beq.n	800664a <HAL_SUBGHZ_WriteBuffer+0x8a>
 80065de:	2301      	movs	r3, #1
 80065e0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80065e2:	4628      	mov	r0, r5
 80065e4:	f7ff fe1c 	bl	8006220 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80065e8:	4a19      	ldr	r2, [pc, #100]	@ (8006650 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80065ea:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80065ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80065f6:	210e      	movs	r1, #14
 80065f8:	4628      	mov	r0, r5
 80065fa:	f7ff fd69 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	f7ff fd65 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006606:	2400      	movs	r4, #0
 8006608:	e005      	b.n	8006616 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800660a:	5d39      	ldrb	r1, [r7, r4]
 800660c:	4628      	mov	r0, r5
 800660e:	f7ff fd5f 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006612:	3401      	adds	r4, #1
 8006614:	b2a4      	uxth	r4, r4
 8006616:	42b4      	cmp	r4, r6
 8006618:	d3f7      	bcc.n	800660a <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800661a:	4a0d      	ldr	r2, [pc, #52]	@ (8006650 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800661c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006624:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006628:	4628      	mov	r0, r5
 800662a:	f7ff fdcd 	bl	80061c8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800662e:	68ab      	ldr	r3, [r5, #8]
 8006630:	b90b      	cbnz	r3, 8006636 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8006632:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006636:	2301      	movs	r3, #1
 8006638:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800663a:	2300      	movs	r3, #0
 800663c:	716b      	strb	r3, [r5, #5]
}
 800663e:	4640      	mov	r0, r8
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006644:	f04f 0802 	mov.w	r8, #2
 8006648:	e7f9      	b.n	800663e <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800664a:	f04f 0802 	mov.w	r8, #2
 800664e:	e7f6      	b.n	800663e <HAL_SUBGHZ_WriteBuffer+0x7e>
 8006650:	58000400 	.word	0x58000400

08006654 <HAL_SUBGHZ_ReadBuffer>:
{
 8006654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006658:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800665a:	7980      	ldrb	r0, [r0, #6]
 800665c:	fa5f f880 	uxtb.w	r8, r0
 8006660:	f1b8 0f01 	cmp.w	r8, #1
 8006664:	d13d      	bne.n	80066e2 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8006666:	460c      	mov	r4, r1
 8006668:	4615      	mov	r5, r2
 800666a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800666c:	7973      	ldrb	r3, [r6, #5]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d03a      	beq.n	80066e8 <HAL_SUBGHZ_ReadBuffer+0x94>
 8006672:	2301      	movs	r3, #1
 8006674:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006676:	4630      	mov	r0, r6
 8006678:	f7ff fdd2 	bl	8006220 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800667c:	4a1c      	ldr	r2, [pc, #112]	@ (80066f0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800667e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8006682:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006686:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800668a:	211e      	movs	r1, #30
 800668c:	4630      	mov	r0, r6
 800668e:	f7ff fd1f 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006692:	4621      	mov	r1, r4
 8006694:	4630      	mov	r0, r6
 8006696:	f7ff fd1b 	bl	80060d0 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800669a:	2100      	movs	r1, #0
 800669c:	4630      	mov	r0, r6
 800669e:	f7ff fd17 	bl	80060d0 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80066a2:	2400      	movs	r4, #0
 80066a4:	e006      	b.n	80066b4 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80066a6:	4629      	mov	r1, r5
 80066a8:	4630      	mov	r0, r6
 80066aa:	f7ff fd4d 	bl	8006148 <SUBGHZSPI_Receive>
      pData++;
 80066ae:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80066b0:	3401      	adds	r4, #1
 80066b2:	b2a4      	uxth	r4, r4
 80066b4:	42bc      	cmp	r4, r7
 80066b6:	d3f6      	bcc.n	80066a6 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80066b8:	4a0d      	ldr	r2, [pc, #52]	@ (80066f0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 80066ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80066be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff fd7e 	bl	80061c8 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80066cc:	68b3      	ldr	r3, [r6, #8]
 80066ce:	b90b      	cbnz	r3, 80066d4 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80066d0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80066d4:	2301      	movs	r3, #1
 80066d6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80066d8:	2300      	movs	r3, #0
 80066da:	7173      	strb	r3, [r6, #5]
}
 80066dc:	4640      	mov	r0, r8
 80066de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80066e2:	f04f 0802 	mov.w	r8, #2
 80066e6:	e7f9      	b.n	80066dc <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80066e8:	f04f 0802 	mov.w	r8, #2
 80066ec:	e7f6      	b.n	80066dc <HAL_SUBGHZ_ReadBuffer+0x88>
 80066ee:	bf00      	nop
 80066f0:	58000400 	.word	0x58000400

080066f4 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80066f4:	4770      	bx	lr

080066f6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80066f6:	4770      	bx	lr

080066f8 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80066f8:	4770      	bx	lr

080066fa <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80066fa:	4770      	bx	lr

080066fc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80066fc:	4770      	bx	lr

080066fe <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066fe:	4770      	bx	lr

08006700 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006700:	4770      	bx	lr

08006702 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006702:	4770      	bx	lr

08006704 <HAL_TIM_TriggerHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006704:	4770      	bx	lr

08006706 <HAL_TIM_ErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006706:	4770      	bx	lr

08006708 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006708:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800670a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800670c:	6a04      	ldr	r4, [r0, #32]
 800670e:	f024 0401 	bic.w	r4, r4, #1
 8006712:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006714:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006716:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800671a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800671e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006722:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006724:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006726:	6203      	str	r3, [r0, #32]
}
 8006728:	bc10      	pop	{r4}
 800672a:	4770      	bx	lr

0800672c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800672c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800672e:	6a03      	ldr	r3, [r0, #32]
 8006730:	f023 0310 	bic.w	r3, r3, #16
 8006734:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006736:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006738:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800673a:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800673e:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006742:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006746:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800674a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800674c:	6203      	str	r3, [r0, #32]
}
 800674e:	bc10      	pop	{r4}
 8006750:	4770      	bx	lr

08006752 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006752:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006754:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800675c:	430b      	orrs	r3, r1
 800675e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006762:	6083      	str	r3, [r0, #8]
}
 8006764:	4770      	bx	lr
	...

08006768 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006768:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800676c:	b2db      	uxtb	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	d122      	bne.n	80067b8 <HAL_TIM_Base_Start_IT+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8006772:	2302      	movs	r3, #2
 8006774:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006778:	6802      	ldr	r2, [r0, #0]
 800677a:	68d3      	ldr	r3, [r2, #12]
 800677c:	f043 0301 	orr.w	r3, r3, #1
 8006780:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006782:	6803      	ldr	r3, [r0, #0]
 8006784:	4a0f      	ldr	r2, [pc, #60]	@ (80067c4 <HAL_TIM_Base_Start_IT+0x5c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d008      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x34>
 800678a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678e:	d005      	beq.n	800679c <HAL_TIM_Base_Start_IT+0x34>
    __HAL_TIM_ENABLE(htim);
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	f042 0201 	orr.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006798:	2000      	movs	r0, #0
 800679a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800679c:	6899      	ldr	r1, [r3, #8]
 800679e:	4a0a      	ldr	r2, [pc, #40]	@ (80067c8 <HAL_TIM_Base_Start_IT+0x60>)
 80067a0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067a2:	2a06      	cmp	r2, #6
 80067a4:	d00a      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x54>
 80067a6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80067aa:	d009      	beq.n	80067c0 <HAL_TIM_Base_Start_IT+0x58>
      __HAL_TIM_ENABLE(htim);
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80067b4:	2000      	movs	r0, #0
 80067b6:	4770      	bx	lr
    return HAL_ERROR;
 80067b8:	2001      	movs	r0, #1
 80067ba:	4770      	bx	lr
  return HAL_OK;
 80067bc:	2000      	movs	r0, #0
 80067be:	4770      	bx	lr
 80067c0:	2000      	movs	r0, #0
}
 80067c2:	4770      	bx	lr
 80067c4:	40012c00 	.word	0x40012c00
 80067c8:	00010007 	.word	0x00010007

080067cc <HAL_TIM_IRQHandler>:
{
 80067cc:	b510      	push	{r4, lr}
 80067ce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067d0:	6803      	ldr	r3, [r0, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	f012 0f02 	tst.w	r2, #2
 80067d8:	d013      	beq.n	8006802 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	f012 0f02 	tst.w	r2, #2
 80067e0:	d00f      	beq.n	8006802 <HAL_TIM_IRQHandler+0x36>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067e2:	f06f 0202 	mvn.w	r2, #2
 80067e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e8:	2301      	movs	r3, #1
 80067ea:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ec:	6803      	ldr	r3, [r0, #0]
 80067ee:	699b      	ldr	r3, [r3, #24]
 80067f0:	f013 0f03 	tst.w	r3, #3
 80067f4:	f000 80a3 	beq.w	800693e <HAL_TIM_IRQHandler+0x172>
          htim->IC_CaptureCallback(htim);
 80067f8:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 80067fc:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067fe:	2300      	movs	r3, #0
 8006800:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	691a      	ldr	r2, [r3, #16]
 8006806:	f012 0f04 	tst.w	r2, #4
 800680a:	d014      	beq.n	8006836 <HAL_TIM_IRQHandler+0x6a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	f012 0f04 	tst.w	r2, #4
 8006812:	d010      	beq.n	8006836 <HAL_TIM_IRQHandler+0x6a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006814:	f06f 0204 	mvn.w	r2, #4
 8006818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800681a:	2302      	movs	r3, #2
 800681c:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006826:	f000 8092 	beq.w	800694e <HAL_TIM_IRQHandler+0x182>
        htim->IC_CaptureCallback(htim);
 800682a:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800682e:	4620      	mov	r0, r4
 8006830:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006832:	2300      	movs	r3, #0
 8006834:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	f012 0f08 	tst.w	r2, #8
 800683e:	d014      	beq.n	800686a <HAL_TIM_IRQHandler+0x9e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006840:	68da      	ldr	r2, [r3, #12]
 8006842:	f012 0f08 	tst.w	r2, #8
 8006846:	d010      	beq.n	800686a <HAL_TIM_IRQHandler+0x9e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006848:	f06f 0208 	mvn.w	r2, #8
 800684c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800684e:	2304      	movs	r3, #4
 8006850:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	f013 0f03 	tst.w	r3, #3
 800685a:	f000 8081 	beq.w	8006960 <HAL_TIM_IRQHandler+0x194>
        htim->IC_CaptureCallback(htim);
 800685e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8006862:	4620      	mov	r0, r4
 8006864:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006866:	2300      	movs	r3, #0
 8006868:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	f012 0f10 	tst.w	r2, #16
 8006872:	d013      	beq.n	800689c <HAL_TIM_IRQHandler+0xd0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006874:	68da      	ldr	r2, [r3, #12]
 8006876:	f012 0f10 	tst.w	r2, #16
 800687a:	d00f      	beq.n	800689c <HAL_TIM_IRQHandler+0xd0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800687c:	f06f 0210 	mvn.w	r2, #16
 8006880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006882:	2308      	movs	r3, #8
 8006884:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006886:	6823      	ldr	r3, [r4, #0]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800688e:	d070      	beq.n	8006972 <HAL_TIM_IRQHandler+0x1a6>
        htim->IC_CaptureCallback(htim);
 8006890:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8006894:	4620      	mov	r0, r4
 8006896:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006898:	2300      	movs	r3, #0
 800689a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800689c:	6823      	ldr	r3, [r4, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	f012 0f01 	tst.w	r2, #1
 80068a4:	d00a      	beq.n	80068bc <HAL_TIM_IRQHandler+0xf0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	f012 0f01 	tst.w	r2, #1
 80068ac:	d006      	beq.n	80068bc <HAL_TIM_IRQHandler+0xf0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068ae:	f06f 0201 	mvn.w	r2, #1
 80068b2:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 80068b4:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80068b8:	4620      	mov	r0, r4
 80068ba:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068bc:	6823      	ldr	r3, [r4, #0]
 80068be:	691a      	ldr	r2, [r3, #16]
 80068c0:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80068c4:	d00a      	beq.n	80068dc <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80068cc:	d006      	beq.n	80068dc <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068ce:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80068d2:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 80068d4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 80068d8:	4620      	mov	r0, r4
 80068da:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	691a      	ldr	r2, [r3, #16]
 80068e0:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80068e4:	d00a      	beq.n	80068fc <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80068ec:	d006      	beq.n	80068fc <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068ee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80068f2:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 80068f4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 80068f8:	4620      	mov	r0, r4
 80068fa:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068fc:	6823      	ldr	r3, [r4, #0]
 80068fe:	691a      	ldr	r2, [r3, #16]
 8006900:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8006904:	d00a      	beq.n	800691c <HAL_TIM_IRQHandler+0x150>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800690c:	d006      	beq.n	800691c <HAL_TIM_IRQHandler+0x150>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800690e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006912:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 8006914:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8006918:	4620      	mov	r0, r4
 800691a:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	f012 0f20 	tst.w	r2, #32
 8006924:	d00a      	beq.n	800693c <HAL_TIM_IRQHandler+0x170>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	f012 0f20 	tst.w	r2, #32
 800692c:	d006      	beq.n	800693c <HAL_TIM_IRQHandler+0x170>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800692e:	f06f 0220 	mvn.w	r2, #32
 8006932:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8006934:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
 8006938:	4620      	mov	r0, r4
 800693a:	4798      	blx	r3
}
 800693c:	bd10      	pop	{r4, pc}
          htim->OC_DelayElapsedCallback(htim);
 800693e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8006942:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006944:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 8006948:	4620      	mov	r0, r4
 800694a:	4798      	blx	r3
 800694c:	e757      	b.n	80067fe <HAL_TIM_IRQHandler+0x32>
        htim->OC_DelayElapsedCallback(htim);
 800694e:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006952:	4620      	mov	r0, r4
 8006954:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006956:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800695a:	4620      	mov	r0, r4
 800695c:	4798      	blx	r3
 800695e:	e768      	b.n	8006832 <HAL_TIM_IRQHandler+0x66>
        htim->OC_DelayElapsedCallback(htim);
 8006960:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006964:	4620      	mov	r0, r4
 8006966:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006968:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800696c:	4620      	mov	r0, r4
 800696e:	4798      	blx	r3
 8006970:	e779      	b.n	8006866 <HAL_TIM_IRQHandler+0x9a>
        htim->OC_DelayElapsedCallback(htim);
 8006972:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006976:	4620      	mov	r0, r4
 8006978:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800697a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800697e:	4620      	mov	r0, r4
 8006980:	4798      	blx	r3
 8006982:	e789      	b.n	8006898 <HAL_TIM_IRQHandler+0xcc>

08006984 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006984:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006986:	4a1a      	ldr	r2, [pc, #104]	@ (80069f0 <TIM_Base_SetConfig+0x6c>)
 8006988:	4290      	cmp	r0, r2
 800698a:	d002      	beq.n	8006992 <TIM_Base_SetConfig+0xe>
 800698c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006990:	d103      	bne.n	800699a <TIM_Base_SetConfig+0x16>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006996:	684a      	ldr	r2, [r1, #4]
 8006998:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800699a:	4a15      	ldr	r2, [pc, #84]	@ (80069f0 <TIM_Base_SetConfig+0x6c>)
 800699c:	4290      	cmp	r0, r2
 800699e:	d00a      	beq.n	80069b6 <TIM_Base_SetConfig+0x32>
 80069a0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80069a4:	d007      	beq.n	80069b6 <TIM_Base_SetConfig+0x32>
 80069a6:	f502 52c0 	add.w	r2, r2, #6144	@ 0x1800
 80069aa:	4290      	cmp	r0, r2
 80069ac:	d003      	beq.n	80069b6 <TIM_Base_SetConfig+0x32>
 80069ae:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80069b2:	4290      	cmp	r0, r2
 80069b4:	d103      	bne.n	80069be <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~TIM_CR1_CKD;
 80069b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ba:	68ca      	ldr	r2, [r1, #12]
 80069bc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c2:	694a      	ldr	r2, [r1, #20]
 80069c4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80069c6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069c8:	688b      	ldr	r3, [r1, #8]
 80069ca:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80069cc:	680b      	ldr	r3, [r1, #0]
 80069ce:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069d0:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <TIM_Base_SetConfig+0x6c>)
 80069d2:	4298      	cmp	r0, r3
 80069d4:	d007      	beq.n	80069e6 <TIM_Base_SetConfig+0x62>
 80069d6:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 80069da:	4298      	cmp	r0, r3
 80069dc:	d003      	beq.n	80069e6 <TIM_Base_SetConfig+0x62>
 80069de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069e2:	4298      	cmp	r0, r3
 80069e4:	d101      	bne.n	80069ea <TIM_Base_SetConfig+0x66>
    TIMx->RCR = Structure->RepetitionCounter;
 80069e6:	690b      	ldr	r3, [r1, #16]
 80069e8:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 80069ea:	2301      	movs	r3, #1
 80069ec:	6143      	str	r3, [r0, #20]
}
 80069ee:	4770      	bx	lr
 80069f0:	40012c00 	.word	0x40012c00

080069f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069f4:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069f6:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f8:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069fc:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006a00:	430a      	orrs	r2, r1
 8006a02:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a06:	6082      	str	r2, [r0, #8]
}
 8006a08:	bc10      	pop	{r4}
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006a0c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d076      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0xf6>
{
 8006a14:	b510      	push	{r4, lr}
 8006a16:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006a24:	6802      	ldr	r2, [r0, #0]
 8006a26:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a28:	4b37      	ldr	r3, [pc, #220]	@ (8006b08 <HAL_TIM_ConfigClockSource+0xfc>)
 8006a2a:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8006a2c:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006a2e:	680b      	ldr	r3, [r1, #0]
 8006a30:	2b60      	cmp	r3, #96	@ 0x60
 8006a32:	d04c      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0xc2>
 8006a34:	d829      	bhi.n	8006a8a <HAL_TIM_ConfigClockSource+0x7e>
 8006a36:	2b40      	cmp	r3, #64	@ 0x40
 8006a38:	d054      	beq.n	8006ae4 <HAL_TIM_ConfigClockSource+0xd8>
 8006a3a:	d90c      	bls.n	8006a56 <HAL_TIM_ConfigClockSource+0x4a>
 8006a3c:	2b50      	cmp	r3, #80	@ 0x50
 8006a3e:	d122      	bne.n	8006a86 <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a40:	68ca      	ldr	r2, [r1, #12]
 8006a42:	6849      	ldr	r1, [r1, #4]
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	f7ff fe5f 	bl	8006708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a4a:	2150      	movs	r1, #80	@ 0x50
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	f7ff fe80 	bl	8006752 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006a52:	2000      	movs	r0, #0
      break;
 8006a54:	e005      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d00d      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x6a>
 8006a5a:	d909      	bls.n	8006a70 <HAL_TIM_ConfigClockSource+0x64>
 8006a5c:	2b30      	cmp	r3, #48	@ 0x30
 8006a5e:	d00a      	beq.n	8006a76 <HAL_TIM_ConfigClockSource+0x6a>
      status = HAL_ERROR;
 8006a60:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8006a62:	2301      	movs	r3, #1
 8006a64:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006a6e:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 8006a70:	b10b      	cbz	r3, 8006a76 <HAL_TIM_ConfigClockSource+0x6a>
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d105      	bne.n	8006a82 <HAL_TIM_ConfigClockSource+0x76>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a76:	4619      	mov	r1, r3
 8006a78:	6820      	ldr	r0, [r4, #0]
 8006a7a:	f7ff fe6a 	bl	8006752 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006a7e:	2000      	movs	r0, #0
      break;
 8006a80:	e7ef      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8006a82:	2001      	movs	r0, #1
 8006a84:	e7ed      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
 8006a86:	2001      	movs	r0, #1
 8006a88:	e7eb      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006a8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8e:	d034      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0xee>
 8006a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a94:	d10c      	bne.n	8006ab0 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ETR_SetConfig(htim->Instance,
 8006a96:	68cb      	ldr	r3, [r1, #12]
 8006a98:	684a      	ldr	r2, [r1, #4]
 8006a9a:	6889      	ldr	r1, [r1, #8]
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	f7ff ffa9 	bl	80069f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	6893      	ldr	r3, [r2, #8]
 8006aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006aaa:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006aac:	2000      	movs	r0, #0
      break;
 8006aae:	e7d8      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006ab0:	2b70      	cmp	r3, #112	@ 0x70
 8006ab2:	d124      	bne.n	8006afe <HAL_TIM_ConfigClockSource+0xf2>
      TIM_ETR_SetConfig(htim->Instance,
 8006ab4:	68cb      	ldr	r3, [r1, #12]
 8006ab6:	684a      	ldr	r2, [r1, #4]
 8006ab8:	6889      	ldr	r1, [r1, #8]
 8006aba:	6820      	ldr	r0, [r4, #0]
 8006abc:	f7ff ff9a 	bl	80069f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006ac0:	6822      	ldr	r2, [r4, #0]
 8006ac2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ac4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006ac8:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006aca:	2000      	movs	r0, #0
      break;
 8006acc:	e7c9      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ace:	68ca      	ldr	r2, [r1, #12]
 8006ad0:	6849      	ldr	r1, [r1, #4]
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	f7ff fe2a 	bl	800672c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ad8:	2160      	movs	r1, #96	@ 0x60
 8006ada:	6820      	ldr	r0, [r4, #0]
 8006adc:	f7ff fe39 	bl	8006752 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006ae0:	2000      	movs	r0, #0
      break;
 8006ae2:	e7be      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ae4:	68ca      	ldr	r2, [r1, #12]
 8006ae6:	6849      	ldr	r1, [r1, #4]
 8006ae8:	6820      	ldr	r0, [r4, #0]
 8006aea:	f7ff fe0d 	bl	8006708 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aee:	2140      	movs	r1, #64	@ 0x40
 8006af0:	6820      	ldr	r0, [r4, #0]
 8006af2:	f7ff fe2e 	bl	8006752 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8006af6:	2000      	movs	r0, #0
      break;
 8006af8:	e7b3      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
  switch (sClockSourceConfig->ClockSource)
 8006afa:	2000      	movs	r0, #0
 8006afc:	e7b1      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
      status = HAL_ERROR;
 8006afe:	2001      	movs	r0, #1
 8006b00:	e7af      	b.n	8006a62 <HAL_TIM_ConfigClockSource+0x56>
  __HAL_LOCK(htim);
 8006b02:	2002      	movs	r0, #2
}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	ffce0088 	.word	0xffce0088

08006b0c <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006b0c:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <TIM_ResetCallback+0x58>)
 8006b0e:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006b12:	4b15      	ldr	r3, [pc, #84]	@ (8006b68 <TIM_ResetCallback+0x5c>)
 8006b14:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006b18:	4b14      	ldr	r3, [pc, #80]	@ (8006b6c <TIM_ResetCallback+0x60>)
 8006b1a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006b1e:	4b14      	ldr	r3, [pc, #80]	@ (8006b70 <TIM_ResetCallback+0x64>)
 8006b20:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006b24:	4b13      	ldr	r3, [pc, #76]	@ (8006b74 <TIM_ResetCallback+0x68>)
 8006b26:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006b2a:	4b13      	ldr	r3, [pc, #76]	@ (8006b78 <TIM_ResetCallback+0x6c>)
 8006b2c:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006b30:	4b12      	ldr	r3, [pc, #72]	@ (8006b7c <TIM_ResetCallback+0x70>)
 8006b32:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006b36:	4b12      	ldr	r3, [pc, #72]	@ (8006b80 <TIM_ResetCallback+0x74>)
 8006b38:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006b3c:	4b11      	ldr	r3, [pc, #68]	@ (8006b84 <TIM_ResetCallback+0x78>)
 8006b3e:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006b42:	4b11      	ldr	r3, [pc, #68]	@ (8006b88 <TIM_ResetCallback+0x7c>)
 8006b44:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006b48:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <TIM_ResetCallback+0x80>)
 8006b4a:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006b4e:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <TIM_ResetCallback+0x84>)
 8006b50:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006b54:	4b0f      	ldr	r3, [pc, #60]	@ (8006b94 <TIM_ResetCallback+0x88>)
 8006b56:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006b5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006b98 <TIM_ResetCallback+0x8c>)
 8006b5c:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	080066f5 	.word	0x080066f5
 8006b68:	080066f7 	.word	0x080066f7
 8006b6c:	08006703 	.word	0x08006703
 8006b70:	08006705 	.word	0x08006705
 8006b74:	080066fb 	.word	0x080066fb
 8006b78:	080066fd 	.word	0x080066fd
 8006b7c:	080066f9 	.word	0x080066f9
 8006b80:	080066ff 	.word	0x080066ff
 8006b84:	08006701 	.word	0x08006701
 8006b88:	08006707 	.word	0x08006707
 8006b8c:	08006c79 	.word	0x08006c79
 8006b90:	08006c7b 	.word	0x08006c7b
 8006b94:	08006c7d 	.word	0x08006c7d
 8006b98:	08006c7f 	.word	0x08006c7f

08006b9c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006b9c:	b3a0      	cbz	r0, 8006c08 <HAL_TIM_Base_Init+0x6c>
{
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8006ba2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006ba6:	b313      	cbz	r3, 8006bee <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bae:	4621      	mov	r1, r4
 8006bb0:	f851 0b04 	ldr.w	r0, [r1], #4
 8006bb4:	f7ff fee6 	bl	8006984 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006bc2:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006bc6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006bca:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006bce:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006bda:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006bde:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006be2:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006be6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006bea:	2000      	movs	r0, #0
}
 8006bec:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8006bee:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 8006bf2:	f7ff ff8b 	bl	8006b0c <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 8006bf6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006bf8:	b11b      	cbz	r3, 8006c02 <HAL_TIM_Base_Init+0x66>
    htim->Base_MspInitCallback(htim);
 8006bfa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	4798      	blx	r3
 8006c00:	e7d2      	b.n	8006ba8 <HAL_TIM_Base_Init+0xc>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006c02:	4b02      	ldr	r3, [pc, #8]	@ (8006c0c <HAL_TIM_Base_Init+0x70>)
 8006c04:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8006c06:	e7f8      	b.n	8006bfa <HAL_TIM_Base_Init+0x5e>
    return HAL_ERROR;
 8006c08:	2001      	movs	r0, #1
}
 8006c0a:	4770      	bx	lr
 8006c0c:	08001f41 	.word	0x08001f41

08006c10 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c10:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006c14:	2a01      	cmp	r2, #1
 8006c16:	d02b      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0x60>
{
 8006c18:	b430      	push	{r4, r5}
 8006c1a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c22:	2202      	movs	r2, #2
 8006c24:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c28:	6800      	ldr	r0, [r0, #0]
 8006c2a:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c2c:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c2e:	4d11      	ldr	r5, [pc, #68]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8006c30:	42a8      	cmp	r0, r5
 8006c32:	d018      	beq.n	8006c66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c34:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c38:	680d      	ldr	r5, [r1, #0]
 8006c3a:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c3c:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	480c      	ldr	r0, [pc, #48]	@ (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x64>)
 8006c42:	4282      	cmp	r2, r0
 8006c44:	d002      	beq.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006c46:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c4c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c50:	6889      	ldr	r1, [r1, #8]
 8006c52:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c54:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8006c62:	bc30      	pop	{r4, r5}
 8006c64:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c66:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c6a:	684d      	ldr	r5, [r1, #4]
 8006c6c:	432a      	orrs	r2, r5
 8006c6e:	e7e1      	b.n	8006c34 <HAL_TIMEx_MasterConfigSynchronization+0x24>
  __HAL_LOCK(htim);
 8006c70:	2002      	movs	r0, #2
}
 8006c72:	4770      	bx	lr
 8006c74:	40012c00 	.word	0x40012c00

08006c78 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c78:	4770      	bx	lr

08006c7a <HAL_TIMEx_CommutHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006c7a:	4770      	bx	lr

08006c7c <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c7c:	4770      	bx	lr

08006c7e <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_TxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c80:	4770      	bx	lr

08006c82 <HAL_UART_RxHalfCpltCallback>:
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006c82:	4770      	bx	lr

08006c84 <HAL_UART_ErrorCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c84:	4770      	bx	lr

08006c86 <HAL_UART_AbortCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8006c86:	4770      	bx	lr

08006c88 <HAL_UART_AbortTransmitCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8006c88:	4770      	bx	lr

08006c8a <HAL_UART_AbortReceiveCpltCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8006c8a:	4770      	bx	lr

08006c8c <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c8c:	4770      	bx	lr

08006c8e <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006c8e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c90:	e852 3f00 	ldrex	r3, [r2]
 8006c94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	e842 3100 	strex	r1, r3, [r2]
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	d1f6      	bne.n	8006c8e <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006ca0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	f102 0308 	add.w	r3, r2, #8
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	3208      	adds	r2, #8
 8006cb0:	e842 3100 	strex	r1, r3, [r2]
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	d1f3      	bne.n	8006ca0 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cb8:	2320      	movs	r3, #32
 8006cba:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
}
 8006cbe:	4770      	bx	lr

08006cc0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cc0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	e852 3f00 	ldrex	r3, [r2]
 8006cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	e842 3100 	strex	r1, r3, [r2]
 8006cce:	2900      	cmp	r1, #0
 8006cd0:	d1f6      	bne.n	8006cc0 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cd2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	f102 0308 	add.w	r3, r2, #8
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ce0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce4:	3208      	adds	r2, #8
 8006ce6:	e842 3100 	strex	r1, r3, [r2]
 8006cea:	2900      	cmp	r1, #0
 8006cec:	d1f1      	bne.n	8006cd2 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cee:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d006      	beq.n	8006d02 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cfe:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8006d00:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d02:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	e852 3f00 	ldrex	r3, [r2]
 8006d08:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	e842 3100 	strex	r1, r3, [r2]
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d1f6      	bne.n	8006d02 <UART_EndRxTransfer+0x42>
 8006d14:	e7ee      	b.n	8006cf4 <UART_EndRxTransfer+0x34>

08006d16 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d16:	b508      	push	{r3, lr}
 8006d18:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d1a:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f013 0f20 	tst.w	r3, #32
 8006d24:	d118      	bne.n	8006d58 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006d26:	2300      	movs	r3, #0
 8006d28:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d2c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	f102 0308 	add.w	r3, r2, #8
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	3208      	adds	r2, #8
 8006d3c:	e842 3100 	strex	r1, r3, [r2]
 8006d40:	2900      	cmp	r1, #0
 8006d42:	d1f3      	bne.n	8006d2c <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d44:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d46:	e852 3f00 	ldrex	r3, [r2]
 8006d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4e:	e842 3100 	strex	r1, r3, [r2]
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d1f6      	bne.n	8006d44 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d56:	bd08      	pop	{r3, pc}
    huart->TxCpltCallback(huart);
 8006d58:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 8006d5c:	4798      	blx	r3
}
 8006d5e:	e7fa      	b.n	8006d56 <UART_DMATransmitCplt+0x40>

08006d60 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d60:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d62:	6a80      	ldr	r0, [r0, #40]	@ 0x28

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8006d64:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8006d68:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6a:	bd08      	pop	{r3, pc}

08006d6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d6c:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d6e:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d70:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d74:	f8d4 508c 	ldr.w	r5, [r4, #140]	@ 0x8c

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d80:	d001      	beq.n	8006d86 <UART_DMAError+0x1a>
 8006d82:	2a21      	cmp	r2, #33	@ 0x21
 8006d84:	d011      	beq.n	8006daa <UART_DMAError+0x3e>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8006d8e:	d001      	beq.n	8006d94 <UART_DMAError+0x28>
 8006d90:	2d22      	cmp	r5, #34	@ 0x22
 8006d92:	d011      	beq.n	8006db8 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d94:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006d98:	f043 0310 	orr.w	r3, r3, #16
 8006d9c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006da0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8006da4:	4620      	mov	r0, r4
 8006da6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da8:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006db0:	4620      	mov	r0, r4
 8006db2:	f7ff ff6c 	bl	8006c8e <UART_EndTxTransfer>
 8006db6:	e7e6      	b.n	8006d86 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006db8:	2300      	movs	r3, #0
 8006dba:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f7ff ff7e 	bl	8006cc0 <UART_EndRxTransfer>
 8006dc4:	e7e6      	b.n	8006d94 <UART_DMAError+0x28>

08006dc6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dc6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006dc8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006dd0:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006dd4:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8006dd8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dda:	bd08      	pop	{r3, pc}

08006ddc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ddc:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dde:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	e852 3f00 	ldrex	r3, [r2]
 8006de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de8:	e842 3100 	strex	r1, r3, [r2]
 8006dec:	2900      	cmp	r1, #0
 8006dee:	d1f6      	bne.n	8006dde <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006df0:	2320      	movs	r3, #32
 8006df2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006df6:	2300      	movs	r3, #0
 8006df8:	6783      	str	r3, [r0, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006dfa:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 8006dfe:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e00:	bd08      	pop	{r3, pc}
	...

08006e04 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e04:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8006e06:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e0a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8006e0e:	2a22      	cmp	r2, #34	@ 0x22
 8006e10:	d005      	beq.n	8006e1e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e12:	6802      	ldr	r2, [r0, #0]
 8006e14:	6993      	ldr	r3, [r2, #24]
 8006e16:	f043 0308 	orr.w	r3, r3, #8
 8006e1a:	6193      	str	r3, [r2, #24]
  }
}
 8006e1c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e1e:	6802      	ldr	r2, [r0, #0]
 8006e20:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8006e26:	400b      	ands	r3, r1
 8006e28:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8006e2a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8006e30:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3b01      	subs	r3, #1
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8006e3e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e9      	bne.n	8006e1c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e48:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	e852 3f00 	ldrex	r3, [r2]
 8006e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	e842 3100 	strex	r1, r3, [r2]
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d1f6      	bne.n	8006e48 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e5a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	f102 0308 	add.w	r3, r2, #8
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	3208      	adds	r2, #8
 8006e6a:	e842 3100 	strex	r1, r3, [r2]
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	d1f3      	bne.n	8006e5a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8006e72:	2320      	movs	r3, #32
 8006e74:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e7c:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e7e:	6803      	ldr	r3, [r0, #0]
 8006e80:	4a17      	ldr	r2, [pc, #92]	@ (8006ee0 <UART_RxISR_8BIT+0xdc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00c      	beq.n	8006ea0 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006e8c:	d008      	beq.n	8006ea0 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e8e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	e852 3f00 	ldrex	r3, [r2]
 8006e94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	e842 3100 	strex	r1, r3, [r2]
 8006e9c:	2900      	cmp	r1, #0
 8006e9e:	d1f6      	bne.n	8006e8e <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d003      	beq.n	8006eae <UART_RxISR_8BIT+0xaa>
        huart->RxCpltCallback(huart);
 8006ea6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8006eaa:	4798      	blx	r3
 8006eac:	e7b6      	b.n	8006e1c <UART_RxISR_8BIT+0x18>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eb2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	e852 3f00 	ldrex	r3, [r2]
 8006eb8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	e842 3100 	strex	r1, r3, [r2]
 8006ec0:	2900      	cmp	r1, #0
 8006ec2:	d1f6      	bne.n	8006eb2 <UART_RxISR_8BIT+0xae>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ec4:	6803      	ldr	r3, [r0, #0]
 8006ec6:	69da      	ldr	r2, [r3, #28]
 8006ec8:	f012 0f10 	tst.w	r2, #16
 8006ecc:	d001      	beq.n	8006ed2 <UART_RxISR_8BIT+0xce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ece:	2210      	movs	r2, #16
 8006ed0:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006ed2:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8006ed6:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006eda:	4798      	blx	r3
 8006edc:	e79e      	b.n	8006e1c <UART_RxISR_8BIT+0x18>
 8006ede:	bf00      	nop
 8006ee0:	40008000 	.word	0x40008000

08006ee4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ee4:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ee6:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eea:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8006eee:	2b22      	cmp	r3, #34	@ 0x22
 8006ef0:	d005      	beq.n	8006efe <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ef2:	6802      	ldr	r2, [r0, #0]
 8006ef4:	6993      	ldr	r3, [r2, #24]
 8006ef6:	f043 0308 	orr.w	r3, r3, #8
 8006efa:	6193      	str	r3, [r2, #24]
  }
}
 8006efc:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006efe:	6803      	ldr	r3, [r0, #0]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f02:	6d81      	ldr	r1, [r0, #88]	@ 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f04:	4013      	ands	r3, r2
 8006f06:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 8006f08:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	6583      	str	r3, [r0, #88]	@ 0x58
    huart->RxXferCount--;
 8006f0e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
    if (huart->RxXferCount == 0U)
 8006f1c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	@ 0x5e
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1ea      	bne.n	8006efc <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f26:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	e852 3f00 	ldrex	r3, [r2]
 8006f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	e842 3100 	strex	r1, r3, [r2]
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d1f6      	bne.n	8006f26 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f38:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	f102 0308 	add.w	r3, r2, #8
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	3208      	adds	r2, #8
 8006f48:	e842 3100 	strex	r1, r3, [r2]
 8006f4c:	2900      	cmp	r1, #0
 8006f4e:	d1f3      	bne.n	8006f38 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8006f50:	2320      	movs	r3, #32
 8006f52:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
      huart->RxISR = NULL;
 8006f56:	2300      	movs	r3, #0
 8006f58:	6743      	str	r3, [r0, #116]	@ 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f5a:	6703      	str	r3, [r0, #112]	@ 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006f5c:	6803      	ldr	r3, [r0, #0]
 8006f5e:	4a17      	ldr	r2, [pc, #92]	@ (8006fbc <UART_RxISR_16BIT+0xd8>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d00c      	beq.n	8006f7e <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8006f6a:	d008      	beq.n	8006f7e <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006f6c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	e852 3f00 	ldrex	r3, [r2]
 8006f72:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	e842 3100 	strex	r1, r3, [r2]
 8006f7a:	2900      	cmp	r1, #0
 8006f7c:	d1f6      	bne.n	8006f6c <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d003      	beq.n	8006f8c <UART_RxISR_16BIT+0xa8>
        huart->RxCpltCallback(huart);
 8006f84:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8006f88:	4798      	blx	r3
 8006f8a:	e7b7      	b.n	8006efc <UART_RxISR_16BIT+0x18>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	66c3      	str	r3, [r0, #108]	@ 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f90:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	e852 3f00 	ldrex	r3, [r2]
 8006f96:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9a:	e842 3100 	strex	r1, r3, [r2]
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	d1f6      	bne.n	8006f90 <UART_RxISR_16BIT+0xac>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fa2:	6803      	ldr	r3, [r0, #0]
 8006fa4:	69da      	ldr	r2, [r3, #28]
 8006fa6:	f012 0f10 	tst.w	r2, #16
 8006faa:	d001      	beq.n	8006fb0 <UART_RxISR_16BIT+0xcc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fac:	2210      	movs	r2, #16
 8006fae:	621a      	str	r2, [r3, #32]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006fb0:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8006fb4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	@ 0x5c
 8006fb8:	4798      	blx	r3
 8006fba:	e79f      	b.n	8006efc <UART_RxISR_16BIT+0x18>
 8006fbc:	40008000 	.word	0x40008000

08006fc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8006fc4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006fc8:	6803      	ldr	r3, [r0, #0]
 8006fca:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006fcc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fd0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fd4:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8006fd8:	2a22      	cmp	r2, #34	@ 0x22
 8006fda:	d005      	beq.n	8006fe8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fdc:	699a      	ldr	r2, [r3, #24]
 8006fde:	f042 0208 	orr.w	r2, r2, #8
 8006fe2:	619a      	str	r2, [r3, #24]
  }
}
 8006fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 8006fea:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fee:	e00e      	b.n	800700e <UART_RxISR_8BIT_FIFOEN+0x4e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ff0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8006ff4:	b133      	cbz	r3, 8007004 <UART_RxISR_8BIT_FIFOEN+0x44>
          huart->ErrorCallback(huart);
 8006ff6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 8007004:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d047      	beq.n	800709e <UART_RxISR_8BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800700e:	2f00      	cmp	r7, #0
 8007010:	f000 8095 	beq.w	800713e <UART_RxISR_8BIT_FIFOEN+0x17e>
 8007014:	f015 0f20 	tst.w	r5, #32
 8007018:	f000 8091 	beq.w	800713e <UART_RxISR_8BIT_FIFOEN+0x17e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007020:	b2f3      	uxtb	r3, r6
 8007022:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8007024:	400b      	ands	r3, r1
 8007026:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 8007028:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800702a:	3301      	adds	r3, #1
 800702c:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 800702e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007032:	b29b      	uxth	r3, r3
 8007034:	3b01      	subs	r3, #1
 8007036:	b29b      	uxth	r3, r3
 8007038:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007040:	f015 0f07 	tst.w	r5, #7
 8007044:	d0de      	beq.n	8007004 <UART_RxISR_8BIT_FIFOEN+0x44>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007046:	f015 0f01 	tst.w	r5, #1
 800704a:	d009      	beq.n	8007060 <UART_RxISR_8BIT_FIFOEN+0xa0>
 800704c:	f419 7f80 	tst.w	r9, #256	@ 0x100
 8007050:	d006      	beq.n	8007060 <UART_RxISR_8BIT_FIFOEN+0xa0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007052:	2201      	movs	r2, #1
 8007054:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007056:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007060:	f015 0f02 	tst.w	r5, #2
 8007064:	d00b      	beq.n	800707e <UART_RxISR_8BIT_FIFOEN+0xbe>
 8007066:	f018 0f01 	tst.w	r8, #1
 800706a:	d008      	beq.n	800707e <UART_RxISR_8BIT_FIFOEN+0xbe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	2202      	movs	r2, #2
 8007070:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007072:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007076:	f043 0304 	orr.w	r3, r3, #4
 800707a:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800707e:	f015 0f04 	tst.w	r5, #4
 8007082:	d0b5      	beq.n	8006ff0 <UART_RxISR_8BIT_FIFOEN+0x30>
 8007084:	f018 0f01 	tst.w	r8, #1
 8007088:	d0b2      	beq.n	8006ff0 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	2204      	movs	r2, #4
 800708e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007090:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800709c:	e7a8      	b.n	8006ff0 <UART_RxISR_8BIT_FIFOEN+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800709e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	e852 3f00 	ldrex	r3, [r2]
 80070a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	e842 3100 	strex	r1, r3, [r2]
 80070ac:	2900      	cmp	r1, #0
 80070ae:	d1f6      	bne.n	800709e <UART_RxISR_8BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	f102 0308 	add.w	r3, r2, #8
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	3208      	adds	r2, #8
 80070c4:	e842 3100 	strex	r1, r3, [r2]
 80070c8:	2900      	cmp	r1, #0
 80070ca:	d1f1      	bne.n	80070b0 <UART_RxISR_8BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80070cc:	2320      	movs	r3, #32
 80070ce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 80070d2:	2300      	movs	r3, #0
 80070d4:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070d6:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	4a2a      	ldr	r2, [pc, #168]	@ (8007184 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <UART_RxISR_8BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80070e6:	d107      	bne.n	80070f8 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d00e      	beq.n	800710c <UART_RxISR_8BIT_FIFOEN+0x14c>
          huart->RxCpltCallback(huart);
 80070ee:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 80070f2:	4620      	mov	r0, r4
 80070f4:	4798      	blx	r3
 80070f6:	e78a      	b.n	800700e <UART_RxISR_8BIT_FIFOEN+0x4e>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070f8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	e852 3f00 	ldrex	r3, [r2]
 80070fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	e842 3100 	strex	r1, r3, [r2]
 8007106:	2900      	cmp	r1, #0
 8007108:	d1f6      	bne.n	80070f8 <UART_RxISR_8BIT_FIFOEN+0x138>
 800710a:	e7ed      	b.n	80070e8 <UART_RxISR_8BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710c:	2300      	movs	r3, #0
 800710e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007110:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	e852 3f00 	ldrex	r3, [r2]
 8007116:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	e842 3100 	strex	r1, r3, [r2]
 800711e:	2900      	cmp	r1, #0
 8007120:	d1f6      	bne.n	8007110 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	69da      	ldr	r2, [r3, #28]
 8007126:	f012 0f10 	tst.w	r2, #16
 800712a:	d001      	beq.n	8007130 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800712c:	2210      	movs	r2, #16
 800712e:	621a      	str	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 8007130:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8007134:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007138:	4620      	mov	r0, r4
 800713a:	4798      	blx	r3
 800713c:	e767      	b.n	800700e <UART_RxISR_8BIT_FIFOEN+0x4e>
    rxdatacount = huart->RxXferCount;
 800713e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007142:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007144:	2b00      	cmp	r3, #0
 8007146:	f43f af4d 	beq.w	8006fe4 <UART_RxISR_8BIT_FIFOEN+0x24>
 800714a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 800714e:	429a      	cmp	r2, r3
 8007150:	f67f af48 	bls.w	8006fe4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007154:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	f102 0308 	add.w	r3, r2, #8
 800715a:	e853 3f00 	ldrex	r3, [r3]
 800715e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	3208      	adds	r2, #8
 8007164:	e842 3100 	strex	r1, r3, [r2]
 8007168:	2900      	cmp	r1, #0
 800716a:	d1f3      	bne.n	8007154 <UART_RxISR_8BIT_FIFOEN+0x194>
      huart->RxISR = UART_RxISR_8BIT;
 800716c:	4b06      	ldr	r3, [pc, #24]	@ (8007188 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 800716e:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007170:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	e852 3f00 	ldrex	r3, [r2]
 8007176:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717a:	e842 3100 	strex	r1, r3, [r2]
 800717e:	2900      	cmp	r1, #0
 8007180:	d1f6      	bne.n	8007170 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8007182:	e72f      	b.n	8006fe4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007184:	40008000 	.word	0x40008000
 8007188:	08006e05 	.word	0x08006e05

0800718c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800718c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007190:	f8b0 6060 	ldrh.w	r6, [r0, #96]	@ 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007194:	6803      	ldr	r3, [r0, #0]
 8007196:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007198:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800719c:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071a0:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 80071a4:	2a22      	cmp	r2, #34	@ 0x22
 80071a6:	d005      	beq.n	80071b4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	f042 0208 	orr.w	r2, r2, #8
 80071ae:	619a      	str	r2, [r3, #24]
  }
}
 80071b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80071b6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	@ 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071ba:	e00e      	b.n	80071da <UART_RxISR_16BIT_FIFOEN+0x4e>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 80071c0:	b133      	cbz	r3, 80071d0 <UART_RxISR_16BIT_FIFOEN+0x44>
          huart->ErrorCallback(huart);
 80071c2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80071c6:	4620      	mov	r0, r4
 80071c8:	4798      	blx	r3
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      if (huart->RxXferCount == 0U)
 80071d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d046      	beq.n	8007268 <UART_RxISR_16BIT_FIFOEN+0xdc>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071da:	2f00      	cmp	r7, #0
 80071dc:	f000 8094 	beq.w	8007308 <UART_RxISR_16BIT_FIFOEN+0x17c>
 80071e0:	f015 0f20 	tst.w	r5, #32
 80071e4:	f000 8090 	beq.w	8007308 <UART_RxISR_16BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071ec:	6da2      	ldr	r2, [r4, #88]	@ 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80071ee:	4033      	ands	r3, r6
 80071f0:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80071f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80071f4:	3302      	adds	r3, #2
 80071f6:	65a3      	str	r3, [r4, #88]	@ 0x58
      huart->RxXferCount--;
 80071f8:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800720a:	f015 0f07 	tst.w	r5, #7
 800720e:	d0df      	beq.n	80071d0 <UART_RxISR_16BIT_FIFOEN+0x44>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007210:	f015 0f01 	tst.w	r5, #1
 8007214:	d009      	beq.n	800722a <UART_RxISR_16BIT_FIFOEN+0x9e>
 8007216:	f419 7f80 	tst.w	r9, #256	@ 0x100
 800721a:	d006      	beq.n	800722a <UART_RxISR_16BIT_FIFOEN+0x9e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800721c:	2201      	movs	r2, #1
 800721e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007220:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722a:	f015 0f02 	tst.w	r5, #2
 800722e:	d00b      	beq.n	8007248 <UART_RxISR_16BIT_FIFOEN+0xbc>
 8007230:	f018 0f01 	tst.w	r8, #1
 8007234:	d008      	beq.n	8007248 <UART_RxISR_16BIT_FIFOEN+0xbc>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007236:	6823      	ldr	r3, [r4, #0]
 8007238:	2202      	movs	r2, #2
 800723a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800723c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007240:	f043 0304 	orr.w	r3, r3, #4
 8007244:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007248:	f015 0f04 	tst.w	r5, #4
 800724c:	d0b6      	beq.n	80071bc <UART_RxISR_16BIT_FIFOEN+0x30>
 800724e:	f018 0f01 	tst.w	r8, #1
 8007252:	d0b3      	beq.n	80071bc <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	2204      	movs	r2, #4
 8007258:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800725a:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800725e:	f043 0302 	orr.w	r3, r3, #2
 8007262:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 8007266:	e7a9      	b.n	80071bc <UART_RxISR_16BIT_FIFOEN+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007268:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	e852 3f00 	ldrex	r3, [r2]
 800726e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007272:	e842 3100 	strex	r1, r3, [r2]
 8007276:	2900      	cmp	r1, #0
 8007278:	d1f6      	bne.n	8007268 <UART_RxISR_16BIT_FIFOEN+0xdc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800727a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727c:	f102 0308 	add.w	r3, r2, #8
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007288:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	3208      	adds	r2, #8
 800728e:	e842 3100 	strex	r1, r3, [r2]
 8007292:	2900      	cmp	r1, #0
 8007294:	d1f1      	bne.n	800727a <UART_RxISR_16BIT_FIFOEN+0xee>
        huart->RxState = HAL_UART_STATE_READY;
 8007296:	2320      	movs	r3, #32
 8007298:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->RxISR = NULL;
 800729c:	2300      	movs	r3, #0
 800729e:	6763      	str	r3, [r4, #116]	@ 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072a0:	6723      	str	r3, [r4, #112]	@ 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	4a2a      	ldr	r2, [pc, #168]	@ (8007350 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d003      	beq.n	80072b2 <UART_RxISR_16BIT_FIFOEN+0x126>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 80072b0:	d107      	bne.n	80072c2 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b2:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d00e      	beq.n	80072d6 <UART_RxISR_16BIT_FIFOEN+0x14a>
          huart->RxCpltCallback(huart);
 80072b8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 80072bc:	4620      	mov	r0, r4
 80072be:	4798      	blx	r3
 80072c0:	e78b      	b.n	80071da <UART_RxISR_16BIT_FIFOEN+0x4e>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c4:	e852 3f00 	ldrex	r3, [r2]
 80072c8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	e842 3100 	strex	r1, r3, [r2]
 80072d0:	2900      	cmp	r1, #0
 80072d2:	d1f6      	bne.n	80072c2 <UART_RxISR_16BIT_FIFOEN+0x136>
 80072d4:	e7ed      	b.n	80072b2 <UART_RxISR_16BIT_FIFOEN+0x126>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d6:	2300      	movs	r3, #0
 80072d8:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072dc:	e852 3f00 	ldrex	r3, [r2]
 80072e0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	e842 3100 	strex	r1, r3, [r2]
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d1f6      	bne.n	80072da <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	f012 0f10 	tst.w	r2, #16
 80072f4:	d001      	beq.n	80072fa <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072f6:	2210      	movs	r2, #16
 80072f8:	621a      	str	r2, [r3, #32]
          huart->RxEventCallback(huart, huart->RxXferSize);
 80072fa:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 80072fe:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007302:	4620      	mov	r0, r4
 8007304:	4798      	blx	r3
 8007306:	e768      	b.n	80071da <UART_RxISR_16BIT_FIFOEN+0x4e>
    rxdatacount = huart->RxXferCount;
 8007308:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800730c:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800730e:	2b00      	cmp	r3, #0
 8007310:	f43f af4e 	beq.w	80071b0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007314:	f8b4 2068 	ldrh.w	r2, [r4, #104]	@ 0x68
 8007318:	429a      	cmp	r2, r3
 800731a:	f67f af49 	bls.w	80071b0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800731e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	f102 0308 	add.w	r3, r2, #8
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732c:	3208      	adds	r2, #8
 800732e:	e842 3100 	strex	r1, r3, [r2]
 8007332:	2900      	cmp	r1, #0
 8007334:	d1f3      	bne.n	800731e <UART_RxISR_16BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_16BIT;
 8007336:	4b07      	ldr	r3, [pc, #28]	@ (8007354 <UART_RxISR_16BIT_FIFOEN+0x1c8>)
 8007338:	6763      	str	r3, [r4, #116]	@ 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800733a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	e852 3f00 	ldrex	r3, [r2]
 8007340:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	e842 3100 	strex	r1, r3, [r2]
 8007348:	2900      	cmp	r1, #0
 800734a:	d1f6      	bne.n	800733a <UART_RxISR_16BIT_FIFOEN+0x1ae>
 800734c:	e730      	b.n	80071b0 <UART_RxISR_16BIT_FIFOEN+0x24>
 800734e:	bf00      	nop
 8007350:	40008000 	.word	0x40008000
 8007354:	08006ee5 	.word	0x08006ee5

08007358 <HAL_UART_Transmit_DMA>:
{
 8007358:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800735a:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800735e:	2a20      	cmp	r2, #32
 8007360:	d13d      	bne.n	80073de <HAL_UART_Transmit_DMA+0x86>
{
 8007362:	b510      	push	{r4, lr}
 8007364:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8007366:	2900      	cmp	r1, #0
 8007368:	d03b      	beq.n	80073e2 <HAL_UART_Transmit_DMA+0x8a>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d03b      	beq.n	80073e6 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 800736e:	6501      	str	r1, [r0, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007370:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007374:	f8a0 3056 	strh.w	r3, [r0, #86]	@ 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	2200      	movs	r2, #0
 800737a:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800737e:	2221      	movs	r2, #33	@ 0x21
 8007380:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if (huart->hdmatx != NULL)
 8007384:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8007386:	b1ca      	cbz	r2, 80073bc <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007388:	4918      	ldr	r1, [pc, #96]	@ (80073ec <HAL_UART_Transmit_DMA+0x94>)
 800738a:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800738c:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800738e:	4918      	ldr	r1, [pc, #96]	@ (80073f0 <HAL_UART_Transmit_DMA+0x98>)
 8007390:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007392:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 8007394:	4917      	ldr	r1, [pc, #92]	@ (80073f4 <HAL_UART_Transmit_DMA+0x9c>)
 8007396:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8007398:	6fc2      	ldr	r2, [r0, #124]	@ 0x7c
 800739a:	2100      	movs	r1, #0
 800739c:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800739e:	6802      	ldr	r2, [r0, #0]
 80073a0:	3228      	adds	r2, #40	@ 0x28
 80073a2:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 80073a4:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80073a6:	f7fc fa5b 	bl	8003860 <HAL_DMA_Start_IT>
 80073aa:	b138      	cbz	r0, 80073bc <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073ac:	2310      	movs	r3, #16
 80073ae:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        huart->gState = HAL_UART_STATE_READY;
 80073b2:	2320      	movs	r3, #32
 80073b4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_ERROR;
 80073b8:	2001      	movs	r0, #1
 80073ba:	e00f      	b.n	80073dc <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	2240      	movs	r2, #64	@ 0x40
 80073c0:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c4:	f102 0308 	add.w	r3, r2, #8
 80073c8:	e853 3f00 	ldrex	r3, [r3]
 80073cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	3208      	adds	r2, #8
 80073d2:	e842 3100 	strex	r1, r3, [r2]
 80073d6:	2900      	cmp	r1, #0
 80073d8:	d1f3      	bne.n	80073c2 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 80073da:	2000      	movs	r0, #0
}
 80073dc:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80073de:	2002      	movs	r0, #2
}
 80073e0:	4770      	bx	lr
      return HAL_ERROR;
 80073e2:	2001      	movs	r0, #1
 80073e4:	e7fa      	b.n	80073dc <HAL_UART_Transmit_DMA+0x84>
 80073e6:	2001      	movs	r0, #1
 80073e8:	e7f8      	b.n	80073dc <HAL_UART_Transmit_DMA+0x84>
 80073ea:	bf00      	nop
 80073ec:	08006d17 	.word	0x08006d17
 80073f0:	08006d61 	.word	0x08006d61
 80073f4:	08006d6d 	.word	0x08006d6d

080073f8 <HAL_UART_IRQHandler>:
{
 80073f8:	b570      	push	{r4, r5, r6, lr}
 80073fa:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073fc:	6802      	ldr	r2, [r0, #0]
 80073fe:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007400:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007402:	6891      	ldr	r1, [r2, #8]
  if (errorflags == 0U)
 8007404:	f640 0c0f 	movw	ip, #2063	@ 0x80f
 8007408:	ea13 0f0c 	tst.w	r3, ip
 800740c:	d10d      	bne.n	800742a <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800740e:	f013 0f20 	tst.w	r3, #32
 8007412:	d010      	beq.n	8007436 <HAL_UART_IRQHandler+0x3e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007414:	f010 0f20 	tst.w	r0, #32
 8007418:	d102      	bne.n	8007420 <HAL_UART_IRQHandler+0x28>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800741a:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 800741e:	d00a      	beq.n	8007436 <HAL_UART_IRQHandler+0x3e>
      if (huart->RxISR != NULL)
 8007420:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007422:	b10b      	cbz	r3, 8007428 <HAL_UART_IRQHandler+0x30>
        huart->RxISR(huart);
 8007424:	4620      	mov	r0, r4
 8007426:	4798      	blx	r3
}
 8007428:	bd70      	pop	{r4, r5, r6, pc}
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800742a:	4d9a      	ldr	r5, [pc, #616]	@ (8007694 <HAL_UART_IRQHandler+0x29c>)
 800742c:	400d      	ands	r5, r1
 800742e:	d130      	bne.n	8007492 <HAL_UART_IRQHandler+0x9a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007430:	4e99      	ldr	r6, [pc, #612]	@ (8007698 <HAL_UART_IRQHandler+0x2a0>)
 8007432:	4230      	tst	r0, r6
 8007434:	d12d      	bne.n	8007492 <HAL_UART_IRQHandler+0x9a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007436:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8007438:	2d01      	cmp	r5, #1
 800743a:	f000 80c7 	beq.w	80075cc <HAL_UART_IRQHandler+0x1d4>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800743e:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8007442:	d003      	beq.n	800744c <HAL_UART_IRQHandler+0x54>
 8007444:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 8007448:	f040 8167 	bne.w	800771a <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800744c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007450:	d007      	beq.n	8007462 <HAL_UART_IRQHandler+0x6a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007452:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8007456:	f040 8168 	bne.w	800772a <HAL_UART_IRQHandler+0x332>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800745a:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 800745e:	f040 8164 	bne.w	800772a <HAL_UART_IRQHandler+0x332>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007462:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007466:	d003      	beq.n	8007470 <HAL_UART_IRQHandler+0x78>
 8007468:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800746c:	f040 8164 	bne.w	8007738 <HAL_UART_IRQHandler+0x340>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007470:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007474:	d003      	beq.n	800747e <HAL_UART_IRQHandler+0x86>
 8007476:	f010 4f80 	tst.w	r0, #1073741824	@ 0x40000000
 800747a:	f040 8161 	bne.w	8007740 <HAL_UART_IRQHandler+0x348>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800747e:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8007482:	d0d1      	beq.n	8007428 <HAL_UART_IRQHandler+0x30>
 8007484:	2800      	cmp	r0, #0
 8007486:	dacf      	bge.n	8007428 <HAL_UART_IRQHandler+0x30>
    huart->RxFifoFullCallback(huart);
 8007488:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 800748c:	4620      	mov	r0, r4
 800748e:	4798      	blx	r3
    return;
 8007490:	e7ca      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007492:	f013 0f01 	tst.w	r3, #1
 8007496:	d009      	beq.n	80074ac <HAL_UART_IRQHandler+0xb4>
 8007498:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800749c:	d006      	beq.n	80074ac <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800749e:	2601      	movs	r6, #1
 80074a0:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a2:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80074a6:	4332      	orrs	r2, r6
 80074a8:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074ac:	f013 0f02 	tst.w	r3, #2
 80074b0:	d00b      	beq.n	80074ca <HAL_UART_IRQHandler+0xd2>
 80074b2:	f011 0f01 	tst.w	r1, #1
 80074b6:	d008      	beq.n	80074ca <HAL_UART_IRQHandler+0xd2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	2602      	movs	r6, #2
 80074bc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074be:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80074c2:	f042 0204 	orr.w	r2, r2, #4
 80074c6:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074ca:	f013 0f04 	tst.w	r3, #4
 80074ce:	d00b      	beq.n	80074e8 <HAL_UART_IRQHandler+0xf0>
 80074d0:	f011 0f01 	tst.w	r1, #1
 80074d4:	d008      	beq.n	80074e8 <HAL_UART_IRQHandler+0xf0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	2604      	movs	r6, #4
 80074da:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074dc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80074e0:	f042 0202 	orr.w	r2, r2, #2
 80074e4:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074e8:	f013 0f08 	tst.w	r3, #8
 80074ec:	d00b      	beq.n	8007506 <HAL_UART_IRQHandler+0x10e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80074ee:	f010 0f20 	tst.w	r0, #32
 80074f2:	d100      	bne.n	80074f6 <HAL_UART_IRQHandler+0xfe>
 80074f4:	b13d      	cbz	r5, 8007506 <HAL_UART_IRQHandler+0x10e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	2508      	movs	r5, #8
 80074fa:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fc:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 8007500:	432a      	orrs	r2, r5
 8007502:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007506:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 800750a:	d00c      	beq.n	8007526 <HAL_UART_IRQHandler+0x12e>
 800750c:	f010 6f80 	tst.w	r0, #67108864	@ 0x4000000
 8007510:	d009      	beq.n	8007526 <HAL_UART_IRQHandler+0x12e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007512:	6822      	ldr	r2, [r4, #0]
 8007514:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 8007518:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800751a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800751e:	f042 0220 	orr.w	r2, r2, #32
 8007522:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007526:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 800752a:	2a00      	cmp	r2, #0
 800752c:	f43f af7c 	beq.w	8007428 <HAL_UART_IRQHandler+0x30>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007530:	f013 0f20 	tst.w	r3, #32
 8007534:	d009      	beq.n	800754a <HAL_UART_IRQHandler+0x152>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007536:	f010 0f20 	tst.w	r0, #32
 800753a:	d102      	bne.n	8007542 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800753c:	f011 5f80 	tst.w	r1, #268435456	@ 0x10000000
 8007540:	d003      	beq.n	800754a <HAL_UART_IRQHandler+0x152>
        if (huart->RxISR != NULL)
 8007542:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8007544:	b10b      	cbz	r3, 800754a <HAL_UART_IRQHandler+0x152>
          huart->RxISR(huart);
 8007546:	4620      	mov	r0, r4
 8007548:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800754a:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007556:	d102      	bne.n	800755e <HAL_UART_IRQHandler+0x166>
 8007558:	f012 0f28 	tst.w	r2, #40	@ 0x28
 800755c:	d02e      	beq.n	80075bc <HAL_UART_IRQHandler+0x1c4>
        UART_EndRxTransfer(huart);
 800755e:	4620      	mov	r0, r4
 8007560:	f7ff fbae 	bl	8006cc0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800756c:	d021      	beq.n	80075b2 <HAL_UART_IRQHandler+0x1ba>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007570:	f102 0308 	add.w	r3, r2, #8
 8007574:	e853 3f00 	ldrex	r3, [r3]
 8007578:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	3208      	adds	r2, #8
 800757e:	e842 3100 	strex	r1, r3, [r2]
 8007582:	2900      	cmp	r1, #0
 8007584:	d1f3      	bne.n	800756e <HAL_UART_IRQHandler+0x176>
          if (huart->hdmarx != NULL)
 8007586:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800758a:	b16b      	cbz	r3, 80075a8 <HAL_UART_IRQHandler+0x1b0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800758c:	4a43      	ldr	r2, [pc, #268]	@ (800769c <HAL_UART_IRQHandler+0x2a4>)
 800758e:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007590:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007594:	f7fc f9ea 	bl	800396c <HAL_DMA_Abort_IT>
 8007598:	2800      	cmp	r0, #0
 800759a:	f43f af45 	beq.w	8007428 <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800759e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 80075a2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80075a4:	4798      	blx	r3
 80075a6:	e73f      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
            huart->ErrorCallback(huart);
 80075a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80075ac:	4620      	mov	r0, r4
 80075ae:	4798      	blx	r3
 80075b0:	e73a      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
          huart->ErrorCallback(huart);
 80075b2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80075b6:	4620      	mov	r0, r4
 80075b8:	4798      	blx	r3
 80075ba:	e735      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
        huart->ErrorCallback(huart);
 80075bc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80075c0:	4620      	mov	r0, r4
 80075c2:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c4:	2300      	movs	r3, #0
 80075c6:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    return;
 80075ca:	e72d      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075cc:	f013 0f10 	tst.w	r3, #16
 80075d0:	f43f af35 	beq.w	800743e <HAL_UART_IRQHandler+0x46>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075d4:	f010 0f10 	tst.w	r0, #16
 80075d8:	f43f af31 	beq.w	800743e <HAL_UART_IRQHandler+0x46>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075dc:	2310      	movs	r3, #16
 80075de:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80075e8:	d05a      	beq.n	80076a0 <HAL_UART_IRQHandler+0x2a8>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075ea:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 80075ee:	6813      	ldr	r3, [r2, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f43f af17 	beq.w	8007428 <HAL_UART_IRQHandler+0x30>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075fa:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80075fe:	4299      	cmp	r1, r3
 8007600:	f67f af12 	bls.w	8007428 <HAL_UART_IRQHandler+0x30>
        huart->RxXferCount = nb_remaining_rx_data;
 8007604:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007608:	6813      	ldr	r3, [r2, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f013 0f20 	tst.w	r3, #32
 8007610:	d132      	bne.n	8007678 <HAL_UART_IRQHandler+0x280>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007612:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	e852 3f00 	ldrex	r3, [r2]
 8007618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	e842 3100 	strex	r1, r3, [r2]
 8007620:	2900      	cmp	r1, #0
 8007622:	d1f6      	bne.n	8007612 <HAL_UART_IRQHandler+0x21a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007624:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	f102 0308 	add.w	r3, r2, #8
 800762a:	e853 3f00 	ldrex	r3, [r3]
 800762e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007632:	3208      	adds	r2, #8
 8007634:	e842 3100 	strex	r1, r3, [r2]
 8007638:	2900      	cmp	r1, #0
 800763a:	d1f3      	bne.n	8007624 <HAL_UART_IRQHandler+0x22c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800763c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763e:	f102 0308 	add.w	r3, r2, #8
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764a:	3208      	adds	r2, #8
 800764c:	e842 3100 	strex	r1, r3, [r2]
 8007650:	2900      	cmp	r1, #0
 8007652:	d1f3      	bne.n	800763c <HAL_UART_IRQHandler+0x244>
          huart->RxState = HAL_UART_STATE_READY;
 8007654:	2320      	movs	r3, #32
 8007656:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800765a:	2300      	movs	r3, #0
 800765c:	66e3      	str	r3, [r4, #108]	@ 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	e852 3f00 	ldrex	r3, [r2]
 8007664:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007668:	e842 3100 	strex	r1, r3, [r2]
 800766c:	2900      	cmp	r1, #0
 800766e:	d1f6      	bne.n	800765e <HAL_UART_IRQHandler+0x266>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007670:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8007674:	f7fc f940 	bl	80038f8 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007678:	2302      	movs	r3, #2
 800767a:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800767c:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 8007680:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 8007684:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8007688:	b29b      	uxth	r3, r3
 800768a:	1ac9      	subs	r1, r1, r3
 800768c:	b289      	uxth	r1, r1
 800768e:	4620      	mov	r0, r4
 8007690:	4790      	blx	r2
      return;
 8007692:	e6c9      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
 8007694:	10000001 	.word	0x10000001
 8007698:	04000120 	.word	0x04000120
 800769c:	08006dc7 	.word	0x08006dc7
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076a0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
 80076a4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	1ac9      	subs	r1, r1, r3
 80076ac:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80076ae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f43f aeb7 	beq.w	8007428 <HAL_UART_IRQHandler+0x30>
          && (nb_rx_data > 0U))
 80076ba:	2900      	cmp	r1, #0
 80076bc:	f43f aeb4 	beq.w	8007428 <HAL_UART_IRQHandler+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076c0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c2:	e852 3f00 	ldrex	r3, [r2]
 80076c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	e842 3000 	strex	r0, r3, [r2]
 80076ce:	2800      	cmp	r0, #0
 80076d0:	d1f6      	bne.n	80076c0 <HAL_UART_IRQHandler+0x2c8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d4:	f102 0308 	add.w	r3, r2, #8
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076e0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	3208      	adds	r2, #8
 80076e6:	e842 3000 	strex	r0, r3, [r2]
 80076ea:	2800      	cmp	r0, #0
 80076ec:	d1f1      	bne.n	80076d2 <HAL_UART_IRQHandler+0x2da>
        huart->RxState = HAL_UART_STATE_READY;
 80076ee:	2320      	movs	r3, #32
 80076f0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f4:	2300      	movs	r3, #0
 80076f6:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 80076f8:	6763      	str	r3, [r4, #116]	@ 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fc:	e852 3f00 	ldrex	r3, [r2]
 8007700:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	e842 3000 	strex	r0, r3, [r2]
 8007708:	2800      	cmp	r0, #0
 800770a:	d1f6      	bne.n	80076fa <HAL_UART_IRQHandler+0x302>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800770c:	2302      	movs	r3, #2
 800770e:	6723      	str	r3, [r4, #112]	@ 0x70
        huart->RxEventCallback(huart, nb_rx_data);
 8007710:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
 8007714:	4620      	mov	r0, r4
 8007716:	4798      	blx	r3
      return;
 8007718:	e686      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800771a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800771e:	6213      	str	r3, [r2, #32]
    huart->WakeupCallback(huart);
 8007720:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 8007724:	4620      	mov	r0, r4
 8007726:	4798      	blx	r3
    return;
 8007728:	e67e      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
    if (huart->TxISR != NULL)
 800772a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800772c:	2b00      	cmp	r3, #0
 800772e:	f43f ae7b 	beq.w	8007428 <HAL_UART_IRQHandler+0x30>
      huart->TxISR(huart);
 8007732:	4620      	mov	r0, r4
 8007734:	4798      	blx	r3
    return;
 8007736:	e677      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
    UART_EndTransmit_IT(huart);
 8007738:	4620      	mov	r0, r4
 800773a:	f7ff fb4f 	bl	8006ddc <UART_EndTransmit_IT>
    return;
 800773e:	e673      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
    huart->TxFifoEmptyCallback(huart);
 8007740:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
 8007744:	4620      	mov	r0, r4
 8007746:	4798      	blx	r3
    return;
 8007748:	e66e      	b.n	8007428 <HAL_UART_IRQHandler+0x30>
 800774a:	bf00      	nop

0800774c <UART_InitCallbacksToDefault>:
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800774c:	4b12      	ldr	r3, [pc, #72]	@ (8007798 <UART_InitCallbacksToDefault+0x4c>)
 800774e:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007752:	4b12      	ldr	r3, [pc, #72]	@ (800779c <UART_InitCallbacksToDefault+0x50>)
 8007754:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007758:	4b11      	ldr	r3, [pc, #68]	@ (80077a0 <UART_InitCallbacksToDefault+0x54>)
 800775a:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800775e:	4b11      	ldr	r3, [pc, #68]	@ (80077a4 <UART_InitCallbacksToDefault+0x58>)
 8007760:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007764:	4b10      	ldr	r3, [pc, #64]	@ (80077a8 <UART_InitCallbacksToDefault+0x5c>)
 8007766:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800776a:	4b10      	ldr	r3, [pc, #64]	@ (80077ac <UART_InitCallbacksToDefault+0x60>)
 800776c:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007770:	4b0f      	ldr	r3, [pc, #60]	@ (80077b0 <UART_InitCallbacksToDefault+0x64>)
 8007772:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007776:	4b0f      	ldr	r3, [pc, #60]	@ (80077b4 <UART_InitCallbacksToDefault+0x68>)
 8007778:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800777c:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <UART_InitCallbacksToDefault+0x6c>)
 800777e:	f8c0 30b4 	str.w	r3, [r0, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007782:	4b0e      	ldr	r3, [pc, #56]	@ (80077bc <UART_InitCallbacksToDefault+0x70>)
 8007784:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007788:	4b0d      	ldr	r3, [pc, #52]	@ (80077c0 <UART_InitCallbacksToDefault+0x74>)
 800778a:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <UART_InitCallbacksToDefault+0x78>)
 8007790:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
}
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	08006c81 	.word	0x08006c81
 800779c:	08002585 	.word	0x08002585
 80077a0:	08006c83 	.word	0x08006c83
 80077a4:	080025e5 	.word	0x080025e5
 80077a8:	08006c85 	.word	0x08006c85
 80077ac:	08006c87 	.word	0x08006c87
 80077b0:	08006c89 	.word	0x08006c89
 80077b4:	08006c8b 	.word	0x08006c8b
 80077b8:	08007ff9 	.word	0x08007ff9
 80077bc:	08007ffb 	.word	0x08007ffb
 80077c0:	08007ffd 	.word	0x08007ffd
 80077c4:	08006c8d 	.word	0x08006c8d

080077c8 <UART_SetConfig>:
{
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 80077cc:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077ce:	6883      	ldr	r3, [r0, #8]
 80077d0:	6902      	ldr	r2, [r0, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	6942      	ldr	r2, [r0, #20]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	69c2      	ldr	r2, [r0, #28]
 80077da:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077dc:	6808      	ldr	r0, [r1, #0]
 80077de:	4a9d      	ldr	r2, [pc, #628]	@ (8007a54 <UART_SetConfig+0x28c>)
 80077e0:	4002      	ands	r2, r0
 80077e2:	431a      	orrs	r2, r3
 80077e4:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	6853      	ldr	r3, [r2, #4]
 80077ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80077ee:	68e1      	ldr	r1, [r4, #12]
 80077f0:	430b      	orrs	r3, r1
 80077f2:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077f4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	4b97      	ldr	r3, [pc, #604]	@ (8007a58 <UART_SetConfig+0x290>)
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d001      	beq.n	8007802 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 80077fe:	6a23      	ldr	r3, [r4, #32]
 8007800:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007802:	6893      	ldr	r3, [r2, #8]
 8007804:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007808:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800780c:	430b      	orrs	r3, r1
 800780e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007810:	6822      	ldr	r2, [r4, #0]
 8007812:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8007814:	f023 030f 	bic.w	r3, r3, #15
 8007818:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800781a:	430b      	orrs	r3, r1
 800781c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	4a8e      	ldr	r2, [pc, #568]	@ (8007a5c <UART_SetConfig+0x294>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d01c      	beq.n	8007860 <UART_SetConfig+0x98>
 8007826:	4a8e      	ldr	r2, [pc, #568]	@ (8007a60 <UART_SetConfig+0x298>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d031      	beq.n	8007890 <UART_SetConfig+0xc8>
 800782c:	4a8a      	ldr	r2, [pc, #552]	@ (8007a58 <UART_SetConfig+0x290>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d04b      	beq.n	80078ca <UART_SetConfig+0x102>
 8007832:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007834:	4988      	ldr	r1, [pc, #544]	@ (8007a58 <UART_SetConfig+0x290>)
 8007836:	428b      	cmp	r3, r1
 8007838:	d068      	beq.n	800790c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800783a:	69e0      	ldr	r0, [r4, #28]
 800783c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8007840:	f000 80a5 	beq.w	800798e <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007844:	2a08      	cmp	r2, #8
 8007846:	f200 811f 	bhi.w	8007a88 <UART_SetConfig+0x2c0>
 800784a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800784e:	00d3      	.short	0x00d3
 8007850:	00d100f5 	.word	0x00d100f5
 8007854:	00f8011d 	.word	0x00f8011d
 8007858:	011d011d 	.word	0x011d011d
 800785c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007864:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8007868:	f002 0203 	and.w	r2, r2, #3
 800786c:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007870:	f5a2 3240 	sub.w	r2, r2, #196608	@ 0x30000
 8007874:	2a03      	cmp	r2, #3
 8007876:	d809      	bhi.n	800788c <UART_SetConfig+0xc4>
 8007878:	e8df f002 	tbb	[pc, r2]
 800787c:	063c0402 	.word	0x063c0402
 8007880:	2201      	movs	r2, #1
 8007882:	e7d7      	b.n	8007834 <UART_SetConfig+0x6c>
 8007884:	2204      	movs	r2, #4
 8007886:	e7d5      	b.n	8007834 <UART_SetConfig+0x6c>
 8007888:	2208      	movs	r2, #8
 800788a:	e7d3      	b.n	8007834 <UART_SetConfig+0x6c>
 800788c:	2210      	movs	r2, #16
 800788e:	e7d1      	b.n	8007834 <UART_SetConfig+0x6c>
 8007890:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007894:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8007898:	f002 020c 	and.w	r2, r2, #12
 800789c:	f442 2240 	orr.w	r2, r2, #786432	@ 0xc0000
 80078a0:	f5a2 2240 	sub.w	r2, r2, #786432	@ 0xc0000
 80078a4:	2a0c      	cmp	r2, #12
 80078a6:	d80e      	bhi.n	80078c6 <UART_SetConfig+0xfe>
 80078a8:	e8df f002 	tbb	[pc, r2]
 80078ac:	0d0d0d07 	.word	0x0d0d0d07
 80078b0:	0d0d0d09 	.word	0x0d0d0d09
 80078b4:	0d0d0d26 	.word	0x0d0d0d26
 80078b8:	0b          	.byte	0x0b
 80078b9:	00          	.byte	0x00
 80078ba:	2200      	movs	r2, #0
 80078bc:	e7ba      	b.n	8007834 <UART_SetConfig+0x6c>
 80078be:	2204      	movs	r2, #4
 80078c0:	e7b8      	b.n	8007834 <UART_SetConfig+0x6c>
 80078c2:	2208      	movs	r2, #8
 80078c4:	e7b6      	b.n	8007834 <UART_SetConfig+0x6c>
 80078c6:	2210      	movs	r2, #16
 80078c8:	e7b4      	b.n	8007834 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80078ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80078ce:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80078d2:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 80078d6:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 80078da:	d00f      	beq.n	80078fc <UART_SetConfig+0x134>
 80078dc:	d805      	bhi.n	80078ea <UART_SetConfig+0x122>
 80078de:	b17a      	cbz	r2, 8007900 <UART_SetConfig+0x138>
 80078e0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80078e4:	d10e      	bne.n	8007904 <UART_SetConfig+0x13c>
 80078e6:	2204      	movs	r2, #4
 80078e8:	e7a4      	b.n	8007834 <UART_SetConfig+0x6c>
 80078ea:	f5b2 6f40 	cmp.w	r2, #3072	@ 0xc00
 80078ee:	d10b      	bne.n	8007908 <UART_SetConfig+0x140>
 80078f0:	2208      	movs	r2, #8
 80078f2:	e79f      	b.n	8007834 <UART_SetConfig+0x6c>
 80078f4:	2202      	movs	r2, #2
 80078f6:	e79d      	b.n	8007834 <UART_SetConfig+0x6c>
 80078f8:	2202      	movs	r2, #2
 80078fa:	e79b      	b.n	8007834 <UART_SetConfig+0x6c>
 80078fc:	2202      	movs	r2, #2
 80078fe:	e799      	b.n	8007834 <UART_SetConfig+0x6c>
 8007900:	2200      	movs	r2, #0
 8007902:	e797      	b.n	8007834 <UART_SetConfig+0x6c>
 8007904:	2210      	movs	r2, #16
 8007906:	e795      	b.n	8007834 <UART_SetConfig+0x6c>
 8007908:	2210      	movs	r2, #16
 800790a:	e793      	b.n	8007834 <UART_SetConfig+0x6c>
    switch (clocksource)
 800790c:	2a08      	cmp	r2, #8
 800790e:	f200 809c 	bhi.w	8007a4a <UART_SetConfig+0x282>
 8007912:	e8df f002 	tbb	[pc, r2]
 8007916:	9a08      	.short	0x9a08
 8007918:	9a379a3a 	.word	0x9a379a3a
 800791c:	9a9a      	.short	0x9a9a
 800791e:	05          	.byte	0x05
 800791f:	00          	.byte	0x00
 8007920:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007924:	e004      	b.n	8007930 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007926:	f7fd fd59 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800792a:	2800      	cmp	r0, #0
 800792c:	f000 808f 	beq.w	8007a4e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007930:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8007932:	4b4c      	ldr	r3, [pc, #304]	@ (8007a64 <UART_SetConfig+0x29c>)
 8007934:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007938:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800793c:	6865      	ldr	r5, [r4, #4]
 800793e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007942:	4299      	cmp	r1, r3
 8007944:	f200 8094 	bhi.w	8007a70 <UART_SetConfig+0x2a8>
 8007948:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800794c:	f200 8092 	bhi.w	8007a74 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007950:	2600      	movs	r6, #0
 8007952:	4633      	mov	r3, r6
 8007954:	4631      	mov	r1, r6
 8007956:	f7f9 f8ff 	bl	8000b58 <__aeabi_uldivmod>
 800795a:	0209      	lsls	r1, r1, #8
 800795c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8007960:	0200      	lsls	r0, r0, #8
 8007962:	086b      	lsrs	r3, r5, #1
 8007964:	18c0      	adds	r0, r0, r3
 8007966:	462a      	mov	r2, r5
 8007968:	4633      	mov	r3, r6
 800796a:	f141 0100 	adc.w	r1, r1, #0
 800796e:	f7f9 f8f3 	bl	8000b58 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007972:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8007976:	4b3c      	ldr	r3, [pc, #240]	@ (8007a68 <UART_SetConfig+0x2a0>)
 8007978:	429a      	cmp	r2, r3
 800797a:	d87d      	bhi.n	8007a78 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	60d8      	str	r0, [r3, #12]
 8007980:	4630      	mov	r0, r6
 8007982:	e050      	b.n	8007a26 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8007984:	f7fd f82c 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
        break;
 8007988:	e7cf      	b.n	800792a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800798a:	4838      	ldr	r0, [pc, #224]	@ (8007a6c <UART_SetConfig+0x2a4>)
 800798c:	e7d0      	b.n	8007930 <UART_SetConfig+0x168>
    switch (clocksource)
 800798e:	2a08      	cmp	r2, #8
 8007990:	d874      	bhi.n	8007a7c <UART_SetConfig+0x2b4>
 8007992:	e8df f002 	tbb	[pc, r2]
 8007996:	2707      	.short	0x2707
 8007998:	732a7305 	.word	0x732a7305
 800799c:	7373      	.short	0x7373
 800799e:	0b          	.byte	0x0b
 800799f:	00          	.byte	0x00
 80079a0:	4832      	ldr	r0, [pc, #200]	@ (8007a6c <UART_SetConfig+0x2a4>)
 80079a2:	e003      	b.n	80079ac <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80079a4:	f7fd fd1a 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d069      	beq.n	8007a80 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80079ae:	4b2d      	ldr	r3, [pc, #180]	@ (8007a64 <UART_SetConfig+0x29c>)
 80079b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80079b4:	fbb0 f0f3 	udiv	r0, r0, r3
 80079b8:	6862      	ldr	r2, [r4, #4]
 80079ba:	0853      	lsrs	r3, r2, #1
 80079bc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80079c0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c4:	f1a3 0110 	sub.w	r1, r3, #16
 80079c8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80079cc:	4291      	cmp	r1, r2
 80079ce:	d859      	bhi.n	8007a84 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079d6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80079da:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 80079dc:	6822      	ldr	r2, [r4, #0]
 80079de:	60d3      	str	r3, [r2, #12]
 80079e0:	2000      	movs	r0, #0
 80079e2:	e020      	b.n	8007a26 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e4:	f7fd fd0a 	bl	80053fc <HAL_RCC_GetPCLK2Freq>
        break;
 80079e8:	e7de      	b.n	80079a8 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 80079ea:	f7fc fff9 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
        break;
 80079ee:	e7db      	b.n	80079a8 <UART_SetConfig+0x1e0>
    switch (clocksource)
 80079f0:	481e      	ldr	r0, [pc, #120]	@ (8007a6c <UART_SetConfig+0x2a4>)
 80079f2:	e003      	b.n	80079fc <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fd fcf2 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d047      	beq.n	8007a8c <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80079fe:	4b19      	ldr	r3, [pc, #100]	@ (8007a64 <UART_SetConfig+0x29c>)
 8007a00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007a04:	fbb0 f0f3 	udiv	r0, r0, r3
 8007a08:	6863      	ldr	r3, [r4, #4]
 8007a0a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8007a0e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a12:	f1a0 0210 	sub.w	r2, r0, #16
 8007a16:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d838      	bhi.n	8007a90 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	b280      	uxth	r0, r0
 8007a22:	60d8      	str	r0, [r3, #12]
 8007a24:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007a26:	2301      	movs	r3, #1
 8007a28:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007a2c:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8007a30:	2300      	movs	r3, #0
 8007a32:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8007a34:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8007a36:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a38:	f7fd fce0 	bl	80053fc <HAL_RCC_GetPCLK2Freq>
        break;
 8007a3c:	e7dc      	b.n	80079f8 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 8007a3e:	f7fc ffcf 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
        break;
 8007a42:	e7d9      	b.n	80079f8 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007a44:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8007a48:	e7d8      	b.n	80079fc <UART_SetConfig+0x234>
    switch (clocksource)
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	e7eb      	b.n	8007a26 <UART_SetConfig+0x25e>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	e7e9      	b.n	8007a26 <UART_SetConfig+0x25e>
 8007a52:	bf00      	nop
 8007a54:	cfff69f3 	.word	0xcfff69f3
 8007a58:	40008000 	.word	0x40008000
 8007a5c:	40013800 	.word	0x40013800
 8007a60:	40004400 	.word	0x40004400
 8007a64:	0800e3d4 	.word	0x0800e3d4
 8007a68:	000ffcff 	.word	0x000ffcff
 8007a6c:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 8007a70:	2001      	movs	r0, #1
 8007a72:	e7d8      	b.n	8007a26 <UART_SetConfig+0x25e>
 8007a74:	2001      	movs	r0, #1
 8007a76:	e7d6      	b.n	8007a26 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8007a78:	2001      	movs	r0, #1
 8007a7a:	e7d4      	b.n	8007a26 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007a7c:	2001      	movs	r0, #1
 8007a7e:	e7d2      	b.n	8007a26 <UART_SetConfig+0x25e>
 8007a80:	2000      	movs	r0, #0
 8007a82:	e7d0      	b.n	8007a26 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007a84:	2001      	movs	r0, #1
 8007a86:	e7ce      	b.n	8007a26 <UART_SetConfig+0x25e>
    switch (clocksource)
 8007a88:	2001      	movs	r0, #1
 8007a8a:	e7cc      	b.n	8007a26 <UART_SetConfig+0x25e>
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	e7ca      	b.n	8007a26 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8007a90:	2001      	movs	r0, #1
 8007a92:	e7c8      	b.n	8007a26 <UART_SetConfig+0x25e>

08007a94 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a94:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007a96:	f013 0f01 	tst.w	r3, #1
 8007a9a:	d006      	beq.n	8007aaa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a9c:	6802      	ldr	r2, [r0, #0]
 8007a9e:	6853      	ldr	r3, [r2, #4]
 8007aa0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007aa4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8007aa6:	430b      	orrs	r3, r1
 8007aa8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aaa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007aac:	f013 0f02 	tst.w	r3, #2
 8007ab0:	d006      	beq.n	8007ac0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ab2:	6802      	ldr	r2, [r0, #0]
 8007ab4:	6853      	ldr	r3, [r2, #4]
 8007ab6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aba:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8007abc:	430b      	orrs	r3, r1
 8007abe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ac0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007ac2:	f013 0f04 	tst.w	r3, #4
 8007ac6:	d006      	beq.n	8007ad6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ac8:	6802      	ldr	r2, [r0, #0]
 8007aca:	6853      	ldr	r3, [r2, #4]
 8007acc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ad0:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8007ad2:	430b      	orrs	r3, r1
 8007ad4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ad6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007ad8:	f013 0f08 	tst.w	r3, #8
 8007adc:	d006      	beq.n	8007aec <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ade:	6802      	ldr	r2, [r0, #0]
 8007ae0:	6853      	ldr	r3, [r2, #4]
 8007ae2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ae6:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8007ae8:	430b      	orrs	r3, r1
 8007aea:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007aec:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007aee:	f013 0f10 	tst.w	r3, #16
 8007af2:	d006      	beq.n	8007b02 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007af4:	6802      	ldr	r2, [r0, #0]
 8007af6:	6893      	ldr	r3, [r2, #8]
 8007af8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007afc:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8007afe:	430b      	orrs	r3, r1
 8007b00:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b02:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007b04:	f013 0f20 	tst.w	r3, #32
 8007b08:	d006      	beq.n	8007b18 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b0a:	6802      	ldr	r2, [r0, #0]
 8007b0c:	6893      	ldr	r3, [r2, #8]
 8007b0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b12:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007b14:	430b      	orrs	r3, r1
 8007b16:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b18:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007b1a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8007b1e:	d00a      	beq.n	8007b36 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b20:	6802      	ldr	r2, [r0, #0]
 8007b22:	6853      	ldr	r3, [r2, #4]
 8007b24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007b28:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b2e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b34:	d00b      	beq.n	8007b4e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b36:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8007b38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b3c:	d006      	beq.n	8007b4c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b3e:	6802      	ldr	r2, [r0, #0]
 8007b40:	6853      	ldr	r3, [r2, #4]
 8007b42:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007b46:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8007b48:	430b      	orrs	r3, r1
 8007b4a:	6053      	str	r3, [r2, #4]
}
 8007b4c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b4e:	6802      	ldr	r2, [r0, #0]
 8007b50:	6853      	ldr	r3, [r2, #4]
 8007b52:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007b56:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8007b58:	430b      	orrs	r3, r1
 8007b5a:	6053      	str	r3, [r2, #4]
 8007b5c:	e7eb      	b.n	8007b36 <UART_AdvFeatureConfig+0xa2>

08007b5e <UART_WaitOnFlagUntilTimeout>:
{
 8007b5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b62:	4605      	mov	r5, r0
 8007b64:	460f      	mov	r7, r1
 8007b66:	4616      	mov	r6, r2
 8007b68:	4699      	mov	r9, r3
 8007b6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b6e:	682b      	ldr	r3, [r5, #0]
 8007b70:	69dc      	ldr	r4, [r3, #28]
 8007b72:	ea37 0404 	bics.w	r4, r7, r4
 8007b76:	bf0c      	ite	eq
 8007b78:	2401      	moveq	r4, #1
 8007b7a:	2400      	movne	r4, #0
 8007b7c:	42b4      	cmp	r4, r6
 8007b7e:	d157      	bne.n	8007c30 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 8007b80:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007b84:	d0f3      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b86:	f7fa f8cd 	bl	8001d24 <HAL_GetTick>
 8007b8a:	eba0 0009 	sub.w	r0, r0, r9
 8007b8e:	4540      	cmp	r0, r8
 8007b90:	d82f      	bhi.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0x94>
 8007b92:	f1b8 0f00 	cmp.w	r8, #0
 8007b96:	d02c      	beq.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	f012 0f04 	tst.w	r2, #4
 8007ba0:	d0e5      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ba2:	69da      	ldr	r2, [r3, #28]
 8007ba4:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8007ba8:	d0e1      	beq.n	8007b6e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007baa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007bae:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bb0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	e852 3f00 	ldrex	r3, [r2]
 8007bb6:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	e842 3100 	strex	r1, r3, [r2]
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d1f6      	bne.n	8007bb0 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc4:	f102 0308 	add.w	r3, r2, #8
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	3208      	adds	r2, #8
 8007bd2:	e842 3100 	strex	r1, r3, [r2]
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	d1f3      	bne.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8007bda:	2320      	movs	r3, #32
 8007bdc:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007be0:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007be4:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8007be8:	2300      	movs	r3, #0
 8007bea:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
          return HAL_TIMEOUT;
 8007bee:	2003      	movs	r0, #3
 8007bf0:	e01f      	b.n	8007c32 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007bf2:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	e852 3f00 	ldrex	r3, [r2]
 8007bf8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfc:	e842 3100 	strex	r1, r3, [r2]
 8007c00:	2900      	cmp	r1, #0
 8007c02:	d1f6      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c04:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	f102 0308 	add.w	r3, r2, #8
 8007c0a:	e853 3f00 	ldrex	r3, [r3]
 8007c0e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	3208      	adds	r2, #8
 8007c14:	e842 3100 	strex	r1, r3, [r2]
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	d1f3      	bne.n	8007c04 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f8c5 3088 	str.w	r3, [r5, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007c22:	f8c5 308c 	str.w	r3, [r5, #140]	@ 0x8c
        __HAL_UNLOCK(huart);
 8007c26:	2300      	movs	r3, #0
 8007c28:	f885 3084 	strb.w	r3, [r5, #132]	@ 0x84
        return HAL_TIMEOUT;
 8007c2c:	2003      	movs	r0, #3
 8007c2e:	e000      	b.n	8007c32 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 8007c30:	2000      	movs	r0, #0
}
 8007c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007c36 <HAL_UART_Transmit>:
{
 8007c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007c3e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8007c42:	2b20      	cmp	r3, #32
 8007c44:	d14f      	bne.n	8007ce6 <HAL_UART_Transmit+0xb0>
 8007c46:	4604      	mov	r4, r0
 8007c48:	460d      	mov	r5, r1
 8007c4a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8007c4c:	2900      	cmp	r1, #0
 8007c4e:	d04e      	beq.n	8007cee <HAL_UART_Transmit+0xb8>
 8007c50:	b90a      	cbnz	r2, 8007c56 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8007c52:	2001      	movs	r0, #1
 8007c54:	e048      	b.n	8007ce8 <HAL_UART_Transmit+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c5c:	2321      	movs	r3, #33	@ 0x21
 8007c5e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8007c62:	f7fa f85f 	bl	8001d24 <HAL_GetTick>
 8007c66:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8007c68:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007c6c:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c70:	68a3      	ldr	r3, [r4, #8]
 8007c72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c76:	d002      	beq.n	8007c7e <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8007c78:	f04f 0800 	mov.w	r8, #0
 8007c7c:	e011      	b.n	8007ca2 <HAL_UART_Transmit+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c7e:	6923      	ldr	r3, [r4, #16]
 8007c80:	b313      	cbz	r3, 8007cc8 <HAL_UART_Transmit+0x92>
      pdata16bits = NULL;
 8007c82:	f04f 0800 	mov.w	r8, #0
 8007c86:	e00c      	b.n	8007ca2 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c88:	f838 3b02 	ldrh.w	r3, [r8], #2
 8007c8c:	6822      	ldr	r2, [r4, #0]
 8007c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c92:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8007c94:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8007c98:	b292      	uxth	r2, r2
 8007c9a:	3a01      	subs	r2, #1
 8007c9c:	b292      	uxth	r2, r2
 8007c9e:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007ca2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	b18b      	cbz	r3, 8007cce <HAL_UART_Transmit+0x98>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007caa:	9600      	str	r6, [sp, #0]
 8007cac:	463b      	mov	r3, r7
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2180      	movs	r1, #128	@ 0x80
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f7ff ff53 	bl	8007b5e <UART_WaitOnFlagUntilTimeout>
 8007cb8:	b9d8      	cbnz	r0, 8007cf2 <HAL_UART_Transmit+0xbc>
      if (pdata8bits == NULL)
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	d0e4      	beq.n	8007c88 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cbe:	f815 2b01 	ldrb.w	r2, [r5], #1
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007cc6:	e7e5      	b.n	8007c94 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 8007cc8:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8007cca:	2500      	movs	r5, #0
 8007ccc:	e7e9      	b.n	8007ca2 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007cce:	9600      	str	r6, [sp, #0]
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2140      	movs	r1, #64	@ 0x40
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff ff41 	bl	8007b5e <UART_WaitOnFlagUntilTimeout>
 8007cdc:	b958      	cbnz	r0, 8007cf6 <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 8007cde:	2320      	movs	r3, #32
 8007ce0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8007ce4:	e000      	b.n	8007ce8 <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8007ce6:	2002      	movs	r0, #2
}
 8007ce8:	b002      	add	sp, #8
 8007cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8007cee:	2001      	movs	r0, #1
 8007cf0:	e7fa      	b.n	8007ce8 <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 8007cf2:	2003      	movs	r0, #3
 8007cf4:	e7f8      	b.n	8007ce8 <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 8007cf6:	2003      	movs	r0, #3
 8007cf8:	e7f6      	b.n	8007ce8 <HAL_UART_Transmit+0xb2>

08007cfa <UART_CheckIdleState>:
{
 8007cfa:	b530      	push	{r4, r5, lr}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d00:	2300      	movs	r3, #0
 8007d02:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8007d06:	f7fa f80d 	bl	8001d24 <HAL_GetTick>
 8007d0a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d0c:	6822      	ldr	r2, [r4, #0]
 8007d0e:	6812      	ldr	r2, [r2, #0]
 8007d10:	f012 0f08 	tst.w	r2, #8
 8007d14:	d110      	bne.n	8007d38 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f013 0f04 	tst.w	r3, #4
 8007d1e:	d119      	bne.n	8007d54 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8007d20:	2320      	movs	r3, #32
 8007d22:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007d26:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2e:	6720      	str	r0, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8007d30:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8007d34:	b003      	add	sp, #12
 8007d36:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d3c:	9300      	str	r3, [sp, #0]
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2200      	movs	r2, #0
 8007d42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d46:	4620      	mov	r0, r4
 8007d48:	f7ff ff09 	bl	8007b5e <UART_WaitOnFlagUntilTimeout>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d0e2      	beq.n	8007d16 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8007d50:	2003      	movs	r0, #3
 8007d52:	e7ef      	b.n	8007d34 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	462b      	mov	r3, r5
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007d62:	4620      	mov	r0, r4
 8007d64:	f7ff fefb 	bl	8007b5e <UART_WaitOnFlagUntilTimeout>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	d0d9      	beq.n	8007d20 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007d6c:	2003      	movs	r0, #3
 8007d6e:	e7e1      	b.n	8007d34 <UART_CheckIdleState+0x3a>

08007d70 <HAL_UART_Init>:
  if (huart == NULL)
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d03a      	beq.n	8007dea <HAL_UART_Init+0x7a>
{
 8007d74:	b510      	push	{r4, lr}
 8007d76:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007d78:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8007d7c:	b30b      	cbz	r3, 8007dc2 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8007d7e:	2324      	movs	r3, #36	@ 0x24
 8007d80:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8007d84:	6822      	ldr	r2, [r4, #0]
 8007d86:	6813      	ldr	r3, [r2, #0]
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f7ff fd1a 	bl	80077c8 <UART_SetConfig>
 8007d94:	2801      	cmp	r0, #1
 8007d96:	d013      	beq.n	8007dc0 <HAL_UART_Init+0x50>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d98:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007d9a:	bb13      	cbnz	r3, 8007de2 <HAL_UART_Init+0x72>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d9c:	6822      	ldr	r2, [r4, #0]
 8007d9e:	6853      	ldr	r3, [r2, #4]
 8007da0:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8007da4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007da6:	6822      	ldr	r2, [r4, #0]
 8007da8:	6893      	ldr	r3, [r2, #8]
 8007daa:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8007dae:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	6813      	ldr	r3, [r2, #0]
 8007db4:	f043 0301 	orr.w	r3, r3, #1
 8007db8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f7ff ff9d 	bl	8007cfa <UART_CheckIdleState>
}
 8007dc0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007dc2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    UART_InitCallbacksToDefault(huart);
 8007dc6:	f7ff fcc1 	bl	800774c <UART_InitCallbacksToDefault>
    if (huart->MspInitCallback == NULL)
 8007dca:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8007dce:	b123      	cbz	r3, 8007dda <HAL_UART_Init+0x6a>
    huart->MspInitCallback(huart);
 8007dd0:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	4798      	blx	r3
 8007dd8:	e7d1      	b.n	8007d7e <HAL_UART_Init+0xe>
      huart->MspInitCallback = HAL_UART_MspInit;
 8007dda:	4b05      	ldr	r3, [pc, #20]	@ (8007df0 <HAL_UART_Init+0x80>)
 8007ddc:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8007de0:	e7f6      	b.n	8007dd0 <HAL_UART_Init+0x60>
    UART_AdvFeatureConfig(huart);
 8007de2:	4620      	mov	r0, r4
 8007de4:	f7ff fe56 	bl	8007a94 <UART_AdvFeatureConfig>
 8007de8:	e7d8      	b.n	8007d9c <HAL_UART_Init+0x2c>
    return HAL_ERROR;
 8007dea:	2001      	movs	r0, #1
}
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	080022d9 	.word	0x080022d9

08007df4 <UART_Start_Receive_IT>:
{
 8007df4:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007df6:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007df8:	f8a0 205c 	strh.w	r2, [r0, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007dfc:	f8a0 205e 	strh.w	r2, [r0, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	6743      	str	r3, [r0, #116]	@ 0x74
  UART_MASK_COMPUTATION(huart);
 8007e04:	6883      	ldr	r3, [r0, #8]
 8007e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e0a:	d006      	beq.n	8007e1a <UART_Start_Receive_IT+0x26>
 8007e0c:	b9a3      	cbnz	r3, 8007e38 <UART_Start_Receive_IT+0x44>
 8007e0e:	6903      	ldr	r3, [r0, #16]
 8007e10:	b973      	cbnz	r3, 8007e30 <UART_Start_Receive_IT+0x3c>
 8007e12:	23ff      	movs	r3, #255	@ 0xff
 8007e14:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007e18:	e014      	b.n	8007e44 <UART_Start_Receive_IT+0x50>
 8007e1a:	6903      	ldr	r3, [r0, #16]
 8007e1c:	b923      	cbnz	r3, 8007e28 <UART_Start_Receive_IT+0x34>
 8007e1e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8007e22:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007e26:	e00d      	b.n	8007e44 <UART_Start_Receive_IT+0x50>
 8007e28:	23ff      	movs	r3, #255	@ 0xff
 8007e2a:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007e2e:	e009      	b.n	8007e44 <UART_Start_Receive_IT+0x50>
 8007e30:	237f      	movs	r3, #127	@ 0x7f
 8007e32:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007e36:	e005      	b.n	8007e44 <UART_Start_Receive_IT+0x50>
 8007e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e3c:	d02d      	beq.n	8007e9a <UART_Start_Receive_IT+0xa6>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e4a:	2322      	movs	r3, #34	@ 0x22
 8007e4c:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e50:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	f101 0308 	add.w	r3, r1, #8
 8007e56:	e853 3f00 	ldrex	r3, [r3]
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e5e:	3108      	adds	r1, #8
 8007e60:	e841 3400 	strex	r4, r3, [r1]
 8007e64:	2c00      	cmp	r4, #0
 8007e66:	d1f3      	bne.n	8007e50 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007e68:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e6e:	d01e      	beq.n	8007eae <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e70:	6883      	ldr	r3, [r0, #8]
 8007e72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e76:	d042      	beq.n	8007efe <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8007e78:	4b29      	ldr	r3, [pc, #164]	@ (8007f20 <UART_Start_Receive_IT+0x12c>)
 8007e7a:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007e7c:	6903      	ldr	r3, [r0, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d043      	beq.n	8007f0a <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007e82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	e852 3f00 	ldrex	r3, [r2]
 8007e88:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	e842 3100 	strex	r1, r3, [r2]
 8007e90:	2900      	cmp	r1, #0
 8007e92:	d1f6      	bne.n	8007e82 <UART_Start_Receive_IT+0x8e>
}
 8007e94:	2000      	movs	r0, #0
 8007e96:	bc10      	pop	{r4}
 8007e98:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007e9a:	6903      	ldr	r3, [r0, #16]
 8007e9c:	b91b      	cbnz	r3, 8007ea6 <UART_Start_Receive_IT+0xb2>
 8007e9e:	237f      	movs	r3, #127	@ 0x7f
 8007ea0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007ea4:	e7ce      	b.n	8007e44 <UART_Start_Receive_IT+0x50>
 8007ea6:	233f      	movs	r3, #63	@ 0x3f
 8007ea8:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
 8007eac:	e7ca      	b.n	8007e44 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007eae:	f8b0 3068 	ldrh.w	r3, [r0, #104]	@ 0x68
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d8dc      	bhi.n	8007e70 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb6:	6883      	ldr	r3, [r0, #8]
 8007eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ebc:	d019      	beq.n	8007ef2 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007ebe:	4b19      	ldr	r3, [pc, #100]	@ (8007f24 <UART_Start_Receive_IT+0x130>)
 8007ec0:	6743      	str	r3, [r0, #116]	@ 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ec2:	6903      	ldr	r3, [r0, #16]
 8007ec4:	b143      	cbz	r3, 8007ed8 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	e852 3f00 	ldrex	r3, [r2]
 8007ecc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	e842 3100 	strex	r1, r3, [r2]
 8007ed4:	2900      	cmp	r1, #0
 8007ed6:	d1f6      	bne.n	8007ec6 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ed8:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eda:	f102 0308 	add.w	r3, r2, #8
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee6:	3208      	adds	r2, #8
 8007ee8:	e842 3100 	strex	r1, r3, [r2]
 8007eec:	2900      	cmp	r1, #0
 8007eee:	d1f3      	bne.n	8007ed8 <UART_Start_Receive_IT+0xe4>
 8007ef0:	e7d0      	b.n	8007e94 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ef2:	6903      	ldr	r3, [r0, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d1e2      	bne.n	8007ebe <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8007f28 <UART_Start_Receive_IT+0x134>)
 8007efa:	6743      	str	r3, [r0, #116]	@ 0x74
 8007efc:	e7e1      	b.n	8007ec2 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007efe:	6903      	ldr	r3, [r0, #16]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1b9      	bne.n	8007e78 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007f04:	4b09      	ldr	r3, [pc, #36]	@ (8007f2c <UART_Start_Receive_IT+0x138>)
 8007f06:	6743      	str	r3, [r0, #116]	@ 0x74
 8007f08:	e7b8      	b.n	8007e7c <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007f0a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	e852 3f00 	ldrex	r3, [r2]
 8007f10:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f14:	e842 3100 	strex	r1, r3, [r2]
 8007f18:	2900      	cmp	r1, #0
 8007f1a:	d1f6      	bne.n	8007f0a <UART_Start_Receive_IT+0x116>
 8007f1c:	e7ba      	b.n	8007e94 <UART_Start_Receive_IT+0xa0>
 8007f1e:	bf00      	nop
 8007f20:	08006e05 	.word	0x08006e05
 8007f24:	08006fc1 	.word	0x08006fc1
 8007f28:	0800718d 	.word	0x0800718d
 8007f2c:	08006ee5 	.word	0x08006ee5

08007f30 <HAL_UART_Receive_IT>:
{
 8007f30:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f32:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 8007f36:	2b20      	cmp	r3, #32
 8007f38:	d117      	bne.n	8007f6a <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8007f3a:	b1c1      	cbz	r1, 8007f6e <HAL_UART_Receive_IT+0x3e>
 8007f3c:	b1ca      	cbz	r2, 8007f72 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	66c3      	str	r3, [r0, #108]	@ 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f42:	6803      	ldr	r3, [r0, #0]
 8007f44:	4c0c      	ldr	r4, [pc, #48]	@ (8007f78 <HAL_UART_Receive_IT+0x48>)
 8007f46:	42a3      	cmp	r3, r4
 8007f48:	d00c      	beq.n	8007f64 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8007f50:	d008      	beq.n	8007f64 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f52:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f54:	e854 3f00 	ldrex	r3, [r4]
 8007f58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	e844 3500 	strex	r5, r3, [r4]
 8007f60:	2d00      	cmp	r5, #0
 8007f62:	d1f6      	bne.n	8007f52 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f64:	f7ff ff46 	bl	8007df4 <UART_Start_Receive_IT>
 8007f68:	e000      	b.n	8007f6c <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8007f6a:	2002      	movs	r0, #2
}
 8007f6c:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007f6e:	2001      	movs	r0, #1
 8007f70:	e7fc      	b.n	8007f6c <HAL_UART_Receive_IT+0x3c>
 8007f72:	2001      	movs	r0, #1
 8007f74:	e7fa      	b.n	8007f6c <HAL_UART_Receive_IT+0x3c>
 8007f76:	bf00      	nop
 8007f78:	40008000 	.word	0x40008000

08007f7c <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	ab02      	add	r3, sp, #8
 8007f80:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007f84:	6802      	ldr	r2, [r0, #0]
 8007f86:	6853      	ldr	r3, [r2, #4]
 8007f88:	f023 0310 	bic.w	r3, r3, #16
 8007f8c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8007f90:	430b      	orrs	r3, r1
 8007f92:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007f94:	6802      	ldr	r2, [r0, #0]
 8007f96:	6853      	ldr	r3, [r2, #4]
 8007f98:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007f9c:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007fa0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007fa4:	6053      	str	r3, [r2, #4]
}
 8007fa6:	b002      	add	sp, #8
 8007fa8:	4770      	bx	lr
	...

08007fac <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fac:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007fae:	b92b      	cbnz	r3, 8007fbc <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fb6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8007fba:	4770      	bx	lr
{
 8007fbc:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007fbe:	6803      	ldr	r3, [r0, #0]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007fc6:	6899      	ldr	r1, [r3, #8]
 8007fc8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fca:	4d09      	ldr	r5, [pc, #36]	@ (8007ff0 <UARTEx_SetNbDataToProcess+0x44>)
 8007fcc:	5c6b      	ldrb	r3, [r5, r1]
 8007fce:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007fd0:	4c08      	ldr	r4, [pc, #32]	@ (8007ff4 <UARTEx_SetNbDataToProcess+0x48>)
 8007fd2:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007fd4:	fb93 f3f1 	sdiv	r3, r3, r1
 8007fd8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fdc:	5cab      	ldrb	r3, [r5, r2]
 8007fde:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007fe0:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007fe2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007fe6:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8007fea:	bc30      	pop	{r4, r5}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	0800e3f4 	.word	0x0800e3f4
 8007ff4:	0800e3ec 	.word	0x0800e3ec

08007ff8 <HAL_UARTEx_WakeupCallback>:
}
 8007ff8:	4770      	bx	lr

08007ffa <HAL_UARTEx_RxFifoFullCallback>:
}
 8007ffa:	4770      	bx	lr

08007ffc <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8007ffc:	4770      	bx	lr

08007ffe <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8007ffe:	b510      	push	{r4, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	ab04      	add	r3, sp, #16
 8008004:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8008008:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800800c:	2b01      	cmp	r3, #1
 800800e:	d035      	beq.n	800807c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8008010:	4604      	mov	r4, r0
 8008012:	2301      	movs	r3, #1
 8008014:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008018:	2324      	movs	r3, #36	@ 0x24
 800801a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800801e:	6802      	ldr	r2, [r0, #0]
 8008020:	6813      	ldr	r3, [r2, #0]
 8008022:	f023 0301 	bic.w	r3, r3, #1
 8008026:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8008028:	6801      	ldr	r1, [r0, #0]
 800802a:	688b      	ldr	r3, [r1, #8]
 800802c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008030:	9a02      	ldr	r2, [sp, #8]
 8008032:	4313      	orrs	r3, r2
 8008034:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8008036:	b1aa      	cbz	r2, 8008064 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	6813      	ldr	r3, [r2, #0]
 800803c:	f043 0301 	orr.w	r3, r3, #1
 8008040:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8008042:	f7f9 fe6f 	bl	8001d24 <HAL_GetTick>
 8008046:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008048:	f06f 427e 	mvn.w	r2, #4261412864	@ 0xfe000000
 800804c:	9200      	str	r2, [sp, #0]
 800804e:	2200      	movs	r2, #0
 8008050:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008054:	4620      	mov	r0, r4
 8008056:	f7ff fd82 	bl	8007b5e <UART_WaitOnFlagUntilTimeout>
 800805a:	b948      	cbnz	r0, 8008070 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800805c:	2320      	movs	r3, #32
 800805e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
 8008062:	e006      	b.n	8008072 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8008064:	ab04      	add	r3, sp, #16
 8008066:	e913 0006 	ldmdb	r3, {r1, r2}
 800806a:	f7ff ff87 	bl	8007f7c <UARTEx_Wakeup_AddressConfig>
 800806e:	e7e3      	b.n	8008038 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8008070:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8008072:	2300      	movs	r3, #0
 8008074:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008078:	b004      	add	sp, #16
 800807a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800807c:	2002      	movs	r0, #2
 800807e:	e7fb      	b.n	8008078 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08008080 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8008080:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008084:	2b01      	cmp	r3, #1
 8008086:	d010      	beq.n	80080aa <HAL_UARTEx_EnableStopMode+0x2a>
 8008088:	2301      	movs	r3, #1
 800808a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800808e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	e852 3f00 	ldrex	r3, [r2]
 8008094:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	e842 3100 	strex	r1, r3, [r2]
 800809c:	2900      	cmp	r1, #0
 800809e:	d1f6      	bne.n	800808e <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 80080a0:	2300      	movs	r3, #0
 80080a2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 80080a6:	4618      	mov	r0, r3
 80080a8:	4770      	bx	lr
  __HAL_LOCK(huart);
 80080aa:	2002      	movs	r0, #2
}
 80080ac:	4770      	bx	lr

080080ae <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 80080ae:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d018      	beq.n	80080e8 <HAL_UARTEx_DisableFifoMode+0x3a>
 80080b6:	2301      	movs	r3, #1
 80080b8:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80080bc:	2324      	movs	r3, #36	@ 0x24
 80080be:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080c2:	6803      	ldr	r3, [r0, #0]
 80080c4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80080c6:	6819      	ldr	r1, [r3, #0]
 80080c8:	f021 0101 	bic.w	r1, r1, #1
 80080cc:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80080ce:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80080d2:	2300      	movs	r3, #0
 80080d4:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080d6:	6801      	ldr	r1, [r0, #0]
 80080d8:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80080da:	2220      	movs	r2, #32
 80080dc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 80080e0:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 80080e4:	4618      	mov	r0, r3
 80080e6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80080e8:	2002      	movs	r0, #2
}
 80080ea:	4770      	bx	lr

080080ec <HAL_UARTEx_SetTxFifoThreshold>:
{
 80080ec:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80080ee:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d01d      	beq.n	8008132 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80080f6:	4604      	mov	r4, r0
 80080f8:	2301      	movs	r3, #1
 80080fa:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 80080fe:	2324      	movs	r3, #36	@ 0x24
 8008100:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008104:	6803      	ldr	r3, [r0, #0]
 8008106:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008110:	6802      	ldr	r2, [r0, #0]
 8008112:	6893      	ldr	r3, [r2, #8]
 8008114:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8008118:	4319      	orrs	r1, r3
 800811a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800811c:	f7ff ff46 	bl	8007fac <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008120:	6823      	ldr	r3, [r4, #0]
 8008122:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8008124:	2320      	movs	r3, #32
 8008126:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800812a:	2000      	movs	r0, #0
 800812c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8008130:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8008132:	2002      	movs	r0, #2
 8008134:	e7fc      	b.n	8008130 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08008136 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8008136:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8008138:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800813c:	2b01      	cmp	r3, #1
 800813e:	d01d      	beq.n	800817c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008140:	4604      	mov	r4, r0
 8008142:	2301      	movs	r3, #1
 8008144:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8008148:	2324      	movs	r3, #36	@ 0x24
 800814a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800814e:	6803      	ldr	r3, [r0, #0]
 8008150:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	f022 0201 	bic.w	r2, r2, #1
 8008158:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800815a:	6802      	ldr	r2, [r0, #0]
 800815c:	6893      	ldr	r3, [r2, #8]
 800815e:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8008162:	4319      	orrs	r1, r3
 8008164:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8008166:	f7ff ff21 	bl	8007fac <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800816e:	2320      	movs	r3, #32
 8008170:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8008174:	2000      	movs	r0, #0
 8008176:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800817a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800817c:	2002      	movs	r0, #2
 800817e:	e7fc      	b.n	800817a <HAL_UARTEx_SetRxFifoThreshold+0x44>

08008180 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8008180:	2001      	movs	r0, #1
 8008182:	4770      	bx	lr

08008184 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8008184:	280a      	cmp	r0, #10
 8008186:	d807      	bhi.n	8008198 <RadioGetLoRaBandwidthInHz+0x14>
 8008188:	e8df f000 	tbb	[pc, r0]
 800818c:	17110b20 	.word	0x17110b20
 8008190:	061e1c1a 	.word	0x061e1c1a
 8008194:	0e08      	.short	0x0e08
 8008196:	14          	.byte	0x14
 8008197:	00          	.byte	0x00
 8008198:	2000      	movs	r0, #0
 800819a:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800819c:	f642 00b1 	movw	r0, #10417	@ 0x28b1
        break;
 80081a0:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80081a2:	f643 5009 	movw	r0, #15625	@ 0x3d09
        break;
 80081a6:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80081a8:	f245 1061 	movw	r0, #20833	@ 0x5161
        break;
 80081ac:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80081ae:	f647 2012 	movw	r0, #31250	@ 0x7a12
        break;
 80081b2:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80081b4:	f24a 20c3 	movw	r0, #41667	@ 0xa2c3
        break;
 80081b8:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80081ba:	f24f 4024 	movw	r0, #62500	@ 0xf424
        break;
 80081be:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80081c0:	4804      	ldr	r0, [pc, #16]	@ (80081d4 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 80081c2:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80081c4:	4804      	ldr	r0, [pc, #16]	@ (80081d8 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80081c6:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80081c8:	4804      	ldr	r0, [pc, #16]	@ (80081dc <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80081ca:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80081cc:	f641 6084 	movw	r0, #7812	@ 0x1e84
    }

    return bandwidthInHz;
}
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	0001e848 	.word	0x0001e848
 80081d8:	0003d090 	.word	0x0003d090
 80081dc:	0007a120 	.word	0x0007a120

080081e0 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80081e0:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 80081e4:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80081e6:	b953      	cbnz	r3, 80081fe <RadioGetGfskTimeOnAirNumerator+0x1e>
 80081e8:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 80081ea:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80081ec:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80081ee:	b141      	cbz	r1, 8008202 <RadioGetGfskTimeOnAirNumerator+0x22>
 80081f0:	2302      	movs	r3, #2
 80081f2:	f89d 0000 	ldrb.w	r0, [sp]
 80081f6:	4418      	add	r0, r3
}
 80081f8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80081fc:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80081fe:	2300      	movs	r3, #0
 8008200:	e7f3      	b.n	80081ea <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8008202:	2300      	movs	r3, #0
 8008204:	e7f5      	b.n	80081f2 <RadioGetGfskTimeOnAirNumerator+0x12>

08008206 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8008206:	b570      	push	{r4, r5, r6, lr}
 8008208:	f89d 4010 	ldrb.w	r4, [sp, #16]
 800820c:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8008210:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8008212:	f1a1 0c05 	sub.w	ip, r1, #5
 8008216:	f1bc 0f01 	cmp.w	ip, #1
 800821a:	d931      	bls.n	8008280 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800821c:	b918      	cbnz	r0, 8008226 <RadioGetLoRaTimeOnAirNumerator+0x20>
 800821e:	f1a1 060b 	sub.w	r6, r1, #11
 8008222:	2e01      	cmp	r6, #1
 8008224:	d934      	bls.n	8008290 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8008226:	2801      	cmp	r0, #1
 8008228:	d02e      	beq.n	8008288 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 800822a:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800822c:	f89d c014 	ldrb.w	ip, [sp, #20]
 8008230:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8008234:	b385      	cbz	r5, 8008298 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8008236:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8008238:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 800823a:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 800823c:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8008240:	b364      	cbz	r4, 800829c <RadioGetLoRaTimeOnAirNumerator+0x96>
 8008242:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8008246:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8008248:	2906      	cmp	r1, #6
 800824a:	d904      	bls.n	8008256 <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 800824c:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8008250:	b10e      	cbz	r6, 8008256 <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8008252:	1e88      	subs	r0, r1, #2
 8008254:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8008256:	f1bc 0f00 	cmp.w	ip, #0
 800825a:	db22      	blt.n	80082a2 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800825c:	4484      	add	ip, r0
 800825e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008262:	fb9c fcf0 	sdiv	ip, ip, r0
 8008266:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 800826a:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 800826e:	2906      	cmp	r1, #6
 8008270:	d801      	bhi.n	8008276 <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8008272:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8008276:	0080      	lsls	r0, r0, #2
 8008278:	3001      	adds	r0, #1
 800827a:	3902      	subs	r1, #2
}
 800827c:	4088      	lsls	r0, r1
 800827e:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8008280:	2b0b      	cmp	r3, #11
 8008282:	d8cb      	bhi.n	800821c <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8008284:	230c      	movs	r3, #12
 8008286:	e7c9      	b.n	800821c <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8008288:	290c      	cmp	r1, #12
 800828a:	d003      	beq.n	8008294 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 800828c:	2600      	movs	r6, #0
 800828e:	e7cd      	b.n	800822c <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8008290:	2601      	movs	r6, #1
 8008292:	e7cb      	b.n	800822c <RadioGetLoRaTimeOnAirNumerator+0x26>
 8008294:	2601      	movs	r6, #1
 8008296:	e7c9      	b.n	800822c <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8008298:	2000      	movs	r0, #0
 800829a:	e7cd      	b.n	8008238 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 800829c:	f04f 0e14 	mov.w	lr, #20
 80082a0:	e7d1      	b.n	8008246 <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 80082a2:	f04f 0c00 	mov.w	ip, #0
 80082a6:	e7d9      	b.n	800825c <RadioGetLoRaTimeOnAirNumerator+0x56>

080082a8 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80082a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082aa:	b085      	sub	sp, #20
 80082ac:	460e      	mov	r6, r1
 80082ae:	4615      	mov	r5, r2
 80082b0:	4619      	mov	r1, r3
 80082b2:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80082b6:	f89d 302c 	ldrb.w	r3, [sp, #44]	@ 0x2c
 80082ba:	f89d 7030 	ldrb.w	r7, [sp, #48]	@ 0x30
 80082be:	f89d c034 	ldrb.w	ip, [sp, #52]	@ 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80082c2:	b148      	cbz	r0, 80082d8 <RadioTimeOnAir+0x30>
 80082c4:	2801      	cmp	r0, #1
 80082c6:	d012      	beq.n	80082ee <RadioTimeOnAir+0x46>
 80082c8:	2501      	movs	r5, #1
 80082ca:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80082cc:	442c      	add	r4, r5
 80082ce:	1e60      	subs	r0, r4, #1
}
 80082d0:	fbb0 f0f5 	udiv	r0, r0, r5
 80082d4:	b005      	add	sp, #20
 80082d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80082d8:	f8cd c004 	str.w	ip, [sp, #4]
 80082dc:	9700      	str	r7, [sp, #0]
 80082de:	4628      	mov	r0, r5
 80082e0:	f7ff ff7e 	bl	80081e0 <RadioGetGfskTimeOnAirNumerator>
 80082e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80082e8:	fb03 f400 	mul.w	r4, r3, r0
        break;
 80082ec:	e7ee      	b.n	80082cc <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80082ee:	f8cd c008 	str.w	ip, [sp, #8]
 80082f2:	9701      	str	r7, [sp, #4]
 80082f4:	9300      	str	r3, [sp, #0]
 80082f6:	4613      	mov	r3, r2
 80082f8:	460a      	mov	r2, r1
 80082fa:	4629      	mov	r1, r5
 80082fc:	4630      	mov	r0, r6
 80082fe:	f7ff ff82 	bl	8008206 <RadioGetLoRaTimeOnAirNumerator>
 8008302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008306:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800830a:	4b03      	ldr	r3, [pc, #12]	@ (8008318 <RadioTimeOnAir+0x70>)
 800830c:	5d98      	ldrb	r0, [r3, r6]
 800830e:	f7ff ff39 	bl	8008184 <RadioGetLoRaBandwidthInHz>
 8008312:	4605      	mov	r5, r0
        break;
 8008314:	e7da      	b.n	80082cc <RadioTimeOnAir+0x24>
 8008316:	bf00      	nop
 8008318:	0800e468 	.word	0x0800e468

0800831c <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 800831c:	b508      	push	{r3, lr}
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800831e:	4b03      	ldr	r3, [pc, #12]	@ (800832c <RadioOnTxTimeoutProcess+0x10>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	b113      	cbz	r3, 800832a <RadioOnTxTimeoutProcess+0xe>
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	b103      	cbz	r3, 800832a <RadioOnTxTimeoutProcess+0xe>
    {
        RadioEvents->TxTimeout( );
 8008328:	4798      	blx	r3
    }
}
 800832a:	bd08      	pop	{r3, pc}
 800832c:	200009f8 	.word	0x200009f8

08008330 <RadioOnTxTimeoutIrq>:
{
 8008330:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8008332:	f7ff fff3 	bl	800831c <RadioOnTxTimeoutProcess>
}
 8008336:	bd08      	pop	{r3, pc}

08008338 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8008338:	b508      	push	{r3, lr}
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800833a:	4b03      	ldr	r3, [pc, #12]	@ (8008348 <RadioOnRxTimeoutProcess+0x10>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	b113      	cbz	r3, 8008346 <RadioOnRxTimeoutProcess+0xe>
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	b103      	cbz	r3, 8008346 <RadioOnRxTimeoutProcess+0xe>
    {
        RadioEvents->RxTimeout( );
 8008344:	4798      	blx	r3
    }
}
 8008346:	bd08      	pop	{r3, pc}
 8008348:	200009f8 	.word	0x200009f8

0800834c <RadioOnRxTimeoutIrq>:
{
 800834c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 800834e:	f7ff fff3 	bl	8008338 <RadioOnRxTimeoutProcess>
}
 8008352:	bd08      	pop	{r3, pc}

08008354 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008354:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 8008356:	2300      	movs	r3, #0
 8008358:	e005      	b.n	8008366 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800835a:	5ccc      	ldrb	r4, [r1, r3]
 800835c:	43e4      	mvns	r4, r4
 800835e:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008360:	2400      	movs	r4, #0
 8008362:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 8008364:	3301      	adds	r3, #1
 8008366:	429a      	cmp	r2, r3
 8008368:	dcf7      	bgt.n	800835a <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800836a:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 800836c:	461c      	mov	r4, r3
 800836e:	e012      	b.n	8008396 <payload_integration+0x42>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8008370:	f103 0c07 	add.w	ip, r3, #7
 8008374:	e023      	b.n	80083be <payload_integration+0x6a>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8008376:	b2ed      	uxtb	r5, r5
 8008378:	5d4d      	ldrb	r5, [r1, r5]
 800837a:	fa45 f50e 	asr.w	r5, r5, lr
 800837e:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8008382:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8008384:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 8008388:	5d46      	ldrb	r6, [r0, r5]
 800838a:	fa04 fc0c 	lsl.w	ip, r4, ip
 800838e:	ea46 0c0c 	orr.w	ip, r6, ip
 8008392:	f800 c005 	strb.w	ip, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 8008396:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800839a:	da26      	bge.n	80083ea <payload_integration+0x96>
        index_bit = 7 - ( i % 8 );
 800839c:	425d      	negs	r5, r3
 800839e:	f003 0c07 	and.w	ip, r3, #7
 80083a2:	f005 0507 	and.w	r5, r5, #7
 80083a6:	bf58      	it	pl
 80083a8:	f1c5 0c00 	rsbpl	ip, r5, #0
 80083ac:	fa5f fe8c 	uxtb.w	lr, ip
 80083b0:	f1ce 0e07 	rsb	lr, lr, #7
 80083b4:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 80083b8:	469c      	mov	ip, r3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dbd8      	blt.n	8008370 <payload_integration+0x1c>
 80083be:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 80083c2:	3301      	adds	r3, #1
 80083c4:	425e      	negs	r6, r3
 80083c6:	f003 0c07 	and.w	ip, r3, #7
 80083ca:	f006 0607 	and.w	r6, r6, #7
 80083ce:	bf58      	it	pl
 80083d0:	f1c6 0c00 	rsbpl	ip, r6, #0
 80083d4:	fa5f fc8c 	uxtb.w	ip, ip
 80083d8:	f1cc 0c07 	rsb	ip, ip, #7
 80083dc:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 80083e0:	461e      	mov	r6, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	dac7      	bge.n	8008376 <payload_integration+0x22>
 80083e6:	1dde      	adds	r6, r3, #7
 80083e8:	e7c5      	b.n	8008376 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80083ea:	01a3      	lsls	r3, r4, #6
 80083ec:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 80083f0:	b25b      	sxtb	r3, r3
 80083f2:	b91c      	cbnz	r4, 80083fc <payload_integration+0xa8>
 80083f4:	2120      	movs	r1, #32
 80083f6:	430b      	orrs	r3, r1
 80083f8:	5483      	strb	r3, [r0, r2]
}
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 80083fc:	2100      	movs	r1, #0
 80083fe:	e7fa      	b.n	80083f6 <payload_integration+0xa2>

08008400 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8008400:	2001      	movs	r0, #1
 8008402:	4770      	bx	lr

08008404 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8008404:	2001      	movs	r0, #1
 8008406:	4770      	bx	lr

08008408 <RadioSetMaxPayloadLength>:
{
 8008408:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 800840a:	2801      	cmp	r0, #1
 800840c:	d004      	beq.n	8008418 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800840e:	4b0a      	ldr	r3, [pc, #40]	@ (8008438 <RadioSetMaxPayloadLength+0x30>)
 8008410:	7d5b      	ldrb	r3, [r3, #21]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d008      	beq.n	8008428 <RadioSetMaxPayloadLength+0x20>
}
 8008416:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8008418:	4b08      	ldr	r3, [pc, #32]	@ (800843c <RadioSetMaxPayloadLength+0x34>)
 800841a:	7019      	strb	r1, [r3, #0]
 800841c:	4806      	ldr	r0, [pc, #24]	@ (8008438 <RadioSetMaxPayloadLength+0x30>)
 800841e:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008420:	300e      	adds	r0, #14
 8008422:	f001 fe15 	bl	800a050 <SUBGRF_SetPacketParams>
 8008426:	e7f6      	b.n	8008416 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8008428:	4b04      	ldr	r3, [pc, #16]	@ (800843c <RadioSetMaxPayloadLength+0x34>)
 800842a:	7019      	strb	r1, [r3, #0]
 800842c:	4802      	ldr	r0, [pc, #8]	@ (8008438 <RadioSetMaxPayloadLength+0x30>)
 800842e:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008430:	300e      	adds	r0, #14
 8008432:	f001 fe0d 	bl	800a050 <SUBGRF_SetPacketParams>
}
 8008436:	e7ee      	b.n	8008416 <RadioSetMaxPayloadLength+0xe>
 8008438:	2000099c 	.word	0x2000099c
 800843c:	20000014 	.word	0x20000014

08008440 <RadioRead>:
{
 8008440:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8008442:	f001 f9a3 	bl	800978c <SUBGRF_ReadRegister>
}
 8008446:	bd08      	pop	{r3, pc}

08008448 <RadioWrite>:
{
 8008448:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800844a:	f001 f98f 	bl	800976c <SUBGRF_WriteRegister>
}
 800844e:	bd08      	pop	{r3, pc}

08008450 <RadioTxCw>:
{
 8008450:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8008452:	f001 ff39 	bl	800a2c8 <SUBGRF_SetRfTxPower>
 8008456:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8008458:	210e      	movs	r1, #14
 800845a:	f640 101f 	movw	r0, #2335	@ 0x91f
 800845e:	f001 f985 	bl	800976c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8008462:	2101      	movs	r1, #1
 8008464:	4620      	mov	r0, r4
 8008466:	f001 ff1b 	bl	800a2a0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800846a:	f001 fb4f 	bl	8009b0c <SUBGRF_SetTxContinuousWave>
}
 800846e:	bd10      	pop	{r4, pc}

08008470 <RadioTxPrbs>:
{
 8008470:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8008472:	2101      	movs	r1, #1
 8008474:	4b07      	ldr	r3, [pc, #28]	@ (8008494 <RadioTxPrbs+0x24>)
 8008476:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800847a:	f001 ff11 	bl	800a2a0 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800847e:	212d      	movs	r1, #45	@ 0x2d
 8008480:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8008484:	f7ff ffe0 	bl	8008448 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8008488:	f001 fb47 	bl	8009b1a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800848c:	4802      	ldr	r0, [pc, #8]	@ (8008498 <RadioTxPrbs+0x28>)
 800848e:	f001 fa7d 	bl	800998c <SUBGRF_SetTx>
}
 8008492:	bd08      	pop	{r3, pc}
 8008494:	2000099c 	.word	0x2000099c
 8008498:	000fffff 	.word	0x000fffff

0800849c <RadioSetRxDutyCycle>:
{
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4604      	mov	r4, r0
 80084a0:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80084a2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80084a6:	4e09      	ldr	r6, [pc, #36]	@ (80084cc <RadioSetRxDutyCycle+0x30>)
 80084a8:	65b3      	str	r3, [r6, #88]	@ 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80084aa:	2300      	movs	r3, #0
 80084ac:	461a      	mov	r2, r3
 80084ae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80084b2:	4608      	mov	r0, r1
 80084b4:	f001 fbfd 	bl	8009cb2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80084b8:	2100      	movs	r1, #0
 80084ba:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 80084be:	f001 feef 	bl	800a2a0 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80084c2:	4629      	mov	r1, r5
 80084c4:	4620      	mov	r0, r4
 80084c6:	f001 faf1 	bl	8009aac <SUBGRF_SetRxDutyCycle>
}
 80084ca:	bd70      	pop	{r4, r5, r6, pc}
 80084cc:	2000099c 	.word	0x2000099c

080084d0 <RadioRxBoosted>:
{
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80084d4:	f001 ffd6 	bl	800a484 <RFW_Is_Init>
 80084d8:	2801      	cmp	r0, #1
 80084da:	d015      	beq.n	8008508 <RadioRxBoosted+0x38>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80084dc:	2300      	movs	r3, #0
 80084de:	461a      	mov	r2, r3
 80084e0:	f240 2162 	movw	r1, #610	@ 0x262
 80084e4:	4608      	mov	r0, r1
 80084e6:	f001 fbe4 	bl	8009cb2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80084ea:	b984      	cbnz	r4, 800850e <RadioRxBoosted+0x3e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80084ec:	4c0f      	ldr	r4, [pc, #60]	@ (800852c <RadioRxBoosted+0x5c>)
 80084ee:	2100      	movs	r1, #0
 80084f0:	65a1      	str	r1, [r4, #88]	@ 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80084f2:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 80084f6:	f001 fed3 	bl	800a2a0 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80084fa:	7863      	ldrb	r3, [r4, #1]
 80084fc:	b183      	cbz	r3, 8008520 <RadioRxBoosted+0x50>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80084fe:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8008502:	f001 fab5 	bl	8009a70 <SUBGRF_SetRxBoosted>
}
 8008506:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8008508:	f001 ffc4 	bl	800a494 <RFW_ReceiveInit>
 800850c:	e7ed      	b.n	80084ea <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800850e:	4d08      	ldr	r5, [pc, #32]	@ (8008530 <RadioRxBoosted+0x60>)
 8008510:	4621      	mov	r1, r4
 8008512:	4628      	mov	r0, r5
 8008514:	f002 fbec 	bl	800acf0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008518:	4628      	mov	r0, r5
 800851a:	f002 fba3 	bl	800ac64 <UTIL_TIMER_Start>
 800851e:	e7e5      	b.n	80084ec <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8008520:	4b02      	ldr	r3, [pc, #8]	@ (800852c <RadioRxBoosted+0x5c>)
 8008522:	6898      	ldr	r0, [r3, #8]
 8008524:	0180      	lsls	r0, r0, #6
 8008526:	f001 faa3 	bl	8009a70 <SUBGRF_SetRxBoosted>
}
 800852a:	e7ec      	b.n	8008506 <RadioRxBoosted+0x36>
 800852c:	2000099c 	.word	0x2000099c
 8008530:	2000096c 	.word	0x2000096c

08008534 <RadioStandby>:
{
 8008534:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8008536:	2000      	movs	r0, #0
 8008538:	f001 fa0e 	bl	8009958 <SUBGRF_SetStandby>
}
 800853c:	bd08      	pop	{r3, pc}

0800853e <RadioGetStatus>:
{
 800853e:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8008540:	f001 f908 	bl	8009754 <SUBGRF_GetOperatingMode>
 8008544:	2805      	cmp	r0, #5
 8008546:	d007      	beq.n	8008558 <RadioGetStatus+0x1a>
 8008548:	2807      	cmp	r0, #7
 800854a:	d007      	beq.n	800855c <RadioGetStatus+0x1e>
 800854c:	2804      	cmp	r0, #4
 800854e:	d001      	beq.n	8008554 <RadioGetStatus+0x16>
            return RF_IDLE;
 8008550:	2000      	movs	r0, #0
}
 8008552:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8008554:	2002      	movs	r0, #2
 8008556:	e7fc      	b.n	8008552 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8008558:	2001      	movs	r0, #1
 800855a:	e7fa      	b.n	8008552 <RadioGetStatus+0x14>
            return RF_CAD;
 800855c:	2003      	movs	r0, #3
 800855e:	e7f8      	b.n	8008552 <RadioGetStatus+0x14>

08008560 <RadioIrqProcess>:
{
 8008560:	b530      	push	{r4, r5, lr}
 8008562:	b083      	sub	sp, #12
    uint8_t size = 0;
 8008564:	2300      	movs	r3, #0
 8008566:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 800856a:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 800856c:	4ba9      	ldr	r3, [pc, #676]	@ (8008814 <RadioIrqProcess+0x2b4>)
 800856e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008572:	2b20      	cmp	r3, #32
 8008574:	d829      	bhi.n	80085ca <RadioIrqProcess+0x6a>
 8008576:	b21a      	sxth	r2, r3
 8008578:	2a00      	cmp	r2, #0
 800857a:	f000 8130 	beq.w	80087de <RadioIrqProcess+0x27e>
 800857e:	3b01      	subs	r3, #1
 8008580:	2b1f      	cmp	r3, #31
 8008582:	f200 812c 	bhi.w	80087de <RadioIrqProcess+0x27e>
 8008586:	e8df f013 	tbh	[pc, r3, lsl #1]
 800858a:	005f      	.short	0x005f
 800858c:	012a0077 	.word	0x012a0077
 8008590:	012a00e7 	.word	0x012a00e7
 8008594:	012a012a 	.word	0x012a012a
 8008598:	012a0117 	.word	0x012a0117
 800859c:	012a012a 	.word	0x012a012a
 80085a0:	012a012a 	.word	0x012a012a
 80085a4:	012a012a 	.word	0x012a012a
 80085a8:	012a0124 	.word	0x012a0124
 80085ac:	012a012a 	.word	0x012a012a
 80085b0:	012a012a 	.word	0x012a012a
 80085b4:	012a012a 	.word	0x012a012a
 80085b8:	012a012a 	.word	0x012a012a
 80085bc:	012a012a 	.word	0x012a012a
 80085c0:	012a012a 	.word	0x012a012a
 80085c4:	012a012a 	.word	0x012a012a
 80085c8:	012c      	.short	0x012c
 80085ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ce:	f000 80a7 	beq.w	8008720 <RadioIrqProcess+0x1c0>
 80085d2:	d924      	bls.n	800861e <RadioIrqProcess+0xbe>
 80085d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085d8:	f040 8101 	bne.w	80087de <RadioIrqProcess+0x27e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80085dc:	4b8e      	ldr	r3, [pc, #568]	@ (8008818 <RadioIrqProcess+0x2b8>)
 80085de:	2201      	movs	r2, #1
 80085e0:	2100      	movs	r1, #0
 80085e2:	2002      	movs	r0, #2
 80085e4:	f002 f834 	bl	800a650 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80085e8:	f001 f8b4 	bl	8009754 <SUBGRF_GetOperatingMode>
 80085ec:	2804      	cmp	r0, #4
 80085ee:	f000 80a4 	beq.w	800873a <RadioIrqProcess+0x1da>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80085f2:	f001 f8af 	bl	8009754 <SUBGRF_GetOperatingMode>
 80085f6:	2805      	cmp	r0, #5
 80085f8:	f040 80f1 	bne.w	80087de <RadioIrqProcess+0x27e>
            TimerStop( &RxTimeoutTimer );
 80085fc:	4887      	ldr	r0, [pc, #540]	@ (800881c <RadioIrqProcess+0x2bc>)
 80085fe:	f002 fad7 	bl	800abb0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008602:	2000      	movs	r0, #0
 8008604:	f001 f9a8 	bl	8009958 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008608:	4b85      	ldr	r3, [pc, #532]	@ (8008820 <RadioIrqProcess+0x2c0>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80e6 	beq.w	80087de <RadioIrqProcess+0x27e>
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 80e2 	beq.w	80087de <RadioIrqProcess+0x27e>
                RadioEvents->RxTimeout( );
 800861a:	4798      	blx	r3
 800861c:	e0df      	b.n	80087de <RadioIrqProcess+0x27e>
    switch( SubgRf.RadioIrq )
 800861e:	2b40      	cmp	r3, #64	@ 0x40
 8008620:	f000 8110 	beq.w	8008844 <RadioIrqProcess+0x2e4>
 8008624:	2b80      	cmp	r3, #128	@ 0x80
 8008626:	f040 80da 	bne.w	80087de <RadioIrqProcess+0x27e>
        SUBGRF_SetStandby( STDBY_RC );
 800862a:	2000      	movs	r0, #0
 800862c:	f001 f994 	bl	8009958 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008630:	4b7b      	ldr	r3, [pc, #492]	@ (8008820 <RadioIrqProcess+0x2c0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 80d2 	beq.w	80087de <RadioIrqProcess+0x27e>
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80ce 	beq.w	80087de <RadioIrqProcess+0x27e>
            RadioEvents->CadDone( false );
 8008642:	2000      	movs	r0, #0
 8008644:	4798      	blx	r3
 8008646:	e0ca      	b.n	80087de <RadioIrqProcess+0x27e>
        TimerStop( &TxTimeoutTimer );
 8008648:	4876      	ldr	r0, [pc, #472]	@ (8008824 <RadioIrqProcess+0x2c4>)
 800864a:	f002 fab1 	bl	800abb0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800864e:	2000      	movs	r0, #0
 8008650:	f001 f982 	bl	8009958 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8008654:	f001 ff18 	bl	800a488 <RFW_Is_LongPacketModeEnabled>
 8008658:	2801      	cmp	r0, #1
 800865a:	d00a      	beq.n	8008672 <RadioIrqProcess+0x112>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800865c:	4b70      	ldr	r3, [pc, #448]	@ (8008820 <RadioIrqProcess+0x2c0>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f000 80bc 	beq.w	80087de <RadioIrqProcess+0x27e>
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 80b8 	beq.w	80087de <RadioIrqProcess+0x27e>
            RadioEvents->TxDone( );
 800866e:	4798      	blx	r3
 8008670:	e0b5      	b.n	80087de <RadioIrqProcess+0x27e>
            RFW_DeInit_TxLongPacket( );
 8008672:	f001 ff12 	bl	800a49a <RFW_DeInit_TxLongPacket>
 8008676:	e7f1      	b.n	800865c <RadioIrqProcess+0xfc>
        TimerStop( &RxTimeoutTimer );
 8008678:	4868      	ldr	r0, [pc, #416]	@ (800881c <RadioIrqProcess+0x2bc>)
 800867a:	f002 fa99 	bl	800abb0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800867e:	4b65      	ldr	r3, [pc, #404]	@ (8008814 <RadioIrqProcess+0x2b4>)
 8008680:	785b      	ldrb	r3, [r3, #1]
 8008682:	b303      	cbz	r3, 80086c6 <RadioIrqProcess+0x166>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8008684:	22ff      	movs	r2, #255	@ 0xff
 8008686:	f10d 0107 	add.w	r1, sp, #7
 800868a:	4867      	ldr	r0, [pc, #412]	@ (8008828 <RadioIrqProcess+0x2c8>)
 800868c:	f001 fda0 	bl	800a1d0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8008690:	4866      	ldr	r0, [pc, #408]	@ (800882c <RadioIrqProcess+0x2cc>)
 8008692:	f001 fdc9 	bl	800a228 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8008696:	4b62      	ldr	r3, [pc, #392]	@ (8008820 <RadioIrqProcess+0x2c0>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f000 809f 	beq.w	80087de <RadioIrqProcess+0x27e>
 80086a0:	689c      	ldr	r4, [r3, #8]
 80086a2:	2c00      	cmp	r4, #0
 80086a4:	f000 809b 	beq.w	80087de <RadioIrqProcess+0x27e>
            switch( SubgRf.PacketStatus.packetType )
 80086a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008814 <RadioIrqProcess+0x2b4>)
 80086aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d11d      	bne.n	80086ee <RadioIrqProcess+0x18e>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80086b2:	4a58      	ldr	r2, [pc, #352]	@ (8008814 <RadioIrqProcess+0x2b4>)
 80086b4:	f992 3031 	ldrsb.w	r3, [r2, #49]	@ 0x31
 80086b8:	f992 2030 	ldrsb.w	r2, [r2, #48]	@ 0x30
 80086bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80086c0:	4859      	ldr	r0, [pc, #356]	@ (8008828 <RadioIrqProcess+0x2c8>)
 80086c2:	47a0      	blx	r4
                break;
 80086c4:	e08b      	b.n	80087de <RadioIrqProcess+0x27e>
            SUBGRF_SetStandby( STDBY_RC );
 80086c6:	2000      	movs	r0, #0
 80086c8:	f001 f946 	bl	8009958 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80086cc:	2100      	movs	r1, #0
 80086ce:	f640 1002 	movw	r0, #2306	@ 0x902
 80086d2:	f001 f84b 	bl	800976c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80086d6:	f640 1044 	movw	r0, #2372	@ 0x944
 80086da:	f001 f857 	bl	800978c <SUBGRF_ReadRegister>
 80086de:	f040 0102 	orr.w	r1, r0, #2
 80086e2:	b2c9      	uxtb	r1, r1
 80086e4:	f640 1044 	movw	r0, #2372	@ 0x944
 80086e8:	f001 f840 	bl	800976c <SUBGRF_WriteRegister>
 80086ec:	e7ca      	b.n	8008684 <RadioIrqProcess+0x124>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80086ee:	4c49      	ldr	r4, [pc, #292]	@ (8008814 <RadioIrqProcess+0x2b4>)
 80086f0:	4669      	mov	r1, sp
 80086f2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80086f4:	f001 fe78 	bl	800a3e8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80086f8:	4b49      	ldr	r3, [pc, #292]	@ (8008820 <RadioIrqProcess+0x2c0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689d      	ldr	r5, [r3, #8]
 80086fe:	9b00      	ldr	r3, [sp, #0]
 8008700:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008704:	4a4a      	ldr	r2, [pc, #296]	@ (8008830 <RadioIrqProcess+0x2d0>)
 8008706:	fb82 1203 	smull	r1, r2, r2, r3
 800870a:	17db      	asrs	r3, r3, #31
 800870c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8008710:	b25b      	sxtb	r3, r3
 8008712:	f994 2029 	ldrsb.w	r2, [r4, #41]	@ 0x29
 8008716:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800871a:	4843      	ldr	r0, [pc, #268]	@ (8008828 <RadioIrqProcess+0x2c8>)
 800871c:	47a8      	blx	r5
                break;
 800871e:	e05e      	b.n	80087de <RadioIrqProcess+0x27e>
        SUBGRF_SetStandby( STDBY_RC );
 8008720:	2000      	movs	r0, #0
 8008722:	f001 f919 	bl	8009958 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008726:	4b3e      	ldr	r3, [pc, #248]	@ (8008820 <RadioIrqProcess+0x2c0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d057      	beq.n	80087de <RadioIrqProcess+0x27e>
 800872e:	699b      	ldr	r3, [r3, #24]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d054      	beq.n	80087de <RadioIrqProcess+0x27e>
            RadioEvents->CadDone( true );
 8008734:	2001      	movs	r0, #1
 8008736:	4798      	blx	r3
 8008738:	e051      	b.n	80087de <RadioIrqProcess+0x27e>
            TimerStop( &TxTimeoutTimer );
 800873a:	483a      	ldr	r0, [pc, #232]	@ (8008824 <RadioIrqProcess+0x2c4>)
 800873c:	f002 fa38 	bl	800abb0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008740:	2000      	movs	r0, #0
 8008742:	f001 f909 	bl	8009958 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8008746:	4b36      	ldr	r3, [pc, #216]	@ (8008820 <RadioIrqProcess+0x2c0>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d047      	beq.n	80087de <RadioIrqProcess+0x27e>
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d044      	beq.n	80087de <RadioIrqProcess+0x27e>
                RadioEvents->TxTimeout( );
 8008754:	4798      	blx	r3
 8008756:	e042      	b.n	80087de <RadioIrqProcess+0x27e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8008758:	4b36      	ldr	r3, [pc, #216]	@ (8008834 <RadioIrqProcess+0x2d4>)
 800875a:	2201      	movs	r2, #1
 800875c:	2100      	movs	r1, #0
 800875e:	2002      	movs	r0, #2
 8008760:	f001 ff76 	bl	800a650 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8008764:	4b2b      	ldr	r3, [pc, #172]	@ (8008814 <RadioIrqProcess+0x2b4>)
 8008766:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8008768:	b3c9      	cbz	r1, 80087de <RadioIrqProcess+0x27e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800876a:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800876e:	f640 1003 	movw	r0, #2307	@ 0x903
 8008772:	f7ff fe69 	bl	8008448 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8008776:	4c27      	ldr	r4, [pc, #156]	@ (8008814 <RadioIrqProcess+0x2b4>)
 8008778:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 800877c:	f640 1004 	movw	r0, #2308	@ 0x904
 8008780:	f7ff fe62 	bl	8008448 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8008784:	f894 1058 	ldrb.w	r1, [r4, #88]	@ 0x58
 8008788:	f640 1005 	movw	r0, #2309	@ 0x905
 800878c:	f7ff fe5c 	bl	8008448 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8008790:	f640 1002 	movw	r0, #2306	@ 0x902
 8008794:	f7ff fe54 	bl	8008440 <RadioRead>
 8008798:	f040 0101 	orr.w	r1, r0, #1
 800879c:	b2c9      	uxtb	r1, r1
 800879e:	f640 1002 	movw	r0, #2306	@ 0x902
 80087a2:	f7ff fe51 	bl	8008448 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80087a6:	2200      	movs	r2, #0
 80087a8:	65a2      	str	r2, [r4, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80087aa:	4613      	mov	r3, r2
 80087ac:	f240 2162 	movw	r1, #610	@ 0x262
 80087b0:	4608      	mov	r0, r1
 80087b2:	f001 fa7e 	bl	8009cb2 <SUBGRF_SetDioIrqParams>
 80087b6:	e012      	b.n	80087de <RadioIrqProcess+0x27e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80087b8:	4b1f      	ldr	r3, [pc, #124]	@ (8008838 <RadioIrqProcess+0x2d8>)
 80087ba:	2201      	movs	r2, #1
 80087bc:	2100      	movs	r1, #0
 80087be:	2002      	movs	r0, #2
 80087c0:	f001 ff46 	bl	800a650 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80087c4:	f001 fe5e 	bl	800a484 <RFW_Is_Init>
 80087c8:	2801      	cmp	r0, #1
 80087ca:	d108      	bne.n	80087de <RadioIrqProcess+0x27e>
            RFW_ReceivePayload( );
 80087cc:	f001 fe66 	bl	800a49c <RFW_ReceivePayload>
 80087d0:	e005      	b.n	80087de <RadioIrqProcess+0x27e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80087d2:	4b1a      	ldr	r3, [pc, #104]	@ (800883c <RadioIrqProcess+0x2dc>)
 80087d4:	2201      	movs	r2, #1
 80087d6:	2100      	movs	r1, #0
 80087d8:	2002      	movs	r0, #2
 80087da:	f001 ff39 	bl	800a650 <UTIL_ADV_TRACE_COND_FSend>
}
 80087de:	b003      	add	sp, #12
 80087e0:	bd30      	pop	{r4, r5, pc}
        TimerStop( &RxTimeoutTimer );
 80087e2:	480e      	ldr	r0, [pc, #56]	@ (800881c <RadioIrqProcess+0x2bc>)
 80087e4:	f002 f9e4 	bl	800abb0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80087e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008814 <RadioIrqProcess+0x2b4>)
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	b173      	cbz	r3, 800880c <RadioIrqProcess+0x2ac>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80087ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008820 <RadioIrqProcess+0x2c0>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d0f3      	beq.n	80087de <RadioIrqProcess+0x27e>
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0f0      	beq.n	80087de <RadioIrqProcess+0x27e>
            RadioEvents->RxTimeout( );
 80087fc:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 80087fe:	4b10      	ldr	r3, [pc, #64]	@ (8008840 <RadioIrqProcess+0x2e0>)
 8008800:	2201      	movs	r2, #1
 8008802:	2100      	movs	r1, #0
 8008804:	2002      	movs	r0, #2
 8008806:	f001 ff23 	bl	800a650 <UTIL_ADV_TRACE_COND_FSend>
 800880a:	e7e8      	b.n	80087de <RadioIrqProcess+0x27e>
            SUBGRF_SetStandby( STDBY_RC );
 800880c:	2000      	movs	r0, #0
 800880e:	f001 f8a3 	bl	8009958 <SUBGRF_SetStandby>
 8008812:	e7ec      	b.n	80087ee <RadioIrqProcess+0x28e>
 8008814:	2000099c 	.word	0x2000099c
 8008818:	0800e3fc 	.word	0x0800e3fc
 800881c:	2000096c 	.word	0x2000096c
 8008820:	200009f8 	.word	0x200009f8
 8008824:	20000984 	.word	0x20000984
 8008828:	200009fc 	.word	0x200009fc
 800882c:	200009c0 	.word	0x200009c0
 8008830:	10624dd3 	.word	0x10624dd3
 8008834:	0800e410 	.word	0x0800e410
 8008838:	0800e41c 	.word	0x0800e41c
 800883c:	0800e428 	.word	0x0800e428
 8008840:	0800e434 	.word	0x0800e434
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8008844:	4b0a      	ldr	r3, [pc, #40]	@ (8008870 <RadioIrqProcess+0x310>)
 8008846:	2201      	movs	r2, #1
 8008848:	2100      	movs	r1, #0
 800884a:	2002      	movs	r0, #2
 800884c:	f001 ff00 	bl	800a650 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8008850:	4b08      	ldr	r3, [pc, #32]	@ (8008874 <RadioIrqProcess+0x314>)
 8008852:	785b      	ldrb	r3, [r3, #1]
 8008854:	b143      	cbz	r3, 8008868 <RadioIrqProcess+0x308>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008856:	4b08      	ldr	r3, [pc, #32]	@ (8008878 <RadioIrqProcess+0x318>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d0bf      	beq.n	80087de <RadioIrqProcess+0x27e>
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0bc      	beq.n	80087de <RadioIrqProcess+0x27e>
            RadioEvents->RxError( );
 8008864:	4798      	blx	r3
}
 8008866:	e7ba      	b.n	80087de <RadioIrqProcess+0x27e>
            SUBGRF_SetStandby( STDBY_RC );
 8008868:	2000      	movs	r0, #0
 800886a:	f001 f875 	bl	8009958 <SUBGRF_SetStandby>
 800886e:	e7f2      	b.n	8008856 <RadioIrqProcess+0x2f6>
 8008870:	0800e440 	.word	0x0800e440
 8008874:	2000099c 	.word	0x2000099c
 8008878:	200009f8 	.word	0x200009f8

0800887c <RadioOnDioIrq>:
{
 800887c:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 800887e:	4b03      	ldr	r3, [pc, #12]	@ (800888c <RadioOnDioIrq+0x10>)
 8008880:	f8a3 0054 	strh.w	r0, [r3, #84]	@ 0x54
    RADIO_IRQ_PROCESS();
 8008884:	f7ff fe6c 	bl	8008560 <RadioIrqProcess>
}
 8008888:	bd08      	pop	{r3, pc}
 800888a:	bf00      	nop
 800888c:	2000099c 	.word	0x2000099c

08008890 <RadioGetWakeupTime>:
{
 8008890:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8008892:	f001 fd30 	bl	800a2f6 <SUBGRF_GetRadioWakeUpTime>
}
 8008896:	3003      	adds	r0, #3
 8008898:	bd08      	pop	{r3, pc}

0800889a <RadioReadRegisters>:
{
 800889a:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 800889c:	f000 fff4 	bl	8009888 <SUBGRF_ReadRegisters>
}
 80088a0:	bd08      	pop	{r3, pc}

080088a2 <RadioWriteRegisters>:
{
 80088a2:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80088a4:	f000 ffae 	bl	8009804 <SUBGRF_WriteRegisters>
}
 80088a8:	bd08      	pop	{r3, pc}

080088aa <RadioRssi>:
{
 80088aa:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80088ac:	f001 fc60 	bl	800a170 <SUBGRF_GetRssiInst>
}
 80088b0:	bd08      	pop	{r3, pc}
	...

080088b4 <RadioSetTxContinuousWave>:
{
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80088b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80088bc:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 80088c0:	f001 fa6a 	bl	8009d98 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80088c4:	4628      	mov	r0, r5
 80088c6:	f001 fcff 	bl	800a2c8 <SUBGRF_SetRfTxPower>
 80088ca:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80088cc:	210e      	movs	r1, #14
 80088ce:	f640 101f 	movw	r0, #2335	@ 0x91f
 80088d2:	f000 ff4b 	bl	800976c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80088d6:	2101      	movs	r1, #1
 80088d8:	4628      	mov	r0, r5
 80088da:	f001 fce1 	bl	800a2a0 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80088de:	f001 f915 	bl	8009b0c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80088e2:	4d04      	ldr	r5, [pc, #16]	@ (80088f4 <RadioSetTxContinuousWave+0x40>)
 80088e4:	4621      	mov	r1, r4
 80088e6:	4628      	mov	r0, r5
 80088e8:	f002 fa02 	bl	800acf0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80088ec:	4628      	mov	r0, r5
 80088ee:	f002 f9b9 	bl	800ac64 <UTIL_TIMER_Start>
}
 80088f2:	bd38      	pop	{r3, r4, r5, pc}
 80088f4:	20000984 	.word	0x20000984

080088f8 <RadioSetChannel>:
{
 80088f8:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 80088fa:	f001 fa4d 	bl	8009d98 <SUBGRF_SetRfFrequency>
}
 80088fe:	bd08      	pop	{r3, pc}

08008900 <RadioStartCad>:
{
 8008900:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8008902:	2100      	movs	r1, #0
 8008904:	4b07      	ldr	r3, [pc, #28]	@ (8008924 <RadioStartCad+0x24>)
 8008906:	f893 0056 	ldrb.w	r0, [r3, #86]	@ 0x56
 800890a:	f001 fcc9 	bl	800a2a0 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800890e:	2300      	movs	r3, #0
 8008910:	461a      	mov	r2, r3
 8008912:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8008916:	4608      	mov	r0, r1
 8008918:	f001 f9cb 	bl	8009cb2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 800891c:	f001 f8ea 	bl	8009af4 <SUBGRF_SetCad>
}
 8008920:	bd08      	pop	{r3, pc}
 8008922:	bf00      	nop
 8008924:	2000099c 	.word	0x2000099c

08008928 <RadioRx>:
{
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 800892c:	f001 fdaa 	bl	800a484 <RFW_Is_Init>
 8008930:	2801      	cmp	r0, #1
 8008932:	d015      	beq.n	8008960 <RadioRx+0x38>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8008934:	2300      	movs	r3, #0
 8008936:	461a      	mov	r2, r3
 8008938:	f240 2162 	movw	r1, #610	@ 0x262
 800893c:	4608      	mov	r0, r1
 800893e:	f001 f9b8 	bl	8009cb2 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8008942:	b984      	cbnz	r4, 8008966 <RadioRx+0x3e>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8008944:	4c0f      	ldr	r4, [pc, #60]	@ (8008984 <RadioRx+0x5c>)
 8008946:	2100      	movs	r1, #0
 8008948:	65a1      	str	r1, [r4, #88]	@ 0x58
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800894a:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 800894e:	f001 fca7 	bl	800a2a0 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8008952:	7863      	ldrb	r3, [r4, #1]
 8008954:	b183      	cbz	r3, 8008978 <RadioRx+0x50>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008956:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 800895a:	f001 f839 	bl	80099d0 <SUBGRF_SetRx>
}
 800895e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8008960:	f001 fd98 	bl	800a494 <RFW_ReceiveInit>
 8008964:	e7ed      	b.n	8008942 <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8008966:	4d08      	ldr	r5, [pc, #32]	@ (8008988 <RadioRx+0x60>)
 8008968:	4621      	mov	r1, r4
 800896a:	4628      	mov	r0, r5
 800896c:	f002 f9c0 	bl	800acf0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8008970:	4628      	mov	r0, r5
 8008972:	f002 f977 	bl	800ac64 <UTIL_TIMER_Start>
 8008976:	e7e5      	b.n	8008944 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8008978:	4b02      	ldr	r3, [pc, #8]	@ (8008984 <RadioRx+0x5c>)
 800897a:	6898      	ldr	r0, [r3, #8]
 800897c:	0180      	lsls	r0, r0, #6
 800897e:	f001 f827 	bl	80099d0 <SUBGRF_SetRx>
}
 8008982:	e7ec      	b.n	800895e <RadioRx+0x36>
 8008984:	2000099c 	.word	0x2000099c
 8008988:	2000096c 	.word	0x2000096c

0800898c <RadioSleep>:
{
 800898c:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 800898e:	f04f 0004 	mov.w	r0, #4
 8008992:	f000 ffc1 	bl	8009918 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8008996:	2002      	movs	r0, #2
 8008998:	f7f9 f9d0 	bl	8001d3c <HAL_Delay>
}
 800899c:	bd08      	pop	{r3, pc}
	...

080089a0 <RadioSend>:
{
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	4605      	mov	r5, r0
 80089a6:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80089a8:	2300      	movs	r3, #0
 80089aa:	461a      	mov	r2, r3
 80089ac:	f240 2101 	movw	r1, #513	@ 0x201
 80089b0:	4608      	mov	r0, r1
 80089b2:	f001 f97e 	bl	8009cb2 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80089b6:	4e5c      	ldr	r6, [pc, #368]	@ (8008b28 <RadioSend+0x188>)
 80089b8:	2101      	movs	r1, #1
 80089ba:	f896 0056 	ldrb.w	r0, [r6, #86]	@ 0x56
 80089be:	f001 fc6f 	bl	800a2a0 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80089c2:	7833      	ldrb	r3, [r6, #0]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d103      	bne.n	80089d0 <RadioSend+0x30>
 80089c8:	f896 3051 	ldrb.w	r3, [r6, #81]	@ 0x51
 80089cc:	2b06      	cmp	r3, #6
 80089ce:	d013      	beq.n	80089f8 <RadioSend+0x58>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80089d0:	f640 0089 	movw	r0, #2185	@ 0x889
 80089d4:	f000 feda 	bl	800978c <SUBGRF_ReadRegister>
 80089d8:	f040 0104 	orr.w	r1, r0, #4
 80089dc:	b2c9      	uxtb	r1, r1
 80089de:	f640 0089 	movw	r0, #2185	@ 0x889
 80089e2:	f000 fec3 	bl	800976c <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 80089e6:	4b50      	ldr	r3, [pc, #320]	@ (8008b28 <RadioSend+0x188>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	2b04      	cmp	r3, #4
 80089ec:	d819      	bhi.n	8008a22 <RadioSend+0x82>
 80089ee:	e8df f003 	tbb	[pc, r3]
 80089f2:	0e24      	.short	0x0e24
 80089f4:	5024      	.short	0x5024
 80089f6:	5d          	.byte	0x5d
 80089f7:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80089f8:	f640 0089 	movw	r0, #2185	@ 0x889
 80089fc:	f000 fec6 	bl	800978c <SUBGRF_ReadRegister>
 8008a00:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8008a04:	f640 0089 	movw	r0, #2185	@ 0x889
 8008a08:	f000 feb0 	bl	800976c <SUBGRF_WriteRegister>
 8008a0c:	e7eb      	b.n	80089e6 <RadioSend+0x46>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8008a0e:	4846      	ldr	r0, [pc, #280]	@ (8008b28 <RadioSend+0x188>)
 8008a10:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a12:	300e      	adds	r0, #14
 8008a14:	f001 fb1c 	bl	800a050 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f000 ffcf 	bl	80099c0 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8008a22:	4c42      	ldr	r4, [pc, #264]	@ (8008b2c <RadioSend+0x18c>)
 8008a24:	4b40      	ldr	r3, [pc, #256]	@ (8008b28 <RadioSend+0x188>)
 8008a26:	6859      	ldr	r1, [r3, #4]
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f002 f961 	bl	800acf0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8008a2e:	4620      	mov	r0, r4
 8008a30:	f002 f918 	bl	800ac64 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8008a34:	2000      	movs	r0, #0
}
 8008a36:	b002      	add	sp, #8
 8008a38:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8008a3a:	f001 fd23 	bl	800a484 <RFW_Is_Init>
 8008a3e:	2801      	cmp	r0, #1
 8008a40:	d00a      	beq.n	8008a58 <RadioSend+0xb8>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8008a42:	4839      	ldr	r0, [pc, #228]	@ (8008b28 <RadioSend+0x188>)
 8008a44:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a46:	300e      	adds	r0, #14
 8008a48:	f001 fb02 	bl	800a050 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 ffb5 	bl	80099c0 <SUBGRF_SendPayload>
 8008a56:	e7e4      	b.n	8008a22 <RadioSend+0x82>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8008a58:	f10d 0207 	add.w	r2, sp, #7
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f001 fd15 	bl	800a48e <RFW_TransmitInit>
 8008a64:	b968      	cbnz	r0, 8008a82 <RadioSend+0xe2>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8008a66:	4830      	ldr	r0, [pc, #192]	@ (8008b28 <RadioSend+0x188>)
 8008a68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008a6c:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a6e:	300e      	adds	r0, #14
 8008a70:	f001 faee 	bl	800a050 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8008a74:	2200      	movs	r2, #0
 8008a76:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f000 ffa0 	bl	80099c0 <SUBGRF_SendPayload>
 8008a80:	e7cf      	b.n	8008a22 <RadioSend+0x82>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8008a82:	4b2b      	ldr	r3, [pc, #172]	@ (8008b30 <RadioSend+0x190>)
 8008a84:	2201      	movs	r2, #1
 8008a86:	2100      	movs	r1, #0
 8008a88:	2002      	movs	r0, #2
 8008a8a:	f001 fde1 	bl	800a650 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8008a8e:	2003      	movs	r0, #3
 8008a90:	e7d1      	b.n	8008a36 <RadioSend+0x96>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008a92:	4825      	ldr	r0, [pc, #148]	@ (8008b28 <RadioSend+0x188>)
 8008a94:	2302      	movs	r3, #2
 8008a96:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8008a98:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a9a:	300e      	adds	r0, #14
 8008a9c:	f001 fad8 	bl	800a050 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	f000 ff8b 	bl	80099c0 <SUBGRF_SendPayload>
            break;
 8008aaa:	e7ba      	b.n	8008a22 <RadioSend+0x82>
            payload_integration( RadioBuffer, buffer, size );
 8008aac:	4622      	mov	r2, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	4820      	ldr	r0, [pc, #128]	@ (8008b34 <RadioSend+0x194>)
 8008ab2:	f7ff fc4f 	bl	8008354 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8008ab6:	4e1c      	ldr	r6, [pc, #112]	@ (8008b28 <RadioSend+0x188>)
 8008ab8:	2302      	movs	r3, #2
 8008aba:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8008abc:	1c65      	adds	r5, r4, #1
 8008abe:	b2ed      	uxtb	r5, r5
 8008ac0:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008ac2:	f106 000e 	add.w	r0, r6, #14
 8008ac6:	f001 fac3 	bl	800a050 <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8008aca:	2100      	movs	r1, #0
 8008acc:	20f1      	movs	r0, #241	@ 0xf1
 8008ace:	f7ff fcbb 	bl	8008448 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	20f0      	movs	r0, #240	@ 0xf0
 8008ad6:	f7ff fcb7 	bl	8008448 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8008ada:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8008adc:	2b64      	cmp	r3, #100	@ 0x64
 8008ade:	d019      	beq.n	8008b14 <RadioSend+0x174>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8008ae0:	21e1      	movs	r1, #225	@ 0xe1
 8008ae2:	20f3      	movs	r0, #243	@ 0xf3
 8008ae4:	f7ff fcb0 	bl	8008448 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8008ae8:	2104      	movs	r1, #4
 8008aea:	20f2      	movs	r0, #242	@ 0xf2
 8008aec:	f7ff fcac 	bl	8008448 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 8008af0:	00e1      	lsls	r1, r4, #3
 8008af2:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8008af4:	0a09      	lsrs	r1, r1, #8
 8008af6:	20f4      	movs	r0, #244	@ 0xf4
 8008af8:	f7ff fca6 	bl	8008448 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8008afc:	f004 01fe 	and.w	r1, r4, #254	@ 0xfe
 8008b00:	20f5      	movs	r0, #245	@ 0xf5
 8008b02:	f7ff fca1 	bl	8008448 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8008b06:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	4809      	ldr	r0, [pc, #36]	@ (8008b34 <RadioSend+0x194>)
 8008b0e:	f000 ff57 	bl	80099c0 <SUBGRF_SendPayload>
            break;
 8008b12:	e786      	b.n	8008a22 <RadioSend+0x82>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8008b14:	2170      	movs	r1, #112	@ 0x70
 8008b16:	20f3      	movs	r0, #243	@ 0xf3
 8008b18:	f7ff fc96 	bl	8008448 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8008b1c:	211d      	movs	r1, #29
 8008b1e:	20f2      	movs	r0, #242	@ 0xf2
 8008b20:	f7ff fc92 	bl	8008448 <RadioWrite>
 8008b24:	e7e4      	b.n	8008af0 <RadioSend+0x150>
 8008b26:	bf00      	nop
 8008b28:	2000099c 	.word	0x2000099c
 8008b2c:	20000984 	.word	0x20000984
 8008b30:	0800e450 	.word	0x0800e450
 8008b34:	200009fc 	.word	0x200009fc

08008b38 <RadioRandom>:
{
 8008b38:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	4619      	mov	r1, r3
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 f8b6 	bl	8009cb2 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8008b46:	f000 ff5d 	bl	8009a04 <SUBGRF_GetRandom>
}
 8008b4a:	bd08      	pop	{r3, pc}

08008b4c <RadioSetModem>:
{
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8008b50:	4b1c      	ldr	r3, [pc, #112]	@ (8008bc4 <RadioSetModem+0x78>)
 8008b52:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8008b54:	f001 fca3 	bl	800a49e <RFW_SetRadioModem>
    switch( modem )
 8008b58:	2c05      	cmp	r4, #5
 8008b5a:	d804      	bhi.n	8008b66 <RadioSetModem+0x1a>
 8008b5c:	e8df f004 	tbb	[pc, r4]
 8008b60:	1d03110a 	.word	0x1d03110a
 8008b64:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8008b66:	2003      	movs	r0, #3
 8008b68:	f001 f942 	bl	8009df0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8008b6c:	4b15      	ldr	r3, [pc, #84]	@ (8008bc4 <RadioSetModem+0x78>)
 8008b6e:	2200      	movs	r2, #0
 8008b70:	735a      	strb	r2, [r3, #13]
}
 8008b72:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008b74:	2000      	movs	r0, #0
 8008b76:	f001 f93b 	bl	8009df0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8008b7a:	4b12      	ldr	r3, [pc, #72]	@ (8008bc4 <RadioSetModem+0x78>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	735a      	strb	r2, [r3, #13]
        break;
 8008b80:	e7f7      	b.n	8008b72 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8008b82:	2001      	movs	r0, #1
 8008b84:	f001 f934 	bl	8009df0 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8008b88:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc4 <RadioSetModem+0x78>)
 8008b8a:	7b5a      	ldrb	r2, [r3, #13]
 8008b8c:	7b18      	ldrb	r0, [r3, #12]
 8008b8e:	4282      	cmp	r2, r0
 8008b90:	d0ef      	beq.n	8008b72 <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8008b92:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8008b94:	f000 fae0 	bl	8009158 <RadioSetPublicNetwork>
 8008b98:	e7eb      	b.n	8008b72 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008b9a:	2002      	movs	r0, #2
 8008b9c:	f001 f928 	bl	8009df0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8008ba0:	4b08      	ldr	r3, [pc, #32]	@ (8008bc4 <RadioSetModem+0x78>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	735a      	strb	r2, [r3, #13]
        break;
 8008ba6:	e7e4      	b.n	8008b72 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8008ba8:	2002      	movs	r0, #2
 8008baa:	f001 f921 	bl	8009df0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8008bae:	4b05      	ldr	r3, [pc, #20]	@ (8008bc4 <RadioSetModem+0x78>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	735a      	strb	r2, [r3, #13]
        break;
 8008bb4:	e7dd      	b.n	8008b72 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f001 f91a 	bl	8009df0 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8008bbc:	4b01      	ldr	r3, [pc, #4]	@ (8008bc4 <RadioSetModem+0x78>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	735a      	strb	r2, [r3, #13]
}
 8008bc2:	e7d6      	b.n	8008b72 <RadioSetModem+0x26>
 8008bc4:	2000099c 	.word	0x2000099c

08008bc8 <RadioSetTxGenericConfig>:
{
 8008bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bcc:	b086      	sub	sp, #24
 8008bce:	4605      	mov	r5, r0
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	4617      	mov	r7, r2
 8008bd4:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	9104      	str	r1, [sp, #16]
 8008bda:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008bdc:	f001 fc51 	bl	800a482 <RFW_DeInit>
    switch( modem )
 8008be0:	2d03      	cmp	r5, #3
 8008be2:	f200 8154 	bhi.w	8008e8e <RadioSetTxGenericConfig+0x2c6>
 8008be6:	e8df f015 	tbh	[pc, r5, lsl #1]
 8008bea:	0079      	.short	0x0079
 8008bec:	013e00db 	.word	0x013e00db
 8008bf0:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 8008bf2:	7ca2      	ldrb	r2, [r4, #18]
 8008bf4:	2a08      	cmp	r2, #8
 8008bf6:	f200 8157 	bhi.w	8008ea8 <RadioSetTxGenericConfig+0x2e0>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8008bfa:	68a1      	ldr	r1, [r4, #8]
 8008bfc:	a804      	add	r0, sp, #16
 8008bfe:	f001 fe3d 	bl	800a87c <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 8152 	beq.w	8008eae <RadioSetTxGenericConfig+0x2e6>
        else if( config->msk.BitRate <= 10000 )
 8008c0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d823      	bhi.n	8008c5a <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8008c12:	4bad      	ldr	r3, [pc, #692]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008c14:	2203      	movs	r2, #3
 8008c16:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8008c18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008c1c:	6822      	ldr	r2, [r4, #0]
 8008c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008c20:	7ce2      	ldrb	r2, [r4, #19]
 8008c22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            radio_modem = MODEM_MSK;
 8008c26:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8008c28:	6863      	ldr	r3, [r4, #4]
 8008c2a:	00da      	lsls	r2, r3, #3
 8008c2c:	4ba6      	ldr	r3, [pc, #664]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008c2e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008c30:	2204      	movs	r2, #4
 8008c32:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8008c34:	7ca2      	ldrb	r2, [r4, #18]
 8008c36:	00d2      	lsls	r2, r2, #3
 8008c38:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008c3e:	7da3      	ldrb	r3, [r4, #22]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d018      	beq.n	8008c76 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008c44:	7d23      	ldrb	r3, [r4, #20]
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d015      	beq.n	8008c76 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 8008c4a:	7d62      	ldrb	r2, [r4, #21]
 8008c4c:	4b9e      	ldr	r3, [pc, #632]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008c4e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8008c50:	7da2      	ldrb	r2, [r4, #22]
 8008c52:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8008c54:	7d22      	ldrb	r2, [r4, #20]
 8008c56:	755a      	strb	r2, [r3, #21]
 8008c58:	e026      	b.n	8008ca8 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008c5a:	4b9b      	ldr	r3, [pc, #620]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008c5c:	2500      	movs	r5, #0
 8008c5e:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008c60:	f883 5038 	strb.w	r5, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8008c64:	6822      	ldr	r2, [r4, #0]
 8008c66:	63da      	str	r2, [r3, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8008c68:	7ce2      	ldrb	r2, [r4, #19]
 8008c6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 8008c6e:	6822      	ldr	r2, [r4, #0]
 8008c70:	0892      	lsrs	r2, r2, #2
 8008c72:	641a      	str	r2, [r3, #64]	@ 0x40
 8008c74:	e7d8      	b.n	8008c28 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008c76:	7d62      	ldrb	r2, [r4, #21]
 8008c78:	f102 030f 	add.w	r3, r2, #15
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d901      	bls.n	8008c86 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008c82:	2a01      	cmp	r2, #1
 8008c84:	d127      	bne.n	8008cd6 <RadioSetTxGenericConfig+0x10e>
            ConfigGeneric.TxConfig = config;
 8008c86:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008c8e:	4a8f      	ldr	r2, [pc, #572]	@ (8008ecc <RadioSetTxGenericConfig+0x304>)
 8008c90:	4b8f      	ldr	r3, [pc, #572]	@ (8008ed0 <RadioSetTxGenericConfig+0x308>)
 8008c92:	6819      	ldr	r1, [r3, #0]
 8008c94:	a801      	add	r0, sp, #4
 8008c96:	f001 fbf1 	bl	800a47c <RFW_Init>
 8008c9a:	b9e0      	cbnz	r0, 8008cd6 <RadioSetTxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008ca6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008ca8:	f7ff fc44 	bl	8008534 <RadioStandby>
        RadioSetModem( radio_modem );
 8008cac:	4628      	mov	r0, r5
 8008cae:	f7ff ff4d 	bl	8008b4c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008cb2:	4d88      	ldr	r5, [pc, #544]	@ (8008ed4 <RadioSetTxGenericConfig+0x30c>)
 8008cb4:	4628      	mov	r0, r5
 8008cb6:	f001 f943 	bl	8009f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008cba:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8008cbe:	f001 f9c7 	bl	800a050 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008cc2:	a804      	add	r0, sp, #16
 8008cc4:	f000 fdae 	bl	8009824 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 8008cc8:	8a20      	ldrh	r0, [r4, #16]
 8008cca:	f000 fd82 	bl	80097d2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8008cce:	89a0      	ldrh	r0, [r4, #12]
 8008cd0:	f000 fdc5 	bl	800985e <SUBGRF_SetCrcPolynomial>
        break;
 8008cd4:	e0db      	b.n	8008e8e <RadioSetTxGenericConfig+0x2c6>
                return -1;
 8008cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cda:	e0e2      	b.n	8008ea2 <RadioSetTxGenericConfig+0x2da>
        if( config->fsk.BitRate == 0 )
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 80e8 	beq.w	8008eb4 <RadioSetTxGenericConfig+0x2ec>
        if( config->fsk.SyncWordLength > 8 )
 8008ce4:	7ca2      	ldrb	r2, [r4, #18]
 8008ce6:	2a08      	cmp	r2, #8
 8008ce8:	f200 80e7 	bhi.w	8008eba <RadioSetTxGenericConfig+0x2f2>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008cec:	68a1      	ldr	r1, [r4, #8]
 8008cee:	a804      	add	r0, sp, #16
 8008cf0:	f001 fdc4 	bl	800a87c <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008cf4:	4b74      	ldr	r3, [pc, #464]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008cfc:	6821      	ldr	r1, [r4, #0]
 8008cfe:	63d9      	str	r1, [r3, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008d00:	7ce1      	ldrb	r1, [r4, #19]
 8008d02:	f883 1044 	strb.w	r1, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8008d06:	69a1      	ldr	r1, [r4, #24]
 8008d08:	6419      	str	r1, [r3, #64]	@ 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008d0a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8008d0c:	6861      	ldr	r1, [r4, #4]
 8008d0e:	00c9      	lsls	r1, r1, #3
 8008d10:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8008d12:	2104      	movs	r1, #4
 8008d14:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008d16:	7ca1      	ldrb	r1, [r4, #18]
 8008d18:	00c9      	lsls	r1, r1, #3
 8008d1a:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8008d1c:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008d1e:	7da3      	ldrb	r3, [r4, #22]
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d00a      	beq.n	8008d3a <RadioSetTxGenericConfig+0x172>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008d24:	7d23      	ldrb	r3, [r4, #20]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d007      	beq.n	8008d3a <RadioSetTxGenericConfig+0x172>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008d2a:	7d62      	ldrb	r2, [r4, #21]
 8008d2c:	4b66      	ldr	r3, [pc, #408]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008d2e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008d30:	7da2      	ldrb	r2, [r4, #22]
 8008d32:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008d34:	7d22      	ldrb	r2, [r4, #20]
 8008d36:	755a      	strb	r2, [r3, #21]
 8008d38:	e018      	b.n	8008d6c <RadioSetTxGenericConfig+0x1a4>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008d3a:	7d62      	ldrb	r2, [r4, #21]
 8008d3c:	f102 030f 	add.w	r3, r2, #15
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d901      	bls.n	8008d4a <RadioSetTxGenericConfig+0x182>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008d46:	2a01      	cmp	r2, #1
 8008d48:	d127      	bne.n	8008d9a <RadioSetTxGenericConfig+0x1d2>
            ConfigGeneric.rtx = CONFIG_TX;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8008d50:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008d52:	4a5e      	ldr	r2, [pc, #376]	@ (8008ecc <RadioSetTxGenericConfig+0x304>)
 8008d54:	4b5e      	ldr	r3, [pc, #376]	@ (8008ed0 <RadioSetTxGenericConfig+0x308>)
 8008d56:	6819      	ldr	r1, [r3, #0]
 8008d58:	a801      	add	r0, sp, #4
 8008d5a:	f001 fb8f 	bl	800a47c <RFW_Init>
 8008d5e:	b9e0      	cbnz	r0, 8008d9a <RadioSetTxGenericConfig+0x1d2>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008d60:	4b59      	ldr	r3, [pc, #356]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008d62:	2200      	movs	r2, #0
 8008d64:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008d66:	2101      	movs	r1, #1
 8008d68:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008d6a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008d6c:	f7ff fbe2 	bl	8008534 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008d70:	2000      	movs	r0, #0
 8008d72:	f7ff feeb 	bl	8008b4c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008d76:	4d57      	ldr	r5, [pc, #348]	@ (8008ed4 <RadioSetTxGenericConfig+0x30c>)
 8008d78:	4628      	mov	r0, r5
 8008d7a:	f001 f8e1 	bl	8009f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008d7e:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8008d82:	f001 f965 	bl	800a050 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008d86:	a804      	add	r0, sp, #16
 8008d88:	f000 fd4c 	bl	8009824 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008d8c:	8a20      	ldrh	r0, [r4, #16]
 8008d8e:	f000 fd20 	bl	80097d2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008d92:	89a0      	ldrh	r0, [r4, #12]
 8008d94:	f000 fd63 	bl	800985e <SUBGRF_SetCrcPolynomial>
        break;
 8008d98:	e079      	b.n	8008e8e <RadioSetTxGenericConfig+0x2c6>
                return -1;
 8008d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d9e:	e080      	b.n	8008ea2 <RadioSetTxGenericConfig+0x2da>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008da0:	4b49      	ldr	r3, [pc, #292]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008da8:	7822      	ldrb	r2, [r4, #0]
 8008daa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008dae:	7862      	ldrb	r2, [r4, #1]
 8008db0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008db4:	78a2      	ldrb	r2, [r4, #2]
 8008db6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8008dba:	78e3      	ldrb	r3, [r4, #3]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d033      	beq.n	8008e28 <RadioSetTxGenericConfig+0x260>
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d036      	beq.n	8008e32 <RadioSetTxGenericConfig+0x26a>
 8008dc4:	b35b      	cbz	r3, 8008e1e <RadioSetTxGenericConfig+0x256>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008dc6:	4d40      	ldr	r5, [pc, #256]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008dc8:	f04f 0801 	mov.w	r8, #1
 8008dcc:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008dd0:	88a3      	ldrh	r3, [r4, #4]
 8008dd2:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008dd4:	79a3      	ldrb	r3, [r4, #6]
 8008dd6:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008dd8:	79e3      	ldrb	r3, [r4, #7]
 8008dda:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008dde:	7a23      	ldrb	r3, [r4, #8]
 8008de0:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 8008de4:	f7ff fba6 	bl	8008534 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008de8:	4640      	mov	r0, r8
 8008dea:	f7ff feaf 	bl	8008b4c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008dee:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 8008df2:	f001 f8a5 	bl	8009f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008df6:	f105 000e 	add.w	r0, r5, #14
 8008dfa:	f001 f929 	bl	800a050 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008dfe:	f895 3051 	ldrb.w	r3, [r5, #81]	@ 0x51
 8008e02:	2b06      	cmp	r3, #6
 8008e04:	d024      	beq.n	8008e50 <RadioSetTxGenericConfig+0x288>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8008e06:	f640 0089 	movw	r0, #2185	@ 0x889
 8008e0a:	f000 fcbf 	bl	800978c <SUBGRF_ReadRegister>
 8008e0e:	f040 0104 	orr.w	r1, r0, #4
 8008e12:	b2c9      	uxtb	r1, r1
 8008e14:	f640 0089 	movw	r0, #2185	@ 0x889
 8008e18:	f000 fca8 	bl	800976c <SUBGRF_WriteRegister>
 8008e1c:	e037      	b.n	8008e8e <RadioSetTxGenericConfig+0x2c6>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e1e:	4b2a      	ldr	r3, [pc, #168]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008e26:	e7ce      	b.n	8008dc6 <RadioSetTxGenericConfig+0x1fe>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e28:	4b27      	ldr	r3, [pc, #156]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8008e30:	e7c9      	b.n	8008dc6 <RadioSetTxGenericConfig+0x1fe>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008e32:	7823      	ldrb	r3, [r4, #0]
 8008e34:	3b0b      	subs	r3, #11
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d904      	bls.n	8008e46 <RadioSetTxGenericConfig+0x27e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008e3c:	4b22      	ldr	r3, [pc, #136]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008e44:	e7bf      	b.n	8008dc6 <RadioSetTxGenericConfig+0x1fe>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008e46:	4b20      	ldr	r3, [pc, #128]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8008e4e:	e7ba      	b.n	8008dc6 <RadioSetTxGenericConfig+0x1fe>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8008e50:	f640 0089 	movw	r0, #2185	@ 0x889
 8008e54:	f000 fc9a 	bl	800978c <SUBGRF_ReadRegister>
 8008e58:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8008e5c:	f640 0089 	movw	r0, #2185	@ 0x889
 8008e60:	f000 fc84 	bl	800976c <SUBGRF_WriteRegister>
 8008e64:	e013      	b.n	8008e8e <RadioSetTxGenericConfig+0x2c6>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008e66:	6823      	ldr	r3, [r4, #0]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008e6e:	d227      	bcs.n	8008ec0 <RadioSetTxGenericConfig+0x2f8>
        RadioSetModem( MODEM_BPSK );
 8008e70:	2003      	movs	r0, #3
 8008e72:	f7ff fe6b 	bl	8008b4c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008e76:	4814      	ldr	r0, [pc, #80]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008e78:	2302      	movs	r3, #2
 8008e7a:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	6483      	str	r3, [r0, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008e82:	2316      	movs	r3, #22
 8008e84:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008e88:	3038      	adds	r0, #56	@ 0x38
 8008e8a:	f001 f859 	bl	8009f40 <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f001 fa1a 	bl	800a2c8 <SUBGRF_SetRfTxPower>
 8008e94:	4c0c      	ldr	r4, [pc, #48]	@ (8008ec8 <RadioSetTxGenericConfig+0x300>)
 8008e96:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008e9a:	f001 faf7 	bl	800a48c <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008e9e:	6066      	str	r6, [r4, #4]
    return 0;
 8008ea0:	2000      	movs	r0, #0
}
 8008ea2:	b006      	add	sp, #24
 8008ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8008eac:	e7f9      	b.n	8008ea2 <RadioSetTxGenericConfig+0x2da>
            return -1;
 8008eae:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb2:	e7f6      	b.n	8008ea2 <RadioSetTxGenericConfig+0x2da>
            return -1;
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	e7f3      	b.n	8008ea2 <RadioSetTxGenericConfig+0x2da>
            return -1;
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	e7f0      	b.n	8008ea2 <RadioSetTxGenericConfig+0x2da>
            return -1;
 8008ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec4:	e7ed      	b.n	8008ea2 <RadioSetTxGenericConfig+0x2da>
 8008ec6:	bf00      	nop
 8008ec8:	2000099c 	.word	0x2000099c
 8008ecc:	20000984 	.word	0x20000984
 8008ed0:	200009f8 	.word	0x200009f8
 8008ed4:	200009d4 	.word	0x200009d4

08008ed8 <RadioSetRxGenericConfig>:
{
 8008ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008edc:	b086      	sub	sp, #24
 8008ede:	4606      	mov	r6, r0
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	4615      	mov	r5, r2
 8008ee4:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	9304      	str	r3, [sp, #16]
 8008eea:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008eec:	f001 fac9 	bl	800a482 <RFW_DeInit>
    if( rxContinuous != 0 )
 8008ef0:	b105      	cbz	r5, 8008ef4 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 8008ef2:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8008ef4:	3d00      	subs	r5, #0
 8008ef6:	bf18      	it	ne
 8008ef8:	2501      	movne	r5, #1
 8008efa:	4b93      	ldr	r3, [pc, #588]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 8008efc:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8008efe:	b136      	cbz	r6, 8008f0e <RadioSetRxGenericConfig+0x36>
 8008f00:	2e01      	cmp	r6, #1
 8008f02:	f000 808f 	beq.w	8009024 <RadioSetRxGenericConfig+0x14c>
 8008f06:	2000      	movs	r0, #0
}
 8008f08:	b006      	add	sp, #24
 8008f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8008f0e:	68a3      	ldr	r3, [r4, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 810d 	beq.w	8009130 <RadioSetRxGenericConfig+0x258>
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f000 810c 	beq.w	8009136 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 8008f1e:	7fa2      	ldrb	r2, [r4, #30]
 8008f20:	2a08      	cmp	r2, #8
 8008f22:	f200 810b 	bhi.w	800913c <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8008f26:	6921      	ldr	r1, [r4, #16]
 8008f28:	a804      	add	r0, sp, #16
 8008f2a:	f001 fca7 	bl	800a87c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008f2e:	6820      	ldr	r0, [r4, #0]
 8008f30:	3800      	subs	r0, #0
 8008f32:	bf18      	it	ne
 8008f34:	2001      	movne	r0, #1
 8008f36:	f000 fdf7 	bl	8009b28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8008f3a:	4d83      	ldr	r5, [pc, #524]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 8008f3c:	2600      	movs	r6, #0
 8008f3e:	f885 6038 	strb.w	r6, [r5, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008f42:	68a3      	ldr	r3, [r4, #8]
 8008f44:	63eb      	str	r3, [r5, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8008f46:	f894 3020 	ldrb.w	r3, [r4, #32]
 8008f4a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008f4e:	6860      	ldr	r0, [r4, #4]
 8008f50:	f001 fa32 	bl	800a3b8 <SUBGRF_GetFskBandwidthRegValue>
 8008f54:	f885 0045 	strb.w	r0, [r5, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008f58:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008f5a:	68e3      	ldr	r3, [r4, #12]
 8008f5c:	00db      	lsls	r3, r3, #3
 8008f5e:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008f60:	7fe3      	ldrb	r3, [r4, #31]
 8008f62:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8008f64:	7fa3      	ldrb	r3, [r4, #30]
 8008f66:	00db      	lsls	r3, r3, #3
 8008f68:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008f6a:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 8008f6e:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008f70:	f894 3022 	ldrb.w	r3, [r4, #34]	@ 0x22
 8008f74:	b973      	cbnz	r3, 8008f94 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8008f76:	6961      	ldr	r1, [r4, #20]
 8008f78:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8008f7a:	f894 2024 	ldrb.w	r2, [r4, #36]	@ 0x24
 8008f7e:	2a02      	cmp	r2, #2
 8008f80:	d012      	beq.n	8008fa8 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d010      	beq.n	8008fa8 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008f86:	f894 0023 	ldrb.w	r0, [r4, #35]	@ 0x23
 8008f8a:	496f      	ldr	r1, [pc, #444]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 8008f8c:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008f8e:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008f90:	754b      	strb	r3, [r1, #21]
 8008f92:	e023      	b.n	8008fdc <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d003      	beq.n	8008fa0 <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008f98:	4a6b      	ldr	r2, [pc, #428]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 8008f9a:	21ff      	movs	r1, #255	@ 0xff
 8008f9c:	7591      	strb	r1, [r2, #22]
 8008f9e:	e7ec      	b.n	8008f7a <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008fa0:	4a69      	ldr	r2, [pc, #420]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 8008fa2:	21ff      	movs	r1, #255	@ 0xff
 8008fa4:	7591      	strb	r1, [r2, #22]
 8008fa6:	e7e8      	b.n	8008f7a <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8008fa8:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8008fac:	f102 030f 	add.w	r3, r2, #15
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d901      	bls.n	8008fba <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008fb6:	2a01      	cmp	r2, #1
 8008fb8:	d131      	bne.n	800901e <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 8008fc0:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8008fc2:	4a62      	ldr	r2, [pc, #392]	@ (800914c <RadioSetRxGenericConfig+0x274>)
 8008fc4:	4b62      	ldr	r3, [pc, #392]	@ (8009150 <RadioSetRxGenericConfig+0x278>)
 8008fc6:	6819      	ldr	r1, [r3, #0]
 8008fc8:	a801      	add	r0, sp, #4
 8008fca:	f001 fa57 	bl	800a47c <RFW_Init>
 8008fce:	bb30      	cbnz	r0, 800901e <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008fd0:	4b5d      	ldr	r3, [pc, #372]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008fda:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008fdc:	f7ff faaa 	bl	8008534 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f7ff fdb3 	bl	8008b4c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008fe6:	4d5b      	ldr	r5, [pc, #364]	@ (8009154 <RadioSetRxGenericConfig+0x27c>)
 8008fe8:	4628      	mov	r0, r5
 8008fea:	f000 ffa9 	bl	8009f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008fee:	f1a5 002a 	sub.w	r0, r5, #42	@ 0x2a
 8008ff2:	f001 f82d 	bl	800a050 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008ff6:	a804      	add	r0, sp, #16
 8008ff8:	f000 fc14 	bl	8009824 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008ffc:	8ba0      	ldrh	r0, [r4, #28]
 8008ffe:	f000 fbe8 	bl	80097d2 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8009002:	8b20      	ldrh	r0, [r4, #24]
 8009004:	f000 fc2b 	bl	800985e <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8009008:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800900c:	fb07 f303 	mul.w	r3, r7, r3
 8009010:	68a2      	ldr	r2, [r4, #8]
 8009012:	fbb3 f3f2 	udiv	r3, r3, r2
 8009016:	f845 3c30 	str.w	r3, [r5, #-48]
    return status;
 800901a:	2000      	movs	r0, #0
        break;
 800901c:	e774      	b.n	8008f08 <RadioSetRxGenericConfig+0x30>
                return -1;
 800901e:	f04f 30ff 	mov.w	r0, #4294967295
 8009022:	e771      	b.n	8008f08 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 8009024:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8009026:	2b00      	cmp	r3, #0
 8009028:	f000 808b 	beq.w	8009142 <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800902c:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8009030:	2b01      	cmp	r3, #1
 8009032:	d055      	beq.n	80090e0 <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 8009034:	f04f 08ff 	mov.w	r8, #255	@ 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8009038:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800903a:	3800      	subs	r0, #0
 800903c:	bf18      	it	ne
 800903e:	2001      	movne	r0, #1
 8009040:	f000 fd72 	bl	8009b28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8009044:	b2f8      	uxtb	r0, r7
 8009046:	f000 fd7c 	bl	8009b42 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800904a:	4b3f      	ldr	r3, [pc, #252]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8009052:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8009056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800905a:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 800905e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8009062:	f894 202e 	ldrb.w	r2, [r4, #46]	@ 0x2e
 8009066:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 800906a:	f894 302f 	ldrb.w	r3, [r4, #47]	@ 0x2f
 800906e:	2b01      	cmp	r3, #1
 8009070:	d03e      	beq.n	80090f0 <RadioSetRxGenericConfig+0x218>
 8009072:	2b02      	cmp	r3, #2
 8009074:	d041      	beq.n	80090fa <RadioSetRxGenericConfig+0x222>
 8009076:	b3b3      	cbz	r3, 80090e6 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8009078:	4d33      	ldr	r5, [pc, #204]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 800907a:	2601      	movs	r6, #1
 800907c:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800907e:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8009080:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8009082:	f894 3032 	ldrb.w	r3, [r4, #50]	@ 0x32
 8009086:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009088:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800908c:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 8009090:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8009094:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8009098:	f885 3021 	strb.w	r3, [r5, #33]	@ 0x21
        RadioStandby( );
 800909c:	f7ff fa4a 	bl	8008534 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80090a0:	4630      	mov	r0, r6
 80090a2:	f7ff fd53 	bl	8008b4c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80090a6:	f105 0038 	add.w	r0, r5, #56	@ 0x38
 80090aa:	f000 ff49 	bl	8009f40 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80090ae:	f105 000e 	add.w	r0, r5, #14
 80090b2:	f000 ffcd 	bl	800a050 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80090b6:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 80090ba:	42b3      	cmp	r3, r6
 80090bc:	d02d      	beq.n	800911a <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80090be:	f240 7036 	movw	r0, #1846	@ 0x736
 80090c2:	f000 fb63 	bl	800978c <SUBGRF_ReadRegister>
 80090c6:	f040 0104 	orr.w	r1, r0, #4
 80090ca:	b2c9      	uxtb	r1, r1
 80090cc:	f240 7036 	movw	r0, #1846	@ 0x736
 80090d0:	f000 fb4c 	bl	800976c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80090d4:	4b1c      	ldr	r3, [pc, #112]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 80090d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090da:	609a      	str	r2, [r3, #8]
    return status;
 80090dc:	2000      	movs	r0, #0
        break;
 80090de:	e713      	b.n	8008f08 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80090e0:	f894 8014 	ldrb.w	r8, [r4, #20]
 80090e4:	e7a8      	b.n	8009038 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80090e6:	4b18      	ldr	r3, [pc, #96]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80090ee:	e7c3      	b.n	8009078 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80090f0:	4b15      	ldr	r3, [pc, #84]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80090f8:	e7be      	b.n	8009078 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80090fa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80090fe:	3b0b      	subs	r3, #11
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b01      	cmp	r3, #1
 8009104:	d904      	bls.n	8009110 <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8009106:	4b10      	ldr	r3, [pc, #64]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 8009108:	2200      	movs	r2, #0
 800910a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 800910e:	e7b3      	b.n	8009078 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8009110:	4b0d      	ldr	r3, [pc, #52]	@ (8009148 <RadioSetRxGenericConfig+0x270>)
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8009118:	e7ae      	b.n	8009078 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800911a:	f240 7036 	movw	r0, #1846	@ 0x736
 800911e:	f000 fb35 	bl	800978c <SUBGRF_ReadRegister>
 8009122:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8009126:	f240 7036 	movw	r0, #1846	@ 0x736
 800912a:	f000 fb1f 	bl	800976c <SUBGRF_WriteRegister>
 800912e:	e7d1      	b.n	80090d4 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	e6e8      	b.n	8008f08 <RadioSetRxGenericConfig+0x30>
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	e6e5      	b.n	8008f08 <RadioSetRxGenericConfig+0x30>
            return -1;
 800913c:	f04f 30ff 	mov.w	r0, #4294967295
 8009140:	e6e2      	b.n	8008f08 <RadioSetRxGenericConfig+0x30>
            return -1;
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	e6df      	b.n	8008f08 <RadioSetRxGenericConfig+0x30>
 8009148:	2000099c 	.word	0x2000099c
 800914c:	2000096c 	.word	0x2000096c
 8009150:	200009f8 	.word	0x200009f8
 8009154:	200009d4 	.word	0x200009d4

08009158 <RadioSetPublicNetwork>:
{
 8009158:	b510      	push	{r4, lr}
 800915a:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800915c:	4b0e      	ldr	r3, [pc, #56]	@ (8009198 <RadioSetPublicNetwork+0x40>)
 800915e:	7318      	strb	r0, [r3, #12]
 8009160:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8009162:	2001      	movs	r0, #1
 8009164:	f7ff fcf2 	bl	8008b4c <RadioSetModem>
    if( enable == true )
 8009168:	b154      	cbz	r4, 8009180 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800916a:	2134      	movs	r1, #52	@ 0x34
 800916c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009170:	f000 fafc 	bl	800976c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8009174:	2144      	movs	r1, #68	@ 0x44
 8009176:	f240 7041 	movw	r0, #1857	@ 0x741
 800917a:	f000 faf7 	bl	800976c <SUBGRF_WriteRegister>
}
 800917e:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8009180:	2114      	movs	r1, #20
 8009182:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8009186:	f000 faf1 	bl	800976c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800918a:	2124      	movs	r1, #36	@ 0x24
 800918c:	f240 7041 	movw	r0, #1857	@ 0x741
 8009190:	f000 faec 	bl	800976c <SUBGRF_WriteRegister>
}
 8009194:	e7f3      	b.n	800917e <RadioSetPublicNetwork+0x26>
 8009196:	bf00      	nop
 8009198:	2000099c 	.word	0x2000099c

0800919c <RadioSetTxConfig>:
{
 800919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	b083      	sub	sp, #12
 80091a2:	4604      	mov	r4, r0
 80091a4:	460d      	mov	r5, r1
 80091a6:	4691      	mov	r9, r2
 80091a8:	461f      	mov	r7, r3
 80091aa:	f8bd 6038 	ldrh.w	r6, [sp, #56]	@ 0x38
 80091ae:	f89d 803c 	ldrb.w	r8, [sp, #60]	@ 0x3c
 80091b2:	f89d a040 	ldrb.w	sl, [sp, #64]	@ 0x40
    RFW_DeInit();
 80091b6:	f001 f964 	bl	800a482 <RFW_DeInit>
    switch( modem )
 80091ba:	2c01      	cmp	r4, #1
 80091bc:	d05d      	beq.n	800927a <RadioSetTxConfig+0xde>
 80091be:	2c04      	cmp	r4, #4
 80091c0:	f000 80aa 	beq.w	8009318 <RadioSetTxConfig+0x17c>
 80091c4:	b19c      	cbz	r4, 80091ee <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80091c6:	4628      	mov	r0, r5
 80091c8:	f001 f87e 	bl	800a2c8 <SUBGRF_SetRfTxPower>
 80091cc:	4c5a      	ldr	r4, [pc, #360]	@ (8009338 <RadioSetTxConfig+0x19c>)
 80091ce:	f884 0056 	strb.w	r0, [r4, #86]	@ 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80091d2:	210e      	movs	r1, #14
 80091d4:	f640 101f 	movw	r0, #2335	@ 0x91f
 80091d8:	f000 fac8 	bl	800976c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80091dc:	f894 0056 	ldrb.w	r0, [r4, #86]	@ 0x56
 80091e0:	f001 f954 	bl	800a48c <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80091e4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80091e6:	6063      	str	r3, [r4, #4]
}
 80091e8:	b003      	add	sp, #12
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80091ee:	4c52      	ldr	r4, [pc, #328]	@ (8009338 <RadioSetTxConfig+0x19c>)
 80091f0:	f04f 0b00 	mov.w	fp, #0
 80091f4:	f884 b038 	strb.w	fp, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80091f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091fa:	63e3      	str	r3, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80091fc:	230b      	movs	r3, #11
 80091fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8009202:	4638      	mov	r0, r7
 8009204:	f001 f8d8 	bl	800a3b8 <SUBGRF_GetFskBandwidthRegValue>
 8009208:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800920c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8009210:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8009214:	00f6      	lsls	r6, r6, #3
 8009216:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8009218:	2304      	movs	r3, #4
 800921a:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800921c:	2318      	movs	r3, #24
 800921e:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8009220:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8009224:	f088 0801 	eor.w	r8, r8, #1
 8009228:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 800922c:	f1ba 0f00 	cmp.w	sl, #0
 8009230:	d01f      	beq.n	8009272 <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8009232:	22f2      	movs	r2, #242	@ 0xf2
 8009234:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8009236:	4c40      	ldr	r4, [pc, #256]	@ (8009338 <RadioSetTxConfig+0x19c>)
 8009238:	2301      	movs	r3, #1
 800923a:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 800923c:	f7ff f97a 	bl	8008534 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8009240:	2000      	movs	r0, #0
 8009242:	f7ff fc83 	bl	8008b4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009246:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 800924a:	f000 fe79 	bl	8009f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800924e:	f104 000e 	add.w	r0, r4, #14
 8009252:	f000 fefd 	bl	800a050 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009256:	4a39      	ldr	r2, [pc, #228]	@ (800933c <RadioSetTxConfig+0x1a0>)
 8009258:	466b      	mov	r3, sp
 800925a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800925e:	e883 0003 	stmia.w	r3, {r0, r1}
 8009262:	4618      	mov	r0, r3
 8009264:	f000 fade 	bl	8009824 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009268:	f240 10ff 	movw	r0, #511	@ 0x1ff
 800926c:	f000 fab1 	bl	80097d2 <SUBGRF_SetWhiteningSeed>
            break;
 8009270:	e7a9      	b.n	80091c6 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8009272:	4b31      	ldr	r3, [pc, #196]	@ (8009338 <RadioSetTxConfig+0x19c>)
 8009274:	2201      	movs	r2, #1
 8009276:	75da      	strb	r2, [r3, #23]
 8009278:	e7dd      	b.n	8009236 <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800927a:	4a2f      	ldr	r2, [pc, #188]	@ (8009338 <RadioSetTxConfig+0x19c>)
 800927c:	2301      	movs	r3, #1
 800927e:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8009282:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009284:	b2db      	uxtb	r3, r3
 8009286:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800928a:	492d      	ldr	r1, [pc, #180]	@ (8009340 <RadioSetTxConfig+0x1a4>)
 800928c:	5dc9      	ldrb	r1, [r1, r7]
 800928e:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8009292:	f89d 1034 	ldrb.w	r1, [sp, #52]	@ 0x34
 8009296:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800929a:	b91f      	cbnz	r7, 80092a4 <RadioSetTxConfig+0x108>
 800929c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800929e:	3a0b      	subs	r2, #11
 80092a0:	2a01      	cmp	r2, #1
 80092a2:	d92b      	bls.n	80092fc <RadioSetTxConfig+0x160>
 80092a4:	2f01      	cmp	r7, #1
 80092a6:	d026      	beq.n	80092f6 <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80092a8:	4a23      	ldr	r2, [pc, #140]	@ (8009338 <RadioSetTxConfig+0x19c>)
 80092aa:	2100      	movs	r1, #0
 80092ac:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80092b0:	4a21      	ldr	r2, [pc, #132]	@ (8009338 <RadioSetTxConfig+0x19c>)
 80092b2:	2101      	movs	r1, #1
 80092b4:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80092b6:	3b05      	subs	r3, #5
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	428b      	cmp	r3, r1
 80092bc:	d923      	bls.n	8009306 <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80092be:	4b1e      	ldr	r3, [pc, #120]	@ (8009338 <RadioSetTxConfig+0x19c>)
 80092c0:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80092c2:	4c1d      	ldr	r4, [pc, #116]	@ (8009338 <RadioSetTxConfig+0x19c>)
 80092c4:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80092c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009344 <RadioSetTxConfig+0x1a8>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80092ce:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80092d2:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 80092d6:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 80092da:	f7ff f92b 	bl	8008534 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80092de:	2001      	movs	r0, #1
 80092e0:	f7ff fc34 	bl	8008b4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80092e4:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80092e8:	f000 fe2a 	bl	8009f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80092ec:	f104 000e 	add.w	r0, r4, #14
 80092f0:	f000 feae 	bl	800a050 <SUBGRF_SetPacketParams>
            break;
 80092f4:	e767      	b.n	80091c6 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80092f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80092f8:	2a0c      	cmp	r2, #12
 80092fa:	d1d5      	bne.n	80092a8 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80092fc:	4a0e      	ldr	r2, [pc, #56]	@ (8009338 <RadioSetTxConfig+0x19c>)
 80092fe:	2101      	movs	r1, #1
 8009300:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 8009304:	e7d4      	b.n	80092b0 <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 8009306:	2e0b      	cmp	r6, #11
 8009308:	d803      	bhi.n	8009312 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800930a:	4613      	mov	r3, r2
 800930c:	220c      	movs	r2, #12
 800930e:	839a      	strh	r2, [r3, #28]
 8009310:	e7d7      	b.n	80092c2 <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009312:	4b09      	ldr	r3, [pc, #36]	@ (8009338 <RadioSetTxConfig+0x19c>)
 8009314:	839e      	strh	r6, [r3, #28]
 8009316:	e7d4      	b.n	80092c2 <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 8009318:	2004      	movs	r0, #4
 800931a:	f7ff fc17 	bl	8008b4c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800931e:	4806      	ldr	r0, [pc, #24]	@ (8009338 <RadioSetTxConfig+0x19c>)
 8009320:	2302      	movs	r3, #2
 8009322:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8009326:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009328:	6483      	str	r3, [r0, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800932a:	2316      	movs	r3, #22
 800932c:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8009330:	3038      	adds	r0, #56	@ 0x38
 8009332:	f000 fe05 	bl	8009f40 <SUBGRF_SetModulationParams>
            break;
 8009336:	e746      	b.n	80091c6 <RadioSetTxConfig+0x2a>
 8009338:	2000099c 	.word	0x2000099c
 800933c:	0800d9e0 	.word	0x0800d9e0
 8009340:	0800e468 	.word	0x0800e468
 8009344:	20000014 	.word	0x20000014

08009348 <RadioSetRxConfig>:
{
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	b087      	sub	sp, #28
 800934e:	4604      	mov	r4, r0
 8009350:	460e      	mov	r6, r1
 8009352:	4615      	mov	r5, r2
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	f8bd 9044 	ldrh.w	r9, [sp, #68]	@ 0x44
 800935a:	f8bd a048 	ldrh.w	sl, [sp, #72]	@ 0x48
 800935e:	f89d 704c 	ldrb.w	r7, [sp, #76]	@ 0x4c
 8009362:	f89d b054 	ldrb.w	fp, [sp, #84]	@ 0x54
 8009366:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
    SubgRf.RxContinuous = rxContinuous;
 800936a:	4bb0      	ldr	r3, [pc, #704]	@ (800962c <RadioSetRxConfig+0x2e4>)
 800936c:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8009370:	f001 f887 	bl	800a482 <RFW_DeInit>
    if( rxContinuous == true )
 8009374:	f1b8 0f00 	cmp.w	r8, #0
 8009378:	d001      	beq.n	800937e <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 800937a:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 800937e:	b16f      	cbz	r7, 800939c <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8009380:	f89d 2050 	ldrb.w	r2, [sp, #80]	@ 0x50
 8009384:	4baa      	ldr	r3, [pc, #680]	@ (8009630 <RadioSetRxConfig+0x2e8>)
 8009386:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8009388:	2c01      	cmp	r4, #1
 800938a:	f000 80d2 	beq.w	8009532 <RadioSetRxConfig+0x1ea>
 800938e:	2c05      	cmp	r4, #5
 8009390:	d008      	beq.n	80093a4 <RadioSetRxConfig+0x5c>
 8009392:	2c00      	cmp	r4, #0
 8009394:	d07c      	beq.n	8009490 <RadioSetRxConfig+0x148>
}
 8009396:	b007      	add	sp, #28
 8009398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 800939c:	4ba4      	ldr	r3, [pc, #656]	@ (8009630 <RadioSetRxConfig+0x2e8>)
 800939e:	22ff      	movs	r2, #255	@ 0xff
 80093a0:	701a      	strb	r2, [r3, #0]
 80093a2:	e7f1      	b.n	8009388 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 80093a4:	2001      	movs	r0, #1
 80093a6:	f000 fbbf 	bl	8009b28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80093aa:	4ca0      	ldr	r4, [pc, #640]	@ (800962c <RadioSetRxConfig+0x2e4>)
 80093ac:	2700      	movs	r7, #0
 80093ae:	f884 7038 	strb.w	r7, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80093b2:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 80093b4:	2309      	movs	r3, #9
 80093b6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 80093ba:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80093be:	6423      	str	r3, [r4, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80093c0:	4630      	mov	r0, r6
 80093c2:	f000 fff9 	bl	800a3b8 <SUBGRF_GetFskBandwidthRegValue>
 80093c6:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80093ca:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80093cc:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80093d0:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 80093d4:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80093d6:	2310      	movs	r3, #16
 80093d8:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80093da:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80093dc:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80093de:	4b94      	ldr	r3, [pc, #592]	@ (8009630 <RadioSetRxConfig+0x2e8>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80093e4:	2301      	movs	r3, #1
 80093e6:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80093e8:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80093ea:	2005      	movs	r0, #5
 80093ec:	f7ff fbae 	bl	8008b4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80093f0:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80093f4:	f000 fda4 	bl	8009f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80093f8:	f104 000e 	add.w	r0, r4, #14
 80093fc:	f000 fe28 	bl	800a050 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009400:	ab02      	add	r3, sp, #8
 8009402:	4a8c      	ldr	r2, [pc, #560]	@ (8009634 <RadioSetRxConfig+0x2ec>)
 8009404:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009408:	e883 0003 	stmia.w	r3, {r0, r1}
 800940c:	4618      	mov	r0, r3
 800940e:	f000 fa09 	bl	8009824 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009412:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009416:	f000 f9dc 	bl	80097d2 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800941a:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800941e:	f7ff f80f 	bl	8008440 <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8009422:	f000 01ef 	and.w	r1, r0, #239	@ 0xef
 8009426:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 800942a:	f7ff f80d 	bl	8008448 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800942e:	2104      	movs	r1, #4
 8009430:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8009434:	f7ff f808 	bl	8008448 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8009438:	f640 009b 	movw	r0, #2203	@ 0x89b
 800943c:	f7ff f800 	bl	8008440 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009440:	f000 01e3 	and.w	r1, r0, #227	@ 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8009444:	f041 0108 	orr.w	r1, r1, #8
 8009448:	f640 009b 	movw	r0, #2203	@ 0x89b
 800944c:	f7fe fffc 	bl	8008448 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8009450:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8009454:	f7fe fff4 	bl	8008440 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8009458:	f000 01e7 	and.w	r1, r0, #231	@ 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800945c:	f041 0118 	orr.w	r1, r1, #24
 8009460:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8009464:	f7fe fff0 	bl	8008448 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8009468:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800946c:	f7fe ffe8 	bl	8008440 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8009470:	f000 018f 	and.w	r1, r0, #143	@ 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8009474:	f041 0150 	orr.w	r1, r1, #80	@ 0x50
 8009478:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 800947c:	f7fe ffe4 	bl	8008448 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8009480:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8009484:	fb03 f30a 	mul.w	r3, r3, sl
 8009488:	fbb3 f3f5 	udiv	r3, r3, r5
 800948c:	60a3      	str	r3, [r4, #8]
            break;
 800948e:	e782      	b.n	8009396 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009490:	2000      	movs	r0, #0
 8009492:	f000 fb49 	bl	8009b28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8009496:	4c65      	ldr	r4, [pc, #404]	@ (800962c <RadioSetRxConfig+0x2e4>)
 8009498:	f04f 0800 	mov.w	r8, #0
 800949c:	f884 8038 	strb.w	r8, [r4, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80094a0:	63e5      	str	r5, [r4, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80094a2:	230b      	movs	r3, #11
 80094a4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80094a8:	4630      	mov	r0, r6
 80094aa:	f000 ff85 	bl	800a3b8 <SUBGRF_GetFskBandwidthRegValue>
 80094ae:	f884 0045 	strb.w	r0, [r4, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80094b2:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80094b6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80094ba:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80094be:	2304      	movs	r3, #4
 80094c0:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80094c2:	2318      	movs	r3, #24
 80094c4:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80094c6:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80094ca:	f087 0701 	eor.w	r7, r7, #1
 80094ce:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80094d0:	4b57      	ldr	r3, [pc, #348]	@ (8009630 <RadioSetRxConfig+0x2e8>)
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 80094d6:	f1bb 0f00 	cmp.w	fp, #0
 80094da:	d026      	beq.n	800952a <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80094dc:	22f2      	movs	r2, #242	@ 0xf2
 80094de:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80094e0:	4c52      	ldr	r4, [pc, #328]	@ (800962c <RadioSetRxConfig+0x2e4>)
 80094e2:	2301      	movs	r3, #1
 80094e4:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80094e6:	f7ff f825 	bl	8008534 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 80094ea:	2000      	movs	r0, #0
 80094ec:	f7ff fb2e 	bl	8008b4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80094f0:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80094f4:	f000 fd24 	bl	8009f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80094f8:	f104 000e 	add.w	r0, r4, #14
 80094fc:	f000 fda8 	bl	800a050 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8009500:	4a4d      	ldr	r2, [pc, #308]	@ (8009638 <RadioSetRxConfig+0x2f0>)
 8009502:	ab04      	add	r3, sp, #16
 8009504:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009508:	e883 0003 	stmia.w	r3, {r0, r1}
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f989 	bl	8009824 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8009512:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8009516:	f000 f95c 	bl	80097d2 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800951a:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 800951e:	fb03 f30a 	mul.w	r3, r3, sl
 8009522:	fbb3 f3f5 	udiv	r3, r3, r5
 8009526:	60a3      	str	r3, [r4, #8]
            break;
 8009528:	e735      	b.n	8009396 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800952a:	4b40      	ldr	r3, [pc, #256]	@ (800962c <RadioSetRxConfig+0x2e4>)
 800952c:	2201      	movs	r2, #1
 800952e:	75da      	strb	r2, [r3, #23]
 8009530:	e7d6      	b.n	80094e0 <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8009532:	2000      	movs	r0, #0
 8009534:	f000 faf8 	bl	8009b28 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8009538:	4a3c      	ldr	r2, [pc, #240]	@ (800962c <RadioSetRxConfig+0x2e4>)
 800953a:	2301      	movs	r3, #1
 800953c:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8009540:	b2eb      	uxtb	r3, r5
 8009542:	f882 3050 	strb.w	r3, [r2, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8009546:	493d      	ldr	r1, [pc, #244]	@ (800963c <RadioSetRxConfig+0x2f4>)
 8009548:	5d89      	ldrb	r1, [r1, r6]
 800954a:	f882 1051 	strb.w	r1, [r2, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800954e:	9901      	ldr	r1, [sp, #4]
 8009550:	f882 1052 	strb.w	r1, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8009554:	b91e      	cbnz	r6, 800955e <RadioSetRxConfig+0x216>
 8009556:	f1a5 020b 	sub.w	r2, r5, #11
 800955a:	2a01      	cmp	r2, #1
 800955c:	d94b      	bls.n	80095f6 <RadioSetRxConfig+0x2ae>
 800955e:	2e01      	cmp	r6, #1
 8009560:	d047      	beq.n	80095f2 <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8009562:	4a32      	ldr	r2, [pc, #200]	@ (800962c <RadioSetRxConfig+0x2e4>)
 8009564:	2100      	movs	r1, #0
 8009566:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800956a:	4a30      	ldr	r2, [pc, #192]	@ (800962c <RadioSetRxConfig+0x2e4>)
 800956c:	2101      	movs	r1, #1
 800956e:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8009570:	3b05      	subs	r3, #5
 8009572:	b2db      	uxtb	r3, r3
 8009574:	428b      	cmp	r3, r1
 8009576:	d943      	bls.n	8009600 <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8009578:	4b2c      	ldr	r3, [pc, #176]	@ (800962c <RadioSetRxConfig+0x2e4>)
 800957a:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800957e:	4c2b      	ldr	r4, [pc, #172]	@ (800962c <RadioSetRxConfig+0x2e4>)
 8009580:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8009582:	4b2b      	ldr	r3, [pc, #172]	@ (8009630 <RadioSetRxConfig+0x2e8>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8009588:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800958c:	f89d 3060 	ldrb.w	r3, [sp, #96]	@ 0x60
 8009590:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
            RadioStandby( );
 8009594:	f7fe ffce 	bl	8008534 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8009598:	2001      	movs	r0, #1
 800959a:	f7ff fad7 	bl	8008b4c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800959e:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 80095a2:	f000 fccd 	bl	8009f40 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80095a6:	f104 000e 	add.w	r0, r4, #14
 80095aa:	f000 fd51 	bl	800a050 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80095ae:	fa5f f08a 	uxtb.w	r0, sl
 80095b2:	f000 fac6 	bl	8009b42 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80095b6:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80095ba:	f000 f8e7 	bl	800978c <SUBGRF_ReadRegister>
 80095be:	f000 0101 	and.w	r1, r0, #1
 80095c2:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80095c6:	f000 f8d1 	bl	800976c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80095ca:	f894 3021 	ldrb.w	r3, [r4, #33]	@ 0x21
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d021      	beq.n	8009616 <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80095d2:	f240 7036 	movw	r0, #1846	@ 0x736
 80095d6:	f000 f8d9 	bl	800978c <SUBGRF_ReadRegister>
 80095da:	f040 0104 	orr.w	r1, r0, #4
 80095de:	b2c9      	uxtb	r1, r1
 80095e0:	f240 7036 	movw	r0, #1846	@ 0x736
 80095e4:	f000 f8c2 	bl	800976c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80095e8:	4b10      	ldr	r3, [pc, #64]	@ (800962c <RadioSetRxConfig+0x2e4>)
 80095ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80095ee:	609a      	str	r2, [r3, #8]
}
 80095f0:	e6d1      	b.n	8009396 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80095f2:	2d0c      	cmp	r5, #12
 80095f4:	d1b5      	bne.n	8009562 <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80095f6:	4a0d      	ldr	r2, [pc, #52]	@ (800962c <RadioSetRxConfig+0x2e4>)
 80095f8:	2101      	movs	r1, #1
 80095fa:	f882 1053 	strb.w	r1, [r2, #83]	@ 0x53
 80095fe:	e7b4      	b.n	800956a <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 8009600:	f1b9 0f0b 	cmp.w	r9, #11
 8009604:	d803      	bhi.n	800960e <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8009606:	4613      	mov	r3, r2
 8009608:	220c      	movs	r2, #12
 800960a:	839a      	strh	r2, [r3, #28]
 800960c:	e7b7      	b.n	800957e <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800960e:	4b07      	ldr	r3, [pc, #28]	@ (800962c <RadioSetRxConfig+0x2e4>)
 8009610:	f8a3 901c 	strh.w	r9, [r3, #28]
 8009614:	e7b3      	b.n	800957e <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8009616:	f240 7036 	movw	r0, #1846	@ 0x736
 800961a:	f000 f8b7 	bl	800978c <SUBGRF_ReadRegister>
 800961e:	f000 01fb 	and.w	r1, r0, #251	@ 0xfb
 8009622:	f240 7036 	movw	r0, #1846	@ 0x736
 8009626:	f000 f8a1 	bl	800976c <SUBGRF_WriteRegister>
 800962a:	e7dd      	b.n	80095e8 <RadioSetRxConfig+0x2a0>
 800962c:	2000099c 	.word	0x2000099c
 8009630:	20000014 	.word	0x20000014
 8009634:	0800d9e8 	.word	0x0800d9e8
 8009638:	0800d9e0 	.word	0x0800d9e0
 800963c:	0800e468 	.word	0x0800e468

08009640 <RadioIsChannelFree>:
{
 8009640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009642:	b08b      	sub	sp, #44	@ 0x2c
 8009644:	4604      	mov	r4, r0
 8009646:	460f      	mov	r7, r1
 8009648:	4616      	mov	r6, r2
 800964a:	461d      	mov	r5, r3
    RadioStandby( );
 800964c:	f7fe ff72 	bl	8008534 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 8009650:	2000      	movs	r0, #0
 8009652:	f7ff fa7b 	bl	8008b4c <RadioSetModem>
    RadioSetChannel( freq );
 8009656:	4620      	mov	r0, r4
 8009658:	f7ff f94e 	bl	80088f8 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800965c:	2301      	movs	r3, #1
 800965e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009660:	2400      	movs	r4, #0
 8009662:	9408      	str	r4, [sp, #32]
 8009664:	9407      	str	r4, [sp, #28]
 8009666:	9406      	str	r4, [sp, #24]
 8009668:	9405      	str	r4, [sp, #20]
 800966a:	9404      	str	r4, [sp, #16]
 800966c:	9403      	str	r4, [sp, #12]
 800966e:	9402      	str	r4, [sp, #8]
 8009670:	2303      	movs	r3, #3
 8009672:	9301      	str	r3, [sp, #4]
 8009674:	9700      	str	r7, [sp, #0]
 8009676:	4623      	mov	r3, r4
 8009678:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800967c:	4639      	mov	r1, r7
 800967e:	4620      	mov	r0, r4
 8009680:	f7ff fe62 	bl	8009348 <RadioSetRxConfig>
    RadioRx( 0 );
 8009684:	4620      	mov	r0, r4
 8009686:	f7ff f94f 	bl	8008928 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800968a:	f7ff f901 	bl	8008890 <RadioGetWakeupTime>
 800968e:	f7f8 fb55 	bl	8001d3c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8009692:	f001 fa4d 	bl	800ab30 <UTIL_TIMER_GetCurrentTime>
 8009696:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8009698:	4620      	mov	r0, r4
 800969a:	f001 fa53 	bl	800ab44 <UTIL_TIMER_GetElapsedTime>
 800969e:	42a8      	cmp	r0, r5
 80096a0:	d206      	bcs.n	80096b0 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80096a2:	2000      	movs	r0, #0
 80096a4:	f7ff f901 	bl	80088aa <RadioRssi>
        if( rssi > rssiThresh )
 80096a8:	42b0      	cmp	r0, r6
 80096aa:	ddf5      	ble.n	8009698 <RadioIsChannelFree+0x58>
            status = false;
 80096ac:	2400      	movs	r4, #0
 80096ae:	e000      	b.n	80096b2 <RadioIsChannelFree+0x72>
    bool status = true;
 80096b0:	2401      	movs	r4, #1
    RadioStandby( );
 80096b2:	f7fe ff3f 	bl	8008534 <RadioStandby>
}
 80096b6:	4620      	mov	r0, r4
 80096b8:	b00b      	add	sp, #44	@ 0x2c
 80096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096bc <RadioInit>:
{
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	b082      	sub	sp, #8
    RadioEvents = events;
 80096c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009738 <RadioInit+0x7c>)
 80096c2:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 80096c4:	4d1d      	ldr	r5, [pc, #116]	@ (800973c <RadioInit+0x80>)
 80096c6:	2400      	movs	r4, #0
 80096c8:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 80096ca:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 80096cc:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80096ce:	65ac      	str	r4, [r5, #88]	@ 0x58
    SUBGRF_Init( RadioOnDioIrq );
 80096d0:	481b      	ldr	r0, [pc, #108]	@ (8009740 <RadioInit+0x84>)
 80096d2:	f000 fb27 	bl	8009d24 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 80096d6:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 80096d8:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 80096da:	f000 fa53 	bl	8009b84 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 80096de:	4621      	mov	r1, r4
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 fd27 	bl	800a134 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 80096e6:	2204      	movs	r2, #4
 80096e8:	4621      	mov	r1, r4
 80096ea:	2001      	movs	r0, #1
 80096ec:	f000 fb9a 	bl	8009e24 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80096f0:	4623      	mov	r3, r4
 80096f2:	4622      	mov	r2, r4
 80096f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80096f8:	4608      	mov	r0, r1
 80096fa:	f000 fada 	bl	8009cb2 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 80096fe:	f7ff f945 	bl	800898c <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8009702:	4e10      	ldr	r6, [pc, #64]	@ (8009744 <RadioInit+0x88>)
 8009704:	9400      	str	r4, [sp, #0]
 8009706:	4b10      	ldr	r3, [pc, #64]	@ (8009748 <RadioInit+0x8c>)
 8009708:	4622      	mov	r2, r4
 800970a:	f04f 31ff 	mov.w	r1, #4294967295
 800970e:	4630      	mov	r0, r6
 8009710:	f001 f9f0 	bl	800aaf4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8009714:	4d0d      	ldr	r5, [pc, #52]	@ (800974c <RadioInit+0x90>)
 8009716:	9400      	str	r4, [sp, #0]
 8009718:	4b0d      	ldr	r3, [pc, #52]	@ (8009750 <RadioInit+0x94>)
 800971a:	4622      	mov	r2, r4
 800971c:	f04f 31ff 	mov.w	r1, #4294967295
 8009720:	4628      	mov	r0, r5
 8009722:	f001 f9e7 	bl	800aaf4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8009726:	4630      	mov	r0, r6
 8009728:	f001 fa42 	bl	800abb0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800972c:	4628      	mov	r0, r5
 800972e:	f001 fa3f 	bl	800abb0 <UTIL_TIMER_Stop>
}
 8009732:	b002      	add	sp, #8
 8009734:	bd70      	pop	{r4, r5, r6, pc}
 8009736:	bf00      	nop
 8009738:	200009f8 	.word	0x200009f8
 800973c:	2000099c 	.word	0x2000099c
 8009740:	0800887d 	.word	0x0800887d
 8009744:	20000984 	.word	0x20000984
 8009748:	08008331 	.word	0x08008331
 800974c:	2000096c 	.word	0x2000096c
 8009750:	0800834d 	.word	0x0800834d

08009754 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8009754:	4b01      	ldr	r3, [pc, #4]	@ (800975c <SUBGRF_GetOperatingMode+0x8>)
 8009756:	7818      	ldrb	r0, [r3, #0]
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	20000b0a 	.word	0x20000b0a

08009760 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 8009760:	4b01      	ldr	r3, [pc, #4]	@ (8009768 <SUBGRF_GetPacketType+0x8>)
 8009762:	7818      	ldrb	r0, [r3, #0]
 8009764:	4770      	bx	lr
 8009766:	bf00      	nop
 8009768:	20000b09 	.word	0x20000b09

0800976c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800976c:	b500      	push	{lr}
 800976e:	b083      	sub	sp, #12
 8009770:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009774:	2301      	movs	r3, #1
 8009776:	f10d 0207 	add.w	r2, sp, #7
 800977a:	4601      	mov	r1, r0
 800977c:	4802      	ldr	r0, [pc, #8]	@ (8009788 <SUBGRF_WriteRegister+0x1c>)
 800977e:	f7fc fd79 	bl	8006274 <HAL_SUBGHZ_WriteRegisters>
}
 8009782:	b003      	add	sp, #12
 8009784:	f85d fb04 	ldr.w	pc, [sp], #4
 8009788:	2000042c 	.word	0x2000042c

0800978c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 800978c:	b500      	push	{lr}
 800978e:	b083      	sub	sp, #12
 8009790:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009792:	2301      	movs	r3, #1
 8009794:	f10d 0207 	add.w	r2, sp, #7
 8009798:	4803      	ldr	r0, [pc, #12]	@ (80097a8 <SUBGRF_ReadRegister+0x1c>)
 800979a:	f7fc fdbb 	bl	8006314 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 800979e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80097a2:	b003      	add	sp, #12
 80097a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80097a8:	2000042c 	.word	0x2000042c

080097ac <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80097ac:	b510      	push	{r4, lr}
 80097ae:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80097b0:	f7f9 fd72 	bl	8003298 <RBI_IsDCDC>
 80097b4:	2801      	cmp	r0, #1
 80097b6:	d000      	beq.n	80097ba <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80097b8:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80097ba:	f640 1023 	movw	r0, #2339	@ 0x923
 80097be:	f7ff ffe5 	bl	800978c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80097c2:	f000 01f9 	and.w	r1, r0, #249	@ 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80097c6:	4321      	orrs	r1, r4
 80097c8:	f640 1023 	movw	r0, #2339	@ 0x923
 80097cc:	f7ff ffce 	bl	800976c <SUBGRF_WriteRegister>
}
 80097d0:	e7f2      	b.n	80097b8 <Radio_SMPS_Set+0xc>

080097d2 <SUBGRF_SetWhiteningSeed>:
{
 80097d2:	b510      	push	{r4, lr}
 80097d4:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 80097d6:	f7ff ffc3 	bl	8009760 <SUBGRF_GetPacketType>
 80097da:	b100      	cbz	r0, 80097de <SUBGRF_SetWhiteningSeed+0xc>
}
 80097dc:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80097de:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80097e2:	f7ff ffd3 	bl	800978c <SUBGRF_ReadRegister>
 80097e6:	f000 00fe 	and.w	r0, r0, #254	@ 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80097ea:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80097ee:	4301      	orrs	r1, r0
 80097f0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80097f4:	f7ff ffba 	bl	800976c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 80097f8:	b2e1      	uxtb	r1, r4
 80097fa:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 80097fe:	f7ff ffb5 	bl	800976c <SUBGRF_WriteRegister>
}
 8009802:	e7eb      	b.n	80097dc <SUBGRF_SetWhiteningSeed+0xa>

08009804 <SUBGRF_WriteRegisters>:
{
 8009804:	b510      	push	{r4, lr}
 8009806:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009808:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800980c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800980e:	460a      	mov	r2, r1
 8009810:	4601      	mov	r1, r0
 8009812:	4803      	ldr	r0, [pc, #12]	@ (8009820 <SUBGRF_WriteRegisters+0x1c>)
 8009814:	f7fc fd2e 	bl	8006274 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009818:	f384 8810 	msr	PRIMASK, r4
}
 800981c:	bd10      	pop	{r4, pc}
 800981e:	bf00      	nop
 8009820:	2000042c 	.word	0x2000042c

08009824 <SUBGRF_SetSyncWord>:
{
 8009824:	b508      	push	{r3, lr}
 8009826:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8009828:	2208      	movs	r2, #8
 800982a:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 800982e:	f7ff ffe9 	bl	8009804 <SUBGRF_WriteRegisters>
}
 8009832:	2000      	movs	r0, #0
 8009834:	bd08      	pop	{r3, pc}

08009836 <SUBGRF_SetCrcSeed>:
{
 8009836:	b500      	push	{lr}
 8009838:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800983a:	0a03      	lsrs	r3, r0, #8
 800983c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8009840:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8009844:	f7ff ff8c 	bl	8009760 <SUBGRF_GetPacketType>
 8009848:	b110      	cbz	r0, 8009850 <SUBGRF_SetCrcSeed+0x1a>
}
 800984a:	b003      	add	sp, #12
 800984c:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8009850:	2202      	movs	r2, #2
 8009852:	a901      	add	r1, sp, #4
 8009854:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8009858:	f7ff ffd4 	bl	8009804 <SUBGRF_WriteRegisters>
}
 800985c:	e7f5      	b.n	800984a <SUBGRF_SetCrcSeed+0x14>

0800985e <SUBGRF_SetCrcPolynomial>:
{
 800985e:	b500      	push	{lr}
 8009860:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8009862:	0a03      	lsrs	r3, r0, #8
 8009864:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8009868:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 800986c:	f7ff ff78 	bl	8009760 <SUBGRF_GetPacketType>
 8009870:	b110      	cbz	r0, 8009878 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8009872:	b003      	add	sp, #12
 8009874:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8009878:	2202      	movs	r2, #2
 800987a:	a901      	add	r1, sp, #4
 800987c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8009880:	f7ff ffc0 	bl	8009804 <SUBGRF_WriteRegisters>
}
 8009884:	e7f5      	b.n	8009872 <SUBGRF_SetCrcPolynomial+0x14>
	...

08009888 <SUBGRF_ReadRegisters>:
{
 8009888:	b510      	push	{r4, lr}
 800988a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800988c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009890:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009892:	460a      	mov	r2, r1
 8009894:	4601      	mov	r1, r0
 8009896:	4803      	ldr	r0, [pc, #12]	@ (80098a4 <SUBGRF_ReadRegisters+0x1c>)
 8009898:	f7fc fd3c 	bl	8006314 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800989c:	f384 8810 	msr	PRIMASK, r4
}
 80098a0:	bd10      	pop	{r4, pc}
 80098a2:	bf00      	nop
 80098a4:	2000042c 	.word	0x2000042c

080098a8 <SUBGRF_WriteBuffer>:
{
 80098a8:	b510      	push	{r4, lr}
 80098aa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80098b0:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80098b2:	460a      	mov	r2, r1
 80098b4:	4601      	mov	r1, r0
 80098b6:	4803      	ldr	r0, [pc, #12]	@ (80098c4 <SUBGRF_WriteBuffer+0x1c>)
 80098b8:	f7fc fe82 	bl	80065c0 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098bc:	f384 8810 	msr	PRIMASK, r4
}
 80098c0:	bd10      	pop	{r4, pc}
 80098c2:	bf00      	nop
 80098c4:	2000042c 	.word	0x2000042c

080098c8 <SUBGRF_SetPayload>:
{
 80098c8:	b508      	push	{r3, lr}
 80098ca:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80098cc:	4601      	mov	r1, r0
 80098ce:	2000      	movs	r0, #0
 80098d0:	f7ff ffea 	bl	80098a8 <SUBGRF_WriteBuffer>
}
 80098d4:	bd08      	pop	{r3, pc}
	...

080098d8 <SUBGRF_ReadBuffer>:
{
 80098d8:	b510      	push	{r4, lr}
 80098da:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098dc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80098e0:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80098e2:	460a      	mov	r2, r1
 80098e4:	4601      	mov	r1, r0
 80098e6:	4803      	ldr	r0, [pc, #12]	@ (80098f4 <SUBGRF_ReadBuffer+0x1c>)
 80098e8:	f7fc feb4 	bl	8006654 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ec:	f384 8810 	msr	PRIMASK, r4
}
 80098f0:	bd10      	pop	{r4, pc}
 80098f2:	bf00      	nop
 80098f4:	2000042c 	.word	0x2000042c

080098f8 <SUBGRF_WriteCommand>:
{
 80098f8:	b510      	push	{r4, lr}
 80098fa:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098fc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009900:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8009902:	460a      	mov	r2, r1
 8009904:	4601      	mov	r1, r0
 8009906:	4803      	ldr	r0, [pc, #12]	@ (8009914 <SUBGRF_WriteCommand+0x1c>)
 8009908:	f7fc fd58 	bl	80063bc <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800990c:	f384 8810 	msr	PRIMASK, r4
}
 8009910:	bd10      	pop	{r4, pc}
 8009912:	bf00      	nop
 8009914:	2000042c 	.word	0x2000042c

08009918 <SUBGRF_SetSleep>:
{
 8009918:	b510      	push	{r4, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800991e:	2000      	movs	r0, #0
 8009920:	f7f9 fcae 	bl	8003280 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009924:	2002      	movs	r0, #2
 8009926:	f7ff ff41 	bl	80097ac <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800992a:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800992e:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8009932:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8009934:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8009938:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800993a:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800993e:	2201      	movs	r2, #1
 8009940:	f10d 0107 	add.w	r1, sp, #7
 8009944:	2084      	movs	r0, #132	@ 0x84
 8009946:	f7ff ffd7 	bl	80098f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800994a:	4b02      	ldr	r3, [pc, #8]	@ (8009954 <SUBGRF_SetSleep+0x3c>)
 800994c:	2200      	movs	r2, #0
 800994e:	701a      	strb	r2, [r3, #0]
}
 8009950:	b002      	add	sp, #8
 8009952:	bd10      	pop	{r4, pc}
 8009954:	20000b0a 	.word	0x20000b0a

08009958 <SUBGRF_SetStandby>:
{
 8009958:	b500      	push	{lr}
 800995a:	b083      	sub	sp, #12
 800995c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8009960:	2201      	movs	r2, #1
 8009962:	f10d 0107 	add.w	r1, sp, #7
 8009966:	2080      	movs	r0, #128	@ 0x80
 8009968:	f7ff ffc6 	bl	80098f8 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800996c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009970:	b92b      	cbnz	r3, 800997e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8009972:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <SUBGRF_SetStandby+0x30>)
 8009974:	2201      	movs	r2, #1
 8009976:	701a      	strb	r2, [r3, #0]
}
 8009978:	b003      	add	sp, #12
 800997a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 800997e:	4b02      	ldr	r3, [pc, #8]	@ (8009988 <SUBGRF_SetStandby+0x30>)
 8009980:	2202      	movs	r2, #2
 8009982:	701a      	strb	r2, [r3, #0]
}
 8009984:	e7f8      	b.n	8009978 <SUBGRF_SetStandby+0x20>
 8009986:	bf00      	nop
 8009988:	20000b0a 	.word	0x20000b0a

0800998c <SUBGRF_SetTx>:
{
 800998c:	b500      	push	{lr}
 800998e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8009990:	4b0a      	ldr	r3, [pc, #40]	@ (80099bc <SUBGRF_SetTx+0x30>)
 8009992:	2204      	movs	r2, #4
 8009994:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009996:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800999a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800999e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80099a2:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80099a6:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80099aa:	2203      	movs	r2, #3
 80099ac:	a901      	add	r1, sp, #4
 80099ae:	2083      	movs	r0, #131	@ 0x83
 80099b0:	f7ff ffa2 	bl	80098f8 <SUBGRF_WriteCommand>
}
 80099b4:	b003      	add	sp, #12
 80099b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80099ba:	bf00      	nop
 80099bc:	20000b0a 	.word	0x20000b0a

080099c0 <SUBGRF_SendPayload>:
{
 80099c0:	b510      	push	{r4, lr}
 80099c2:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80099c4:	f7ff ff80 	bl	80098c8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80099c8:	4620      	mov	r0, r4
 80099ca:	f7ff ffdf 	bl	800998c <SUBGRF_SetTx>
}
 80099ce:	bd10      	pop	{r4, pc}

080099d0 <SUBGRF_SetRx>:
{
 80099d0:	b500      	push	{lr}
 80099d2:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 80099d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009a00 <SUBGRF_SetRx+0x30>)
 80099d6:	2205      	movs	r2, #5
 80099d8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80099da:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80099de:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80099e2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80099e6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80099ea:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80099ee:	2203      	movs	r2, #3
 80099f0:	a901      	add	r1, sp, #4
 80099f2:	2082      	movs	r0, #130	@ 0x82
 80099f4:	f7ff ff80 	bl	80098f8 <SUBGRF_WriteCommand>
}
 80099f8:	b003      	add	sp, #12
 80099fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80099fe:	bf00      	nop
 8009a00:	20000b0a 	.word	0x20000b0a

08009a04 <SUBGRF_GetRandom>:
{
 8009a04:	b570      	push	{r4, r5, r6, lr}
 8009a06:	b082      	sub	sp, #8
    uint32_t number = 0;
 8009a08:	2600      	movs	r6, #0
 8009a0a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8009a0c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009a10:	f7ff febc 	bl	800978c <SUBGRF_ReadRegister>
 8009a14:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8009a16:	f000 01fe 	and.w	r1, r0, #254	@ 0xfe
 8009a1a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009a1e:	f7ff fea5 	bl	800976c <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8009a22:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009a26:	f7ff feb1 	bl	800978c <SUBGRF_ReadRegister>
 8009a2a:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8009a2c:	f000 017f 	and.w	r1, r0, #127	@ 0x7f
 8009a30:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009a34:	f7ff fe9a 	bl	800976c <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8009a38:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8009a3c:	f7ff ffc8 	bl	80099d0 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8009a40:	2204      	movs	r2, #4
 8009a42:	eb0d 0102 	add.w	r1, sp, r2
 8009a46:	f640 0019 	movw	r0, #2073	@ 0x819
 8009a4a:	f7ff ff1d 	bl	8009888 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 8009a4e:	4630      	mov	r0, r6
 8009a50:	f7ff ff82 	bl	8009958 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8009a54:	4629      	mov	r1, r5
 8009a56:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8009a5a:	f7ff fe87 	bl	800976c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8009a5e:	4621      	mov	r1, r4
 8009a60:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8009a64:	f7ff fe82 	bl	800976c <SUBGRF_WriteRegister>
}
 8009a68:	9801      	ldr	r0, [sp, #4]
 8009a6a:	b002      	add	sp, #8
 8009a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009a70 <SUBGRF_SetRxBoosted>:
{
 8009a70:	b510      	push	{r4, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8009a76:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa8 <SUBGRF_SetRxBoosted+0x38>)
 8009a78:	2205      	movs	r2, #5
 8009a7a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8009a7c:	2197      	movs	r1, #151	@ 0x97
 8009a7e:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8009a82:	f7ff fe73 	bl	800976c <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009a86:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8009a8a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009a8e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8009a92:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009a96:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8009a9a:	2203      	movs	r2, #3
 8009a9c:	a901      	add	r1, sp, #4
 8009a9e:	2082      	movs	r0, #130	@ 0x82
 8009aa0:	f7ff ff2a 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009aa4:	b002      	add	sp, #8
 8009aa6:	bd10      	pop	{r4, pc}
 8009aa8:	20000b0a 	.word	0x20000b0a

08009aac <SUBGRF_SetRxDutyCycle>:
{
 8009aac:	b500      	push	{lr}
 8009aae:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8009ab0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009ab4:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8009ab8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009abc:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8009ac0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009ac4:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8009ac8:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8009acc:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009ad0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009ad4:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8009ad8:	2206      	movs	r2, #6
 8009ada:	4669      	mov	r1, sp
 8009adc:	2094      	movs	r0, #148	@ 0x94
 8009ade:	f7ff ff0b 	bl	80098f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009ae2:	4b03      	ldr	r3, [pc, #12]	@ (8009af0 <SUBGRF_SetRxDutyCycle+0x44>)
 8009ae4:	2206      	movs	r2, #6
 8009ae6:	701a      	strb	r2, [r3, #0]
}
 8009ae8:	b003      	add	sp, #12
 8009aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8009aee:	bf00      	nop
 8009af0:	20000b0a 	.word	0x20000b0a

08009af4 <SUBGRF_SetCad>:
{
 8009af4:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009af6:	2200      	movs	r2, #0
 8009af8:	4611      	mov	r1, r2
 8009afa:	20c5      	movs	r0, #197	@ 0xc5
 8009afc:	f7ff fefc 	bl	80098f8 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8009b00:	4b01      	ldr	r3, [pc, #4]	@ (8009b08 <SUBGRF_SetCad+0x14>)
 8009b02:	2207      	movs	r2, #7
 8009b04:	701a      	strb	r2, [r3, #0]
}
 8009b06:	bd08      	pop	{r3, pc}
 8009b08:	20000b0a 	.word	0x20000b0a

08009b0c <SUBGRF_SetTxContinuousWave>:
{
 8009b0c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8009b0e:	2200      	movs	r2, #0
 8009b10:	4611      	mov	r1, r2
 8009b12:	20d1      	movs	r0, #209	@ 0xd1
 8009b14:	f7ff fef0 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009b18:	bd08      	pop	{r3, pc}

08009b1a <SUBGRF_SetTxInfinitePreamble>:
{
 8009b1a:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4611      	mov	r1, r2
 8009b20:	20d2      	movs	r0, #210	@ 0xd2
 8009b22:	f7ff fee9 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009b26:	bd08      	pop	{r3, pc}

08009b28 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8009b28:	b500      	push	{lr}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8009b30:	2201      	movs	r2, #1
 8009b32:	f10d 0107 	add.w	r1, sp, #7
 8009b36:	209f      	movs	r0, #159	@ 0x9f
 8009b38:	f7ff fede 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009b3c:	b003      	add	sp, #12
 8009b3e:	f85d fb04 	ldr.w	pc, [sp], #4

08009b42 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8009b42:	b500      	push	{lr}
 8009b44:	b083      	sub	sp, #12
 8009b46:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f10d 0107 	add.w	r1, sp, #7
 8009b50:	20a0      	movs	r0, #160	@ 0xa0
 8009b52:	f7ff fed1 	bl	80098f8 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8009b56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8009b5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8009b5c:	d90f      	bls.n	8009b7e <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8009b5e:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8009b60:	2200      	movs	r2, #0
        while( mant > 31 )
 8009b62:	e002      	b.n	8009b6a <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8009b64:	089b      	lsrs	r3, r3, #2
            exp++;
 8009b66:	3201      	adds	r2, #1
 8009b68:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8009b6a:	2b1f      	cmp	r3, #31
 8009b6c:	d8fa      	bhi.n	8009b64 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8009b6e:	00d9      	lsls	r1, r3, #3
 8009b70:	b2c9      	uxtb	r1, r1
 8009b72:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009b74:	b2c9      	uxtb	r1, r1
 8009b76:	f240 7006 	movw	r0, #1798	@ 0x706
 8009b7a:	f7ff fdf7 	bl	800976c <SUBGRF_WriteRegister>
}
 8009b7e:	b003      	add	sp, #12
 8009b80:	f85d fb04 	ldr.w	pc, [sp], #4

08009b84 <SUBGRF_SetRegulatorMode>:
{
 8009b84:	b500      	push	{lr}
 8009b86:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8009b88:	f7f9 fb86 	bl	8003298 <RBI_IsDCDC>
 8009b8c:	2801      	cmp	r0, #1
 8009b8e:	d00b      	beq.n	8009ba8 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8009b90:	2300      	movs	r3, #0
 8009b92:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8009b96:	2201      	movs	r2, #1
 8009b98:	f10d 0107 	add.w	r1, sp, #7
 8009b9c:	2096      	movs	r0, #150	@ 0x96
 8009b9e:	f7ff feab 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009ba2:	b003      	add	sp, #12
 8009ba4:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f88d 3007 	strb.w	r3, [sp, #7]
 8009bae:	e7f2      	b.n	8009b96 <SUBGRF_SetRegulatorMode+0x12>

08009bb0 <SUBGRF_Calibrate>:
{
 8009bb0:	b500      	push	{lr}
 8009bb2:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009bb4:	f000 0340 	and.w	r3, r0, #64	@ 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009bb8:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009bbc:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009bbe:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8009bc2:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009bc4:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8009bc8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009bca:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8009bce:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009bd0:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8009bd4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8009bd6:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8009bda:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009bdc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8009be0:	2201      	movs	r2, #1
 8009be2:	f10d 0107 	add.w	r1, sp, #7
 8009be6:	2089      	movs	r0, #137	@ 0x89
 8009be8:	f7ff fe86 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009bec:	b003      	add	sp, #12
 8009bee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009bf4 <SUBGRF_CalibrateImage>:
{
 8009bf4:	b500      	push	{lr}
 8009bf6:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8009bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8009c78 <SUBGRF_CalibrateImage+0x84>)
 8009bfa:	4298      	cmp	r0, r3
 8009bfc:	d90d      	bls.n	8009c1a <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8009bfe:	23e1      	movs	r3, #225	@ 0xe1
 8009c00:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8009c04:	23e9      	movs	r3, #233	@ 0xe9
 8009c06:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	a901      	add	r1, sp, #4
 8009c0e:	2098      	movs	r0, #152	@ 0x98
 8009c10:	f7ff fe72 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009c14:	b003      	add	sp, #12
 8009c16:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8009c1a:	4b18      	ldr	r3, [pc, #96]	@ (8009c7c <SUBGRF_CalibrateImage+0x88>)
 8009c1c:	4298      	cmp	r0, r3
 8009c1e:	d906      	bls.n	8009c2e <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8009c20:	23d7      	movs	r3, #215	@ 0xd7
 8009c22:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8009c26:	23db      	movs	r3, #219	@ 0xdb
 8009c28:	f88d 3005 	strb.w	r3, [sp, #5]
 8009c2c:	e7ed      	b.n	8009c0a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8009c2e:	4b14      	ldr	r3, [pc, #80]	@ (8009c80 <SUBGRF_CalibrateImage+0x8c>)
 8009c30:	4298      	cmp	r0, r3
 8009c32:	d906      	bls.n	8009c42 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8009c34:	23c1      	movs	r3, #193	@ 0xc1
 8009c36:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8009c3a:	23c5      	movs	r3, #197	@ 0xc5
 8009c3c:	f88d 3005 	strb.w	r3, [sp, #5]
 8009c40:	e7e3      	b.n	8009c0a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8009c42:	4b10      	ldr	r3, [pc, #64]	@ (8009c84 <SUBGRF_CalibrateImage+0x90>)
 8009c44:	4298      	cmp	r0, r3
 8009c46:	d906      	bls.n	8009c56 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8009c48:	2375      	movs	r3, #117	@ 0x75
 8009c4a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8009c4e:	2381      	movs	r3, #129	@ 0x81
 8009c50:	f88d 3005 	strb.w	r3, [sp, #5]
 8009c54:	e7d9      	b.n	8009c0a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8009c56:	4b0c      	ldr	r3, [pc, #48]	@ (8009c88 <SUBGRF_CalibrateImage+0x94>)
 8009c58:	4298      	cmp	r0, r3
 8009c5a:	d906      	bls.n	8009c6a <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8009c5c:	236b      	movs	r3, #107	@ 0x6b
 8009c5e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8009c62:	236f      	movs	r3, #111	@ 0x6f
 8009c64:	f88d 3005 	strb.w	r3, [sp, #5]
 8009c68:	e7cf      	b.n	8009c0a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8009c6a:	2329      	movs	r3, #41	@ 0x29
 8009c6c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8009c70:	232b      	movs	r3, #43	@ 0x2b
 8009c72:	f88d 3005 	strb.w	r3, [sp, #5]
 8009c76:	e7c8      	b.n	8009c0a <SUBGRF_CalibrateImage+0x16>
 8009c78:	35a4e900 	.word	0x35a4e900
 8009c7c:	32a9f880 	.word	0x32a9f880
 8009c80:	2de54480 	.word	0x2de54480
 8009c84:	1b6b0b00 	.word	0x1b6b0b00
 8009c88:	1954fc40 	.word	0x1954fc40

08009c8c <SUBGRF_SetPaConfig>:
{
 8009c8c:	b500      	push	{lr}
 8009c8e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8009c90:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8009c94:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8009c98:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8009c9c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8009ca0:	2204      	movs	r2, #4
 8009ca2:	eb0d 0102 	add.w	r1, sp, r2
 8009ca6:	2095      	movs	r0, #149	@ 0x95
 8009ca8:	f7ff fe26 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009cac:	b003      	add	sp, #12
 8009cae:	f85d fb04 	ldr.w	pc, [sp], #4

08009cb2 <SUBGRF_SetDioIrqParams>:
{
 8009cb2:	b500      	push	{lr}
 8009cb4:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8009cb6:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8009cba:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8009cbe:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009cc2:	0a08      	lsrs	r0, r1, #8
 8009cc4:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8009cc8:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009ccc:	0a11      	lsrs	r1, r2, #8
 8009cce:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8009cd2:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009cd6:	0a1a      	lsrs	r2, r3, #8
 8009cd8:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8009cdc:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	4669      	mov	r1, sp
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	f7ff fe07 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009cea:	b003      	add	sp, #12
 8009cec:	f85d fb04 	ldr.w	pc, [sp], #4

08009cf0 <SUBGRF_SetTcxoMode>:
{
 8009cf0:	b500      	push	{lr}
 8009cf2:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8009cf4:	f000 0007 	and.w	r0, r0, #7
 8009cf8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009cfc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8009d00:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009d04:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8009d08:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8009d0c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009d10:	2204      	movs	r2, #4
 8009d12:	eb0d 0102 	add.w	r1, sp, r2
 8009d16:	2097      	movs	r0, #151	@ 0x97
 8009d18:	f7ff fdee 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009d1c:	b003      	add	sp, #12
 8009d1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08009d24 <SUBGRF_Init>:
{
 8009d24:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8009d26:	b108      	cbz	r0, 8009d2c <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8009d28:	4a18      	ldr	r2, [pc, #96]	@ (8009d8c <SUBGRF_Init+0x68>)
 8009d2a:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8009d2c:	f7f7 ff78 	bl	8001c20 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8009d30:	2002      	movs	r0, #2
 8009d32:	f7ff fd3b 	bl	80097ac <Radio_SMPS_Set>
    ImageCalibrated = false;
 8009d36:	2000      	movs	r0, #0
 8009d38:	4b15      	ldr	r3, [pc, #84]	@ (8009d90 <SUBGRF_Init+0x6c>)
 8009d3a:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8009d3c:	f7ff fe0c 	bl	8009958 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8009d40:	f7f9 faa6 	bl	8003290 <RBI_IsTCXO>
 8009d44:	2801      	cmp	r0, #1
 8009d46:	d014      	beq.n	8009d72 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009d48:	2120      	movs	r1, #32
 8009d4a:	f640 1011 	movw	r0, #2321	@ 0x911
 8009d4e:	f7ff fd0d 	bl	800976c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8009d52:	2120      	movs	r1, #32
 8009d54:	f640 1012 	movw	r0, #2322	@ 0x912
 8009d58:	f7ff fd08 	bl	800976c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8009d5c:	210e      	movs	r1, #14
 8009d5e:	f640 101f 	movw	r0, #2335	@ 0x91f
 8009d62:	f7ff fd03 	bl	800976c <SUBGRF_WriteRegister>
    RBI_Init();
 8009d66:	f7f9 fa87 	bl	8003278 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8009d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d94 <SUBGRF_Init+0x70>)
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	701a      	strb	r2, [r3, #0]
}
 8009d70:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8009d72:	2140      	movs	r1, #64	@ 0x40
 8009d74:	f7ff ffbc 	bl	8009cf0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8009d78:	2100      	movs	r1, #0
 8009d7a:	f640 1011 	movw	r0, #2321	@ 0x911
 8009d7e:	f7ff fcf5 	bl	800976c <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8009d82:	f04f 007f 	mov.w	r0, #127	@ 0x7f
 8009d86:	f7ff ff13 	bl	8009bb0 <SUBGRF_Calibrate>
 8009d8a:	e7e7      	b.n	8009d5c <SUBGRF_Init+0x38>
 8009d8c:	20000afc 	.word	0x20000afc
 8009d90:	20000b00 	.word	0x20000b00
 8009d94:	20000b0a 	.word	0x20000b0a

08009d98 <SUBGRF_SetRfFrequency>:
{
 8009d98:	b510      	push	{r4, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8009d9e:	4b12      	ldr	r3, [pc, #72]	@ (8009de8 <SUBGRF_SetRfFrequency+0x50>)
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	b1d3      	cbz	r3, 8009dda <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8009da4:	4a11      	ldr	r2, [pc, #68]	@ (8009dec <SUBGRF_SetRfFrequency+0x54>)
 8009da6:	2300      	movs	r3, #0
 8009da8:	0660      	lsls	r0, r4, #25
 8009daa:	09e1      	lsrs	r1, r4, #7
 8009dac:	f7f6 fed4 	bl	8000b58 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8009db0:	0e03      	lsrs	r3, r0, #24
 8009db2:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8009db6:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009dba:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8009dbe:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8009dc2:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8009dc6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8009dca:	2204      	movs	r2, #4
 8009dcc:	eb0d 0102 	add.w	r1, sp, r2
 8009dd0:	2086      	movs	r0, #134	@ 0x86
 8009dd2:	f7ff fd91 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009dd6:	b002      	add	sp, #8
 8009dd8:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8009dda:	f7ff ff0b 	bl	8009bf4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8009dde:	4b02      	ldr	r3, [pc, #8]	@ (8009de8 <SUBGRF_SetRfFrequency+0x50>)
 8009de0:	2201      	movs	r2, #1
 8009de2:	701a      	strb	r2, [r3, #0]
 8009de4:	e7de      	b.n	8009da4 <SUBGRF_SetRfFrequency+0xc>
 8009de6:	bf00      	nop
 8009de8:	20000b00 	.word	0x20000b00
 8009dec:	01e84800 	.word	0x01e84800

08009df0 <SUBGRF_SetPacketType>:
{
 8009df0:	b500      	push	{lr}
 8009df2:	b083      	sub	sp, #12
 8009df4:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8009df8:	b2c3      	uxtb	r3, r0
 8009dfa:	4a09      	ldr	r2, [pc, #36]	@ (8009e20 <SUBGRF_SetPacketType+0x30>)
 8009dfc:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8009dfe:	b143      	cbz	r3, 8009e12 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009e00:	2201      	movs	r2, #1
 8009e02:	f10d 0107 	add.w	r1, sp, #7
 8009e06:	208a      	movs	r0, #138	@ 0x8a
 8009e08:	f7ff fd76 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009e0c:	b003      	add	sp, #12
 8009e0e:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009e12:	2100      	movs	r1, #0
 8009e14:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8009e18:	f7ff fca8 	bl	800976c <SUBGRF_WriteRegister>
 8009e1c:	e7f0      	b.n	8009e00 <SUBGRF_SetPacketType+0x10>
 8009e1e:	bf00      	nop
 8009e20:	20000b09 	.word	0x20000b09

08009e24 <SUBGRF_SetTxParams>:
{
 8009e24:	b570      	push	{r4, r5, r6, lr}
 8009e26:	b082      	sub	sp, #8
 8009e28:	460c      	mov	r4, r1
 8009e2a:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8009e2c:	2801      	cmp	r0, #1
 8009e2e:	d035      	beq.n	8009e9c <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8009e30:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8009e34:	f7ff fcaa 	bl	800978c <SUBGRF_ReadRegister>
 8009e38:	f040 011e 	orr.w	r1, r0, #30
 8009e3c:	b2c9      	uxtb	r1, r1
 8009e3e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8009e42:	f7ff fc93 	bl	800976c <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8009e46:	2001      	movs	r0, #1
 8009e48:	f7f9 fa2a 	bl	80032a0 <RBI_GetRFOMaxPowerConfig>
 8009e4c:	4605      	mov	r5, r0
        if (power > max_power)
 8009e4e:	4284      	cmp	r4, r0
 8009e50:	dd00      	ble.n	8009e54 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8009e52:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8009e54:	2d14      	cmp	r5, #20
 8009e56:	d054      	beq.n	8009f02 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8009e58:	2d11      	cmp	r5, #17
 8009e5a:	d05c      	beq.n	8009f16 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8009e5c:	2d0e      	cmp	r5, #14
 8009e5e:	d064      	beq.n	8009f2a <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8009e60:	2301      	movs	r3, #1
 8009e62:	2200      	movs	r2, #0
 8009e64:	2107      	movs	r1, #7
 8009e66:	2004      	movs	r0, #4
 8009e68:	f7ff ff10 	bl	8009c8c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009e6c:	1b64      	subs	r4, r4, r5
 8009e6e:	3416      	adds	r4, #22
 8009e70:	b265      	sxtb	r5, r4
        if (power < -9)
 8009e72:	f115 0f09 	cmn.w	r5, #9
 8009e76:	da01      	bge.n	8009e7c <SUBGRF_SetTxParams+0x58>
            power = -9;
 8009e78:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8009e7c:	2138      	movs	r1, #56	@ 0x38
 8009e7e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009e82:	f7ff fc73 	bl	800976c <SUBGRF_WriteRegister>
    buf[0] = power;
 8009e86:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8009e8a:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8009e8e:	2202      	movs	r2, #2
 8009e90:	a901      	add	r1, sp, #4
 8009e92:	208e      	movs	r0, #142	@ 0x8e
 8009e94:	f7ff fd30 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009e98:	b002      	add	sp, #8
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	f7f9 f9ff 	bl	80032a0 <RBI_GetRFOMaxPowerConfig>
 8009ea2:	4605      	mov	r5, r0
        if (power >  max_power)
 8009ea4:	4284      	cmp	r4, r0
 8009ea6:	dd00      	ble.n	8009eaa <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8009ea8:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8009eaa:	2d0e      	cmp	r5, #14
 8009eac:	d015      	beq.n	8009eda <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8009eae:	2d0a      	cmp	r5, #10
 8009eb0:	d01d      	beq.n	8009eee <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	2007      	movs	r0, #7
 8009eba:	f7ff fee7 	bl	8009c8c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009ebe:	1b65      	subs	r5, r4, r5
 8009ec0:	350e      	adds	r5, #14
 8009ec2:	b26d      	sxtb	r5, r5
        if (power < -17)
 8009ec4:	f115 0f11 	cmn.w	r5, #17
 8009ec8:	da01      	bge.n	8009ece <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8009eca:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8009ece:	2118      	movs	r1, #24
 8009ed0:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8009ed4:	f7ff fc4a 	bl	800976c <SUBGRF_WriteRegister>
 8009ed8:	e7d5      	b.n	8009e86 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8009eda:	2301      	movs	r3, #1
 8009edc:	461a      	mov	r2, r3
 8009ede:	2100      	movs	r1, #0
 8009ee0:	2004      	movs	r0, #4
 8009ee2:	f7ff fed3 	bl	8009c8c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009ee6:	1b65      	subs	r5, r4, r5
 8009ee8:	350e      	adds	r5, #14
 8009eea:	b26d      	sxtb	r5, r5
 8009eec:	e7ea      	b.n	8009ec4 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8009eee:	2301      	movs	r3, #1
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7ff fec9 	bl	8009c8c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8009efa:	1b65      	subs	r5, r4, r5
 8009efc:	350d      	adds	r5, #13
 8009efe:	b26d      	sxtb	r5, r5
 8009f00:	e7e0      	b.n	8009ec4 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8009f02:	2301      	movs	r3, #1
 8009f04:	2200      	movs	r2, #0
 8009f06:	2105      	movs	r1, #5
 8009f08:	2003      	movs	r0, #3
 8009f0a:	f7ff febf 	bl	8009c8c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009f0e:	1b65      	subs	r5, r4, r5
 8009f10:	3516      	adds	r5, #22
 8009f12:	b26d      	sxtb	r5, r5
 8009f14:	e7ad      	b.n	8009e72 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8009f16:	2301      	movs	r3, #1
 8009f18:	2200      	movs	r2, #0
 8009f1a:	2103      	movs	r1, #3
 8009f1c:	2002      	movs	r0, #2
 8009f1e:	f7ff feb5 	bl	8009c8c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8009f22:	1b65      	subs	r5, r4, r5
 8009f24:	3516      	adds	r5, #22
 8009f26:	b26d      	sxtb	r5, r5
 8009f28:	e7a3      	b.n	8009e72 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	2102      	movs	r1, #2
 8009f30:	4608      	mov	r0, r1
 8009f32:	f7ff feab 	bl	8009c8c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8009f36:	1b65      	subs	r5, r4, r5
 8009f38:	350e      	adds	r5, #14
 8009f3a:	b26d      	sxtb	r5, r5
 8009f3c:	e799      	b.n	8009e72 <SUBGRF_SetTxParams+0x4e>
	...

08009f40 <SUBGRF_SetModulationParams>:
{
 8009f40:	b510      	push	{r4, lr}
 8009f42:	b082      	sub	sp, #8
 8009f44:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009f46:	4b3e      	ldr	r3, [pc, #248]	@ (800a040 <SUBGRF_SetModulationParams+0x100>)
 8009f48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009f4c:	ab02      	add	r3, sp, #8
 8009f4e:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8009f52:	7820      	ldrb	r0, [r4, #0]
 8009f54:	4b3b      	ldr	r3, [pc, #236]	@ (800a044 <SUBGRF_SetModulationParams+0x104>)
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	4298      	cmp	r0, r3
 8009f5a:	d106      	bne.n	8009f6a <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8009f5c:	7823      	ldrb	r3, [r4, #0]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d82c      	bhi.n	8009fbc <SUBGRF_SetModulationParams+0x7c>
 8009f62:	e8df f003 	tbb	[pc, r3]
 8009f66:	4205      	.short	0x4205
 8009f68:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8009f6a:	f7ff ff41 	bl	8009df0 <SUBGRF_SetPacketType>
 8009f6e:	e7f5      	b.n	8009f5c <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8009f70:	6862      	ldr	r2, [r4, #4]
 8009f72:	4b35      	ldr	r3, [pc, #212]	@ (800a048 <SUBGRF_SetModulationParams+0x108>)
 8009f74:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009f78:	0c1a      	lsrs	r2, r3, #16
 8009f7a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009f7e:	0a1a      	lsrs	r2, r3, #8
 8009f80:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8009f84:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009f88:	7b23      	ldrb	r3, [r4, #12]
 8009f8a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8009f8e:	7b63      	ldrb	r3, [r4, #13]
 8009f90:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8009f94:	68a1      	ldr	r1, [r4, #8]
 8009f96:	4a2d      	ldr	r2, [pc, #180]	@ (800a04c <SUBGRF_SetModulationParams+0x10c>)
 8009f98:	2300      	movs	r3, #0
 8009f9a:	0648      	lsls	r0, r1, #25
 8009f9c:	09c9      	lsrs	r1, r1, #7
 8009f9e:	f7f6 fddb 	bl	8000b58 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8009fa2:	0c03      	lsrs	r3, r0, #16
 8009fa4:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8009fa8:	0a03      	lsrs	r3, r0, #8
 8009faa:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8009fae:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009fb2:	2208      	movs	r2, #8
 8009fb4:	4669      	mov	r1, sp
 8009fb6:	208b      	movs	r0, #139	@ 0x8b
 8009fb8:	f7ff fc9e 	bl	80098f8 <SUBGRF_WriteCommand>
}
 8009fbc:	b002      	add	sp, #8
 8009fbe:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8009fc0:	6922      	ldr	r2, [r4, #16]
 8009fc2:	4b21      	ldr	r3, [pc, #132]	@ (800a048 <SUBGRF_SetModulationParams+0x108>)
 8009fc4:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009fc8:	0c1a      	lsrs	r2, r3, #16
 8009fca:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009fce:	0a1a      	lsrs	r2, r3, #8
 8009fd0:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8009fd4:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8009fd8:	7d23      	ldrb	r3, [r4, #20]
 8009fda:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009fde:	2204      	movs	r2, #4
 8009fe0:	4669      	mov	r1, sp
 8009fe2:	208b      	movs	r0, #139	@ 0x8b
 8009fe4:	f7ff fc88 	bl	80098f8 <SUBGRF_WriteCommand>
        break;
 8009fe8:	e7e8      	b.n	8009fbc <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009fea:	7e23      	ldrb	r3, [r4, #24]
 8009fec:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8009ff0:	7e63      	ldrb	r3, [r4, #25]
 8009ff2:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009ff6:	7ea3      	ldrb	r3, [r4, #26]
 8009ff8:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8009ffc:	7ee3      	ldrb	r3, [r4, #27]
 8009ffe:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a002:	2204      	movs	r2, #4
 800a004:	4669      	mov	r1, sp
 800a006:	208b      	movs	r0, #139	@ 0x8b
 800a008:	f7ff fc76 	bl	80098f8 <SUBGRF_WriteCommand>
        break;
 800a00c:	e7d6      	b.n	8009fbc <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 800a00e:	6862      	ldr	r2, [r4, #4]
 800a010:	4b0d      	ldr	r3, [pc, #52]	@ (800a048 <SUBGRF_SetModulationParams+0x108>)
 800a012:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800a016:	0c1a      	lsrs	r2, r3, #16
 800a018:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800a01c:	0a1a      	lsrs	r2, r3, #8
 800a01e:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 800a022:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800a026:	7b23      	ldrb	r3, [r4, #12]
 800a028:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800a02c:	7b63      	ldrb	r3, [r4, #13]
 800a02e:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800a032:	2205      	movs	r2, #5
 800a034:	4669      	mov	r1, sp
 800a036:	208b      	movs	r0, #139	@ 0x8b
 800a038:	f7ff fc5e 	bl	80098f8 <SUBGRF_WriteCommand>
}
 800a03c:	e7be      	b.n	8009fbc <SUBGRF_SetModulationParams+0x7c>
 800a03e:	bf00      	nop
 800a040:	0800d9f0 	.word	0x0800d9f0
 800a044:	20000b09 	.word	0x20000b09
 800a048:	3d090000 	.word	0x3d090000
 800a04c:	01e84800 	.word	0x01e84800

0800a050 <SUBGRF_SetPacketParams>:
{
 800a050:	b510      	push	{r4, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800a056:	ab01      	add	r3, sp, #4
 800a058:	4a33      	ldr	r2, [pc, #204]	@ (800a128 <SUBGRF_SetPacketParams+0xd8>)
 800a05a:	ca07      	ldmia	r2, {r0, r1, r2}
 800a05c:	c303      	stmia	r3!, {r0, r1}
 800a05e:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 800a060:	7820      	ldrb	r0, [r4, #0]
 800a062:	4b32      	ldr	r3, [pc, #200]	@ (800a12c <SUBGRF_SetPacketParams+0xdc>)
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	4298      	cmp	r0, r3
 800a068:	d106      	bne.n	800a078 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 800a06a:	7823      	ldrb	r3, [r4, #0]
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d82a      	bhi.n	800a0c6 <SUBGRF_SetPacketParams+0x76>
 800a070:	e8df f003 	tbb	[pc, r3]
 800a074:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 800a078:	f7ff feba 	bl	8009df0 <SUBGRF_SetPacketType>
 800a07c:	e7f5      	b.n	800a06a <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800a07e:	7a63      	ldrb	r3, [r4, #9]
 800a080:	2bf1      	cmp	r3, #241	@ 0xf1
 800a082:	d022      	beq.n	800a0ca <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800a084:	2bf2      	cmp	r3, #242	@ 0xf2
 800a086:	d02a      	beq.n	800a0de <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800a088:	8862      	ldrh	r2, [r4, #2]
 800a08a:	0a11      	lsrs	r1, r2, #8
 800a08c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800a090:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800a094:	7922      	ldrb	r2, [r4, #4]
 800a096:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800a09a:	7962      	ldrb	r2, [r4, #5]
 800a09c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800a0a0:	79a2      	ldrb	r2, [r4, #6]
 800a0a2:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 800a0a6:	79e2      	ldrb	r2, [r4, #7]
 800a0a8:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800a0ac:	7a22      	ldrb	r2, [r4, #8]
 800a0ae:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 800a0b2:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800a0b6:	7aa3      	ldrb	r3, [r4, #10]
 800a0b8:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 800a0bc:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800a0be:	a901      	add	r1, sp, #4
 800a0c0:	208c      	movs	r0, #140	@ 0x8c
 800a0c2:	f7ff fc19 	bl	80098f8 <SUBGRF_WriteCommand>
}
 800a0c6:	b004      	add	sp, #16
 800a0c8:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800a0ca:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800a0ce:	f7ff fbb2 	bl	8009836 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800a0d2:	f248 0005 	movw	r0, #32773	@ 0x8005
 800a0d6:	f7ff fbc2 	bl	800985e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e7d4      	b.n	800a088 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 800a0de:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 800a0e2:	f7ff fba8 	bl	8009836 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800a0e6:	f241 0021 	movw	r0, #4129	@ 0x1021
 800a0ea:	f7ff fbb8 	bl	800985e <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800a0ee:	2306      	movs	r3, #6
 800a0f0:	e7ca      	b.n	800a088 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800a0f2:	7b23      	ldrb	r3, [r4, #12]
 800a0f4:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 800a0f8:	2201      	movs	r2, #1
        break;
 800a0fa:	e7e0      	b.n	800a0be <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800a0fc:	89e3      	ldrh	r3, [r4, #14]
 800a0fe:	0a1a      	lsrs	r2, r3, #8
 800a100:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 800a104:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800a108:	7c23      	ldrb	r3, [r4, #16]
 800a10a:	4a09      	ldr	r2, [pc, #36]	@ (800a130 <SUBGRF_SetPacketParams+0xe0>)
 800a10c:	7013      	strb	r3, [r2, #0]
 800a10e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800a112:	7c63      	ldrb	r3, [r4, #17]
 800a114:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800a118:	7ca3      	ldrb	r3, [r4, #18]
 800a11a:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 800a11e:	7ce3      	ldrb	r3, [r4, #19]
 800a120:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 800a124:	2206      	movs	r2, #6
        break;
 800a126:	e7ca      	b.n	800a0be <SUBGRF_SetPacketParams+0x6e>
 800a128:	0800d9f8 	.word	0x0800d9f8
 800a12c:	20000b09 	.word	0x20000b09
 800a130:	20000b08 	.word	0x20000b08

0800a134 <SUBGRF_SetBufferBaseAddress>:
{
 800a134:	b500      	push	{lr}
 800a136:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 800a138:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 800a13c:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800a140:	2202      	movs	r2, #2
 800a142:	a901      	add	r1, sp, #4
 800a144:	208f      	movs	r0, #143	@ 0x8f
 800a146:	f7ff fbd7 	bl	80098f8 <SUBGRF_WriteCommand>
}
 800a14a:	b003      	add	sp, #12
 800a14c:	f85d fb04 	ldr.w	pc, [sp], #4

0800a150 <SUBGRF_ReadCommand>:
{
 800a150:	b510      	push	{r4, lr}
 800a152:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a154:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a158:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800a15a:	460a      	mov	r2, r1
 800a15c:	4601      	mov	r1, r0
 800a15e:	4803      	ldr	r0, [pc, #12]	@ (800a16c <SUBGRF_ReadCommand+0x1c>)
 800a160:	f7fc f982 	bl	8006468 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a164:	f384 8810 	msr	PRIMASK, r4
}
 800a168:	bd10      	pop	{r4, pc}
 800a16a:	bf00      	nop
 800a16c:	2000042c 	.word	0x2000042c

0800a170 <SUBGRF_GetRssiInst>:
{
 800a170:	b500      	push	{lr}
 800a172:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800a174:	2201      	movs	r2, #1
 800a176:	a901      	add	r1, sp, #4
 800a178:	2015      	movs	r0, #21
 800a17a:	f7ff ffe9 	bl	800a150 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 800a17e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800a182:	4240      	negs	r0, r0
}
 800a184:	1040      	asrs	r0, r0, #1
 800a186:	b003      	add	sp, #12
 800a188:	f85d fb04 	ldr.w	pc, [sp], #4

0800a18c <SUBGRF_GetRxBufferStatus>:
{
 800a18c:	b530      	push	{r4, r5, lr}
 800a18e:	b083      	sub	sp, #12
 800a190:	4605      	mov	r5, r0
 800a192:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800a194:	2202      	movs	r2, #2
 800a196:	a901      	add	r1, sp, #4
 800a198:	2013      	movs	r0, #19
 800a19a:	f7ff ffd9 	bl	800a150 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a19e:	f7ff fadf 	bl	8009760 <SUBGRF_GetPacketType>
 800a1a2:	2801      	cmp	r0, #1
 800a1a4:	d007      	beq.n	800a1b6 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 800a1a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a1aa:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 800a1ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a1b0:	7023      	strb	r3, [r4, #0]
}
 800a1b2:	b003      	add	sp, #12
 800a1b4:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800a1b6:	4b05      	ldr	r3, [pc, #20]	@ (800a1cc <SUBGRF_GetRxBufferStatus+0x40>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d1f2      	bne.n	800a1a6 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 800a1c0:	f240 7002 	movw	r0, #1794	@ 0x702
 800a1c4:	f7ff fae2 	bl	800978c <SUBGRF_ReadRegister>
 800a1c8:	7028      	strb	r0, [r5, #0]
 800a1ca:	e7ef      	b.n	800a1ac <SUBGRF_GetRxBufferStatus+0x20>
 800a1cc:	20000b08 	.word	0x20000b08

0800a1d0 <SUBGRF_GetPayload>:
{
 800a1d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	460d      	mov	r5, r1
 800a1d8:	4617      	mov	r7, r2
    printf("\n\r");
 800a1da:	4811      	ldr	r0, [pc, #68]	@ (800a220 <SUBGRF_GetPayload+0x50>)
 800a1dc:	f001 fd22 	bl	800bc24 <iprintf>
    for(int i = 0; i < *size; i++)
 800a1e0:	2400      	movs	r4, #0
 800a1e2:	e005      	b.n	800a1f0 <SUBGRF_GetPayload+0x20>
	    printf("GetPayload[%d]: %02X\n\r", i, buffer[i]);
 800a1e4:	5d32      	ldrb	r2, [r6, r4]
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	480e      	ldr	r0, [pc, #56]	@ (800a224 <SUBGRF_GetPayload+0x54>)
 800a1ea:	f001 fd1b 	bl	800bc24 <iprintf>
    for(int i = 0; i < *size; i++)
 800a1ee:	3401      	adds	r4, #1
 800a1f0:	782b      	ldrb	r3, [r5, #0]
 800a1f2:	42a3      	cmp	r3, r4
 800a1f4:	dcf6      	bgt.n	800a1e4 <SUBGRF_GetPayload+0x14>
    uint8_t offset = 0;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 800a1fc:	f10d 0107 	add.w	r1, sp, #7
 800a200:	4628      	mov	r0, r5
 800a202:	f7ff ffc3 	bl	800a18c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800a206:	782a      	ldrb	r2, [r5, #0]
 800a208:	42ba      	cmp	r2, r7
 800a20a:	d902      	bls.n	800a212 <SUBGRF_GetPayload+0x42>
        return 1;
 800a20c:	2001      	movs	r0, #1
}
 800a20e:	b003      	add	sp, #12
 800a210:	bdf0      	pop	{r4, r5, r6, r7, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800a212:	4631      	mov	r1, r6
 800a214:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800a218:	f7ff fb5e 	bl	80098d8 <SUBGRF_ReadBuffer>
    return 0;
 800a21c:	2000      	movs	r0, #0
 800a21e:	e7f6      	b.n	800a20e <SUBGRF_GetPayload+0x3e>
 800a220:	0800ddf8 	.word	0x0800ddf8
 800a224:	0800e4f8 	.word	0x0800e4f8

0800a228 <SUBGRF_GetPacketStatus>:
{
 800a228:	b510      	push	{r4, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800a22e:	2203      	movs	r2, #3
 800a230:	a901      	add	r1, sp, #4
 800a232:	2014      	movs	r0, #20
 800a234:	f7ff ff8c 	bl	800a150 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 800a238:	f7ff fa92 	bl	8009760 <SUBGRF_GetPacketType>
 800a23c:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 800a23e:	b148      	cbz	r0, 800a254 <SUBGRF_GetPacketStatus+0x2c>
 800a240:	2801      	cmp	r0, #1
 800a242:	d018      	beq.n	800a276 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800a244:	2214      	movs	r2, #20
 800a246:	2100      	movs	r1, #0
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 fb22 	bl	800a892 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800a24e:	230f      	movs	r3, #15
 800a250:	7023      	strb	r3, [r4, #0]
}
 800a252:	e00e      	b.n	800a272 <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800a254:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a258:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800a25a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800a25e:	425b      	negs	r3, r3
 800a260:	105b      	asrs	r3, r3, #1
 800a262:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800a264:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a268:	425b      	negs	r3, r3
 800a26a:	105b      	asrs	r3, r3, #1
 800a26c:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800a26e:	2300      	movs	r3, #0
 800a270:	60a3      	str	r3, [r4, #8]
}
 800a272:	b002      	add	sp, #8
 800a274:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800a276:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800a27a:	425b      	negs	r3, r3
 800a27c:	105b      	asrs	r3, r3, #1
 800a27e:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800a280:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 800a284:	3302      	adds	r3, #2
 800a286:	109b      	asrs	r3, r3, #2
 800a288:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800a28a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800a28e:	425b      	negs	r3, r3
 800a290:	105b      	asrs	r3, r3, #1
 800a292:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800a294:	4b01      	ldr	r3, [pc, #4]	@ (800a29c <SUBGRF_GetPacketStatus+0x74>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6123      	str	r3, [r4, #16]
            break;
 800a29a:	e7ea      	b.n	800a272 <SUBGRF_GetPacketStatus+0x4a>
 800a29c:	20000b04 	.word	0x20000b04

0800a2a0 <SUBGRF_SetSwitch>:
{
 800a2a0:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 800a2a2:	2901      	cmp	r1, #1
 800a2a4:	d003      	beq.n	800a2ae <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 800a2a6:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 800a2a8:	f7f8 ffea 	bl	8003280 <RBI_ConfigRFSwitch>
}
 800a2ac:	bd10      	pop	{r4, pc}
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 800a2b2:	2c01      	cmp	r4, #1
 800a2b4:	d003      	beq.n	800a2be <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 800a2b6:	2c02      	cmp	r4, #2
 800a2b8:	d1f6      	bne.n	800a2a8 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 800a2ba:	2003      	movs	r0, #3
 800a2bc:	e7f4      	b.n	800a2a8 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 800a2be:	2004      	movs	r0, #4
 800a2c0:	f7ff fa74 	bl	80097ac <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 800a2c4:	2002      	movs	r0, #2
 800a2c6:	e7f6      	b.n	800a2b6 <SUBGRF_SetSwitch+0x16>

0800a2c8 <SUBGRF_SetRfTxPower>:
{
 800a2c8:	b538      	push	{r3, r4, r5, lr}
 800a2ca:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 800a2cc:	f7f8 ffdc 	bl	8003288 <RBI_GetTxConfig>
    switch (TxConfig)
 800a2d0:	b148      	cbz	r0, 800a2e6 <SUBGRF_SetRfTxPower+0x1e>
 800a2d2:	2802      	cmp	r0, #2
 800a2d4:	d10d      	bne.n	800a2f2 <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 800a2d6:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 800a2d8:	2202      	movs	r2, #2
 800a2da:	4621      	mov	r1, r4
 800a2dc:	4628      	mov	r0, r5
 800a2de:	f7ff fda1 	bl	8009e24 <SUBGRF_SetTxParams>
}
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 800a2e6:	2c0f      	cmp	r4, #15
 800a2e8:	dc01      	bgt.n	800a2ee <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 800a2ea:	2501      	movs	r5, #1
 800a2ec:	e7f4      	b.n	800a2d8 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 800a2ee:	2502      	movs	r5, #2
 800a2f0:	e7f2      	b.n	800a2d8 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 800a2f2:	2501      	movs	r5, #1
 800a2f4:	e7f0      	b.n	800a2d8 <SUBGRF_SetRfTxPower+0x10>

0800a2f6 <SUBGRF_GetRadioWakeUpTime>:
}
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	4770      	bx	lr
	...

0800a2fc <HAL_SUBGHZ_TxCpltCallback>:
{
 800a2fc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 800a2fe:	4b02      	ldr	r3, [pc, #8]	@ (800a308 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2001      	movs	r0, #1
 800a304:	4798      	blx	r3
}
 800a306:	bd08      	pop	{r3, pc}
 800a308:	20000afc 	.word	0x20000afc

0800a30c <HAL_SUBGHZ_RxCpltCallback>:
{
 800a30c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 800a30e:	4b02      	ldr	r3, [pc, #8]	@ (800a318 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2002      	movs	r0, #2
 800a314:	4798      	blx	r3
}
 800a316:	bd08      	pop	{r3, pc}
 800a318:	20000afc 	.word	0x20000afc

0800a31c <HAL_SUBGHZ_CRCErrorCallback>:
{
 800a31c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800a31e:	4b02      	ldr	r3, [pc, #8]	@ (800a328 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2040      	movs	r0, #64	@ 0x40
 800a324:	4798      	blx	r3
}
 800a326:	bd08      	pop	{r3, pc}
 800a328:	20000afc 	.word	0x20000afc

0800a32c <HAL_SUBGHZ_CADStatusCallback>:
{
 800a32c:	b508      	push	{r3, lr}
    switch (cadstatus)
 800a32e:	b111      	cbz	r1, 800a336 <HAL_SUBGHZ_CADStatusCallback+0xa>
 800a330:	2901      	cmp	r1, #1
 800a332:	d005      	beq.n	800a340 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 800a334:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 800a336:	4b05      	ldr	r3, [pc, #20]	@ (800a34c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2080      	movs	r0, #128	@ 0x80
 800a33c:	4798      	blx	r3
            break;
 800a33e:	e7f9      	b.n	800a334 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 800a340:	4b02      	ldr	r3, [pc, #8]	@ (800a34c <HAL_SUBGHZ_CADStatusCallback+0x20>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a348:	4798      	blx	r3
}
 800a34a:	e7f3      	b.n	800a334 <HAL_SUBGHZ_CADStatusCallback+0x8>
 800a34c:	20000afc 	.word	0x20000afc

0800a350 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 800a350:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 800a352:	4b03      	ldr	r3, [pc, #12]	@ (800a360 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a35a:	4798      	blx	r3
}
 800a35c:	bd08      	pop	{r3, pc}
 800a35e:	bf00      	nop
 800a360:	20000afc 	.word	0x20000afc

0800a364 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 800a364:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 800a366:	4b02      	ldr	r3, [pc, #8]	@ (800a370 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2020      	movs	r0, #32
 800a36c:	4798      	blx	r3
}
 800a36e:	bd08      	pop	{r3, pc}
 800a370:	20000afc 	.word	0x20000afc

0800a374 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 800a374:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800a376:	4b02      	ldr	r3, [pc, #8]	@ (800a380 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2004      	movs	r0, #4
 800a37c:	4798      	blx	r3
}
 800a37e:	bd08      	pop	{r3, pc}
 800a380:	20000afc 	.word	0x20000afc

0800a384 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 800a384:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800a386:	4b02      	ldr	r3, [pc, #8]	@ (800a390 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2008      	movs	r0, #8
 800a38c:	4798      	blx	r3
}
 800a38e:	bd08      	pop	{r3, pc}
 800a390:	20000afc 	.word	0x20000afc

0800a394 <HAL_SUBGHZ_HeaderValidCallback>:
{
 800a394:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 800a396:	4b02      	ldr	r3, [pc, #8]	@ (800a3a0 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2010      	movs	r0, #16
 800a39c:	4798      	blx	r3
}
 800a39e:	bd08      	pop	{r3, pc}
 800a3a0:	20000afc 	.word	0x20000afc

0800a3a4 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 800a3a4:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 800a3a6:	4b03      	ldr	r3, [pc, #12]	@ (800a3b4 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800a3ae:	4798      	blx	r3
}
 800a3b0:	bd08      	pop	{r3, pc}
 800a3b2:	bf00      	nop
 800a3b4:	20000afc 	.word	0x20000afc

0800a3b8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 800a3b8:	4601      	mov	r1, r0
 800a3ba:	b180      	cbz	r0, 800a3de <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a3bc:	2300      	movs	r3, #0
 800a3be:	2b15      	cmp	r3, #21
 800a3c0:	d80c      	bhi.n	800a3dc <SUBGRF_GetFskBandwidthRegValue+0x24>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 800a3c2:	4a08      	ldr	r2, [pc, #32]	@ (800a3e4 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800a3c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a3c8:	428a      	cmp	r2, r1
 800a3ca:	d802      	bhi.n	800a3d2 <SUBGRF_GetFskBandwidthRegValue+0x1a>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	e7f5      	b.n	800a3be <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 800a3d2:	4a04      	ldr	r2, [pc, #16]	@ (800a3e4 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 800a3d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a3d8:	7918      	ldrb	r0, [r3, #4]
 800a3da:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 800a3dc:	e7fe      	b.n	800a3dc <SUBGRF_GetFskBandwidthRegValue+0x24>
        return( 0x1F );
 800a3de:	201f      	movs	r0, #31
}
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	0800e510 	.word	0x0800e510

0800a3e8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	4605      	mov	r5, r0
 800a3ee:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 800a3f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a468 <SUBGRF_GetCFO+0x80>)
 800a3f2:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 800a3f4:	f640 0007 	movw	r0, #2055	@ 0x807
 800a3f8:	f7ff f9c8 	bl	800978c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 800a3fc:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 800a400:	3308      	adds	r3, #8
 800a402:	446b      	add	r3, sp
 800a404:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 800a408:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 800a40c:	3301      	adds	r3, #1
 800a40e:	fa02 f303 	lsl.w	r3, r2, r3
 800a412:	4a16      	ldr	r2, [pc, #88]	@ (800a46c <SUBGRF_GetCFO+0x84>)
 800a414:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 800a418:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 800a41c:	2807      	cmp	r0, #7
 800a41e:	d921      	bls.n	800a464 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 800a420:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800a422:	fb03 f000 	mul.w	r0, r3, r0
 800a426:	2803      	cmp	r0, #3
 800a428:	d800      	bhi.n	800a42c <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 800a42a:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 800a42c:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 800a430:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 800a434:	f7ff f9aa 	bl	800978c <SUBGRF_ReadRegister>
 800a438:	0206      	lsls	r6, r0, #8
 800a43a:	f406 6670 	and.w	r6, r6, #3840	@ 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 800a43e:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 800a442:	f7ff f9a3 	bl	800978c <SUBGRF_ReadRegister>
 800a446:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 800a448:	f410 6f00 	tst.w	r0, #2048	@ 0x800
 800a44c:	d003      	beq.n	800a456 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 800a44e:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 800a452:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800a456:	096b      	lsrs	r3, r5, #5
 800a458:	fb03 f000 	mul.w	r0, r3, r0
 800a45c:	11c0      	asrs	r0, r0, #7
 800a45e:	6020      	str	r0, [r4, #0]
}
 800a460:	b002      	add	sp, #8
 800a462:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 800a464:	2302      	movs	r3, #2
 800a466:	e7dc      	b.n	800a422 <SUBGRF_GetCFO+0x3a>
 800a468:	0c0a0804 	.word	0x0c0a0804
 800a46c:	01e84800 	.word	0x01e84800

0800a470 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800a470:	f04f 30ff 	mov.w	r0, #4294967295
 800a474:	4770      	bx	lr

0800a476 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800a476:	f04f 30ff 	mov.w	r0, #4294967295
 800a47a:	4770      	bx	lr

0800a47c <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800a47c:	f04f 30ff 	mov.w	r0, #4294967295
 800a480:	4770      	bx	lr

0800a482 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800a482:	4770      	bx	lr

0800a484 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800a484:	2000      	movs	r0, #0
 800a486:	4770      	bx	lr

0800a488 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800a488:	2000      	movs	r0, #0
 800a48a:	4770      	bx	lr

0800a48c <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 800a48c:	4770      	bx	lr

0800a48e <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 800a48e:	f04f 30ff 	mov.w	r0, #4294967295
 800a492:	4770      	bx	lr

0800a494 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800a494:	f04f 30ff 	mov.w	r0, #4294967295
 800a498:	4770      	bx	lr

0800a49a <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 800a49a:	4770      	bx	lr

0800a49c <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 800a49c:	4770      	bx	lr

0800a49e <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 800a49e:	4770      	bx	lr

0800a4a0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800a4a0:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a4a2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a4a6:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800a4a8:	4b1e      	ldr	r3, [pc, #120]	@ (800a524 <TRACE_AllocateBufer+0x84>)
 800a4aa:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800a4ae:	8a1a      	ldrh	r2, [r3, #16]
 800a4b0:	4596      	cmp	lr, r2
 800a4b2:	d011      	beq.n	800a4d8 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a4b4:	4596      	cmp	lr, r2
 800a4b6:	d921      	bls.n	800a4fc <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800a4b8:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 800a4bc:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800a4be:	4283      	cmp	r3, r0
 800a4c0:	d81f      	bhi.n	800a502 <TRACE_AllocateBufer+0x62>
 800a4c2:	4282      	cmp	r2, r0
 800a4c4:	d91d      	bls.n	800a502 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800a4c6:	4b17      	ldr	r3, [pc, #92]	@ (800a524 <TRACE_AllocateBufer+0x84>)
 800a4c8:	2401      	movs	r4, #1
 800a4ca:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800a4cc:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800a4d0:	2400      	movs	r4, #0
 800a4d2:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	e014      	b.n	800a502 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800a4d8:	f5ce 7300 	rsb	r3, lr, #512	@ 0x200
 800a4dc:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800a4de:	4298      	cmp	r0, r3
 800a4e0:	d30f      	bcc.n	800a502 <TRACE_AllocateBufer+0x62>
 800a4e2:	4282      	cmp	r2, r0
 800a4e4:	d90d      	bls.n	800a502 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800a4e6:	4b0f      	ldr	r3, [pc, #60]	@ (800a524 <TRACE_AllocateBufer+0x84>)
 800a4e8:	2401      	movs	r4, #1
 800a4ea:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800a4ec:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800a4f0:	f04f 0e00 	mov.w	lr, #0
 800a4f4:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	e002      	b.n	800a502 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800a4fc:	eba2 020e 	sub.w	r2, r2, lr
 800a500:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800a502:	4283      	cmp	r3, r0
 800a504:	d90a      	bls.n	800a51c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800a506:	4a07      	ldr	r2, [pc, #28]	@ (800a524 <TRACE_AllocateBufer+0x84>)
 800a508:	8a53      	ldrh	r3, [r2, #18]
 800a50a:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800a50c:	4403      	add	r3, r0
 800a50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a512:	8253      	strh	r3, [r2, #18]
    ret = 0;
 800a514:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a516:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800a51a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	e7f9      	b.n	800a516 <TRACE_AllocateBufer+0x76>
 800a522:	bf00      	nop
 800a524:	20000e0c 	.word	0x20000e0c

0800a528 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a528:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a52c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800a52e:	4a03      	ldr	r2, [pc, #12]	@ (800a53c <TRACE_Lock+0x14>)
 800a530:	8ad3      	ldrh	r3, [r2, #22]
 800a532:	3301      	adds	r3, #1
 800a534:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a536:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800a53a:	4770      	bx	lr
 800a53c:	20000e0c 	.word	0x20000e0c

0800a540 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a540:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a544:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800a546:	4a03      	ldr	r2, [pc, #12]	@ (800a554 <TRACE_UnLock+0x14>)
 800a548:	8ad3      	ldrh	r3, [r2, #22]
 800a54a:	3b01      	subs	r3, #1
 800a54c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a54e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800a552:	4770      	bx	lr
 800a554:	20000e0c 	.word	0x20000e0c

0800a558 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800a558:	4b02      	ldr	r3, [pc, #8]	@ (800a564 <TRACE_IsLocked+0xc>)
 800a55a:	8ad8      	ldrh	r0, [r3, #22]
}
 800a55c:	3800      	subs	r0, #0
 800a55e:	bf18      	it	ne
 800a560:	2001      	movne	r0, #1
 800a562:	4770      	bx	lr
 800a564:	20000e0c 	.word	0x20000e0c

0800a568 <UTIL_ADV_TRACE_Init>:
{
 800a568:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800a56a:	2218      	movs	r2, #24
 800a56c:	2100      	movs	r1, #0
 800a56e:	4807      	ldr	r0, [pc, #28]	@ (800a58c <UTIL_ADV_TRACE_Init+0x24>)
 800a570:	f000 f98f 	bl	800a892 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800a574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a578:	2100      	movs	r1, #0
 800a57a:	4805      	ldr	r0, [pc, #20]	@ (800a590 <UTIL_ADV_TRACE_Init+0x28>)
 800a57c:	f000 f989 	bl	800a892 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800a580:	4b04      	ldr	r3, [pc, #16]	@ (800a594 <UTIL_ADV_TRACE_Init+0x2c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4804      	ldr	r0, [pc, #16]	@ (800a598 <UTIL_ADV_TRACE_Init+0x30>)
 800a586:	4798      	blx	r3
}
 800a588:	bd08      	pop	{r3, pc}
 800a58a:	bf00      	nop
 800a58c:	20000e0c 	.word	0x20000e0c
 800a590:	20000c0c 	.word	0x20000c0c
 800a594:	0800de3c 	.word	0x0800de3c
 800a598:	0800a719 	.word	0x0800a719

0800a59c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800a59c:	4b01      	ldr	r3, [pc, #4]	@ (800a5a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800a59e:	6058      	str	r0, [r3, #4]
}
 800a5a0:	4770      	bx	lr
 800a5a2:	bf00      	nop
 800a5a4:	20000e0c 	.word	0x20000e0c

0800a5a8 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800a5a8:	4b01      	ldr	r3, [pc, #4]	@ (800a5b0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800a5aa:	7218      	strb	r0, [r3, #8]
}
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20000e0c 	.word	0x20000e0c

0800a5b4 <TRACE_Send>:
{
 800a5b4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5b6:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ba:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800a5bc:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 800a5be:	f7ff ffcb 	bl	800a558 <TRACE_IsLocked>
 800a5c2:	b118      	cbz	r0, 800a5cc <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5c4:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800a5c8:	2000      	movs	r0, #0
}
 800a5ca:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 800a5cc:	f7ff ffac 	bl	800a528 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800a5d0:	4b1c      	ldr	r3, [pc, #112]	@ (800a644 <TRACE_Send+0x90>)
 800a5d2:	8a1a      	ldrh	r2, [r3, #16]
 800a5d4:	8a5b      	ldrh	r3, [r3, #18]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d02e      	beq.n	800a638 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800a5da:	491a      	ldr	r1, [pc, #104]	@ (800a644 <TRACE_Send+0x90>)
 800a5dc:	7889      	ldrb	r1, [r1, #2]
 800a5de:	2901      	cmp	r1, #1
 800a5e0:	d017      	beq.n	800a612 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800a5e2:	4a18      	ldr	r2, [pc, #96]	@ (800a644 <TRACE_Send+0x90>)
 800a5e4:	7892      	ldrb	r2, [r2, #2]
 800a5e6:	b932      	cbnz	r2, 800a5f6 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a5e8:	4a16      	ldr	r2, [pc, #88]	@ (800a644 <TRACE_Send+0x90>)
 800a5ea:	8a12      	ldrh	r2, [r2, #16]
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d91e      	bls.n	800a62e <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800a5f0:	1a9b      	subs	r3, r3, r2
 800a5f2:	4a14      	ldr	r2, [pc, #80]	@ (800a644 <TRACE_Send+0x90>)
 800a5f4:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800a5f6:	4e13      	ldr	r6, [pc, #76]	@ (800a644 <TRACE_Send+0x90>)
 800a5f8:	8a35      	ldrh	r5, [r6, #16]
 800a5fa:	4b13      	ldr	r3, [pc, #76]	@ (800a648 <TRACE_Send+0x94>)
 800a5fc:	441d      	add	r5, r3
 800a5fe:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 800a602:	f7f7 fb83 	bl	8001d0c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800a606:	4b11      	ldr	r3, [pc, #68]	@ (800a64c <TRACE_Send+0x98>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	8ab1      	ldrh	r1, [r6, #20]
 800a60c:	4628      	mov	r0, r5
 800a60e:	4798      	blx	r3
 800a610:	e7db      	b.n	800a5ca <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800a612:	480c      	ldr	r0, [pc, #48]	@ (800a644 <TRACE_Send+0x90>)
 800a614:	8801      	ldrh	r1, [r0, #0]
 800a616:	1a8a      	subs	r2, r1, r2
 800a618:	b292      	uxth	r2, r2
 800a61a:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800a61c:	2102      	movs	r1, #2
 800a61e:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800a620:	2100      	movs	r1, #0
 800a622:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800a624:	2a00      	cmp	r2, #0
 800a626:	d1dc      	bne.n	800a5e2 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a628:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a62a:	8201      	strh	r1, [r0, #16]
 800a62c:	e7d9      	b.n	800a5e2 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800a62e:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 800a632:	4b04      	ldr	r3, [pc, #16]	@ (800a644 <TRACE_Send+0x90>)
 800a634:	829a      	strh	r2, [r3, #20]
 800a636:	e7de      	b.n	800a5f6 <TRACE_Send+0x42>
      TRACE_UnLock();
 800a638:	f7ff ff82 	bl	800a540 <TRACE_UnLock>
 800a63c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800a640:	2000      	movs	r0, #0
}
 800a642:	e7c2      	b.n	800a5ca <TRACE_Send+0x16>
 800a644:	20000e0c 	.word	0x20000e0c
 800a648:	20000c0c 	.word	0x20000c0c
 800a64c:	0800de3c 	.word	0x0800de3c

0800a650 <UTIL_ADV_TRACE_COND_FSend>:
{
 800a650:	b408      	push	{r3}
 800a652:	b530      	push	{r4, r5, lr}
 800a654:	b086      	sub	sp, #24
 800a656:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  uint16_t timestamp_size = 0u;
 800a658:	2300      	movs	r3, #0
 800a65a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800a65e:	4b2b      	ldr	r3, [pc, #172]	@ (800a70c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800a660:	7a1b      	ldrb	r3, [r3, #8]
 800a662:	4283      	cmp	r3, r0
 800a664:	d34c      	bcc.n	800a700 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800a666:	4b29      	ldr	r3, [pc, #164]	@ (800a70c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	4399      	bics	r1, r3
 800a66c:	d14b      	bne.n	800a706 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800a66e:	4b27      	ldr	r3, [pc, #156]	@ (800a70c <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	b123      	cbz	r3, 800a67e <UTIL_ADV_TRACE_COND_FSend+0x2e>
 800a674:	b11a      	cbz	r2, 800a67e <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800a676:	f10d 0102 	add.w	r1, sp, #2
 800a67a:	a801      	add	r0, sp, #4
 800a67c:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 800a67e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a680:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800a682:	4622      	mov	r2, r4
 800a684:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a688:	4821      	ldr	r0, [pc, #132]	@ (800a710 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800a68a:	f000 fc2f 	bl	800aeec <tiny_vsnprintf_like>
 800a68e:	b285      	uxth	r5, r0
  TRACE_Lock();
 800a690:	f7ff ff4a 	bl	800a528 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800a694:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800a698:	18e8      	adds	r0, r5, r3
 800a69a:	4669      	mov	r1, sp
 800a69c:	b280      	uxth	r0, r0
 800a69e:	f7ff feff 	bl	800a4a0 <TRACE_AllocateBufer>
 800a6a2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a6a6:	d026      	beq.n	800a6f6 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e00d      	b.n	800a6c8 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800a6ac:	f8bd 2000 	ldrh.w	r2, [sp]
 800a6b0:	f103 0118 	add.w	r1, r3, #24
 800a6b4:	4469      	add	r1, sp
 800a6b6:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 800a6ba:	4916      	ldr	r1, [pc, #88]	@ (800a714 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800a6bc:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 800a6be:	3201      	adds	r2, #1
 800a6c0:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 800a6c4:	3301      	adds	r3, #1
 800a6c6:	b29b      	uxth	r3, r3
 800a6c8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d8ed      	bhi.n	800a6ac <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800a6d0:	f8bd 0000 	ldrh.w	r0, [sp]
 800a6d4:	9b05      	ldr	r3, [sp, #20]
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a6dc:	4c0d      	ldr	r4, [pc, #52]	@ (800a714 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 800a6de:	4420      	add	r0, r4
 800a6e0:	f000 fc04 	bl	800aeec <tiny_vsnprintf_like>
    TRACE_UnLock();
 800a6e4:	f7ff ff2c 	bl	800a540 <TRACE_UnLock>
    return TRACE_Send();
 800a6e8:	f7ff ff64 	bl	800a5b4 <TRACE_Send>
}
 800a6ec:	b006      	add	sp, #24
 800a6ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6f2:	b001      	add	sp, #4
 800a6f4:	4770      	bx	lr
  TRACE_UnLock();
 800a6f6:	f7ff ff23 	bl	800a540 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800a6fa:	f06f 0002 	mvn.w	r0, #2
 800a6fe:	e7f5      	b.n	800a6ec <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 800a700:	f06f 0004 	mvn.w	r0, #4
 800a704:	e7f2      	b.n	800a6ec <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800a706:	f06f 0005 	mvn.w	r0, #5
 800a70a:	e7ef      	b.n	800a6ec <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800a70c:	20000e0c 	.word	0x20000e0c
 800a710:	20000b0c 	.word	0x20000b0c
 800a714:	20000c0c 	.word	0x20000c0c

0800a718 <TRACE_TxCpltCallback>:
{
 800a718:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a71a:	f3ef 8310 	mrs	r3, PRIMASK
 800a71e:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 800a720:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800a722:	4b26      	ldr	r3, [pc, #152]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a724:	789b      	ldrb	r3, [r3, #2]
 800a726:	2b02      	cmp	r3, #2
 800a728:	d016      	beq.n	800a758 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800a72a:	4a24      	ldr	r2, [pc, #144]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a72c:	8a13      	ldrh	r3, [r2, #16]
 800a72e:	8a90      	ldrh	r0, [r2, #20]
 800a730:	4403      	add	r3, r0
 800a732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a736:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800a738:	4b20      	ldr	r3, [pc, #128]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a73a:	8a1a      	ldrh	r2, [r3, #16]
 800a73c:	8a5b      	ldrh	r3, [r3, #18]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d003      	beq.n	800a74a <TRACE_TxCpltCallback+0x32>
 800a742:	481e      	ldr	r0, [pc, #120]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a744:	8ac0      	ldrh	r0, [r0, #22]
 800a746:	2801      	cmp	r0, #1
 800a748:	d00b      	beq.n	800a762 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a74a:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800a74e:	f7f7 fae3 	bl	8001d18 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800a752:	f7ff fef5 	bl	800a540 <TRACE_UnLock>
}
 800a756:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a758:	4b18      	ldr	r3, [pc, #96]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a75e:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 800a760:	e7ea      	b.n	800a738 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800a762:	4816      	ldr	r0, [pc, #88]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a764:	7880      	ldrb	r0, [r0, #2]
 800a766:	2801      	cmp	r0, #1
 800a768:	d014      	beq.n	800a794 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800a76a:	4a14      	ldr	r2, [pc, #80]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a76c:	7892      	ldrb	r2, [r2, #2]
 800a76e:	b932      	cbnz	r2, 800a77e <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800a770:	4a12      	ldr	r2, [pc, #72]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a772:	8a12      	ldrh	r2, [r2, #16]
 800a774:	4293      	cmp	r3, r2
 800a776:	d91b      	bls.n	800a7b0 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800a778:	1a9b      	subs	r3, r3, r2
 800a77a:	4a10      	ldr	r2, [pc, #64]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a77c:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800a77e:	4b0f      	ldr	r3, [pc, #60]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a780:	8a18      	ldrh	r0, [r3, #16]
 800a782:	4a0f      	ldr	r2, [pc, #60]	@ (800a7c0 <TRACE_TxCpltCallback+0xa8>)
 800a784:	4410      	add	r0, r2
 800a786:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800a78a:	4a0e      	ldr	r2, [pc, #56]	@ (800a7c4 <TRACE_TxCpltCallback+0xac>)
 800a78c:	68d2      	ldr	r2, [r2, #12]
 800a78e:	8a99      	ldrh	r1, [r3, #20]
 800a790:	4790      	blx	r2
 800a792:	e7e0      	b.n	800a756 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800a794:	4c09      	ldr	r4, [pc, #36]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a796:	8820      	ldrh	r0, [r4, #0]
 800a798:	1a82      	subs	r2, r0, r2
 800a79a:	b292      	uxth	r2, r2
 800a79c:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800a79e:	2002      	movs	r0, #2
 800a7a0:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	d1df      	bne.n	800a76a <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800a7aa:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800a7ac:	8220      	strh	r0, [r4, #16]
 800a7ae:	e7dc      	b.n	800a76a <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800a7b0:	f5c2 7200 	rsb	r2, r2, #512	@ 0x200
 800a7b4:	4b01      	ldr	r3, [pc, #4]	@ (800a7bc <TRACE_TxCpltCallback+0xa4>)
 800a7b6:	829a      	strh	r2, [r3, #20]
 800a7b8:	e7e1      	b.n	800a77e <TRACE_TxCpltCallback+0x66>
 800a7ba:	bf00      	nop
 800a7bc:	20000e0c 	.word	0x20000e0c
 800a7c0:	20000c0c 	.word	0x20000c0c
 800a7c4:	0800de3c 	.word	0x0800de3c

0800a7c8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4a02      	ldr	r2, [pc, #8]	@ (800a7d4 <UTIL_LPM_Init+0xc>)
 800a7cc:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a7ce:	4a02      	ldr	r2, [pc, #8]	@ (800a7d8 <UTIL_LPM_Init+0x10>)
 800a7d0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a7d2:	4770      	bx	lr
 800a7d4:	20000e28 	.word	0x20000e28
 800a7d8:	20000e24 	.word	0x20000e24

0800a7dc <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7dc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a7e0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800a7e2:	b141      	cbz	r1, 800a7f6 <UTIL_LPM_SetStopMode+0x1a>
 800a7e4:	2901      	cmp	r1, #1
 800a7e6:	d103      	bne.n	800a7f0 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a7e8:	4906      	ldr	r1, [pc, #24]	@ (800a804 <UTIL_LPM_SetStopMode+0x28>)
 800a7ea:	680a      	ldr	r2, [r1, #0]
 800a7ec:	4302      	orrs	r2, r0
 800a7ee:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7f0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a7f4:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 800a7f6:	4903      	ldr	r1, [pc, #12]	@ (800a804 <UTIL_LPM_SetStopMode+0x28>)
 800a7f8:	680a      	ldr	r2, [r1, #0]
 800a7fa:	ea22 0200 	bic.w	r2, r2, r0
 800a7fe:	600a      	str	r2, [r1, #0]
      break;
 800a800:	e7f6      	b.n	800a7f0 <UTIL_LPM_SetStopMode+0x14>
 800a802:	bf00      	nop
 800a804:	20000e28 	.word	0x20000e28

0800a808 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a808:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a80c:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800a80e:	b141      	cbz	r1, 800a822 <UTIL_LPM_SetOffMode+0x1a>
 800a810:	2901      	cmp	r1, #1
 800a812:	d103      	bne.n	800a81c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a814:	4906      	ldr	r1, [pc, #24]	@ (800a830 <UTIL_LPM_SetOffMode+0x28>)
 800a816:	680a      	ldr	r2, [r1, #0]
 800a818:	4302      	orrs	r2, r0
 800a81a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a81c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a820:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 800a822:	4903      	ldr	r1, [pc, #12]	@ (800a830 <UTIL_LPM_SetOffMode+0x28>)
 800a824:	680a      	ldr	r2, [r1, #0]
 800a826:	ea22 0200 	bic.w	r2, r2, r0
 800a82a:	600a      	str	r2, [r1, #0]
      break;
 800a82c:	e7f6      	b.n	800a81c <UTIL_LPM_SetOffMode+0x14>
 800a82e:	bf00      	nop
 800a830:	20000e24 	.word	0x20000e24

0800a834 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a834:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a836:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a83a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a83c:	4b0c      	ldr	r3, [pc, #48]	@ (800a870 <UTIL_LPM_EnterLowPower+0x3c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	b13b      	cbz	r3, 800a852 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a842:	4d0c      	ldr	r5, [pc, #48]	@ (800a874 <UTIL_LPM_EnterLowPower+0x40>)
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a848:	686b      	ldr	r3, [r5, #4]
 800a84a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a84c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a850:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a852:	4b09      	ldr	r3, [pc, #36]	@ (800a878 <UTIL_LPM_EnterLowPower+0x44>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	b12b      	cbz	r3, 800a864 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 800a858:	4d06      	ldr	r5, [pc, #24]	@ (800a874 <UTIL_LPM_EnterLowPower+0x40>)
 800a85a:	68ab      	ldr	r3, [r5, #8]
 800a85c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a85e:	68eb      	ldr	r3, [r5, #12]
 800a860:	4798      	blx	r3
 800a862:	e7f3      	b.n	800a84c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800a864:	4d03      	ldr	r5, [pc, #12]	@ (800a874 <UTIL_LPM_EnterLowPower+0x40>)
 800a866:	692b      	ldr	r3, [r5, #16]
 800a868:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a86a:	696b      	ldr	r3, [r5, #20]
 800a86c:	4798      	blx	r3
 800a86e:	e7ed      	b.n	800a84c <UTIL_LPM_EnterLowPower+0x18>
 800a870:	20000e28 	.word	0x20000e28
 800a874:	0800dd7c 	.word	0x0800dd7c
 800a878:	20000e24 	.word	0x20000e24

0800a87c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800a87c:	e004      	b.n	800a888 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 800a87e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a882:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 800a886:	461a      	mov	r2, r3
 800a888:	1e53      	subs	r3, r2, #1
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	2a00      	cmp	r2, #0
 800a88e:	d1f6      	bne.n	800a87e <UTIL_MEM_cpy_8+0x2>
    }
}
 800a890:	4770      	bx	lr

0800a892 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800a892:	e002      	b.n	800a89a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 800a894:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 800a898:	461a      	mov	r2, r3
 800a89a:	1e53      	subs	r3, r2, #1
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	2a00      	cmp	r2, #0
 800a8a0:	d1f8      	bne.n	800a894 <UTIL_MEM_set_8+0x2>
  }
}
 800a8a2:	4770      	bx	lr

0800a8a4 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a4:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a8a8:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800a8aa:	4a06      	ldr	r2, [pc, #24]	@ (800a8c4 <UTIL_SEQ_SetTask+0x20>)
 800a8ac:	6813      	ldr	r3, [r2, #0]
 800a8ae:	4303      	orrs	r3, r0
 800a8b0:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a8b2:	4a05      	ldr	r2, [pc, #20]	@ (800a8c8 <UTIL_SEQ_SetTask+0x24>)
 800a8b4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 800a8b8:	4303      	orrs	r3, r0
 800a8ba:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a8be:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800a8c2:	4770      	bx	lr
 800a8c4:	20000e44 	.word	0x20000e44
 800a8c8:	20000e2c 	.word	0x20000e2c

0800a8cc <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800a8cc:	4770      	bx	lr

0800a8ce <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 800a8ce:	4770      	bx	lr

0800a8d0 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800a8d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a8d4:	d216      	bcs.n	800a904 <SEQ_BitPosition+0x34>
 800a8d6:	0400      	lsls	r0, r0, #16
 800a8d8:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800a8da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800a8de:	d202      	bcs.n	800a8e6 <SEQ_BitPosition+0x16>
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800a8e6:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
 800a8ea:	d202      	bcs.n	800a8f2 <SEQ_BitPosition+0x22>
 800a8ec:	3304      	adds	r3, #4
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800a8f2:	0f00      	lsrs	r0, r0, #28
 800a8f4:	4a04      	ldr	r2, [pc, #16]	@ (800a908 <SEQ_BitPosition+0x38>)
 800a8f6:	5c10      	ldrb	r0, [r2, r0]
 800a8f8:	4418      	add	r0, r3
 800a8fa:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 800a8fc:	f1c0 001f 	rsb	r0, r0, #31
}
 800a900:	b2c0      	uxtb	r0, r0
 800a902:	4770      	bx	lr
uint8_t n = 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	e7e8      	b.n	800a8da <SEQ_BitPosition+0xa>
 800a908:	0800e5c0 	.word	0x0800e5c0

0800a90c <UTIL_SEQ_Run>:
{
 800a90c:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 800a90e:	4b42      	ldr	r3, [pc, #264]	@ (800aa18 <UTIL_SEQ_Run+0x10c>)
 800a910:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 800a912:	4020      	ands	r0, r4
 800a914:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 800a916:	4b41      	ldr	r3, [pc, #260]	@ (800aa1c <UTIL_SEQ_Run+0x110>)
 800a918:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 800a91a:	4b41      	ldr	r3, [pc, #260]	@ (800aa20 <UTIL_SEQ_Run+0x114>)
 800a91c:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 800a91e:	4941      	ldr	r1, [pc, #260]	@ (800aa24 <UTIL_SEQ_Run+0x118>)
 800a920:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 800a922:	4941      	ldr	r1, [pc, #260]	@ (800aa28 <UTIL_SEQ_Run+0x11c>)
 800a924:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a926:	e02f      	b.n	800a988 <UTIL_SEQ_Run+0x7c>
      counter++;
 800a928:	3301      	adds	r3, #1
 800a92a:	e034      	b.n	800a996 <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a92c:	4d3f      	ldr	r5, [pc, #252]	@ (800aa2c <UTIL_SEQ_Run+0x120>)
 800a92e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a932:	6868      	ldr	r0, [r5, #4]
 800a934:	4010      	ands	r0, r2
 800a936:	f7ff ffcb 	bl	800a8d0 <SEQ_BitPosition>
 800a93a:	4e3d      	ldr	r6, [pc, #244]	@ (800aa30 <UTIL_SEQ_Run+0x124>)
 800a93c:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a93e:	686a      	ldr	r2, [r5, #4]
 800a940:	2301      	movs	r3, #1
 800a942:	fa03 f000 	lsl.w	r0, r3, r0
 800a946:	ea22 0200 	bic.w	r2, r2, r0
 800a94a:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a94c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a950:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a952:	6832      	ldr	r2, [r6, #0]
 800a954:	fa03 f202 	lsl.w	r2, r3, r2
 800a958:	43d6      	mvns	r6, r2
 800a95a:	4d30      	ldr	r5, [pc, #192]	@ (800aa1c <UTIL_SEQ_Run+0x110>)
 800a95c:	6828      	ldr	r0, [r5, #0]
 800a95e:	ea20 0202 	bic.w	r2, r0, r2
 800a962:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a964:	2b00      	cmp	r3, #0
 800a966:	d12d      	bne.n	800a9c4 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a968:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800a96c:	4b30      	ldr	r3, [pc, #192]	@ (800aa30 <UTIL_SEQ_Run+0x124>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	4b30      	ldr	r3, [pc, #192]	@ (800aa34 <UTIL_SEQ_Run+0x128>)
 800a972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a976:	4798      	blx	r3
    local_taskset = TaskSet;
 800a978:	4b28      	ldr	r3, [pc, #160]	@ (800aa1c <UTIL_SEQ_Run+0x110>)
 800a97a:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 800a97c:	4b28      	ldr	r3, [pc, #160]	@ (800aa20 <UTIL_SEQ_Run+0x114>)
 800a97e:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 800a980:	4928      	ldr	r1, [pc, #160]	@ (800aa24 <UTIL_SEQ_Run+0x118>)
 800a982:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 800a984:	4928      	ldr	r1, [pc, #160]	@ (800aa28 <UTIL_SEQ_Run+0x11c>)
 800a986:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800a988:	4002      	ands	r2, r0
 800a98a:	4d23      	ldr	r5, [pc, #140]	@ (800aa18 <UTIL_SEQ_Run+0x10c>)
 800a98c:	682d      	ldr	r5, [r5, #0]
 800a98e:	422a      	tst	r2, r5
 800a990:	d020      	beq.n	800a9d4 <UTIL_SEQ_Run+0xc8>
 800a992:	400b      	ands	r3, r1
 800a994:	d11e      	bne.n	800a9d4 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800a996:	4a25      	ldr	r2, [pc, #148]	@ (800aa2c <UTIL_SEQ_Run+0x120>)
 800a998:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a99c:	4002      	ands	r2, r0
 800a99e:	422a      	tst	r2, r5
 800a9a0:	d0c2      	beq.n	800a928 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800a9a2:	4922      	ldr	r1, [pc, #136]	@ (800aa2c <UTIL_SEQ_Run+0x120>)
 800a9a4:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 800a9a8:	4002      	ands	r2, r0
 800a9aa:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a9ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9b0:	6849      	ldr	r1, [r1, #4]
 800a9b2:	4211      	tst	r1, r2
 800a9b4:	d1ba      	bne.n	800a92c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a9b6:	491d      	ldr	r1, [pc, #116]	@ (800aa2c <UTIL_SEQ_Run+0x120>)
 800a9b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	6048      	str	r0, [r1, #4]
 800a9c2:	e7b3      	b.n	800a92c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	4819      	ldr	r0, [pc, #100]	@ (800aa2c <UTIL_SEQ_Run+0x120>)
 800a9c8:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 800a9cc:	4032      	ands	r2, r6
 800a9ce:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a9d2:	e7c7      	b.n	800a964 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a9d4:	4b16      	ldr	r3, [pc, #88]	@ (800aa30 <UTIL_SEQ_Run+0x124>)
 800a9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9da:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a9dc:	f7ff ff76 	bl	800a8cc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9e0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a9e4:	b672      	cpsid	i
  local_taskset = TaskSet;
 800a9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800aa1c <UTIL_SEQ_Run+0x110>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 800a9ea:	4a0d      	ldr	r2, [pc, #52]	@ (800aa20 <UTIL_SEQ_Run+0x114>)
 800a9ec:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 800a9ee:	4a0d      	ldr	r2, [pc, #52]	@ (800aa24 <UTIL_SEQ_Run+0x118>)
 800a9f0:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	4a08      	ldr	r2, [pc, #32]	@ (800aa18 <UTIL_SEQ_Run+0x10c>)
 800a9f6:	6812      	ldr	r2, [r2, #0]
 800a9f8:	4213      	tst	r3, r2
 800a9fa:	d103      	bne.n	800aa04 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 800a9fc:	4b0a      	ldr	r3, [pc, #40]	@ (800aa28 <UTIL_SEQ_Run+0x11c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	420b      	tst	r3, r1
 800aa02:	d006      	beq.n	800aa12 <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa04:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800aa08:	f7ff ff61 	bl	800a8ce <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800aa0c:	4b02      	ldr	r3, [pc, #8]	@ (800aa18 <UTIL_SEQ_Run+0x10c>)
 800aa0e:	601c      	str	r4, [r3, #0]
}
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 800aa12:	f7f7 f977 	bl	8001d04 <UTIL_SEQ_Idle>
 800aa16:	e7f5      	b.n	800aa04 <UTIL_SEQ_Run+0xf8>
 800aa18:	20000018 	.word	0x20000018
 800aa1c:	20000e44 	.word	0x20000e44
 800aa20:	20000e40 	.word	0x20000e40
 800aa24:	2000001c 	.word	0x2000001c
 800aa28:	20000e3c 	.word	0x20000e3c
 800aa2c:	20000e2c 	.word	0x20000e2c
 800aa30:	20000e38 	.word	0x20000e38
 800aa34:	20000e34 	.word	0x20000e34

0800aa38 <UTIL_SEQ_RegTask>:
{
 800aa38:	b538      	push	{r3, r4, r5, lr}
 800aa3a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa3c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800aa40:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800aa42:	f7ff ff45 	bl	800a8d0 <SEQ_BitPosition>
 800aa46:	4b03      	ldr	r3, [pc, #12]	@ (800aa54 <UTIL_SEQ_RegTask+0x1c>)
 800aa48:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa4c:	f385 8810 	msr	PRIMASK, r5
}
 800aa50:	bd38      	pop	{r3, r4, r5, pc}
 800aa52:	bf00      	nop
 800aa54:	20000e34 	.word	0x20000e34

0800aa58 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800aa58:	b082      	sub	sp, #8
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	f10d 0c08 	add.w	ip, sp, #8
 800aa60:	e90c 0006 	stmdb	ip, {r1, r2}
 800aa64:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800aa66:	2200      	movs	r2, #0
 800aa68:	6002      	str	r2, [r0, #0]
 800aa6a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 800aa6c:	440b      	add	r3, r1
 800aa6e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800aa70:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800aa74:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 800aa78:	440a      	add	r2, r1
 800aa7a:	b291      	uxth	r1, r2
 800aa7c:	b212      	sxth	r2, r2
 800aa7e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 800aa80:	f5b2 7f7a 	cmp.w	r2, #1000	@ 0x3e8
 800aa84:	db04      	blt.n	800aa90 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 800aa86:	3301      	adds	r3, #1
 800aa88:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 800aa8a:	f5a1 717a 	sub.w	r1, r1, #1000	@ 0x3e8
 800aa8e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 800aa90:	b002      	add	sp, #8
 800aa92:	b002      	add	sp, #8
 800aa94:	4770      	bx	lr
	...

0800aa98 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800aa98:	b530      	push	{r4, r5, lr}
 800aa9a:	b087      	sub	sp, #28
 800aa9c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	9304      	str	r3, [sp, #16]
 800aaa2:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800aaa6:	6003      	str	r3, [r0, #0]
 800aaa8:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800aaaa:	4d0b      	ldr	r5, [pc, #44]	@ (800aad8 <SysTimeGet+0x40>)
 800aaac:	692b      	ldr	r3, [r5, #16]
 800aaae:	a805      	add	r0, sp, #20
 800aab0:	4798      	blx	r3
 800aab2:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800aab4:	68eb      	ldr	r3, [r5, #12]
 800aab6:	4798      	blx	r3
 800aab8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800aabc:	686b      	ldr	r3, [r5, #4]
 800aabe:	4798      	blx	r3
 800aac0:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800aac2:	9b05      	ldr	r3, [sp, #20]
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	9b04      	ldr	r3, [sp, #16]
 800aac8:	aa02      	add	r2, sp, #8
 800aaca:	ca06      	ldmia	r2, {r1, r2}
 800aacc:	4620      	mov	r0, r4
 800aace:	f7ff ffc3 	bl	800aa58 <SysTimeAdd>

  return sysTime;
}
 800aad2:	4620      	mov	r0, r4
 800aad4:	b007      	add	sp, #28
 800aad6:	bd30      	pop	{r4, r5, pc}
 800aad8:	0800dda0 	.word	0x0800dda0

0800aadc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800aadc:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800aade:	4b03      	ldr	r3, [pc, #12]	@ (800aaec <UTIL_TIMER_Init+0x10>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800aae4:	4b02      	ldr	r3, [pc, #8]	@ (800aaf0 <UTIL_TIMER_Init+0x14>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4798      	blx	r3
}
 800aaea:	bd08      	pop	{r3, pc}
 800aaec:	20000e48 	.word	0x20000e48
 800aaf0:	0800ddb4 	.word	0x0800ddb4

0800aaf4 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 800aaf4:	b1a8      	cbz	r0, 800ab22 <UTIL_TIMER_Create+0x2e>
{
 800aaf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf8:	4617      	mov	r7, r2
 800aafa:	461e      	mov	r6, r3
 800aafc:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 800aafe:	b193      	cbz	r3, 800ab26 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 800ab00:	2500      	movs	r5, #0
 800ab02:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800ab04:	4b09      	ldr	r3, [pc, #36]	@ (800ab2c <UTIL_TIMER_Create+0x38>)
 800ab06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4798      	blx	r3
 800ab0c:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800ab0e:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 800ab10:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800ab12:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800ab14:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800ab16:	9b06      	ldr	r3, [sp, #24]
 800ab18:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800ab1a:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800ab1c:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800ab1e:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 800ab20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 800ab22:	2001      	movs	r0, #1
}
 800ab24:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 800ab26:	2001      	movs	r0, #1
 800ab28:	e7fa      	b.n	800ab20 <UTIL_TIMER_Create+0x2c>
 800ab2a:	bf00      	nop
 800ab2c:	0800ddb4 	.word	0x0800ddb4

0800ab30 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800ab30:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800ab32:	4c03      	ldr	r4, [pc, #12]	@ (800ab40 <UTIL_TIMER_GetCurrentTime+0x10>)
 800ab34:	69e3      	ldr	r3, [r4, #28]
 800ab36:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800ab38:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ab3a:	4798      	blx	r3
}
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	bf00      	nop
 800ab40:	0800ddb4 	.word	0x0800ddb4

0800ab44 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ab44:	b570      	push	{r4, r5, r6, lr}
 800ab46:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800ab48:	4d05      	ldr	r5, [pc, #20]	@ (800ab60 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800ab4a:	69eb      	ldr	r3, [r5, #28]
 800ab4c:	4798      	blx	r3
 800ab4e:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800ab50:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800ab52:	4630      	mov	r0, r6
 800ab54:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800ab56:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800ab58:	1a20      	subs	r0, r4, r0
 800ab5a:	4798      	blx	r3
}
 800ab5c:	bd70      	pop	{r4, r5, r6, pc}
 800ab5e:	bf00      	nop
 800ab60:	0800ddb4 	.word	0x0800ddb4

0800ab64 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ab64:	4b05      	ldr	r3, [pc, #20]	@ (800ab7c <TimerExists+0x18>)
 800ab66:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800ab68:	e000      	b.n	800ab6c <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 800ab6a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800ab6c:	b11b      	cbz	r3, 800ab76 <TimerExists+0x12>
    if( cur == TimerObject )
 800ab6e:	4283      	cmp	r3, r0
 800ab70:	d1fb      	bne.n	800ab6a <TimerExists+0x6>
      return true;
 800ab72:	2001      	movs	r0, #1
  }
  return false;
}
 800ab74:	4770      	bx	lr
  return false;
 800ab76:	2000      	movs	r0, #0
 800ab78:	4770      	bx	lr
 800ab7a:	bf00      	nop
 800ab7c:	20000e48 	.word	0x20000e48

0800ab80 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800ab84:	4e09      	ldr	r6, [pc, #36]	@ (800abac <TimerSetTimeout+0x2c>)
 800ab86:	6a33      	ldr	r3, [r6, #32]
 800ab88:	4798      	blx	r3
 800ab8a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800ab90:	6827      	ldr	r7, [r4, #0]
 800ab92:	69b6      	ldr	r6, [r6, #24]
 800ab94:	47b0      	blx	r6
 800ab96:	4428      	add	r0, r5
 800ab98:	4287      	cmp	r7, r0
 800ab9a:	d202      	bcs.n	800aba2 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800ab9c:	47b0      	blx	r6
 800ab9e:	4428      	add	r0, r5
 800aba0:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800aba2:	4b02      	ldr	r3, [pc, #8]	@ (800abac <TimerSetTimeout+0x2c>)
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	6820      	ldr	r0, [r4, #0]
 800aba8:	4798      	blx	r3
}
 800abaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abac:	0800ddb4 	.word	0x0800ddb4

0800abb0 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 800abb0:	b368      	cbz	r0, 800ac0e <UTIL_TIMER_Stop+0x5e>
{
 800abb2:	b510      	push	{r4, lr}
 800abb4:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abb6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800abba:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800abbc:	4b15      	ldr	r3, [pc, #84]	@ (800ac14 <UTIL_TIMER_Stop+0x64>)
 800abbe:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 800abc0:	2301      	movs	r3, #1
 800abc2:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 800abc4:	b1e1      	cbz	r1, 800ac00 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800abca:	4288      	cmp	r0, r1
 800abcc:	d006      	beq.n	800abdc <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800abce:	460b      	mov	r3, r1
        while( cur != NULL )
 800abd0:	b1b3      	cbz	r3, 800ac00 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d011      	beq.n	800abfa <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 800abd6:	4619      	mov	r1, r3
            cur = cur->Next;
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	e7f9      	b.n	800abd0 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 800abdc:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 800abde:	6948      	ldr	r0, [r1, #20]
 800abe0:	b120      	cbz	r0, 800abec <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 800abe2:	4b0c      	ldr	r3, [pc, #48]	@ (800ac14 <UTIL_TIMER_Stop+0x64>)
 800abe4:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 800abe6:	f7ff ffcb 	bl	800ab80 <TimerSetTimeout>
 800abea:	e009      	b.n	800ac00 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 800abec:	4b0a      	ldr	r3, [pc, #40]	@ (800ac18 <UTIL_TIMER_Stop+0x68>)
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	4798      	blx	r3
            TimerListHead = NULL;
 800abf2:	4b08      	ldr	r3, [pc, #32]	@ (800ac14 <UTIL_TIMER_Stop+0x64>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	601a      	str	r2, [r3, #0]
 800abf8:	e002      	b.n	800ac00 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	b123      	cbz	r3, 800ac08 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 800abfe:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac00:	f384 8810 	msr	PRIMASK, r4
}
 800ac04:	2000      	movs	r0, #0
}
 800ac06:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	614b      	str	r3, [r1, #20]
 800ac0c:	e7f8      	b.n	800ac00 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 800ac0e:	2001      	movs	r0, #1
}
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	20000e48 	.word	0x20000e48
 800ac18:	0800ddb4 	.word	0x0800ddb4

0800ac1c <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ac1c:	4b09      	ldr	r3, [pc, #36]	@ (800ac44 <TimerInsertTimer+0x28>)
 800ac1e:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800ac20:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800ac22:	e001      	b.n	800ac28 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 800ac24:	461a      	mov	r2, r3
        next = next->Next;
 800ac26:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 800ac28:	6951      	ldr	r1, [r2, #20]
 800ac2a:	b139      	cbz	r1, 800ac3c <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 800ac2c:	6819      	ldr	r1, [r3, #0]
 800ac2e:	f8d0 c000 	ldr.w	ip, [r0]
 800ac32:	458c      	cmp	ip, r1
 800ac34:	d8f6      	bhi.n	800ac24 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 800ac36:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800ac38:	6143      	str	r3, [r0, #20]
        return;
 800ac3a:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 800ac3c:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	6143      	str	r3, [r0, #20]
}
 800ac42:	4770      	bx	lr
 800ac44:	20000e48 	.word	0x20000e48

0800ac48 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800ac48:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ac4a:	4b05      	ldr	r3, [pc, #20]	@ (800ac60 <TimerInsertNewHeadTimer+0x18>)
 800ac4c:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 800ac4e:	b10b      	cbz	r3, 800ac54 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 800ac50:	2200      	movs	r2, #0
 800ac52:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800ac54:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800ac56:	4b02      	ldr	r3, [pc, #8]	@ (800ac60 <TimerInsertNewHeadTimer+0x18>)
 800ac58:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800ac5a:	f7ff ff91 	bl	800ab80 <TimerSetTimeout>
}
 800ac5e:	bd08      	pop	{r3, pc}
 800ac60:	20000e48 	.word	0x20000e48

0800ac64 <UTIL_TIMER_Start>:
{
 800ac64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800ac66:	2800      	cmp	r0, #0
 800ac68:	d036      	beq.n	800acd8 <UTIL_TIMER_Start+0x74>
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	f7ff ff7a 	bl	800ab64 <TimerExists>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d134      	bne.n	800acde <UTIL_TIMER_Start+0x7a>
 800ac74:	7a65      	ldrb	r5, [r4, #9]
 800ac76:	2d00      	cmp	r5, #0
 800ac78:	d133      	bne.n	800ace2 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac7a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ac7e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 800ac80:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ac82:	4b19      	ldr	r3, [pc, #100]	@ (800ace8 <UTIL_TIMER_Start+0x84>)
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	4798      	blx	r3
    if( ticks < minValue )
 800ac88:	4287      	cmp	r7, r0
 800ac8a:	d300      	bcc.n	800ac8e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 800ac8c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 800ac8e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 800ac94:	2201      	movs	r2, #1
 800ac96:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 800ac98:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800ac9a:	4b14      	ldr	r3, [pc, #80]	@ (800acec <UTIL_TIMER_Start+0x88>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	b183      	cbz	r3, 800acc2 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800aca0:	4b11      	ldr	r3, [pc, #68]	@ (800ace8 <UTIL_TIMER_Start+0x84>)
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800aca6:	6823      	ldr	r3, [r4, #0]
 800aca8:	4418      	add	r0, r3
 800acaa:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800acac:	4b0f      	ldr	r3, [pc, #60]	@ (800acec <UTIL_TIMER_Start+0x88>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4298      	cmp	r0, r3
 800acb4:	d20c      	bcs.n	800acd0 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 800acb6:	4620      	mov	r0, r4
 800acb8:	f7ff ffc6 	bl	800ac48 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acbc:	f386 8810 	msr	PRIMASK, r6
}
 800acc0:	e00b      	b.n	800acda <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 800acc2:	4b09      	ldr	r3, [pc, #36]	@ (800ace8 <UTIL_TIMER_Start+0x84>)
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800acc8:	4620      	mov	r0, r4
 800acca:	f7ff ffbd 	bl	800ac48 <TimerInsertNewHeadTimer>
 800acce:	e7f5      	b.n	800acbc <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 800acd0:	4620      	mov	r0, r4
 800acd2:	f7ff ffa3 	bl	800ac1c <TimerInsertTimer>
 800acd6:	e7f1      	b.n	800acbc <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800acd8:	2501      	movs	r5, #1
}
 800acda:	4628      	mov	r0, r5
 800acdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 800acde:	2501      	movs	r5, #1
 800ace0:	e7fb      	b.n	800acda <UTIL_TIMER_Start+0x76>
 800ace2:	2501      	movs	r5, #1
 800ace4:	e7f9      	b.n	800acda <UTIL_TIMER_Start+0x76>
 800ace6:	bf00      	nop
 800ace8:	0800ddb4 	.word	0x0800ddb4
 800acec:	20000e48 	.word	0x20000e48

0800acf0 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 800acf0:	b198      	cbz	r0, 800ad1a <UTIL_TIMER_SetPeriod+0x2a>
{
 800acf2:	b510      	push	{r4, lr}
 800acf4:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800acf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ad20 <UTIL_TIMER_SetPeriod+0x30>)
 800acf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfa:	4608      	mov	r0, r1
 800acfc:	4798      	blx	r3
 800acfe:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800ad00:	4620      	mov	r0, r4
 800ad02:	f7ff ff2f 	bl	800ab64 <TimerExists>
 800ad06:	b908      	cbnz	r0, 800ad0c <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ad08:	2000      	movs	r0, #0
}
 800ad0a:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 800ad0c:	4620      	mov	r0, r4
 800ad0e:	f7ff ff4f 	bl	800abb0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800ad12:	4620      	mov	r0, r4
 800ad14:	f7ff ffa6 	bl	800ac64 <UTIL_TIMER_Start>
 800ad18:	e7f7      	b.n	800ad0a <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 800ad1a:	2001      	movs	r0, #1
}
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	0800ddb4 	.word	0x0800ddb4

0800ad24 <UTIL_TIMER_IRQ_Handler>:
{
 800ad24:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad26:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ad2a:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800ad2c:	4c1e      	ldr	r4, [pc, #120]	@ (800ada8 <UTIL_TIMER_IRQ_Handler+0x84>)
 800ad2e:	6963      	ldr	r3, [r4, #20]
 800ad30:	4798      	blx	r3
 800ad32:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 800ad38:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 800ad3a:	4b1c      	ldr	r3, [pc, #112]	@ (800adac <UTIL_TIMER_IRQ_Handler+0x88>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	b923      	cbnz	r3, 800ad4a <UTIL_TIMER_IRQ_Handler+0x26>
 800ad40:	e018      	b.n	800ad74 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800ad46:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800ad48:	b1a3      	cbz	r3, 800ad74 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	42a2      	cmp	r2, r4
 800ad4e:	d9f8      	bls.n	800ad42 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 800ad50:	1a31      	subs	r1, r6, r0
 800ad52:	440a      	add	r2, r1
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e7f6      	b.n	800ad46 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 800ad58:	4b14      	ldr	r3, [pc, #80]	@ (800adac <UTIL_TIMER_IRQ_Handler+0x88>)
 800ad5a:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 800ad5c:	6962      	ldr	r2, [r4, #20]
 800ad5e:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 800ad64:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 800ad66:	68e3      	ldr	r3, [r4, #12]
 800ad68:	6920      	ldr	r0, [r4, #16]
 800ad6a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800ad6c:	8963      	ldrh	r3, [r4, #10]
 800ad6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad72:	d012      	beq.n	800ad9a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800ad74:	4b0d      	ldr	r3, [pc, #52]	@ (800adac <UTIL_TIMER_IRQ_Handler+0x88>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	b13b      	cbz	r3, 800ad8a <UTIL_TIMER_IRQ_Handler+0x66>
 800ad7a:	681c      	ldr	r4, [r3, #0]
 800ad7c:	2c00      	cmp	r4, #0
 800ad7e:	d0eb      	beq.n	800ad58 <UTIL_TIMER_IRQ_Handler+0x34>
 800ad80:	4b09      	ldr	r3, [pc, #36]	@ (800ada8 <UTIL_TIMER_IRQ_Handler+0x84>)
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	4798      	blx	r3
 800ad86:	4284      	cmp	r4, r0
 800ad88:	d3e6      	bcc.n	800ad58 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800ad8a:	4b08      	ldr	r3, [pc, #32]	@ (800adac <UTIL_TIMER_IRQ_Handler+0x88>)
 800ad8c:	6818      	ldr	r0, [r3, #0]
 800ad8e:	b108      	cbz	r0, 800ad94 <UTIL_TIMER_IRQ_Handler+0x70>
 800ad90:	7a03      	ldrb	r3, [r0, #8]
 800ad92:	b133      	cbz	r3, 800ada2 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad94:	f385 8810 	msr	PRIMASK, r5
}
 800ad98:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f7ff ff62 	bl	800ac64 <UTIL_TIMER_Start>
 800ada0:	e7e8      	b.n	800ad74 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 800ada2:	f7ff feed 	bl	800ab80 <TimerSetTimeout>
 800ada6:	e7f5      	b.n	800ad94 <UTIL_TIMER_IRQ_Handler+0x70>
 800ada8:	0800ddb4 	.word	0x0800ddb4
 800adac:	20000e48 	.word	0x20000e48

0800adb0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800adb0:	4601      	mov	r1, r0
  int i = 0;
 800adb2:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800adb4:	e008      	b.n	800adc8 <ee_skip_atoi+0x18>
 800adb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800adba:	1c53      	adds	r3, r2, #1
 800adbc:	600b      	str	r3, [r1, #0]
 800adbe:	7813      	ldrb	r3, [r2, #0]
 800adc0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800adc4:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 800adc8:	680a      	ldr	r2, [r1, #0]
 800adca:	7813      	ldrb	r3, [r2, #0]
 800adcc:	3b30      	subs	r3, #48	@ 0x30
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b09      	cmp	r3, #9
 800add2:	d9f0      	bls.n	800adb6 <ee_skip_atoi+0x6>
  return i;
}
 800add4:	4770      	bx	lr
	...

0800add8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800add8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 800addc:	b093      	sub	sp, #76	@ 0x4c
 800adde:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ade0:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800ade2:	f016 0f40 	tst.w	r6, #64	@ 0x40
 800ade6:	d110      	bne.n	800ae0a <ee_number+0x32>
  char *dig = lower_digits;
 800ade8:	f8df a0f8 	ldr.w	sl, [pc, #248]	@ 800aee4 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800adec:	1e9f      	subs	r7, r3, #2
 800adee:	2f22      	cmp	r7, #34	@ 0x22
 800adf0:	d875      	bhi.n	800aede <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 800adf2:	f016 0401 	ands.w	r4, r6, #1
 800adf6:	d00b      	beq.n	800ae10 <ee_number+0x38>
 800adf8:	f04f 0e30 	mov.w	lr, #48	@ 0x30
  sign = 0;
  if (type & SIGN)
 800adfc:	f016 0f02 	tst.w	r6, #2
 800ae00:	d00f      	beq.n	800ae22 <ee_number+0x4a>
  {
    if (num < 0)
 800ae02:	2a00      	cmp	r2, #0
 800ae04:	db07      	blt.n	800ae16 <ee_number+0x3e>
  sign = 0;
 800ae06:	2700      	movs	r7, #0
 800ae08:	e00c      	b.n	800ae24 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 800ae0a:	f8df a0dc 	ldr.w	sl, [pc, #220]	@ 800aee8 <ee_number+0x110>
 800ae0e:	e7ed      	b.n	800adec <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 800ae10:	f04f 0e20 	mov.w	lr, #32
 800ae14:	e7f2      	b.n	800adfc <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 800ae16:	4252      	negs	r2, r2
      size--;
 800ae18:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800ae1a:	3e01      	subs	r6, #1
 800ae1c:	961a      	str	r6, [sp, #104]	@ 0x68
      sign = '-';
 800ae1e:	272d      	movs	r7, #45	@ 0x2d
 800ae20:	e000      	b.n	800ae24 <ee_number+0x4c>
  sign = 0;
 800ae22:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 800ae24:	bb5a      	cbnz	r2, 800ae7e <ee_number+0xa6>
    tmp[i++] = '0';
 800ae26:	2330      	movs	r3, #48	@ 0x30
 800ae28:	f88d 3004 	strb.w	r3, [sp, #4]
 800ae2c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 800ae30:	45ac      	cmp	ip, r5
 800ae32:	dd00      	ble.n	800ae36 <ee_number+0x5e>
 800ae34:	4665      	mov	r5, ip
  size -= precision;
 800ae36:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ae38:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800ae3a:	b31c      	cbz	r4, 800ae84 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 800ae3c:	b11f      	cbz	r7, 800ae46 <ee_number+0x6e>
 800ae3e:	f800 7b01 	strb.w	r7, [r0], #1
 800ae42:	3901      	subs	r1, #1
 800ae44:	d007      	beq.n	800ae56 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae4c:	dd24      	ble.n	800ae98 <ee_number+0xc0>
 800ae4e:	f800 eb01 	strb.w	lr, [r0], #1
 800ae52:	3901      	subs	r1, #1
 800ae54:	d1f7      	bne.n	800ae46 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 800ae56:	b013      	add	sp, #76	@ 0x4c
 800ae58:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800ae5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae60:	fb03 2216 	mls	r2, r3, r6, r2
 800ae64:	f81a 8002 	ldrb.w	r8, [sl, r2]
 800ae68:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 800ae6c:	446a      	add	r2, sp
 800ae6e:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 800ae72:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800ae74:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 800ae78:	2a00      	cmp	r2, #0
 800ae7a:	d1ef      	bne.n	800ae5c <ee_number+0x84>
 800ae7c:	e7d8      	b.n	800ae30 <ee_number+0x58>
  i = 0;
 800ae7e:	f04f 0c00 	mov.w	ip, #0
 800ae82:	e7f9      	b.n	800ae78 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f103 33ff 	add.w	r3, r3, #4294967295
 800ae8a:	ddd7      	ble.n	800ae3c <ee_number+0x64>
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f800 2b01 	strb.w	r2, [r0], #1
 800ae92:	3901      	subs	r1, #1
 800ae94:	d1f6      	bne.n	800ae84 <ee_number+0xac>
 800ae96:	e7de      	b.n	800ae56 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 800ae98:	4565      	cmp	r5, ip
 800ae9a:	f105 35ff 	add.w	r5, r5, #4294967295
 800ae9e:	dd05      	ble.n	800aeac <ee_number+0xd4>
 800aea0:	2230      	movs	r2, #48	@ 0x30
 800aea2:	f800 2b01 	strb.w	r2, [r0], #1
 800aea6:	3901      	subs	r1, #1
 800aea8:	d1f6      	bne.n	800ae98 <ee_number+0xc0>
 800aeaa:	e7d4      	b.n	800ae56 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800aeac:	4662      	mov	r2, ip
 800aeae:	2a00      	cmp	r2, #0
 800aeb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aeb4:	dd09      	ble.n	800aeca <ee_number+0xf2>
 800aeb6:	f10c 0248 	add.w	r2, ip, #72	@ 0x48
 800aeba:	446a      	add	r2, sp
 800aebc:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 800aec0:	f800 2b01 	strb.w	r2, [r0], #1
 800aec4:	3901      	subs	r1, #1
 800aec6:	d1f1      	bne.n	800aeac <ee_number+0xd4>
 800aec8:	e7c5      	b.n	800ae56 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f103 33ff 	add.w	r3, r3, #4294967295
 800aed0:	ddc1      	ble.n	800ae56 <ee_number+0x7e>
 800aed2:	2220      	movs	r2, #32
 800aed4:	f800 2b01 	strb.w	r2, [r0], #1
 800aed8:	3901      	subs	r1, #1
 800aeda:	d1f6      	bne.n	800aeca <ee_number+0xf2>
 800aedc:	e7bb      	b.n	800ae56 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 800aede:	2000      	movs	r0, #0
 800aee0:	e7b9      	b.n	800ae56 <ee_number+0x7e>
 800aee2:	bf00      	nop
 800aee4:	0800e5d0 	.word	0x0800e5d0
 800aee8:	0800e5f8 	.word	0x0800e5f8

0800aeec <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800aeec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aef0:	b087      	sub	sp, #28
 800aef2:	9205      	str	r2, [sp, #20]
 800aef4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800aef6:	1e0f      	subs	r7, r1, #0
 800aef8:	f340 80b8 	ble.w	800b06c <tiny_vsnprintf_like+0x180>
 800aefc:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800aefe:	4604      	mov	r4, r0
 800af00:	e004      	b.n	800af0c <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 800af02:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800af06:	9b05      	ldr	r3, [sp, #20]
 800af08:	3301      	adds	r3, #1
 800af0a:	9305      	str	r3, [sp, #20]
 800af0c:	9905      	ldr	r1, [sp, #20]
 800af0e:	780a      	ldrb	r2, [r1, #0]
 800af10:	b922      	cbnz	r2, 800af1c <tiny_vsnprintf_like+0x30>
 800af12:	1ba3      	subs	r3, r4, r6
 800af14:	1e78      	subs	r0, r7, #1
 800af16:	4283      	cmp	r3, r0
 800af18:	f2c0 80a2 	blt.w	800b060 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 800af1c:	1ba3      	subs	r3, r4, r6
 800af1e:	f107 38ff 	add.w	r8, r7, #4294967295
 800af22:	4543      	cmp	r3, r8
 800af24:	f280 809c 	bge.w	800b060 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 800af28:	2a25      	cmp	r2, #37	@ 0x25
 800af2a:	d1ea      	bne.n	800af02 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800af2c:	1c4b      	adds	r3, r1, #1
 800af2e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 800af30:	784b      	ldrb	r3, [r1, #1]
 800af32:	2b30      	cmp	r3, #48	@ 0x30
 800af34:	d020      	beq.n	800af78 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 800af36:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 800af3a:	3b30      	subs	r3, #48	@ 0x30
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b09      	cmp	r3, #9
 800af40:	d91d      	bls.n	800af7e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 800af42:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 800af46:	9b05      	ldr	r3, [sp, #20]
 800af48:	781a      	ldrb	r2, [r3, #0]
 800af4a:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
 800af4e:	2b20      	cmp	r3, #32
 800af50:	d867      	bhi.n	800b022 <tiny_vsnprintf_like+0x136>
 800af52:	e8df f003 	tbb	[pc, r3]
 800af56:	664a      	.short	0x664a
 800af58:	66666666 	.word	0x66666666
 800af5c:	66666666 	.word	0x66666666
 800af60:	66621e66 	.word	0x66621e66
 800af64:	62666666 	.word	0x62666666
 800af68:	66666666 	.word	0x66666666
 800af6c:	66666666 	.word	0x66666666
 800af70:	19662866 	.word	0x19662866
 800af74:	6666      	.short	0x6666
 800af76:	7c          	.byte	0x7c
 800af77:	00          	.byte	0x00
      flags |= ZEROPAD;
 800af78:	f04f 0901 	mov.w	r9, #1
 800af7c:	e7dd      	b.n	800af3a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 800af7e:	a805      	add	r0, sp, #20
 800af80:	f7ff ff16 	bl	800adb0 <ee_skip_atoi>
 800af84:	4605      	mov	r5, r0
 800af86:	e7de      	b.n	800af46 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 800af88:	230a      	movs	r3, #10
 800af8a:	e031      	b.n	800aff0 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800af8c:	2320      	movs	r3, #32
 800af8e:	f804 3b01 	strb.w	r3, [r4], #1
 800af92:	3d01      	subs	r5, #1
 800af94:	2d00      	cmp	r5, #0
 800af96:	dcf9      	bgt.n	800af8c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 800af98:	9b04      	ldr	r3, [sp, #16]
 800af9a:	1d1a      	adds	r2, r3, #4
 800af9c:	9204      	str	r2, [sp, #16]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800afa4:	e7af      	b.n	800af06 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 800afa6:	9b04      	ldr	r3, [sp, #16]
 800afa8:	1d1a      	adds	r2, r3, #4
 800afaa:	9204      	str	r2, [sp, #16]
 800afac:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 800afb0:	f1b8 0f00 	cmp.w	r8, #0
 800afb4:	d003      	beq.n	800afbe <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 800afb6:	4640      	mov	r0, r8
 800afb8:	f7f5 f932 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800afbc:	e006      	b.n	800afcc <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 800afbe:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 800b070 <tiny_vsnprintf_like+0x184>
 800afc2:	e7f8      	b.n	800afb6 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 800afc4:	2220      	movs	r2, #32
 800afc6:	f804 2b01 	strb.w	r2, [r4], #1
 800afca:	461d      	mov	r5, r3
 800afcc:	1e6b      	subs	r3, r5, #1
 800afce:	4285      	cmp	r5, r0
 800afd0:	dcf8      	bgt.n	800afc4 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800afd2:	2200      	movs	r2, #0
 800afd4:	e006      	b.n	800afe4 <tiny_vsnprintf_like+0xf8>
 800afd6:	4643      	mov	r3, r8
 800afd8:	f813 1b01 	ldrb.w	r1, [r3], #1
 800afdc:	f804 1b01 	strb.w	r1, [r4], #1
 800afe0:	3201      	adds	r2, #1
 800afe2:	4698      	mov	r8, r3
 800afe4:	4282      	cmp	r2, r0
 800afe6:	dbf6      	blt.n	800afd6 <tiny_vsnprintf_like+0xea>
 800afe8:	e78d      	b.n	800af06 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 800afea:	f049 0940 	orr.w	r9, r9, #64	@ 0x40

      case 'x':
        base = 16;
 800afee:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 800aff0:	f019 0f02 	tst.w	r9, #2
 800aff4:	d02f      	beq.n	800b056 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 800aff6:	9a04      	ldr	r2, [sp, #16]
 800aff8:	1d11      	adds	r1, r2, #4
 800affa:	9104      	str	r1, [sp, #16]
 800affc:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800affe:	1ba1      	subs	r1, r4, r6
 800b000:	f8cd 9008 	str.w	r9, [sp, #8]
 800b004:	f04f 30ff 	mov.w	r0, #4294967295
 800b008:	9001      	str	r0, [sp, #4]
 800b00a:	9500      	str	r5, [sp, #0]
 800b00c:	eba8 0101 	sub.w	r1, r8, r1
 800b010:	4620      	mov	r0, r4
 800b012:	f7ff fee1 	bl	800add8 <ee_number>
 800b016:	4604      	mov	r4, r0
 800b018:	e775      	b.n	800af06 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 800b01a:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 800b01e:	230a      	movs	r3, #10
 800b020:	e7e6      	b.n	800aff0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800b022:	2a25      	cmp	r2, #37	@ 0x25
 800b024:	d002      	beq.n	800b02c <tiny_vsnprintf_like+0x140>
 800b026:	2325      	movs	r3, #37	@ 0x25
 800b028:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800b02c:	1ba3      	subs	r3, r4, r6
 800b02e:	4598      	cmp	r8, r3
 800b030:	dd0f      	ble.n	800b052 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 800b032:	9b05      	ldr	r3, [sp, #20]
 800b034:	781a      	ldrb	r2, [r3, #0]
 800b036:	b13a      	cbz	r2, 800b048 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 800b038:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 800b03c:	1ba3      	subs	r3, r4, r6
 800b03e:	4598      	cmp	r8, r3
 800b040:	f73f af61 	bgt.w	800af06 <tiny_vsnprintf_like+0x1a>
    base = 10;
 800b044:	230a      	movs	r3, #10
 800b046:	e7d3      	b.n	800aff0 <tiny_vsnprintf_like+0x104>
          --fmt;
 800b048:	3b01      	subs	r3, #1
 800b04a:	9305      	str	r3, [sp, #20]
 800b04c:	e7f6      	b.n	800b03c <tiny_vsnprintf_like+0x150>
        base = 16;
 800b04e:	2310      	movs	r3, #16
 800b050:	e7ce      	b.n	800aff0 <tiny_vsnprintf_like+0x104>
    base = 10;
 800b052:	230a      	movs	r3, #10
 800b054:	e7cc      	b.n	800aff0 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 800b056:	9a04      	ldr	r2, [sp, #16]
 800b058:	1d11      	adds	r1, r2, #4
 800b05a:	9104      	str	r1, [sp, #16]
 800b05c:	6812      	ldr	r2, [r2, #0]
 800b05e:	e7ce      	b.n	800affe <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 800b060:	2300      	movs	r3, #0
 800b062:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800b064:	1ba0      	subs	r0, r4, r6
}
 800b066:	b007      	add	sp, #28
 800b068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 800b06c:	2000      	movs	r0, #0
 800b06e:	e7fa      	b.n	800b066 <tiny_vsnprintf_like+0x17a>
 800b070:	0800e620 	.word	0x0800e620

0800b074 <malloc>:
 800b074:	4b02      	ldr	r3, [pc, #8]	@ (800b080 <malloc+0xc>)
 800b076:	4601      	mov	r1, r0
 800b078:	6818      	ldr	r0, [r3, #0]
 800b07a:	f000 b82d 	b.w	800b0d8 <_malloc_r>
 800b07e:	bf00      	nop
 800b080:	2000002c 	.word	0x2000002c

0800b084 <free>:
 800b084:	4b02      	ldr	r3, [pc, #8]	@ (800b090 <free+0xc>)
 800b086:	4601      	mov	r1, r0
 800b088:	6818      	ldr	r0, [r3, #0]
 800b08a:	f001 bd11 	b.w	800cab0 <_free_r>
 800b08e:	bf00      	nop
 800b090:	2000002c 	.word	0x2000002c

0800b094 <sbrk_aligned>:
 800b094:	b570      	push	{r4, r5, r6, lr}
 800b096:	4e0f      	ldr	r6, [pc, #60]	@ (800b0d4 <sbrk_aligned+0x40>)
 800b098:	460c      	mov	r4, r1
 800b09a:	6831      	ldr	r1, [r6, #0]
 800b09c:	4605      	mov	r5, r0
 800b09e:	b911      	cbnz	r1, 800b0a6 <sbrk_aligned+0x12>
 800b0a0:	f000 fe56 	bl	800bd50 <_sbrk_r>
 800b0a4:	6030      	str	r0, [r6, #0]
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	f000 fe51 	bl	800bd50 <_sbrk_r>
 800b0ae:	1c43      	adds	r3, r0, #1
 800b0b0:	d103      	bne.n	800b0ba <sbrk_aligned+0x26>
 800b0b2:	f04f 34ff 	mov.w	r4, #4294967295
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	bd70      	pop	{r4, r5, r6, pc}
 800b0ba:	1cc4      	adds	r4, r0, #3
 800b0bc:	f024 0403 	bic.w	r4, r4, #3
 800b0c0:	42a0      	cmp	r0, r4
 800b0c2:	d0f8      	beq.n	800b0b6 <sbrk_aligned+0x22>
 800b0c4:	1a21      	subs	r1, r4, r0
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	f000 fe42 	bl	800bd50 <_sbrk_r>
 800b0cc:	3001      	adds	r0, #1
 800b0ce:	d1f2      	bne.n	800b0b6 <sbrk_aligned+0x22>
 800b0d0:	e7ef      	b.n	800b0b2 <sbrk_aligned+0x1e>
 800b0d2:	bf00      	nop
 800b0d4:	20000e4c 	.word	0x20000e4c

0800b0d8 <_malloc_r>:
 800b0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0dc:	1ccd      	adds	r5, r1, #3
 800b0de:	f025 0503 	bic.w	r5, r5, #3
 800b0e2:	3508      	adds	r5, #8
 800b0e4:	2d0c      	cmp	r5, #12
 800b0e6:	bf38      	it	cc
 800b0e8:	250c      	movcc	r5, #12
 800b0ea:	2d00      	cmp	r5, #0
 800b0ec:	4606      	mov	r6, r0
 800b0ee:	db01      	blt.n	800b0f4 <_malloc_r+0x1c>
 800b0f0:	42a9      	cmp	r1, r5
 800b0f2:	d904      	bls.n	800b0fe <_malloc_r+0x26>
 800b0f4:	230c      	movs	r3, #12
 800b0f6:	6033      	str	r3, [r6, #0]
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b1d4 <_malloc_r+0xfc>
 800b102:	f000 f869 	bl	800b1d8 <__malloc_lock>
 800b106:	f8d8 3000 	ldr.w	r3, [r8]
 800b10a:	461c      	mov	r4, r3
 800b10c:	bb44      	cbnz	r4, 800b160 <_malloc_r+0x88>
 800b10e:	4629      	mov	r1, r5
 800b110:	4630      	mov	r0, r6
 800b112:	f7ff ffbf 	bl	800b094 <sbrk_aligned>
 800b116:	1c43      	adds	r3, r0, #1
 800b118:	4604      	mov	r4, r0
 800b11a:	d158      	bne.n	800b1ce <_malloc_r+0xf6>
 800b11c:	f8d8 4000 	ldr.w	r4, [r8]
 800b120:	4627      	mov	r7, r4
 800b122:	2f00      	cmp	r7, #0
 800b124:	d143      	bne.n	800b1ae <_malloc_r+0xd6>
 800b126:	2c00      	cmp	r4, #0
 800b128:	d04b      	beq.n	800b1c2 <_malloc_r+0xea>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	4639      	mov	r1, r7
 800b12e:	4630      	mov	r0, r6
 800b130:	eb04 0903 	add.w	r9, r4, r3
 800b134:	f000 fe0c 	bl	800bd50 <_sbrk_r>
 800b138:	4581      	cmp	r9, r0
 800b13a:	d142      	bne.n	800b1c2 <_malloc_r+0xea>
 800b13c:	6821      	ldr	r1, [r4, #0]
 800b13e:	1a6d      	subs	r5, r5, r1
 800b140:	4629      	mov	r1, r5
 800b142:	4630      	mov	r0, r6
 800b144:	f7ff ffa6 	bl	800b094 <sbrk_aligned>
 800b148:	3001      	adds	r0, #1
 800b14a:	d03a      	beq.n	800b1c2 <_malloc_r+0xea>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	442b      	add	r3, r5
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	f8d8 3000 	ldr.w	r3, [r8]
 800b156:	685a      	ldr	r2, [r3, #4]
 800b158:	bb62      	cbnz	r2, 800b1b4 <_malloc_r+0xdc>
 800b15a:	f8c8 7000 	str.w	r7, [r8]
 800b15e:	e00f      	b.n	800b180 <_malloc_r+0xa8>
 800b160:	6822      	ldr	r2, [r4, #0]
 800b162:	1b52      	subs	r2, r2, r5
 800b164:	d420      	bmi.n	800b1a8 <_malloc_r+0xd0>
 800b166:	2a0b      	cmp	r2, #11
 800b168:	d917      	bls.n	800b19a <_malloc_r+0xc2>
 800b16a:	1961      	adds	r1, r4, r5
 800b16c:	42a3      	cmp	r3, r4
 800b16e:	6025      	str	r5, [r4, #0]
 800b170:	bf18      	it	ne
 800b172:	6059      	strne	r1, [r3, #4]
 800b174:	6863      	ldr	r3, [r4, #4]
 800b176:	bf08      	it	eq
 800b178:	f8c8 1000 	streq.w	r1, [r8]
 800b17c:	5162      	str	r2, [r4, r5]
 800b17e:	604b      	str	r3, [r1, #4]
 800b180:	4630      	mov	r0, r6
 800b182:	f000 f82f 	bl	800b1e4 <__malloc_unlock>
 800b186:	f104 000b 	add.w	r0, r4, #11
 800b18a:	1d23      	adds	r3, r4, #4
 800b18c:	f020 0007 	bic.w	r0, r0, #7
 800b190:	1ac2      	subs	r2, r0, r3
 800b192:	bf1c      	itt	ne
 800b194:	1a1b      	subne	r3, r3, r0
 800b196:	50a3      	strne	r3, [r4, r2]
 800b198:	e7af      	b.n	800b0fa <_malloc_r+0x22>
 800b19a:	6862      	ldr	r2, [r4, #4]
 800b19c:	42a3      	cmp	r3, r4
 800b19e:	bf0c      	ite	eq
 800b1a0:	f8c8 2000 	streq.w	r2, [r8]
 800b1a4:	605a      	strne	r2, [r3, #4]
 800b1a6:	e7eb      	b.n	800b180 <_malloc_r+0xa8>
 800b1a8:	4623      	mov	r3, r4
 800b1aa:	6864      	ldr	r4, [r4, #4]
 800b1ac:	e7ae      	b.n	800b10c <_malloc_r+0x34>
 800b1ae:	463c      	mov	r4, r7
 800b1b0:	687f      	ldr	r7, [r7, #4]
 800b1b2:	e7b6      	b.n	800b122 <_malloc_r+0x4a>
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	42a3      	cmp	r3, r4
 800b1ba:	d1fb      	bne.n	800b1b4 <_malloc_r+0xdc>
 800b1bc:	2300      	movs	r3, #0
 800b1be:	6053      	str	r3, [r2, #4]
 800b1c0:	e7de      	b.n	800b180 <_malloc_r+0xa8>
 800b1c2:	230c      	movs	r3, #12
 800b1c4:	6033      	str	r3, [r6, #0]
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f000 f80c 	bl	800b1e4 <__malloc_unlock>
 800b1cc:	e794      	b.n	800b0f8 <_malloc_r+0x20>
 800b1ce:	6005      	str	r5, [r0, #0]
 800b1d0:	e7d6      	b.n	800b180 <_malloc_r+0xa8>
 800b1d2:	bf00      	nop
 800b1d4:	20000e50 	.word	0x20000e50

0800b1d8 <__malloc_lock>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	@ (800b1e0 <__malloc_lock+0x8>)
 800b1da:	f000 be06 	b.w	800bdea <__retarget_lock_acquire_recursive>
 800b1de:	bf00      	nop
 800b1e0:	20000f94 	.word	0x20000f94

0800b1e4 <__malloc_unlock>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	@ (800b1ec <__malloc_unlock+0x8>)
 800b1e6:	f000 be01 	b.w	800bdec <__retarget_lock_release_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	20000f94 	.word	0x20000f94

0800b1f0 <__cvt>:
 800b1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f4:	b088      	sub	sp, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	461d      	mov	r5, r3
 800b1fa:	4614      	mov	r4, r2
 800b1fc:	bfbc      	itt	lt
 800b1fe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b202:	4614      	movlt	r4, r2
 800b204:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b206:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b208:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b20c:	bfb6      	itet	lt
 800b20e:	461d      	movlt	r5, r3
 800b210:	2300      	movge	r3, #0
 800b212:	232d      	movlt	r3, #45	@ 0x2d
 800b214:	7013      	strb	r3, [r2, #0]
 800b216:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b218:	f023 0820 	bic.w	r8, r3, #32
 800b21c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b220:	d005      	beq.n	800b22e <__cvt+0x3e>
 800b222:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b226:	d100      	bne.n	800b22a <__cvt+0x3a>
 800b228:	3601      	adds	r6, #1
 800b22a:	2302      	movs	r3, #2
 800b22c:	e000      	b.n	800b230 <__cvt+0x40>
 800b22e:	2303      	movs	r3, #3
 800b230:	aa07      	add	r2, sp, #28
 800b232:	9204      	str	r2, [sp, #16]
 800b234:	aa06      	add	r2, sp, #24
 800b236:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b23a:	e9cd 3600 	strd	r3, r6, [sp]
 800b23e:	4622      	mov	r2, r4
 800b240:	462b      	mov	r3, r5
 800b242:	f000 fe6d 	bl	800bf20 <_dtoa_r>
 800b246:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b24a:	4607      	mov	r7, r0
 800b24c:	d119      	bne.n	800b282 <__cvt+0x92>
 800b24e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b250:	07db      	lsls	r3, r3, #31
 800b252:	d50e      	bpl.n	800b272 <__cvt+0x82>
 800b254:	eb00 0906 	add.w	r9, r0, r6
 800b258:	2200      	movs	r2, #0
 800b25a:	2300      	movs	r3, #0
 800b25c:	4620      	mov	r0, r4
 800b25e:	4629      	mov	r1, r5
 800b260:	f7f5 fc0a 	bl	8000a78 <__aeabi_dcmpeq>
 800b264:	b108      	cbz	r0, 800b26a <__cvt+0x7a>
 800b266:	f8cd 901c 	str.w	r9, [sp, #28]
 800b26a:	2230      	movs	r2, #48	@ 0x30
 800b26c:	9b07      	ldr	r3, [sp, #28]
 800b26e:	454b      	cmp	r3, r9
 800b270:	d31e      	bcc.n	800b2b0 <__cvt+0xc0>
 800b272:	9b07      	ldr	r3, [sp, #28]
 800b274:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b276:	1bdb      	subs	r3, r3, r7
 800b278:	4638      	mov	r0, r7
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	b008      	add	sp, #32
 800b27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b282:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b286:	eb00 0906 	add.w	r9, r0, r6
 800b28a:	d1e5      	bne.n	800b258 <__cvt+0x68>
 800b28c:	7803      	ldrb	r3, [r0, #0]
 800b28e:	2b30      	cmp	r3, #48	@ 0x30
 800b290:	d10a      	bne.n	800b2a8 <__cvt+0xb8>
 800b292:	2200      	movs	r2, #0
 800b294:	2300      	movs	r3, #0
 800b296:	4620      	mov	r0, r4
 800b298:	4629      	mov	r1, r5
 800b29a:	f7f5 fbed 	bl	8000a78 <__aeabi_dcmpeq>
 800b29e:	b918      	cbnz	r0, 800b2a8 <__cvt+0xb8>
 800b2a0:	f1c6 0601 	rsb	r6, r6, #1
 800b2a4:	f8ca 6000 	str.w	r6, [sl]
 800b2a8:	f8da 3000 	ldr.w	r3, [sl]
 800b2ac:	4499      	add	r9, r3
 800b2ae:	e7d3      	b.n	800b258 <__cvt+0x68>
 800b2b0:	1c59      	adds	r1, r3, #1
 800b2b2:	9107      	str	r1, [sp, #28]
 800b2b4:	701a      	strb	r2, [r3, #0]
 800b2b6:	e7d9      	b.n	800b26c <__cvt+0x7c>

0800b2b8 <__exponent>:
 800b2b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b2ba:	2900      	cmp	r1, #0
 800b2bc:	bfba      	itte	lt
 800b2be:	4249      	neglt	r1, r1
 800b2c0:	232d      	movlt	r3, #45	@ 0x2d
 800b2c2:	232b      	movge	r3, #43	@ 0x2b
 800b2c4:	2909      	cmp	r1, #9
 800b2c6:	7002      	strb	r2, [r0, #0]
 800b2c8:	7043      	strb	r3, [r0, #1]
 800b2ca:	dd29      	ble.n	800b320 <__exponent+0x68>
 800b2cc:	f10d 0307 	add.w	r3, sp, #7
 800b2d0:	461d      	mov	r5, r3
 800b2d2:	270a      	movs	r7, #10
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	fbb1 f6f7 	udiv	r6, r1, r7
 800b2da:	fb07 1416 	mls	r4, r7, r6, r1
 800b2de:	3430      	adds	r4, #48	@ 0x30
 800b2e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b2e4:	460c      	mov	r4, r1
 800b2e6:	2c63      	cmp	r4, #99	@ 0x63
 800b2e8:	f103 33ff 	add.w	r3, r3, #4294967295
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	dcf1      	bgt.n	800b2d4 <__exponent+0x1c>
 800b2f0:	3130      	adds	r1, #48	@ 0x30
 800b2f2:	1e94      	subs	r4, r2, #2
 800b2f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b2f8:	1c41      	adds	r1, r0, #1
 800b2fa:	4623      	mov	r3, r4
 800b2fc:	42ab      	cmp	r3, r5
 800b2fe:	d30a      	bcc.n	800b316 <__exponent+0x5e>
 800b300:	f10d 0309 	add.w	r3, sp, #9
 800b304:	1a9b      	subs	r3, r3, r2
 800b306:	42ac      	cmp	r4, r5
 800b308:	bf88      	it	hi
 800b30a:	2300      	movhi	r3, #0
 800b30c:	3302      	adds	r3, #2
 800b30e:	4403      	add	r3, r0
 800b310:	1a18      	subs	r0, r3, r0
 800b312:	b003      	add	sp, #12
 800b314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b316:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b31a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b31e:	e7ed      	b.n	800b2fc <__exponent+0x44>
 800b320:	2330      	movs	r3, #48	@ 0x30
 800b322:	3130      	adds	r1, #48	@ 0x30
 800b324:	7083      	strb	r3, [r0, #2]
 800b326:	70c1      	strb	r1, [r0, #3]
 800b328:	1d03      	adds	r3, r0, #4
 800b32a:	e7f1      	b.n	800b310 <__exponent+0x58>

0800b32c <_printf_float>:
 800b32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b330:	b091      	sub	sp, #68	@ 0x44
 800b332:	460c      	mov	r4, r1
 800b334:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b338:	4616      	mov	r6, r2
 800b33a:	461f      	mov	r7, r3
 800b33c:	4605      	mov	r5, r0
 800b33e:	f000 fccf 	bl	800bce0 <_localeconv_r>
 800b342:	6803      	ldr	r3, [r0, #0]
 800b344:	9308      	str	r3, [sp, #32]
 800b346:	4618      	mov	r0, r3
 800b348:	f7f4 ff6a 	bl	8000220 <strlen>
 800b34c:	2300      	movs	r3, #0
 800b34e:	930e      	str	r3, [sp, #56]	@ 0x38
 800b350:	f8d8 3000 	ldr.w	r3, [r8]
 800b354:	9009      	str	r0, [sp, #36]	@ 0x24
 800b356:	3307      	adds	r3, #7
 800b358:	f023 0307 	bic.w	r3, r3, #7
 800b35c:	f103 0208 	add.w	r2, r3, #8
 800b360:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b364:	f8d4 b000 	ldr.w	fp, [r4]
 800b368:	f8c8 2000 	str.w	r2, [r8]
 800b36c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b370:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b374:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b376:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b37a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b37e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b382:	4b9d      	ldr	r3, [pc, #628]	@ (800b5f8 <_printf_float+0x2cc>)
 800b384:	f04f 32ff 	mov.w	r2, #4294967295
 800b388:	f7f5 fba8 	bl	8000adc <__aeabi_dcmpun>
 800b38c:	bb70      	cbnz	r0, 800b3ec <_printf_float+0xc0>
 800b38e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b392:	4b99      	ldr	r3, [pc, #612]	@ (800b5f8 <_printf_float+0x2cc>)
 800b394:	f04f 32ff 	mov.w	r2, #4294967295
 800b398:	f7f5 fb82 	bl	8000aa0 <__aeabi_dcmple>
 800b39c:	bb30      	cbnz	r0, 800b3ec <_printf_float+0xc0>
 800b39e:	2200      	movs	r2, #0
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f5 fb71 	bl	8000a8c <__aeabi_dcmplt>
 800b3aa:	b110      	cbz	r0, 800b3b2 <_printf_float+0x86>
 800b3ac:	232d      	movs	r3, #45	@ 0x2d
 800b3ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3b2:	4a92      	ldr	r2, [pc, #584]	@ (800b5fc <_printf_float+0x2d0>)
 800b3b4:	4b92      	ldr	r3, [pc, #584]	@ (800b600 <_printf_float+0x2d4>)
 800b3b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b3ba:	bf94      	ite	ls
 800b3bc:	4690      	movls	r8, r2
 800b3be:	4698      	movhi	r8, r3
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	6123      	str	r3, [r4, #16]
 800b3c4:	f02b 0304 	bic.w	r3, fp, #4
 800b3c8:	6023      	str	r3, [r4, #0]
 800b3ca:	f04f 0900 	mov.w	r9, #0
 800b3ce:	9700      	str	r7, [sp, #0]
 800b3d0:	4633      	mov	r3, r6
 800b3d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 f9d4 	bl	800b784 <_printf_common>
 800b3dc:	3001      	adds	r0, #1
 800b3de:	f040 808f 	bne.w	800b500 <_printf_float+0x1d4>
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e6:	b011      	add	sp, #68	@ 0x44
 800b3e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ec:	4642      	mov	r2, r8
 800b3ee:	464b      	mov	r3, r9
 800b3f0:	4640      	mov	r0, r8
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	f7f5 fb72 	bl	8000adc <__aeabi_dcmpun>
 800b3f8:	b140      	cbz	r0, 800b40c <_printf_float+0xe0>
 800b3fa:	464b      	mov	r3, r9
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	bfbc      	itt	lt
 800b400:	232d      	movlt	r3, #45	@ 0x2d
 800b402:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b406:	4a7f      	ldr	r2, [pc, #508]	@ (800b604 <_printf_float+0x2d8>)
 800b408:	4b7f      	ldr	r3, [pc, #508]	@ (800b608 <_printf_float+0x2dc>)
 800b40a:	e7d4      	b.n	800b3b6 <_printf_float+0x8a>
 800b40c:	6863      	ldr	r3, [r4, #4]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800b414:	d13f      	bne.n	800b496 <_printf_float+0x16a>
 800b416:	2306      	movs	r3, #6
 800b418:	6063      	str	r3, [r4, #4]
 800b41a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800b41e:	2200      	movs	r2, #0
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	9206      	str	r2, [sp, #24]
 800b424:	aa0e      	add	r2, sp, #56	@ 0x38
 800b426:	e9cd a204 	strd	sl, r2, [sp, #16]
 800b42a:	aa0d      	add	r2, sp, #52	@ 0x34
 800b42c:	9203      	str	r2, [sp, #12]
 800b42e:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800b432:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b436:	6863      	ldr	r3, [r4, #4]
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	4642      	mov	r2, r8
 800b43c:	464b      	mov	r3, r9
 800b43e:	4628      	mov	r0, r5
 800b440:	910a      	str	r1, [sp, #40]	@ 0x28
 800b442:	f7ff fed5 	bl	800b1f0 <__cvt>
 800b446:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b448:	2947      	cmp	r1, #71	@ 0x47
 800b44a:	4680      	mov	r8, r0
 800b44c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b44e:	d128      	bne.n	800b4a2 <_printf_float+0x176>
 800b450:	1cc8      	adds	r0, r1, #3
 800b452:	db02      	blt.n	800b45a <_printf_float+0x12e>
 800b454:	6863      	ldr	r3, [r4, #4]
 800b456:	4299      	cmp	r1, r3
 800b458:	dd40      	ble.n	800b4dc <_printf_float+0x1b0>
 800b45a:	f1aa 0a02 	sub.w	sl, sl, #2
 800b45e:	fa5f fa8a 	uxtb.w	sl, sl
 800b462:	3901      	subs	r1, #1
 800b464:	4652      	mov	r2, sl
 800b466:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b46a:	910d      	str	r1, [sp, #52]	@ 0x34
 800b46c:	f7ff ff24 	bl	800b2b8 <__exponent>
 800b470:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b472:	1813      	adds	r3, r2, r0
 800b474:	2a01      	cmp	r2, #1
 800b476:	4681      	mov	r9, r0
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	dc02      	bgt.n	800b482 <_printf_float+0x156>
 800b47c:	6822      	ldr	r2, [r4, #0]
 800b47e:	07d2      	lsls	r2, r2, #31
 800b480:	d501      	bpl.n	800b486 <_printf_float+0x15a>
 800b482:	3301      	adds	r3, #1
 800b484:	6123      	str	r3, [r4, #16]
 800b486:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d09f      	beq.n	800b3ce <_printf_float+0xa2>
 800b48e:	232d      	movs	r3, #45	@ 0x2d
 800b490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b494:	e79b      	b.n	800b3ce <_printf_float+0xa2>
 800b496:	2947      	cmp	r1, #71	@ 0x47
 800b498:	d1bf      	bne.n	800b41a <_printf_float+0xee>
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d1bd      	bne.n	800b41a <_printf_float+0xee>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e7ba      	b.n	800b418 <_printf_float+0xec>
 800b4a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b4a6:	d9dc      	bls.n	800b462 <_printf_float+0x136>
 800b4a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b4ac:	d118      	bne.n	800b4e0 <_printf_float+0x1b4>
 800b4ae:	2900      	cmp	r1, #0
 800b4b0:	6863      	ldr	r3, [r4, #4]
 800b4b2:	dd0b      	ble.n	800b4cc <_printf_float+0x1a0>
 800b4b4:	6121      	str	r1, [r4, #16]
 800b4b6:	b913      	cbnz	r3, 800b4be <_printf_float+0x192>
 800b4b8:	6822      	ldr	r2, [r4, #0]
 800b4ba:	07d0      	lsls	r0, r2, #31
 800b4bc:	d502      	bpl.n	800b4c4 <_printf_float+0x198>
 800b4be:	3301      	adds	r3, #1
 800b4c0:	440b      	add	r3, r1
 800b4c2:	6123      	str	r3, [r4, #16]
 800b4c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b4c6:	f04f 0900 	mov.w	r9, #0
 800b4ca:	e7dc      	b.n	800b486 <_printf_float+0x15a>
 800b4cc:	b913      	cbnz	r3, 800b4d4 <_printf_float+0x1a8>
 800b4ce:	6822      	ldr	r2, [r4, #0]
 800b4d0:	07d2      	lsls	r2, r2, #31
 800b4d2:	d501      	bpl.n	800b4d8 <_printf_float+0x1ac>
 800b4d4:	3302      	adds	r3, #2
 800b4d6:	e7f4      	b.n	800b4c2 <_printf_float+0x196>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	e7f2      	b.n	800b4c2 <_printf_float+0x196>
 800b4dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b4e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4e2:	4299      	cmp	r1, r3
 800b4e4:	db05      	blt.n	800b4f2 <_printf_float+0x1c6>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	6121      	str	r1, [r4, #16]
 800b4ea:	07d8      	lsls	r0, r3, #31
 800b4ec:	d5ea      	bpl.n	800b4c4 <_printf_float+0x198>
 800b4ee:	1c4b      	adds	r3, r1, #1
 800b4f0:	e7e7      	b.n	800b4c2 <_printf_float+0x196>
 800b4f2:	2900      	cmp	r1, #0
 800b4f4:	bfd4      	ite	le
 800b4f6:	f1c1 0202 	rsble	r2, r1, #2
 800b4fa:	2201      	movgt	r2, #1
 800b4fc:	4413      	add	r3, r2
 800b4fe:	e7e0      	b.n	800b4c2 <_printf_float+0x196>
 800b500:	6823      	ldr	r3, [r4, #0]
 800b502:	055a      	lsls	r2, r3, #21
 800b504:	d407      	bmi.n	800b516 <_printf_float+0x1ea>
 800b506:	6923      	ldr	r3, [r4, #16]
 800b508:	4642      	mov	r2, r8
 800b50a:	4631      	mov	r1, r6
 800b50c:	4628      	mov	r0, r5
 800b50e:	47b8      	blx	r7
 800b510:	3001      	adds	r0, #1
 800b512:	d12b      	bne.n	800b56c <_printf_float+0x240>
 800b514:	e765      	b.n	800b3e2 <_printf_float+0xb6>
 800b516:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b51a:	f240 80dd 	bls.w	800b6d8 <_printf_float+0x3ac>
 800b51e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b522:	2200      	movs	r2, #0
 800b524:	2300      	movs	r3, #0
 800b526:	f7f5 faa7 	bl	8000a78 <__aeabi_dcmpeq>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d033      	beq.n	800b596 <_printf_float+0x26a>
 800b52e:	4a37      	ldr	r2, [pc, #220]	@ (800b60c <_printf_float+0x2e0>)
 800b530:	2301      	movs	r3, #1
 800b532:	4631      	mov	r1, r6
 800b534:	4628      	mov	r0, r5
 800b536:	47b8      	blx	r7
 800b538:	3001      	adds	r0, #1
 800b53a:	f43f af52 	beq.w	800b3e2 <_printf_float+0xb6>
 800b53e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800b542:	4543      	cmp	r3, r8
 800b544:	db02      	blt.n	800b54c <_printf_float+0x220>
 800b546:	6823      	ldr	r3, [r4, #0]
 800b548:	07d8      	lsls	r0, r3, #31
 800b54a:	d50f      	bpl.n	800b56c <_printf_float+0x240>
 800b54c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b550:	4631      	mov	r1, r6
 800b552:	4628      	mov	r0, r5
 800b554:	47b8      	blx	r7
 800b556:	3001      	adds	r0, #1
 800b558:	f43f af43 	beq.w	800b3e2 <_printf_float+0xb6>
 800b55c:	f04f 0900 	mov.w	r9, #0
 800b560:	f108 38ff 	add.w	r8, r8, #4294967295
 800b564:	f104 0a1a 	add.w	sl, r4, #26
 800b568:	45c8      	cmp	r8, r9
 800b56a:	dc09      	bgt.n	800b580 <_printf_float+0x254>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	079b      	lsls	r3, r3, #30
 800b570:	f100 8103 	bmi.w	800b77a <_printf_float+0x44e>
 800b574:	68e0      	ldr	r0, [r4, #12]
 800b576:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b578:	4298      	cmp	r0, r3
 800b57a:	bfb8      	it	lt
 800b57c:	4618      	movlt	r0, r3
 800b57e:	e732      	b.n	800b3e6 <_printf_float+0xba>
 800b580:	2301      	movs	r3, #1
 800b582:	4652      	mov	r2, sl
 800b584:	4631      	mov	r1, r6
 800b586:	4628      	mov	r0, r5
 800b588:	47b8      	blx	r7
 800b58a:	3001      	adds	r0, #1
 800b58c:	f43f af29 	beq.w	800b3e2 <_printf_float+0xb6>
 800b590:	f109 0901 	add.w	r9, r9, #1
 800b594:	e7e8      	b.n	800b568 <_printf_float+0x23c>
 800b596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b598:	2b00      	cmp	r3, #0
 800b59a:	dc39      	bgt.n	800b610 <_printf_float+0x2e4>
 800b59c:	4a1b      	ldr	r2, [pc, #108]	@ (800b60c <_printf_float+0x2e0>)
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4631      	mov	r1, r6
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	47b8      	blx	r7
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	f43f af1b 	beq.w	800b3e2 <_printf_float+0xb6>
 800b5ac:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800b5b0:	ea59 0303 	orrs.w	r3, r9, r3
 800b5b4:	d102      	bne.n	800b5bc <_printf_float+0x290>
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	07d9      	lsls	r1, r3, #31
 800b5ba:	d5d7      	bpl.n	800b56c <_printf_float+0x240>
 800b5bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b5c0:	4631      	mov	r1, r6
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	47b8      	blx	r7
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	f43f af0b 	beq.w	800b3e2 <_printf_float+0xb6>
 800b5cc:	f04f 0a00 	mov.w	sl, #0
 800b5d0:	f104 0b1a 	add.w	fp, r4, #26
 800b5d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5d6:	425b      	negs	r3, r3
 800b5d8:	4553      	cmp	r3, sl
 800b5da:	dc01      	bgt.n	800b5e0 <_printf_float+0x2b4>
 800b5dc:	464b      	mov	r3, r9
 800b5de:	e793      	b.n	800b508 <_printf_float+0x1dc>
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	465a      	mov	r2, fp
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	47b8      	blx	r7
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	f43f aef9 	beq.w	800b3e2 <_printf_float+0xb6>
 800b5f0:	f10a 0a01 	add.w	sl, sl, #1
 800b5f4:	e7ee      	b.n	800b5d4 <_printf_float+0x2a8>
 800b5f6:	bf00      	nop
 800b5f8:	7fefffff 	.word	0x7fefffff
 800b5fc:	0800e627 	.word	0x0800e627
 800b600:	0800e62b 	.word	0x0800e62b
 800b604:	0800e62f 	.word	0x0800e62f
 800b608:	0800e633 	.word	0x0800e633
 800b60c:	0800e637 	.word	0x0800e637
 800b610:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b612:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b616:	4553      	cmp	r3, sl
 800b618:	bfa8      	it	ge
 800b61a:	4653      	movge	r3, sl
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	4699      	mov	r9, r3
 800b620:	dc36      	bgt.n	800b690 <_printf_float+0x364>
 800b622:	f04f 0b00 	mov.w	fp, #0
 800b626:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b62a:	f104 021a 	add.w	r2, r4, #26
 800b62e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b630:	930a      	str	r3, [sp, #40]	@ 0x28
 800b632:	eba3 0309 	sub.w	r3, r3, r9
 800b636:	455b      	cmp	r3, fp
 800b638:	dc31      	bgt.n	800b69e <_printf_float+0x372>
 800b63a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b63c:	459a      	cmp	sl, r3
 800b63e:	dc3a      	bgt.n	800b6b6 <_printf_float+0x38a>
 800b640:	6823      	ldr	r3, [r4, #0]
 800b642:	07da      	lsls	r2, r3, #31
 800b644:	d437      	bmi.n	800b6b6 <_printf_float+0x38a>
 800b646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b648:	ebaa 0903 	sub.w	r9, sl, r3
 800b64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b64e:	ebaa 0303 	sub.w	r3, sl, r3
 800b652:	4599      	cmp	r9, r3
 800b654:	bfa8      	it	ge
 800b656:	4699      	movge	r9, r3
 800b658:	f1b9 0f00 	cmp.w	r9, #0
 800b65c:	dc33      	bgt.n	800b6c6 <_printf_float+0x39a>
 800b65e:	f04f 0800 	mov.w	r8, #0
 800b662:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b666:	f104 0b1a 	add.w	fp, r4, #26
 800b66a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b66c:	ebaa 0303 	sub.w	r3, sl, r3
 800b670:	eba3 0309 	sub.w	r3, r3, r9
 800b674:	4543      	cmp	r3, r8
 800b676:	f77f af79 	ble.w	800b56c <_printf_float+0x240>
 800b67a:	2301      	movs	r3, #1
 800b67c:	465a      	mov	r2, fp
 800b67e:	4631      	mov	r1, r6
 800b680:	4628      	mov	r0, r5
 800b682:	47b8      	blx	r7
 800b684:	3001      	adds	r0, #1
 800b686:	f43f aeac 	beq.w	800b3e2 <_printf_float+0xb6>
 800b68a:	f108 0801 	add.w	r8, r8, #1
 800b68e:	e7ec      	b.n	800b66a <_printf_float+0x33e>
 800b690:	4642      	mov	r2, r8
 800b692:	4631      	mov	r1, r6
 800b694:	4628      	mov	r0, r5
 800b696:	47b8      	blx	r7
 800b698:	3001      	adds	r0, #1
 800b69a:	d1c2      	bne.n	800b622 <_printf_float+0x2f6>
 800b69c:	e6a1      	b.n	800b3e2 <_printf_float+0xb6>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	920a      	str	r2, [sp, #40]	@ 0x28
 800b6a6:	47b8      	blx	r7
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	f43f ae9a 	beq.w	800b3e2 <_printf_float+0xb6>
 800b6ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6b0:	f10b 0b01 	add.w	fp, fp, #1
 800b6b4:	e7bb      	b.n	800b62e <_printf_float+0x302>
 800b6b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6ba:	4631      	mov	r1, r6
 800b6bc:	4628      	mov	r0, r5
 800b6be:	47b8      	blx	r7
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d1c0      	bne.n	800b646 <_printf_float+0x31a>
 800b6c4:	e68d      	b.n	800b3e2 <_printf_float+0xb6>
 800b6c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b6c8:	464b      	mov	r3, r9
 800b6ca:	4442      	add	r2, r8
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	4628      	mov	r0, r5
 800b6d0:	47b8      	blx	r7
 800b6d2:	3001      	adds	r0, #1
 800b6d4:	d1c3      	bne.n	800b65e <_printf_float+0x332>
 800b6d6:	e684      	b.n	800b3e2 <_printf_float+0xb6>
 800b6d8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800b6dc:	f1ba 0f01 	cmp.w	sl, #1
 800b6e0:	dc01      	bgt.n	800b6e6 <_printf_float+0x3ba>
 800b6e2:	07db      	lsls	r3, r3, #31
 800b6e4:	d536      	bpl.n	800b754 <_printf_float+0x428>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	47b8      	blx	r7
 800b6f0:	3001      	adds	r0, #1
 800b6f2:	f43f ae76 	beq.w	800b3e2 <_printf_float+0xb6>
 800b6f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b6fa:	4631      	mov	r1, r6
 800b6fc:	4628      	mov	r0, r5
 800b6fe:	47b8      	blx	r7
 800b700:	3001      	adds	r0, #1
 800b702:	f43f ae6e 	beq.w	800b3e2 <_printf_float+0xb6>
 800b706:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b70a:	2200      	movs	r2, #0
 800b70c:	2300      	movs	r3, #0
 800b70e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b712:	f7f5 f9b1 	bl	8000a78 <__aeabi_dcmpeq>
 800b716:	b9c0      	cbnz	r0, 800b74a <_printf_float+0x41e>
 800b718:	4653      	mov	r3, sl
 800b71a:	f108 0201 	add.w	r2, r8, #1
 800b71e:	4631      	mov	r1, r6
 800b720:	4628      	mov	r0, r5
 800b722:	47b8      	blx	r7
 800b724:	3001      	adds	r0, #1
 800b726:	d10c      	bne.n	800b742 <_printf_float+0x416>
 800b728:	e65b      	b.n	800b3e2 <_printf_float+0xb6>
 800b72a:	2301      	movs	r3, #1
 800b72c:	465a      	mov	r2, fp
 800b72e:	4631      	mov	r1, r6
 800b730:	4628      	mov	r0, r5
 800b732:	47b8      	blx	r7
 800b734:	3001      	adds	r0, #1
 800b736:	f43f ae54 	beq.w	800b3e2 <_printf_float+0xb6>
 800b73a:	f108 0801 	add.w	r8, r8, #1
 800b73e:	45d0      	cmp	r8, sl
 800b740:	dbf3      	blt.n	800b72a <_printf_float+0x3fe>
 800b742:	464b      	mov	r3, r9
 800b744:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b748:	e6df      	b.n	800b50a <_printf_float+0x1de>
 800b74a:	f04f 0800 	mov.w	r8, #0
 800b74e:	f104 0b1a 	add.w	fp, r4, #26
 800b752:	e7f4      	b.n	800b73e <_printf_float+0x412>
 800b754:	2301      	movs	r3, #1
 800b756:	4642      	mov	r2, r8
 800b758:	e7e1      	b.n	800b71e <_printf_float+0x3f2>
 800b75a:	2301      	movs	r3, #1
 800b75c:	464a      	mov	r2, r9
 800b75e:	4631      	mov	r1, r6
 800b760:	4628      	mov	r0, r5
 800b762:	47b8      	blx	r7
 800b764:	3001      	adds	r0, #1
 800b766:	f43f ae3c 	beq.w	800b3e2 <_printf_float+0xb6>
 800b76a:	f108 0801 	add.w	r8, r8, #1
 800b76e:	68e3      	ldr	r3, [r4, #12]
 800b770:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b772:	1a5b      	subs	r3, r3, r1
 800b774:	4543      	cmp	r3, r8
 800b776:	dcf0      	bgt.n	800b75a <_printf_float+0x42e>
 800b778:	e6fc      	b.n	800b574 <_printf_float+0x248>
 800b77a:	f04f 0800 	mov.w	r8, #0
 800b77e:	f104 0919 	add.w	r9, r4, #25
 800b782:	e7f4      	b.n	800b76e <_printf_float+0x442>

0800b784 <_printf_common>:
 800b784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b788:	4616      	mov	r6, r2
 800b78a:	4698      	mov	r8, r3
 800b78c:	688a      	ldr	r2, [r1, #8]
 800b78e:	690b      	ldr	r3, [r1, #16]
 800b790:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b794:	4293      	cmp	r3, r2
 800b796:	bfb8      	it	lt
 800b798:	4613      	movlt	r3, r2
 800b79a:	6033      	str	r3, [r6, #0]
 800b79c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b7a0:	4607      	mov	r7, r0
 800b7a2:	460c      	mov	r4, r1
 800b7a4:	b10a      	cbz	r2, 800b7aa <_printf_common+0x26>
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	6033      	str	r3, [r6, #0]
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	0699      	lsls	r1, r3, #26
 800b7ae:	bf42      	ittt	mi
 800b7b0:	6833      	ldrmi	r3, [r6, #0]
 800b7b2:	3302      	addmi	r3, #2
 800b7b4:	6033      	strmi	r3, [r6, #0]
 800b7b6:	6825      	ldr	r5, [r4, #0]
 800b7b8:	f015 0506 	ands.w	r5, r5, #6
 800b7bc:	d106      	bne.n	800b7cc <_printf_common+0x48>
 800b7be:	f104 0a19 	add.w	sl, r4, #25
 800b7c2:	68e3      	ldr	r3, [r4, #12]
 800b7c4:	6832      	ldr	r2, [r6, #0]
 800b7c6:	1a9b      	subs	r3, r3, r2
 800b7c8:	42ab      	cmp	r3, r5
 800b7ca:	dc26      	bgt.n	800b81a <_printf_common+0x96>
 800b7cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7d0:	6822      	ldr	r2, [r4, #0]
 800b7d2:	3b00      	subs	r3, #0
 800b7d4:	bf18      	it	ne
 800b7d6:	2301      	movne	r3, #1
 800b7d8:	0692      	lsls	r2, r2, #26
 800b7da:	d42b      	bmi.n	800b834 <_printf_common+0xb0>
 800b7dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7e0:	4641      	mov	r1, r8
 800b7e2:	4638      	mov	r0, r7
 800b7e4:	47c8      	blx	r9
 800b7e6:	3001      	adds	r0, #1
 800b7e8:	d01e      	beq.n	800b828 <_printf_common+0xa4>
 800b7ea:	6823      	ldr	r3, [r4, #0]
 800b7ec:	6922      	ldr	r2, [r4, #16]
 800b7ee:	f003 0306 	and.w	r3, r3, #6
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	bf02      	ittt	eq
 800b7f6:	68e5      	ldreq	r5, [r4, #12]
 800b7f8:	6833      	ldreq	r3, [r6, #0]
 800b7fa:	1aed      	subeq	r5, r5, r3
 800b7fc:	68a3      	ldr	r3, [r4, #8]
 800b7fe:	bf0c      	ite	eq
 800b800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b804:	2500      	movne	r5, #0
 800b806:	4293      	cmp	r3, r2
 800b808:	bfc4      	itt	gt
 800b80a:	1a9b      	subgt	r3, r3, r2
 800b80c:	18ed      	addgt	r5, r5, r3
 800b80e:	2600      	movs	r6, #0
 800b810:	341a      	adds	r4, #26
 800b812:	42b5      	cmp	r5, r6
 800b814:	d11a      	bne.n	800b84c <_printf_common+0xc8>
 800b816:	2000      	movs	r0, #0
 800b818:	e008      	b.n	800b82c <_printf_common+0xa8>
 800b81a:	2301      	movs	r3, #1
 800b81c:	4652      	mov	r2, sl
 800b81e:	4641      	mov	r1, r8
 800b820:	4638      	mov	r0, r7
 800b822:	47c8      	blx	r9
 800b824:	3001      	adds	r0, #1
 800b826:	d103      	bne.n	800b830 <_printf_common+0xac>
 800b828:	f04f 30ff 	mov.w	r0, #4294967295
 800b82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b830:	3501      	adds	r5, #1
 800b832:	e7c6      	b.n	800b7c2 <_printf_common+0x3e>
 800b834:	18e1      	adds	r1, r4, r3
 800b836:	1c5a      	adds	r2, r3, #1
 800b838:	2030      	movs	r0, #48	@ 0x30
 800b83a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b83e:	4422      	add	r2, r4
 800b840:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b844:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b848:	3302      	adds	r3, #2
 800b84a:	e7c7      	b.n	800b7dc <_printf_common+0x58>
 800b84c:	2301      	movs	r3, #1
 800b84e:	4622      	mov	r2, r4
 800b850:	4641      	mov	r1, r8
 800b852:	4638      	mov	r0, r7
 800b854:	47c8      	blx	r9
 800b856:	3001      	adds	r0, #1
 800b858:	d0e6      	beq.n	800b828 <_printf_common+0xa4>
 800b85a:	3601      	adds	r6, #1
 800b85c:	e7d9      	b.n	800b812 <_printf_common+0x8e>
	...

0800b860 <_printf_i>:
 800b860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b864:	7e0f      	ldrb	r7, [r1, #24]
 800b866:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b868:	2f78      	cmp	r7, #120	@ 0x78
 800b86a:	4691      	mov	r9, r2
 800b86c:	4680      	mov	r8, r0
 800b86e:	460c      	mov	r4, r1
 800b870:	469a      	mov	sl, r3
 800b872:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b876:	d807      	bhi.n	800b888 <_printf_i+0x28>
 800b878:	2f62      	cmp	r7, #98	@ 0x62
 800b87a:	d80a      	bhi.n	800b892 <_printf_i+0x32>
 800b87c:	2f00      	cmp	r7, #0
 800b87e:	f000 80d2 	beq.w	800ba26 <_printf_i+0x1c6>
 800b882:	2f58      	cmp	r7, #88	@ 0x58
 800b884:	f000 80b9 	beq.w	800b9fa <_printf_i+0x19a>
 800b888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b88c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b890:	e03a      	b.n	800b908 <_printf_i+0xa8>
 800b892:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b896:	2b15      	cmp	r3, #21
 800b898:	d8f6      	bhi.n	800b888 <_printf_i+0x28>
 800b89a:	a101      	add	r1, pc, #4	@ (adr r1, 800b8a0 <_printf_i+0x40>)
 800b89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b8a0:	0800b8f9 	.word	0x0800b8f9
 800b8a4:	0800b90d 	.word	0x0800b90d
 800b8a8:	0800b889 	.word	0x0800b889
 800b8ac:	0800b889 	.word	0x0800b889
 800b8b0:	0800b889 	.word	0x0800b889
 800b8b4:	0800b889 	.word	0x0800b889
 800b8b8:	0800b90d 	.word	0x0800b90d
 800b8bc:	0800b889 	.word	0x0800b889
 800b8c0:	0800b889 	.word	0x0800b889
 800b8c4:	0800b889 	.word	0x0800b889
 800b8c8:	0800b889 	.word	0x0800b889
 800b8cc:	0800ba0d 	.word	0x0800ba0d
 800b8d0:	0800b937 	.word	0x0800b937
 800b8d4:	0800b9c7 	.word	0x0800b9c7
 800b8d8:	0800b889 	.word	0x0800b889
 800b8dc:	0800b889 	.word	0x0800b889
 800b8e0:	0800ba2f 	.word	0x0800ba2f
 800b8e4:	0800b889 	.word	0x0800b889
 800b8e8:	0800b937 	.word	0x0800b937
 800b8ec:	0800b889 	.word	0x0800b889
 800b8f0:	0800b889 	.word	0x0800b889
 800b8f4:	0800b9cf 	.word	0x0800b9cf
 800b8f8:	6833      	ldr	r3, [r6, #0]
 800b8fa:	1d1a      	adds	r2, r3, #4
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	6032      	str	r2, [r6, #0]
 800b900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b904:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b908:	2301      	movs	r3, #1
 800b90a:	e09d      	b.n	800ba48 <_printf_i+0x1e8>
 800b90c:	6833      	ldr	r3, [r6, #0]
 800b90e:	6820      	ldr	r0, [r4, #0]
 800b910:	1d19      	adds	r1, r3, #4
 800b912:	6031      	str	r1, [r6, #0]
 800b914:	0606      	lsls	r6, r0, #24
 800b916:	d501      	bpl.n	800b91c <_printf_i+0xbc>
 800b918:	681d      	ldr	r5, [r3, #0]
 800b91a:	e003      	b.n	800b924 <_printf_i+0xc4>
 800b91c:	0645      	lsls	r5, r0, #25
 800b91e:	d5fb      	bpl.n	800b918 <_printf_i+0xb8>
 800b920:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b924:	2d00      	cmp	r5, #0
 800b926:	da03      	bge.n	800b930 <_printf_i+0xd0>
 800b928:	232d      	movs	r3, #45	@ 0x2d
 800b92a:	426d      	negs	r5, r5
 800b92c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b930:	4859      	ldr	r0, [pc, #356]	@ (800ba98 <_printf_i+0x238>)
 800b932:	230a      	movs	r3, #10
 800b934:	e011      	b.n	800b95a <_printf_i+0xfa>
 800b936:	6821      	ldr	r1, [r4, #0]
 800b938:	6833      	ldr	r3, [r6, #0]
 800b93a:	0608      	lsls	r0, r1, #24
 800b93c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b940:	d402      	bmi.n	800b948 <_printf_i+0xe8>
 800b942:	0649      	lsls	r1, r1, #25
 800b944:	bf48      	it	mi
 800b946:	b2ad      	uxthmi	r5, r5
 800b948:	2f6f      	cmp	r7, #111	@ 0x6f
 800b94a:	4853      	ldr	r0, [pc, #332]	@ (800ba98 <_printf_i+0x238>)
 800b94c:	6033      	str	r3, [r6, #0]
 800b94e:	bf14      	ite	ne
 800b950:	230a      	movne	r3, #10
 800b952:	2308      	moveq	r3, #8
 800b954:	2100      	movs	r1, #0
 800b956:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b95a:	6866      	ldr	r6, [r4, #4]
 800b95c:	60a6      	str	r6, [r4, #8]
 800b95e:	2e00      	cmp	r6, #0
 800b960:	bfa2      	ittt	ge
 800b962:	6821      	ldrge	r1, [r4, #0]
 800b964:	f021 0104 	bicge.w	r1, r1, #4
 800b968:	6021      	strge	r1, [r4, #0]
 800b96a:	b90d      	cbnz	r5, 800b970 <_printf_i+0x110>
 800b96c:	2e00      	cmp	r6, #0
 800b96e:	d04b      	beq.n	800ba08 <_printf_i+0x1a8>
 800b970:	4616      	mov	r6, r2
 800b972:	fbb5 f1f3 	udiv	r1, r5, r3
 800b976:	fb03 5711 	mls	r7, r3, r1, r5
 800b97a:	5dc7      	ldrb	r7, [r0, r7]
 800b97c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b980:	462f      	mov	r7, r5
 800b982:	42bb      	cmp	r3, r7
 800b984:	460d      	mov	r5, r1
 800b986:	d9f4      	bls.n	800b972 <_printf_i+0x112>
 800b988:	2b08      	cmp	r3, #8
 800b98a:	d10b      	bne.n	800b9a4 <_printf_i+0x144>
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	07df      	lsls	r7, r3, #31
 800b990:	d508      	bpl.n	800b9a4 <_printf_i+0x144>
 800b992:	6923      	ldr	r3, [r4, #16]
 800b994:	6861      	ldr	r1, [r4, #4]
 800b996:	4299      	cmp	r1, r3
 800b998:	bfde      	ittt	le
 800b99a:	2330      	movle	r3, #48	@ 0x30
 800b99c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b9a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b9a4:	1b92      	subs	r2, r2, r6
 800b9a6:	6122      	str	r2, [r4, #16]
 800b9a8:	f8cd a000 	str.w	sl, [sp]
 800b9ac:	464b      	mov	r3, r9
 800b9ae:	aa03      	add	r2, sp, #12
 800b9b0:	4621      	mov	r1, r4
 800b9b2:	4640      	mov	r0, r8
 800b9b4:	f7ff fee6 	bl	800b784 <_printf_common>
 800b9b8:	3001      	adds	r0, #1
 800b9ba:	d14a      	bne.n	800ba52 <_printf_i+0x1f2>
 800b9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c0:	b004      	add	sp, #16
 800b9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	f043 0320 	orr.w	r3, r3, #32
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	4833      	ldr	r0, [pc, #204]	@ (800ba9c <_printf_i+0x23c>)
 800b9d0:	2778      	movs	r7, #120	@ 0x78
 800b9d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	6831      	ldr	r1, [r6, #0]
 800b9da:	061f      	lsls	r7, r3, #24
 800b9dc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9e0:	d402      	bmi.n	800b9e8 <_printf_i+0x188>
 800b9e2:	065f      	lsls	r7, r3, #25
 800b9e4:	bf48      	it	mi
 800b9e6:	b2ad      	uxthmi	r5, r5
 800b9e8:	6031      	str	r1, [r6, #0]
 800b9ea:	07d9      	lsls	r1, r3, #31
 800b9ec:	bf44      	itt	mi
 800b9ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b9f2:	6023      	strmi	r3, [r4, #0]
 800b9f4:	b11d      	cbz	r5, 800b9fe <_printf_i+0x19e>
 800b9f6:	2310      	movs	r3, #16
 800b9f8:	e7ac      	b.n	800b954 <_printf_i+0xf4>
 800b9fa:	4827      	ldr	r0, [pc, #156]	@ (800ba98 <_printf_i+0x238>)
 800b9fc:	e7e9      	b.n	800b9d2 <_printf_i+0x172>
 800b9fe:	6823      	ldr	r3, [r4, #0]
 800ba00:	f023 0320 	bic.w	r3, r3, #32
 800ba04:	6023      	str	r3, [r4, #0]
 800ba06:	e7f6      	b.n	800b9f6 <_printf_i+0x196>
 800ba08:	4616      	mov	r6, r2
 800ba0a:	e7bd      	b.n	800b988 <_printf_i+0x128>
 800ba0c:	6833      	ldr	r3, [r6, #0]
 800ba0e:	6825      	ldr	r5, [r4, #0]
 800ba10:	6961      	ldr	r1, [r4, #20]
 800ba12:	1d18      	adds	r0, r3, #4
 800ba14:	6030      	str	r0, [r6, #0]
 800ba16:	062e      	lsls	r6, r5, #24
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	d501      	bpl.n	800ba20 <_printf_i+0x1c0>
 800ba1c:	6019      	str	r1, [r3, #0]
 800ba1e:	e002      	b.n	800ba26 <_printf_i+0x1c6>
 800ba20:	0668      	lsls	r0, r5, #25
 800ba22:	d5fb      	bpl.n	800ba1c <_printf_i+0x1bc>
 800ba24:	8019      	strh	r1, [r3, #0]
 800ba26:	2300      	movs	r3, #0
 800ba28:	6123      	str	r3, [r4, #16]
 800ba2a:	4616      	mov	r6, r2
 800ba2c:	e7bc      	b.n	800b9a8 <_printf_i+0x148>
 800ba2e:	6833      	ldr	r3, [r6, #0]
 800ba30:	1d1a      	adds	r2, r3, #4
 800ba32:	6032      	str	r2, [r6, #0]
 800ba34:	681e      	ldr	r6, [r3, #0]
 800ba36:	6862      	ldr	r2, [r4, #4]
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7f4 fba0 	bl	8000180 <memchr>
 800ba40:	b108      	cbz	r0, 800ba46 <_printf_i+0x1e6>
 800ba42:	1b80      	subs	r0, r0, r6
 800ba44:	6060      	str	r0, [r4, #4]
 800ba46:	6863      	ldr	r3, [r4, #4]
 800ba48:	6123      	str	r3, [r4, #16]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba50:	e7aa      	b.n	800b9a8 <_printf_i+0x148>
 800ba52:	6923      	ldr	r3, [r4, #16]
 800ba54:	4632      	mov	r2, r6
 800ba56:	4649      	mov	r1, r9
 800ba58:	4640      	mov	r0, r8
 800ba5a:	47d0      	blx	sl
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d0ad      	beq.n	800b9bc <_printf_i+0x15c>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	079b      	lsls	r3, r3, #30
 800ba64:	d413      	bmi.n	800ba8e <_printf_i+0x22e>
 800ba66:	68e0      	ldr	r0, [r4, #12]
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	4298      	cmp	r0, r3
 800ba6c:	bfb8      	it	lt
 800ba6e:	4618      	movlt	r0, r3
 800ba70:	e7a6      	b.n	800b9c0 <_printf_i+0x160>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4632      	mov	r2, r6
 800ba76:	4649      	mov	r1, r9
 800ba78:	4640      	mov	r0, r8
 800ba7a:	47d0      	blx	sl
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d09d      	beq.n	800b9bc <_printf_i+0x15c>
 800ba80:	3501      	adds	r5, #1
 800ba82:	68e3      	ldr	r3, [r4, #12]
 800ba84:	9903      	ldr	r1, [sp, #12]
 800ba86:	1a5b      	subs	r3, r3, r1
 800ba88:	42ab      	cmp	r3, r5
 800ba8a:	dcf2      	bgt.n	800ba72 <_printf_i+0x212>
 800ba8c:	e7eb      	b.n	800ba66 <_printf_i+0x206>
 800ba8e:	2500      	movs	r5, #0
 800ba90:	f104 0619 	add.w	r6, r4, #25
 800ba94:	e7f5      	b.n	800ba82 <_printf_i+0x222>
 800ba96:	bf00      	nop
 800ba98:	0800e639 	.word	0x0800e639
 800ba9c:	0800e64a 	.word	0x0800e64a

0800baa0 <std>:
 800baa0:	2300      	movs	r3, #0
 800baa2:	b510      	push	{r4, lr}
 800baa4:	4604      	mov	r4, r0
 800baa6:	e9c0 3300 	strd	r3, r3, [r0]
 800baaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800baae:	6083      	str	r3, [r0, #8]
 800bab0:	8181      	strh	r1, [r0, #12]
 800bab2:	6643      	str	r3, [r0, #100]	@ 0x64
 800bab4:	81c2      	strh	r2, [r0, #14]
 800bab6:	6183      	str	r3, [r0, #24]
 800bab8:	4619      	mov	r1, r3
 800baba:	2208      	movs	r2, #8
 800babc:	305c      	adds	r0, #92	@ 0x5c
 800babe:	f000 f906 	bl	800bcce <memset>
 800bac2:	4b0d      	ldr	r3, [pc, #52]	@ (800baf8 <std+0x58>)
 800bac4:	6263      	str	r3, [r4, #36]	@ 0x24
 800bac6:	4b0d      	ldr	r3, [pc, #52]	@ (800bafc <std+0x5c>)
 800bac8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800baca:	4b0d      	ldr	r3, [pc, #52]	@ (800bb00 <std+0x60>)
 800bacc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bace:	4b0d      	ldr	r3, [pc, #52]	@ (800bb04 <std+0x64>)
 800bad0:	6323      	str	r3, [r4, #48]	@ 0x30
 800bad2:	4b0d      	ldr	r3, [pc, #52]	@ (800bb08 <std+0x68>)
 800bad4:	6224      	str	r4, [r4, #32]
 800bad6:	429c      	cmp	r4, r3
 800bad8:	d006      	beq.n	800bae8 <std+0x48>
 800bada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bade:	4294      	cmp	r4, r2
 800bae0:	d002      	beq.n	800bae8 <std+0x48>
 800bae2:	33d0      	adds	r3, #208	@ 0xd0
 800bae4:	429c      	cmp	r4, r3
 800bae6:	d105      	bne.n	800baf4 <std+0x54>
 800bae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800baec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800baf0:	f000 b97a 	b.w	800bde8 <__retarget_lock_init_recursive>
 800baf4:	bd10      	pop	{r4, pc}
 800baf6:	bf00      	nop
 800baf8:	0800bc49 	.word	0x0800bc49
 800bafc:	0800bc6b 	.word	0x0800bc6b
 800bb00:	0800bca3 	.word	0x0800bca3
 800bb04:	0800bcc7 	.word	0x0800bcc7
 800bb08:	20000e54 	.word	0x20000e54

0800bb0c <stdio_exit_handler>:
 800bb0c:	4a02      	ldr	r2, [pc, #8]	@ (800bb18 <stdio_exit_handler+0xc>)
 800bb0e:	4903      	ldr	r1, [pc, #12]	@ (800bb1c <stdio_exit_handler+0x10>)
 800bb10:	4803      	ldr	r0, [pc, #12]	@ (800bb20 <stdio_exit_handler+0x14>)
 800bb12:	f000 b869 	b.w	800bbe8 <_fwalk_sglue>
 800bb16:	bf00      	nop
 800bb18:	20000020 	.word	0x20000020
 800bb1c:	0800d5c5 	.word	0x0800d5c5
 800bb20:	20000030 	.word	0x20000030

0800bb24 <cleanup_stdio>:
 800bb24:	6841      	ldr	r1, [r0, #4]
 800bb26:	4b0c      	ldr	r3, [pc, #48]	@ (800bb58 <cleanup_stdio+0x34>)
 800bb28:	4299      	cmp	r1, r3
 800bb2a:	b510      	push	{r4, lr}
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	d001      	beq.n	800bb34 <cleanup_stdio+0x10>
 800bb30:	f001 fd48 	bl	800d5c4 <_fflush_r>
 800bb34:	68a1      	ldr	r1, [r4, #8]
 800bb36:	4b09      	ldr	r3, [pc, #36]	@ (800bb5c <cleanup_stdio+0x38>)
 800bb38:	4299      	cmp	r1, r3
 800bb3a:	d002      	beq.n	800bb42 <cleanup_stdio+0x1e>
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f001 fd41 	bl	800d5c4 <_fflush_r>
 800bb42:	68e1      	ldr	r1, [r4, #12]
 800bb44:	4b06      	ldr	r3, [pc, #24]	@ (800bb60 <cleanup_stdio+0x3c>)
 800bb46:	4299      	cmp	r1, r3
 800bb48:	d004      	beq.n	800bb54 <cleanup_stdio+0x30>
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb50:	f001 bd38 	b.w	800d5c4 <_fflush_r>
 800bb54:	bd10      	pop	{r4, pc}
 800bb56:	bf00      	nop
 800bb58:	20000e54 	.word	0x20000e54
 800bb5c:	20000ebc 	.word	0x20000ebc
 800bb60:	20000f24 	.word	0x20000f24

0800bb64 <global_stdio_init.part.0>:
 800bb64:	b510      	push	{r4, lr}
 800bb66:	4b0b      	ldr	r3, [pc, #44]	@ (800bb94 <global_stdio_init.part.0+0x30>)
 800bb68:	4c0b      	ldr	r4, [pc, #44]	@ (800bb98 <global_stdio_init.part.0+0x34>)
 800bb6a:	4a0c      	ldr	r2, [pc, #48]	@ (800bb9c <global_stdio_init.part.0+0x38>)
 800bb6c:	601a      	str	r2, [r3, #0]
 800bb6e:	4620      	mov	r0, r4
 800bb70:	2200      	movs	r2, #0
 800bb72:	2104      	movs	r1, #4
 800bb74:	f7ff ff94 	bl	800baa0 <std>
 800bb78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	2109      	movs	r1, #9
 800bb80:	f7ff ff8e 	bl	800baa0 <std>
 800bb84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bb88:	2202      	movs	r2, #2
 800bb8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb8e:	2112      	movs	r1, #18
 800bb90:	f7ff bf86 	b.w	800baa0 <std>
 800bb94:	20000f8c 	.word	0x20000f8c
 800bb98:	20000e54 	.word	0x20000e54
 800bb9c:	0800bb0d 	.word	0x0800bb0d

0800bba0 <__sfp_lock_acquire>:
 800bba0:	4801      	ldr	r0, [pc, #4]	@ (800bba8 <__sfp_lock_acquire+0x8>)
 800bba2:	f000 b922 	b.w	800bdea <__retarget_lock_acquire_recursive>
 800bba6:	bf00      	nop
 800bba8:	20000f95 	.word	0x20000f95

0800bbac <__sfp_lock_release>:
 800bbac:	4801      	ldr	r0, [pc, #4]	@ (800bbb4 <__sfp_lock_release+0x8>)
 800bbae:	f000 b91d 	b.w	800bdec <__retarget_lock_release_recursive>
 800bbb2:	bf00      	nop
 800bbb4:	20000f95 	.word	0x20000f95

0800bbb8 <__sinit>:
 800bbb8:	b510      	push	{r4, lr}
 800bbba:	4604      	mov	r4, r0
 800bbbc:	f7ff fff0 	bl	800bba0 <__sfp_lock_acquire>
 800bbc0:	6a23      	ldr	r3, [r4, #32]
 800bbc2:	b11b      	cbz	r3, 800bbcc <__sinit+0x14>
 800bbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbc8:	f7ff bff0 	b.w	800bbac <__sfp_lock_release>
 800bbcc:	4b04      	ldr	r3, [pc, #16]	@ (800bbe0 <__sinit+0x28>)
 800bbce:	6223      	str	r3, [r4, #32]
 800bbd0:	4b04      	ldr	r3, [pc, #16]	@ (800bbe4 <__sinit+0x2c>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d1f5      	bne.n	800bbc4 <__sinit+0xc>
 800bbd8:	f7ff ffc4 	bl	800bb64 <global_stdio_init.part.0>
 800bbdc:	e7f2      	b.n	800bbc4 <__sinit+0xc>
 800bbde:	bf00      	nop
 800bbe0:	0800bb25 	.word	0x0800bb25
 800bbe4:	20000f8c 	.word	0x20000f8c

0800bbe8 <_fwalk_sglue>:
 800bbe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbec:	4607      	mov	r7, r0
 800bbee:	4688      	mov	r8, r1
 800bbf0:	4614      	mov	r4, r2
 800bbf2:	2600      	movs	r6, #0
 800bbf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bbf8:	f1b9 0901 	subs.w	r9, r9, #1
 800bbfc:	d505      	bpl.n	800bc0a <_fwalk_sglue+0x22>
 800bbfe:	6824      	ldr	r4, [r4, #0]
 800bc00:	2c00      	cmp	r4, #0
 800bc02:	d1f7      	bne.n	800bbf4 <_fwalk_sglue+0xc>
 800bc04:	4630      	mov	r0, r6
 800bc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc0a:	89ab      	ldrh	r3, [r5, #12]
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d907      	bls.n	800bc20 <_fwalk_sglue+0x38>
 800bc10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc14:	3301      	adds	r3, #1
 800bc16:	d003      	beq.n	800bc20 <_fwalk_sglue+0x38>
 800bc18:	4629      	mov	r1, r5
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	47c0      	blx	r8
 800bc1e:	4306      	orrs	r6, r0
 800bc20:	3568      	adds	r5, #104	@ 0x68
 800bc22:	e7e9      	b.n	800bbf8 <_fwalk_sglue+0x10>

0800bc24 <iprintf>:
 800bc24:	b40f      	push	{r0, r1, r2, r3}
 800bc26:	b507      	push	{r0, r1, r2, lr}
 800bc28:	4906      	ldr	r1, [pc, #24]	@ (800bc44 <iprintf+0x20>)
 800bc2a:	ab04      	add	r3, sp, #16
 800bc2c:	6808      	ldr	r0, [r1, #0]
 800bc2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc32:	6881      	ldr	r1, [r0, #8]
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	f001 fb2d 	bl	800d294 <_vfiprintf_r>
 800bc3a:	b003      	add	sp, #12
 800bc3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc40:	b004      	add	sp, #16
 800bc42:	4770      	bx	lr
 800bc44:	2000002c 	.word	0x2000002c

0800bc48 <__sread>:
 800bc48:	b510      	push	{r4, lr}
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc50:	f000 f86c 	bl	800bd2c <_read_r>
 800bc54:	2800      	cmp	r0, #0
 800bc56:	bfab      	itete	ge
 800bc58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bc5a:	89a3      	ldrhlt	r3, [r4, #12]
 800bc5c:	181b      	addge	r3, r3, r0
 800bc5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bc62:	bfac      	ite	ge
 800bc64:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bc66:	81a3      	strhlt	r3, [r4, #12]
 800bc68:	bd10      	pop	{r4, pc}

0800bc6a <__swrite>:
 800bc6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6e:	461f      	mov	r7, r3
 800bc70:	898b      	ldrh	r3, [r1, #12]
 800bc72:	05db      	lsls	r3, r3, #23
 800bc74:	4605      	mov	r5, r0
 800bc76:	460c      	mov	r4, r1
 800bc78:	4616      	mov	r6, r2
 800bc7a:	d505      	bpl.n	800bc88 <__swrite+0x1e>
 800bc7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc80:	2302      	movs	r3, #2
 800bc82:	2200      	movs	r2, #0
 800bc84:	f000 f840 	bl	800bd08 <_lseek_r>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bc92:	81a3      	strh	r3, [r4, #12]
 800bc94:	4632      	mov	r2, r6
 800bc96:	463b      	mov	r3, r7
 800bc98:	4628      	mov	r0, r5
 800bc9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc9e:	f000 b867 	b.w	800bd70 <_write_r>

0800bca2 <__sseek>:
 800bca2:	b510      	push	{r4, lr}
 800bca4:	460c      	mov	r4, r1
 800bca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcaa:	f000 f82d 	bl	800bd08 <_lseek_r>
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	bf15      	itete	ne
 800bcb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bcb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bcba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bcbe:	81a3      	strheq	r3, [r4, #12]
 800bcc0:	bf18      	it	ne
 800bcc2:	81a3      	strhne	r3, [r4, #12]
 800bcc4:	bd10      	pop	{r4, pc}

0800bcc6 <__sclose>:
 800bcc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcca:	f000 b80d 	b.w	800bce8 <_close_r>

0800bcce <memset>:
 800bcce:	4402      	add	r2, r0
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d100      	bne.n	800bcd8 <memset+0xa>
 800bcd6:	4770      	bx	lr
 800bcd8:	f803 1b01 	strb.w	r1, [r3], #1
 800bcdc:	e7f9      	b.n	800bcd2 <memset+0x4>
	...

0800bce0 <_localeconv_r>:
 800bce0:	4800      	ldr	r0, [pc, #0]	@ (800bce4 <_localeconv_r+0x4>)
 800bce2:	4770      	bx	lr
 800bce4:	2000016c 	.word	0x2000016c

0800bce8 <_close_r>:
 800bce8:	b538      	push	{r3, r4, r5, lr}
 800bcea:	4d06      	ldr	r5, [pc, #24]	@ (800bd04 <_close_r+0x1c>)
 800bcec:	2300      	movs	r3, #0
 800bcee:	4604      	mov	r4, r0
 800bcf0:	4608      	mov	r0, r1
 800bcf2:	602b      	str	r3, [r5, #0]
 800bcf4:	f7f6 f8bc 	bl	8001e70 <_close>
 800bcf8:	1c43      	adds	r3, r0, #1
 800bcfa:	d102      	bne.n	800bd02 <_close_r+0x1a>
 800bcfc:	682b      	ldr	r3, [r5, #0]
 800bcfe:	b103      	cbz	r3, 800bd02 <_close_r+0x1a>
 800bd00:	6023      	str	r3, [r4, #0]
 800bd02:	bd38      	pop	{r3, r4, r5, pc}
 800bd04:	20000f90 	.word	0x20000f90

0800bd08 <_lseek_r>:
 800bd08:	b538      	push	{r3, r4, r5, lr}
 800bd0a:	4d07      	ldr	r5, [pc, #28]	@ (800bd28 <_lseek_r+0x20>)
 800bd0c:	4604      	mov	r4, r0
 800bd0e:	4608      	mov	r0, r1
 800bd10:	4611      	mov	r1, r2
 800bd12:	2200      	movs	r2, #0
 800bd14:	602a      	str	r2, [r5, #0]
 800bd16:	461a      	mov	r2, r3
 800bd18:	f7f6 f8b4 	bl	8001e84 <_lseek>
 800bd1c:	1c43      	adds	r3, r0, #1
 800bd1e:	d102      	bne.n	800bd26 <_lseek_r+0x1e>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	b103      	cbz	r3, 800bd26 <_lseek_r+0x1e>
 800bd24:	6023      	str	r3, [r4, #0]
 800bd26:	bd38      	pop	{r3, r4, r5, pc}
 800bd28:	20000f90 	.word	0x20000f90

0800bd2c <_read_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	4d07      	ldr	r5, [pc, #28]	@ (800bd4c <_read_r+0x20>)
 800bd30:	4604      	mov	r4, r0
 800bd32:	4608      	mov	r0, r1
 800bd34:	4611      	mov	r1, r2
 800bd36:	2200      	movs	r2, #0
 800bd38:	602a      	str	r2, [r5, #0]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f7f6 f87a 	bl	8001e34 <_read>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d102      	bne.n	800bd4a <_read_r+0x1e>
 800bd44:	682b      	ldr	r3, [r5, #0]
 800bd46:	b103      	cbz	r3, 800bd4a <_read_r+0x1e>
 800bd48:	6023      	str	r3, [r4, #0]
 800bd4a:	bd38      	pop	{r3, r4, r5, pc}
 800bd4c:	20000f90 	.word	0x20000f90

0800bd50 <_sbrk_r>:
 800bd50:	b538      	push	{r3, r4, r5, lr}
 800bd52:	4d06      	ldr	r5, [pc, #24]	@ (800bd6c <_sbrk_r+0x1c>)
 800bd54:	2300      	movs	r3, #0
 800bd56:	4604      	mov	r4, r0
 800bd58:	4608      	mov	r0, r1
 800bd5a:	602b      	str	r3, [r5, #0]
 800bd5c:	f7f6 f894 	bl	8001e88 <_sbrk>
 800bd60:	1c43      	adds	r3, r0, #1
 800bd62:	d102      	bne.n	800bd6a <_sbrk_r+0x1a>
 800bd64:	682b      	ldr	r3, [r5, #0]
 800bd66:	b103      	cbz	r3, 800bd6a <_sbrk_r+0x1a>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd38      	pop	{r3, r4, r5, pc}
 800bd6c:	20000f90 	.word	0x20000f90

0800bd70 <_write_r>:
 800bd70:	b538      	push	{r3, r4, r5, lr}
 800bd72:	4d07      	ldr	r5, [pc, #28]	@ (800bd90 <_write_r+0x20>)
 800bd74:	4604      	mov	r4, r0
 800bd76:	4608      	mov	r0, r1
 800bd78:	4611      	mov	r1, r2
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	602a      	str	r2, [r5, #0]
 800bd7e:	461a      	mov	r2, r3
 800bd80:	f7f6 f868 	bl	8001e54 <_write>
 800bd84:	1c43      	adds	r3, r0, #1
 800bd86:	d102      	bne.n	800bd8e <_write_r+0x1e>
 800bd88:	682b      	ldr	r3, [r5, #0]
 800bd8a:	b103      	cbz	r3, 800bd8e <_write_r+0x1e>
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	bd38      	pop	{r3, r4, r5, pc}
 800bd90:	20000f90 	.word	0x20000f90

0800bd94 <__errno>:
 800bd94:	4b01      	ldr	r3, [pc, #4]	@ (800bd9c <__errno+0x8>)
 800bd96:	6818      	ldr	r0, [r3, #0]
 800bd98:	4770      	bx	lr
 800bd9a:	bf00      	nop
 800bd9c:	2000002c 	.word	0x2000002c

0800bda0 <__libc_init_array>:
 800bda0:	b570      	push	{r4, r5, r6, lr}
 800bda2:	4d0d      	ldr	r5, [pc, #52]	@ (800bdd8 <__libc_init_array+0x38>)
 800bda4:	4c0d      	ldr	r4, [pc, #52]	@ (800bddc <__libc_init_array+0x3c>)
 800bda6:	1b64      	subs	r4, r4, r5
 800bda8:	10a4      	asrs	r4, r4, #2
 800bdaa:	2600      	movs	r6, #0
 800bdac:	42a6      	cmp	r6, r4
 800bdae:	d109      	bne.n	800bdc4 <__libc_init_array+0x24>
 800bdb0:	4d0b      	ldr	r5, [pc, #44]	@ (800bde0 <__libc_init_array+0x40>)
 800bdb2:	4c0c      	ldr	r4, [pc, #48]	@ (800bde4 <__libc_init_array+0x44>)
 800bdb4:	f001 fdf6 	bl	800d9a4 <_init>
 800bdb8:	1b64      	subs	r4, r4, r5
 800bdba:	10a4      	asrs	r4, r4, #2
 800bdbc:	2600      	movs	r6, #0
 800bdbe:	42a6      	cmp	r6, r4
 800bdc0:	d105      	bne.n	800bdce <__libc_init_array+0x2e>
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}
 800bdc4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdc8:	4798      	blx	r3
 800bdca:	3601      	adds	r6, #1
 800bdcc:	e7ee      	b.n	800bdac <__libc_init_array+0xc>
 800bdce:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdd2:	4798      	blx	r3
 800bdd4:	3601      	adds	r6, #1
 800bdd6:	e7f2      	b.n	800bdbe <__libc_init_array+0x1e>
 800bdd8:	0800e9a0 	.word	0x0800e9a0
 800bddc:	0800e9a0 	.word	0x0800e9a0
 800bde0:	0800e9a0 	.word	0x0800e9a0
 800bde4:	0800e9a4 	.word	0x0800e9a4

0800bde8 <__retarget_lock_init_recursive>:
 800bde8:	4770      	bx	lr

0800bdea <__retarget_lock_acquire_recursive>:
 800bdea:	4770      	bx	lr

0800bdec <__retarget_lock_release_recursive>:
 800bdec:	4770      	bx	lr

0800bdee <memcpy>:
 800bdee:	440a      	add	r2, r1
 800bdf0:	4291      	cmp	r1, r2
 800bdf2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdf6:	d100      	bne.n	800bdfa <memcpy+0xc>
 800bdf8:	4770      	bx	lr
 800bdfa:	b510      	push	{r4, lr}
 800bdfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be04:	4291      	cmp	r1, r2
 800be06:	d1f9      	bne.n	800bdfc <memcpy+0xe>
 800be08:	bd10      	pop	{r4, pc}

0800be0a <quorem>:
 800be0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be0e:	6903      	ldr	r3, [r0, #16]
 800be10:	690c      	ldr	r4, [r1, #16]
 800be12:	42a3      	cmp	r3, r4
 800be14:	4607      	mov	r7, r0
 800be16:	db7e      	blt.n	800bf16 <quorem+0x10c>
 800be18:	3c01      	subs	r4, #1
 800be1a:	f101 0814 	add.w	r8, r1, #20
 800be1e:	00a3      	lsls	r3, r4, #2
 800be20:	f100 0514 	add.w	r5, r0, #20
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800be30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800be34:	3301      	adds	r3, #1
 800be36:	429a      	cmp	r2, r3
 800be38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800be3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800be40:	d32e      	bcc.n	800bea0 <quorem+0x96>
 800be42:	f04f 0a00 	mov.w	sl, #0
 800be46:	46c4      	mov	ip, r8
 800be48:	46ae      	mov	lr, r5
 800be4a:	46d3      	mov	fp, sl
 800be4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800be50:	b298      	uxth	r0, r3
 800be52:	fb06 a000 	mla	r0, r6, r0, sl
 800be56:	0c02      	lsrs	r2, r0, #16
 800be58:	0c1b      	lsrs	r3, r3, #16
 800be5a:	fb06 2303 	mla	r3, r6, r3, r2
 800be5e:	f8de 2000 	ldr.w	r2, [lr]
 800be62:	b280      	uxth	r0, r0
 800be64:	b292      	uxth	r2, r2
 800be66:	1a12      	subs	r2, r2, r0
 800be68:	445a      	add	r2, fp
 800be6a:	f8de 0000 	ldr.w	r0, [lr]
 800be6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be72:	b29b      	uxth	r3, r3
 800be74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800be78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800be7c:	b292      	uxth	r2, r2
 800be7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be82:	45e1      	cmp	r9, ip
 800be84:	f84e 2b04 	str.w	r2, [lr], #4
 800be88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800be8c:	d2de      	bcs.n	800be4c <quorem+0x42>
 800be8e:	9b00      	ldr	r3, [sp, #0]
 800be90:	58eb      	ldr	r3, [r5, r3]
 800be92:	b92b      	cbnz	r3, 800bea0 <quorem+0x96>
 800be94:	9b01      	ldr	r3, [sp, #4]
 800be96:	3b04      	subs	r3, #4
 800be98:	429d      	cmp	r5, r3
 800be9a:	461a      	mov	r2, r3
 800be9c:	d32f      	bcc.n	800befe <quorem+0xf4>
 800be9e:	613c      	str	r4, [r7, #16]
 800bea0:	4638      	mov	r0, r7
 800bea2:	f001 f8c9 	bl	800d038 <__mcmp>
 800bea6:	2800      	cmp	r0, #0
 800bea8:	db25      	blt.n	800bef6 <quorem+0xec>
 800beaa:	4629      	mov	r1, r5
 800beac:	2000      	movs	r0, #0
 800beae:	f858 2b04 	ldr.w	r2, [r8], #4
 800beb2:	f8d1 c000 	ldr.w	ip, [r1]
 800beb6:	fa1f fe82 	uxth.w	lr, r2
 800beba:	fa1f f38c 	uxth.w	r3, ip
 800bebe:	eba3 030e 	sub.w	r3, r3, lr
 800bec2:	4403      	add	r3, r0
 800bec4:	0c12      	lsrs	r2, r2, #16
 800bec6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800beca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bece:	b29b      	uxth	r3, r3
 800bed0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bed4:	45c1      	cmp	r9, r8
 800bed6:	f841 3b04 	str.w	r3, [r1], #4
 800beda:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bede:	d2e6      	bcs.n	800beae <quorem+0xa4>
 800bee0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bee4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bee8:	b922      	cbnz	r2, 800bef4 <quorem+0xea>
 800beea:	3b04      	subs	r3, #4
 800beec:	429d      	cmp	r5, r3
 800beee:	461a      	mov	r2, r3
 800bef0:	d30b      	bcc.n	800bf0a <quorem+0x100>
 800bef2:	613c      	str	r4, [r7, #16]
 800bef4:	3601      	adds	r6, #1
 800bef6:	4630      	mov	r0, r6
 800bef8:	b003      	add	sp, #12
 800befa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befe:	6812      	ldr	r2, [r2, #0]
 800bf00:	3b04      	subs	r3, #4
 800bf02:	2a00      	cmp	r2, #0
 800bf04:	d1cb      	bne.n	800be9e <quorem+0x94>
 800bf06:	3c01      	subs	r4, #1
 800bf08:	e7c6      	b.n	800be98 <quorem+0x8e>
 800bf0a:	6812      	ldr	r2, [r2, #0]
 800bf0c:	3b04      	subs	r3, #4
 800bf0e:	2a00      	cmp	r2, #0
 800bf10:	d1ef      	bne.n	800bef2 <quorem+0xe8>
 800bf12:	3c01      	subs	r4, #1
 800bf14:	e7ea      	b.n	800beec <quorem+0xe2>
 800bf16:	2000      	movs	r0, #0
 800bf18:	e7ee      	b.n	800bef8 <quorem+0xee>
 800bf1a:	0000      	movs	r0, r0
 800bf1c:	0000      	movs	r0, r0
	...

0800bf20 <_dtoa_r>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	69c7      	ldr	r7, [r0, #28]
 800bf26:	b097      	sub	sp, #92	@ 0x5c
 800bf28:	4614      	mov	r4, r2
 800bf2a:	461d      	mov	r5, r3
 800bf2c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bf30:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800bf32:	4683      	mov	fp, r0
 800bf34:	b97f      	cbnz	r7, 800bf56 <_dtoa_r+0x36>
 800bf36:	2010      	movs	r0, #16
 800bf38:	f7ff f89c 	bl	800b074 <malloc>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	f8cb 001c 	str.w	r0, [fp, #28]
 800bf42:	b920      	cbnz	r0, 800bf4e <_dtoa_r+0x2e>
 800bf44:	4ba8      	ldr	r3, [pc, #672]	@ (800c1e8 <_dtoa_r+0x2c8>)
 800bf46:	21ef      	movs	r1, #239	@ 0xef
 800bf48:	48a8      	ldr	r0, [pc, #672]	@ (800c1ec <_dtoa_r+0x2cc>)
 800bf4a:	f001 fbf7 	bl	800d73c <__assert_func>
 800bf4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bf52:	6007      	str	r7, [r0, #0]
 800bf54:	60c7      	str	r7, [r0, #12]
 800bf56:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf5a:	6819      	ldr	r1, [r3, #0]
 800bf5c:	b159      	cbz	r1, 800bf76 <_dtoa_r+0x56>
 800bf5e:	685a      	ldr	r2, [r3, #4]
 800bf60:	604a      	str	r2, [r1, #4]
 800bf62:	2301      	movs	r3, #1
 800bf64:	4093      	lsls	r3, r2
 800bf66:	608b      	str	r3, [r1, #8]
 800bf68:	4658      	mov	r0, fp
 800bf6a:	f000 fe2b 	bl	800cbc4 <_Bfree>
 800bf6e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	1e2b      	subs	r3, r5, #0
 800bf78:	bfb9      	ittee	lt
 800bf7a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bf7e:	9303      	strlt	r3, [sp, #12]
 800bf80:	2300      	movge	r3, #0
 800bf82:	6033      	strge	r3, [r6, #0]
 800bf84:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bf88:	4b99      	ldr	r3, [pc, #612]	@ (800c1f0 <_dtoa_r+0x2d0>)
 800bf8a:	bfbc      	itt	lt
 800bf8c:	2201      	movlt	r2, #1
 800bf8e:	6032      	strlt	r2, [r6, #0]
 800bf90:	ea33 0308 	bics.w	r3, r3, r8
 800bf94:	d112      	bne.n	800bfbc <_dtoa_r+0x9c>
 800bf96:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bf98:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bf9c:	6013      	str	r3, [r2, #0]
 800bf9e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bfa2:	4323      	orrs	r3, r4
 800bfa4:	f000 8551 	beq.w	800ca4a <_dtoa_r+0xb2a>
 800bfa8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bfaa:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800c1f4 <_dtoa_r+0x2d4>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f000 8553 	beq.w	800ca5a <_dtoa_r+0xb3a>
 800bfb4:	f10a 0303 	add.w	r3, sl, #3
 800bfb8:	f000 bd4d 	b.w	800ca56 <_dtoa_r+0xb36>
 800bfbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfc0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bfc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bfc8:	2200      	movs	r2, #0
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f7f4 fd54 	bl	8000a78 <__aeabi_dcmpeq>
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	b158      	cbz	r0, 800bfec <_dtoa_r+0xcc>
 800bfd4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	6013      	str	r3, [r2, #0]
 800bfda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bfdc:	b113      	cbz	r3, 800bfe4 <_dtoa_r+0xc4>
 800bfde:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800bfe0:	4b85      	ldr	r3, [pc, #532]	@ (800c1f8 <_dtoa_r+0x2d8>)
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c1fc <_dtoa_r+0x2dc>
 800bfe8:	f000 bd37 	b.w	800ca5a <_dtoa_r+0xb3a>
 800bfec:	ab14      	add	r3, sp, #80	@ 0x50
 800bfee:	9301      	str	r3, [sp, #4]
 800bff0:	ab15      	add	r3, sp, #84	@ 0x54
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	4658      	mov	r0, fp
 800bff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bffa:	f001 f8cb 	bl	800d194 <__d2b>
 800bffe:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c002:	4681      	mov	r9, r0
 800c004:	2e00      	cmp	r6, #0
 800c006:	d076      	beq.n	800c0f6 <_dtoa_r+0x1d6>
 800c008:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c00a:	9712      	str	r7, [sp, #72]	@ 0x48
 800c00c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c014:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c018:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c01c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c020:	4619      	mov	r1, r3
 800c022:	2200      	movs	r2, #0
 800c024:	4b76      	ldr	r3, [pc, #472]	@ (800c200 <_dtoa_r+0x2e0>)
 800c026:	f7f4 f907 	bl	8000238 <__aeabi_dsub>
 800c02a:	a369      	add	r3, pc, #420	@ (adr r3, 800c1d0 <_dtoa_r+0x2b0>)
 800c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c030:	f7f4 faba 	bl	80005a8 <__aeabi_dmul>
 800c034:	a368      	add	r3, pc, #416	@ (adr r3, 800c1d8 <_dtoa_r+0x2b8>)
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	f7f4 f8ff 	bl	800023c <__adddf3>
 800c03e:	4604      	mov	r4, r0
 800c040:	4630      	mov	r0, r6
 800c042:	460d      	mov	r5, r1
 800c044:	f7f4 fa46 	bl	80004d4 <__aeabi_i2d>
 800c048:	a365      	add	r3, pc, #404	@ (adr r3, 800c1e0 <_dtoa_r+0x2c0>)
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f7f4 faab 	bl	80005a8 <__aeabi_dmul>
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	4620      	mov	r0, r4
 800c058:	4629      	mov	r1, r5
 800c05a:	f7f4 f8ef 	bl	800023c <__adddf3>
 800c05e:	4604      	mov	r4, r0
 800c060:	460d      	mov	r5, r1
 800c062:	f7f4 fd51 	bl	8000b08 <__aeabi_d2iz>
 800c066:	2200      	movs	r2, #0
 800c068:	4607      	mov	r7, r0
 800c06a:	2300      	movs	r3, #0
 800c06c:	4620      	mov	r0, r4
 800c06e:	4629      	mov	r1, r5
 800c070:	f7f4 fd0c 	bl	8000a8c <__aeabi_dcmplt>
 800c074:	b140      	cbz	r0, 800c088 <_dtoa_r+0x168>
 800c076:	4638      	mov	r0, r7
 800c078:	f7f4 fa2c 	bl	80004d4 <__aeabi_i2d>
 800c07c:	4622      	mov	r2, r4
 800c07e:	462b      	mov	r3, r5
 800c080:	f7f4 fcfa 	bl	8000a78 <__aeabi_dcmpeq>
 800c084:	b900      	cbnz	r0, 800c088 <_dtoa_r+0x168>
 800c086:	3f01      	subs	r7, #1
 800c088:	2f16      	cmp	r7, #22
 800c08a:	d852      	bhi.n	800c132 <_dtoa_r+0x212>
 800c08c:	4b5d      	ldr	r3, [pc, #372]	@ (800c204 <_dtoa_r+0x2e4>)
 800c08e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c09a:	f7f4 fcf7 	bl	8000a8c <__aeabi_dcmplt>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	d049      	beq.n	800c136 <_dtoa_r+0x216>
 800c0a2:	3f01      	subs	r7, #1
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c0a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c0aa:	1b9b      	subs	r3, r3, r6
 800c0ac:	1e5a      	subs	r2, r3, #1
 800c0ae:	bf44      	itt	mi
 800c0b0:	f1c3 0801 	rsbmi	r8, r3, #1
 800c0b4:	2300      	movmi	r3, #0
 800c0b6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c0b8:	bf54      	ite	pl
 800c0ba:	f04f 0800 	movpl.w	r8, #0
 800c0be:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c0c0:	2f00      	cmp	r7, #0
 800c0c2:	db3a      	blt.n	800c13a <_dtoa_r+0x21a>
 800c0c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c6:	970e      	str	r7, [sp, #56]	@ 0x38
 800c0c8:	443b      	add	r3, r7
 800c0ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c0d2:	2b09      	cmp	r3, #9
 800c0d4:	d865      	bhi.n	800c1a2 <_dtoa_r+0x282>
 800c0d6:	2b05      	cmp	r3, #5
 800c0d8:	bfc4      	itt	gt
 800c0da:	3b04      	subgt	r3, #4
 800c0dc:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c0de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c0e0:	f1a3 0302 	sub.w	r3, r3, #2
 800c0e4:	bfcc      	ite	gt
 800c0e6:	2400      	movgt	r4, #0
 800c0e8:	2401      	movle	r4, #1
 800c0ea:	2b03      	cmp	r3, #3
 800c0ec:	d864      	bhi.n	800c1b8 <_dtoa_r+0x298>
 800c0ee:	e8df f003 	tbb	[pc, r3]
 800c0f2:	382b      	.short	0x382b
 800c0f4:	5636      	.short	0x5636
 800c0f6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c0fa:	441e      	add	r6, r3
 800c0fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c100:	2b20      	cmp	r3, #32
 800c102:	bfc1      	itttt	gt
 800c104:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c108:	fa08 f803 	lslgt.w	r8, r8, r3
 800c10c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c110:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c114:	bfd6      	itet	le
 800c116:	f1c3 0320 	rsble	r3, r3, #32
 800c11a:	ea48 0003 	orrgt.w	r0, r8, r3
 800c11e:	fa04 f003 	lslle.w	r0, r4, r3
 800c122:	f7f4 f9c7 	bl	80004b4 <__aeabi_ui2d>
 800c126:	2201      	movs	r2, #1
 800c128:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c12c:	3e01      	subs	r6, #1
 800c12e:	9212      	str	r2, [sp, #72]	@ 0x48
 800c130:	e776      	b.n	800c020 <_dtoa_r+0x100>
 800c132:	2301      	movs	r3, #1
 800c134:	e7b7      	b.n	800c0a6 <_dtoa_r+0x186>
 800c136:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c138:	e7b6      	b.n	800c0a8 <_dtoa_r+0x188>
 800c13a:	427b      	negs	r3, r7
 800c13c:	930a      	str	r3, [sp, #40]	@ 0x28
 800c13e:	2300      	movs	r3, #0
 800c140:	eba8 0807 	sub.w	r8, r8, r7
 800c144:	930e      	str	r3, [sp, #56]	@ 0x38
 800c146:	e7c3      	b.n	800c0d0 <_dtoa_r+0x1b0>
 800c148:	2300      	movs	r3, #0
 800c14a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c14c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c14e:	2b00      	cmp	r3, #0
 800c150:	dc35      	bgt.n	800c1be <_dtoa_r+0x29e>
 800c152:	2301      	movs	r3, #1
 800c154:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c158:	461a      	mov	r2, r3
 800c15a:	9221      	str	r2, [sp, #132]	@ 0x84
 800c15c:	e00b      	b.n	800c176 <_dtoa_r+0x256>
 800c15e:	2301      	movs	r3, #1
 800c160:	e7f3      	b.n	800c14a <_dtoa_r+0x22a>
 800c162:	2300      	movs	r3, #0
 800c164:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c166:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c168:	18fb      	adds	r3, r7, r3
 800c16a:	9308      	str	r3, [sp, #32]
 800c16c:	3301      	adds	r3, #1
 800c16e:	2b01      	cmp	r3, #1
 800c170:	9307      	str	r3, [sp, #28]
 800c172:	bfb8      	it	lt
 800c174:	2301      	movlt	r3, #1
 800c176:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c17a:	2100      	movs	r1, #0
 800c17c:	2204      	movs	r2, #4
 800c17e:	f102 0514 	add.w	r5, r2, #20
 800c182:	429d      	cmp	r5, r3
 800c184:	d91f      	bls.n	800c1c6 <_dtoa_r+0x2a6>
 800c186:	6041      	str	r1, [r0, #4]
 800c188:	4658      	mov	r0, fp
 800c18a:	f000 fcdb 	bl	800cb44 <_Balloc>
 800c18e:	4682      	mov	sl, r0
 800c190:	2800      	cmp	r0, #0
 800c192:	d13b      	bne.n	800c20c <_dtoa_r+0x2ec>
 800c194:	4b1c      	ldr	r3, [pc, #112]	@ (800c208 <_dtoa_r+0x2e8>)
 800c196:	4602      	mov	r2, r0
 800c198:	f240 11af 	movw	r1, #431	@ 0x1af
 800c19c:	e6d4      	b.n	800bf48 <_dtoa_r+0x28>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e7e0      	b.n	800c164 <_dtoa_r+0x244>
 800c1a2:	2401      	movs	r4, #1
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	9320      	str	r3, [sp, #128]	@ 0x80
 800c1a8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c1aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ae:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2312      	movs	r3, #18
 800c1b6:	e7d0      	b.n	800c15a <_dtoa_r+0x23a>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c1bc:	e7f5      	b.n	800c1aa <_dtoa_r+0x28a>
 800c1be:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c1c0:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c1c4:	e7d7      	b.n	800c176 <_dtoa_r+0x256>
 800c1c6:	3101      	adds	r1, #1
 800c1c8:	0052      	lsls	r2, r2, #1
 800c1ca:	e7d8      	b.n	800c17e <_dtoa_r+0x25e>
 800c1cc:	f3af 8000 	nop.w
 800c1d0:	636f4361 	.word	0x636f4361
 800c1d4:	3fd287a7 	.word	0x3fd287a7
 800c1d8:	8b60c8b3 	.word	0x8b60c8b3
 800c1dc:	3fc68a28 	.word	0x3fc68a28
 800c1e0:	509f79fb 	.word	0x509f79fb
 800c1e4:	3fd34413 	.word	0x3fd34413
 800c1e8:	0800e668 	.word	0x0800e668
 800c1ec:	0800e67f 	.word	0x0800e67f
 800c1f0:	7ff00000 	.word	0x7ff00000
 800c1f4:	0800e664 	.word	0x0800e664
 800c1f8:	0800e638 	.word	0x0800e638
 800c1fc:	0800e637 	.word	0x0800e637
 800c200:	3ff80000 	.word	0x3ff80000
 800c204:	0800e778 	.word	0x0800e778
 800c208:	0800e6d7 	.word	0x0800e6d7
 800c20c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c210:	6018      	str	r0, [r3, #0]
 800c212:	9b07      	ldr	r3, [sp, #28]
 800c214:	2b0e      	cmp	r3, #14
 800c216:	f200 80a4 	bhi.w	800c362 <_dtoa_r+0x442>
 800c21a:	2c00      	cmp	r4, #0
 800c21c:	f000 80a1 	beq.w	800c362 <_dtoa_r+0x442>
 800c220:	2f00      	cmp	r7, #0
 800c222:	dd33      	ble.n	800c28c <_dtoa_r+0x36c>
 800c224:	4b86      	ldr	r3, [pc, #536]	@ (800c440 <_dtoa_r+0x520>)
 800c226:	f007 020f 	and.w	r2, r7, #15
 800c22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c22e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c232:	05f8      	lsls	r0, r7, #23
 800c234:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c238:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c23c:	d516      	bpl.n	800c26c <_dtoa_r+0x34c>
 800c23e:	4b81      	ldr	r3, [pc, #516]	@ (800c444 <_dtoa_r+0x524>)
 800c240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c248:	f7f4 fad8 	bl	80007fc <__aeabi_ddiv>
 800c24c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c250:	f004 040f 	and.w	r4, r4, #15
 800c254:	2603      	movs	r6, #3
 800c256:	4d7b      	ldr	r5, [pc, #492]	@ (800c444 <_dtoa_r+0x524>)
 800c258:	b954      	cbnz	r4, 800c270 <_dtoa_r+0x350>
 800c25a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c25e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c262:	f7f4 facb 	bl	80007fc <__aeabi_ddiv>
 800c266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c26a:	e028      	b.n	800c2be <_dtoa_r+0x39e>
 800c26c:	2602      	movs	r6, #2
 800c26e:	e7f2      	b.n	800c256 <_dtoa_r+0x336>
 800c270:	07e1      	lsls	r1, r4, #31
 800c272:	d508      	bpl.n	800c286 <_dtoa_r+0x366>
 800c274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c278:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c27c:	f7f4 f994 	bl	80005a8 <__aeabi_dmul>
 800c280:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c284:	3601      	adds	r6, #1
 800c286:	1064      	asrs	r4, r4, #1
 800c288:	3508      	adds	r5, #8
 800c28a:	e7e5      	b.n	800c258 <_dtoa_r+0x338>
 800c28c:	f000 80d2 	beq.w	800c434 <_dtoa_r+0x514>
 800c290:	427c      	negs	r4, r7
 800c292:	4b6b      	ldr	r3, [pc, #428]	@ (800c440 <_dtoa_r+0x520>)
 800c294:	4d6b      	ldr	r5, [pc, #428]	@ (800c444 <_dtoa_r+0x524>)
 800c296:	f004 020f 	and.w	r2, r4, #15
 800c29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c2a6:	f7f4 f97f 	bl	80005a8 <__aeabi_dmul>
 800c2aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2ae:	1124      	asrs	r4, r4, #4
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	2602      	movs	r6, #2
 800c2b4:	2c00      	cmp	r4, #0
 800c2b6:	f040 80b2 	bne.w	800c41e <_dtoa_r+0x4fe>
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d1d3      	bne.n	800c266 <_dtoa_r+0x346>
 800c2be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 80b7 	beq.w	800c438 <_dtoa_r+0x518>
 800c2ca:	4b5f      	ldr	r3, [pc, #380]	@ (800c448 <_dtoa_r+0x528>)
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	f7f4 fbdb 	bl	8000a8c <__aeabi_dcmplt>
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	f000 80ae 	beq.w	800c438 <_dtoa_r+0x518>
 800c2dc:	9b07      	ldr	r3, [sp, #28]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 80aa 	beq.w	800c438 <_dtoa_r+0x518>
 800c2e4:	9b08      	ldr	r3, [sp, #32]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	dd37      	ble.n	800c35a <_dtoa_r+0x43a>
 800c2ea:	1e7b      	subs	r3, r7, #1
 800c2ec:	9304      	str	r3, [sp, #16]
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4b56      	ldr	r3, [pc, #344]	@ (800c44c <_dtoa_r+0x52c>)
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	f7f4 f957 	bl	80005a8 <__aeabi_dmul>
 800c2fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2fe:	9c08      	ldr	r4, [sp, #32]
 800c300:	3601      	adds	r6, #1
 800c302:	4630      	mov	r0, r6
 800c304:	f7f4 f8e6 	bl	80004d4 <__aeabi_i2d>
 800c308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c30c:	f7f4 f94c 	bl	80005a8 <__aeabi_dmul>
 800c310:	4b4f      	ldr	r3, [pc, #316]	@ (800c450 <_dtoa_r+0x530>)
 800c312:	2200      	movs	r2, #0
 800c314:	f7f3 ff92 	bl	800023c <__adddf3>
 800c318:	4605      	mov	r5, r0
 800c31a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c31e:	2c00      	cmp	r4, #0
 800c320:	f040 809a 	bne.w	800c458 <_dtoa_r+0x538>
 800c324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c328:	4b4a      	ldr	r3, [pc, #296]	@ (800c454 <_dtoa_r+0x534>)
 800c32a:	2200      	movs	r2, #0
 800c32c:	f7f3 ff84 	bl	8000238 <__aeabi_dsub>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c338:	462a      	mov	r2, r5
 800c33a:	4633      	mov	r3, r6
 800c33c:	f7f4 fbc4 	bl	8000ac8 <__aeabi_dcmpgt>
 800c340:	2800      	cmp	r0, #0
 800c342:	f040 828e 	bne.w	800c862 <_dtoa_r+0x942>
 800c346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c34a:	462a      	mov	r2, r5
 800c34c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c350:	f7f4 fb9c 	bl	8000a8c <__aeabi_dcmplt>
 800c354:	2800      	cmp	r0, #0
 800c356:	f040 8127 	bne.w	800c5a8 <_dtoa_r+0x688>
 800c35a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c35e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c362:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c364:	2b00      	cmp	r3, #0
 800c366:	f2c0 8163 	blt.w	800c630 <_dtoa_r+0x710>
 800c36a:	2f0e      	cmp	r7, #14
 800c36c:	f300 8160 	bgt.w	800c630 <_dtoa_r+0x710>
 800c370:	4b33      	ldr	r3, [pc, #204]	@ (800c440 <_dtoa_r+0x520>)
 800c372:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c376:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c37a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c37e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c380:	2b00      	cmp	r3, #0
 800c382:	da03      	bge.n	800c38c <_dtoa_r+0x46c>
 800c384:	9b07      	ldr	r3, [sp, #28]
 800c386:	2b00      	cmp	r3, #0
 800c388:	f340 8100 	ble.w	800c58c <_dtoa_r+0x66c>
 800c38c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c390:	4656      	mov	r6, sl
 800c392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c396:	4620      	mov	r0, r4
 800c398:	4629      	mov	r1, r5
 800c39a:	f7f4 fa2f 	bl	80007fc <__aeabi_ddiv>
 800c39e:	f7f4 fbb3 	bl	8000b08 <__aeabi_d2iz>
 800c3a2:	4680      	mov	r8, r0
 800c3a4:	f7f4 f896 	bl	80004d4 <__aeabi_i2d>
 800c3a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ac:	f7f4 f8fc 	bl	80005a8 <__aeabi_dmul>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c3bc:	f7f3 ff3c 	bl	8000238 <__aeabi_dsub>
 800c3c0:	f806 4b01 	strb.w	r4, [r6], #1
 800c3c4:	9d07      	ldr	r5, [sp, #28]
 800c3c6:	eba6 040a 	sub.w	r4, r6, sl
 800c3ca:	42a5      	cmp	r5, r4
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	f040 8116 	bne.w	800c600 <_dtoa_r+0x6e0>
 800c3d4:	f7f3 ff32 	bl	800023c <__adddf3>
 800c3d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3dc:	4604      	mov	r4, r0
 800c3de:	460d      	mov	r5, r1
 800c3e0:	f7f4 fb72 	bl	8000ac8 <__aeabi_dcmpgt>
 800c3e4:	2800      	cmp	r0, #0
 800c3e6:	f040 80f8 	bne.w	800c5da <_dtoa_r+0x6ba>
 800c3ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	f7f4 fb41 	bl	8000a78 <__aeabi_dcmpeq>
 800c3f6:	b118      	cbz	r0, 800c400 <_dtoa_r+0x4e0>
 800c3f8:	f018 0f01 	tst.w	r8, #1
 800c3fc:	f040 80ed 	bne.w	800c5da <_dtoa_r+0x6ba>
 800c400:	4649      	mov	r1, r9
 800c402:	4658      	mov	r0, fp
 800c404:	f000 fbde 	bl	800cbc4 <_Bfree>
 800c408:	2300      	movs	r3, #0
 800c40a:	7033      	strb	r3, [r6, #0]
 800c40c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800c40e:	3701      	adds	r7, #1
 800c410:	601f      	str	r7, [r3, #0]
 800c412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c414:	2b00      	cmp	r3, #0
 800c416:	f000 8320 	beq.w	800ca5a <_dtoa_r+0xb3a>
 800c41a:	601e      	str	r6, [r3, #0]
 800c41c:	e31d      	b.n	800ca5a <_dtoa_r+0xb3a>
 800c41e:	07e2      	lsls	r2, r4, #31
 800c420:	d505      	bpl.n	800c42e <_dtoa_r+0x50e>
 800c422:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c426:	f7f4 f8bf 	bl	80005a8 <__aeabi_dmul>
 800c42a:	3601      	adds	r6, #1
 800c42c:	2301      	movs	r3, #1
 800c42e:	1064      	asrs	r4, r4, #1
 800c430:	3508      	adds	r5, #8
 800c432:	e73f      	b.n	800c2b4 <_dtoa_r+0x394>
 800c434:	2602      	movs	r6, #2
 800c436:	e742      	b.n	800c2be <_dtoa_r+0x39e>
 800c438:	9c07      	ldr	r4, [sp, #28]
 800c43a:	9704      	str	r7, [sp, #16]
 800c43c:	e761      	b.n	800c302 <_dtoa_r+0x3e2>
 800c43e:	bf00      	nop
 800c440:	0800e778 	.word	0x0800e778
 800c444:	0800e750 	.word	0x0800e750
 800c448:	3ff00000 	.word	0x3ff00000
 800c44c:	40240000 	.word	0x40240000
 800c450:	401c0000 	.word	0x401c0000
 800c454:	40140000 	.word	0x40140000
 800c458:	4b70      	ldr	r3, [pc, #448]	@ (800c61c <_dtoa_r+0x6fc>)
 800c45a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c45c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c460:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c464:	4454      	add	r4, sl
 800c466:	2900      	cmp	r1, #0
 800c468:	d045      	beq.n	800c4f6 <_dtoa_r+0x5d6>
 800c46a:	496d      	ldr	r1, [pc, #436]	@ (800c620 <_dtoa_r+0x700>)
 800c46c:	2000      	movs	r0, #0
 800c46e:	f7f4 f9c5 	bl	80007fc <__aeabi_ddiv>
 800c472:	4633      	mov	r3, r6
 800c474:	462a      	mov	r2, r5
 800c476:	f7f3 fedf 	bl	8000238 <__aeabi_dsub>
 800c47a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c47e:	4656      	mov	r6, sl
 800c480:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c484:	f7f4 fb40 	bl	8000b08 <__aeabi_d2iz>
 800c488:	4605      	mov	r5, r0
 800c48a:	f7f4 f823 	bl	80004d4 <__aeabi_i2d>
 800c48e:	4602      	mov	r2, r0
 800c490:	460b      	mov	r3, r1
 800c492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c496:	f7f3 fecf 	bl	8000238 <__aeabi_dsub>
 800c49a:	3530      	adds	r5, #48	@ 0x30
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c4a4:	f806 5b01 	strb.w	r5, [r6], #1
 800c4a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c4ac:	f7f4 faee 	bl	8000a8c <__aeabi_dcmplt>
 800c4b0:	2800      	cmp	r0, #0
 800c4b2:	d163      	bne.n	800c57c <_dtoa_r+0x65c>
 800c4b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4b8:	495a      	ldr	r1, [pc, #360]	@ (800c624 <_dtoa_r+0x704>)
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	f7f3 febc 	bl	8000238 <__aeabi_dsub>
 800c4c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c4c4:	f7f4 fae2 	bl	8000a8c <__aeabi_dcmplt>
 800c4c8:	2800      	cmp	r0, #0
 800c4ca:	f040 8087 	bne.w	800c5dc <_dtoa_r+0x6bc>
 800c4ce:	42a6      	cmp	r6, r4
 800c4d0:	f43f af43 	beq.w	800c35a <_dtoa_r+0x43a>
 800c4d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c4d8:	4b53      	ldr	r3, [pc, #332]	@ (800c628 <_dtoa_r+0x708>)
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f7f4 f864 	bl	80005a8 <__aeabi_dmul>
 800c4e0:	4b51      	ldr	r3, [pc, #324]	@ (800c628 <_dtoa_r+0x708>)
 800c4e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4ec:	f7f4 f85c 	bl	80005a8 <__aeabi_dmul>
 800c4f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4f4:	e7c4      	b.n	800c480 <_dtoa_r+0x560>
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	f7f4 f855 	bl	80005a8 <__aeabi_dmul>
 800c4fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c502:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c504:	4656      	mov	r6, sl
 800c506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c50a:	f7f4 fafd 	bl	8000b08 <__aeabi_d2iz>
 800c50e:	4605      	mov	r5, r0
 800c510:	f7f3 ffe0 	bl	80004d4 <__aeabi_i2d>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c51c:	f7f3 fe8c 	bl	8000238 <__aeabi_dsub>
 800c520:	3530      	adds	r5, #48	@ 0x30
 800c522:	f806 5b01 	strb.w	r5, [r6], #1
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	42a6      	cmp	r6, r4
 800c52c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c530:	f04f 0200 	mov.w	r2, #0
 800c534:	d124      	bne.n	800c580 <_dtoa_r+0x660>
 800c536:	4b3a      	ldr	r3, [pc, #232]	@ (800c620 <_dtoa_r+0x700>)
 800c538:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c53c:	f7f3 fe7e 	bl	800023c <__adddf3>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c548:	f7f4 fabe 	bl	8000ac8 <__aeabi_dcmpgt>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	d145      	bne.n	800c5dc <_dtoa_r+0x6bc>
 800c550:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c554:	4932      	ldr	r1, [pc, #200]	@ (800c620 <_dtoa_r+0x700>)
 800c556:	2000      	movs	r0, #0
 800c558:	f7f3 fe6e 	bl	8000238 <__aeabi_dsub>
 800c55c:	4602      	mov	r2, r0
 800c55e:	460b      	mov	r3, r1
 800c560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c564:	f7f4 fa92 	bl	8000a8c <__aeabi_dcmplt>
 800c568:	2800      	cmp	r0, #0
 800c56a:	f43f aef6 	beq.w	800c35a <_dtoa_r+0x43a>
 800c56e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c570:	1e73      	subs	r3, r6, #1
 800c572:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c574:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c578:	2b30      	cmp	r3, #48	@ 0x30
 800c57a:	d0f8      	beq.n	800c56e <_dtoa_r+0x64e>
 800c57c:	9f04      	ldr	r7, [sp, #16]
 800c57e:	e73f      	b.n	800c400 <_dtoa_r+0x4e0>
 800c580:	4b29      	ldr	r3, [pc, #164]	@ (800c628 <_dtoa_r+0x708>)
 800c582:	f7f4 f811 	bl	80005a8 <__aeabi_dmul>
 800c586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c58a:	e7bc      	b.n	800c506 <_dtoa_r+0x5e6>
 800c58c:	d10c      	bne.n	800c5a8 <_dtoa_r+0x688>
 800c58e:	4b27      	ldr	r3, [pc, #156]	@ (800c62c <_dtoa_r+0x70c>)
 800c590:	2200      	movs	r2, #0
 800c592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c596:	f7f4 f807 	bl	80005a8 <__aeabi_dmul>
 800c59a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c59e:	f7f4 fa89 	bl	8000ab4 <__aeabi_dcmpge>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	f000 815b 	beq.w	800c85e <_dtoa_r+0x93e>
 800c5a8:	2400      	movs	r4, #0
 800c5aa:	4625      	mov	r5, r4
 800c5ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c5ae:	43db      	mvns	r3, r3
 800c5b0:	9304      	str	r3, [sp, #16]
 800c5b2:	4656      	mov	r6, sl
 800c5b4:	2700      	movs	r7, #0
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	4658      	mov	r0, fp
 800c5ba:	f000 fb03 	bl	800cbc4 <_Bfree>
 800c5be:	2d00      	cmp	r5, #0
 800c5c0:	d0dc      	beq.n	800c57c <_dtoa_r+0x65c>
 800c5c2:	b12f      	cbz	r7, 800c5d0 <_dtoa_r+0x6b0>
 800c5c4:	42af      	cmp	r7, r5
 800c5c6:	d003      	beq.n	800c5d0 <_dtoa_r+0x6b0>
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4658      	mov	r0, fp
 800c5cc:	f000 fafa 	bl	800cbc4 <_Bfree>
 800c5d0:	4629      	mov	r1, r5
 800c5d2:	4658      	mov	r0, fp
 800c5d4:	f000 faf6 	bl	800cbc4 <_Bfree>
 800c5d8:	e7d0      	b.n	800c57c <_dtoa_r+0x65c>
 800c5da:	9704      	str	r7, [sp, #16]
 800c5dc:	4633      	mov	r3, r6
 800c5de:	461e      	mov	r6, r3
 800c5e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c5e4:	2a39      	cmp	r2, #57	@ 0x39
 800c5e6:	d107      	bne.n	800c5f8 <_dtoa_r+0x6d8>
 800c5e8:	459a      	cmp	sl, r3
 800c5ea:	d1f8      	bne.n	800c5de <_dtoa_r+0x6be>
 800c5ec:	9a04      	ldr	r2, [sp, #16]
 800c5ee:	3201      	adds	r2, #1
 800c5f0:	9204      	str	r2, [sp, #16]
 800c5f2:	2230      	movs	r2, #48	@ 0x30
 800c5f4:	f88a 2000 	strb.w	r2, [sl]
 800c5f8:	781a      	ldrb	r2, [r3, #0]
 800c5fa:	3201      	adds	r2, #1
 800c5fc:	701a      	strb	r2, [r3, #0]
 800c5fe:	e7bd      	b.n	800c57c <_dtoa_r+0x65c>
 800c600:	4b09      	ldr	r3, [pc, #36]	@ (800c628 <_dtoa_r+0x708>)
 800c602:	2200      	movs	r2, #0
 800c604:	f7f3 ffd0 	bl	80005a8 <__aeabi_dmul>
 800c608:	2200      	movs	r2, #0
 800c60a:	2300      	movs	r3, #0
 800c60c:	4604      	mov	r4, r0
 800c60e:	460d      	mov	r5, r1
 800c610:	f7f4 fa32 	bl	8000a78 <__aeabi_dcmpeq>
 800c614:	2800      	cmp	r0, #0
 800c616:	f43f aebc 	beq.w	800c392 <_dtoa_r+0x472>
 800c61a:	e6f1      	b.n	800c400 <_dtoa_r+0x4e0>
 800c61c:	0800e778 	.word	0x0800e778
 800c620:	3fe00000 	.word	0x3fe00000
 800c624:	3ff00000 	.word	0x3ff00000
 800c628:	40240000 	.word	0x40240000
 800c62c:	40140000 	.word	0x40140000
 800c630:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c632:	2a00      	cmp	r2, #0
 800c634:	f000 80db 	beq.w	800c7ee <_dtoa_r+0x8ce>
 800c638:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c63a:	2a01      	cmp	r2, #1
 800c63c:	f300 80bf 	bgt.w	800c7be <_dtoa_r+0x89e>
 800c640:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c642:	2a00      	cmp	r2, #0
 800c644:	f000 80b7 	beq.w	800c7b6 <_dtoa_r+0x896>
 800c648:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c64c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c64e:	4646      	mov	r6, r8
 800c650:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c652:	2101      	movs	r1, #1
 800c654:	441a      	add	r2, r3
 800c656:	4658      	mov	r0, fp
 800c658:	4498      	add	r8, r3
 800c65a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c65c:	f000 fb66 	bl	800cd2c <__i2b>
 800c660:	4605      	mov	r5, r0
 800c662:	b15e      	cbz	r6, 800c67c <_dtoa_r+0x75c>
 800c664:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c666:	2b00      	cmp	r3, #0
 800c668:	dd08      	ble.n	800c67c <_dtoa_r+0x75c>
 800c66a:	42b3      	cmp	r3, r6
 800c66c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c66e:	bfa8      	it	ge
 800c670:	4633      	movge	r3, r6
 800c672:	eba8 0803 	sub.w	r8, r8, r3
 800c676:	1af6      	subs	r6, r6, r3
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c67c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c67e:	b1f3      	cbz	r3, 800c6be <_dtoa_r+0x79e>
 800c680:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c682:	2b00      	cmp	r3, #0
 800c684:	f000 80b7 	beq.w	800c7f6 <_dtoa_r+0x8d6>
 800c688:	b18c      	cbz	r4, 800c6ae <_dtoa_r+0x78e>
 800c68a:	4629      	mov	r1, r5
 800c68c:	4622      	mov	r2, r4
 800c68e:	4658      	mov	r0, fp
 800c690:	f000 fc0c 	bl	800ceac <__pow5mult>
 800c694:	464a      	mov	r2, r9
 800c696:	4601      	mov	r1, r0
 800c698:	4605      	mov	r5, r0
 800c69a:	4658      	mov	r0, fp
 800c69c:	f000 fb5c 	bl	800cd58 <__multiply>
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	9004      	str	r0, [sp, #16]
 800c6a4:	4658      	mov	r0, fp
 800c6a6:	f000 fa8d 	bl	800cbc4 <_Bfree>
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	4699      	mov	r9, r3
 800c6ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6b0:	1b1a      	subs	r2, r3, r4
 800c6b2:	d004      	beq.n	800c6be <_dtoa_r+0x79e>
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	4658      	mov	r0, fp
 800c6b8:	f000 fbf8 	bl	800ceac <__pow5mult>
 800c6bc:	4681      	mov	r9, r0
 800c6be:	2101      	movs	r1, #1
 800c6c0:	4658      	mov	r0, fp
 800c6c2:	f000 fb33 	bl	800cd2c <__i2b>
 800c6c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f000 81c9 	beq.w	800ca62 <_dtoa_r+0xb42>
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	4601      	mov	r1, r0
 800c6d4:	4658      	mov	r0, fp
 800c6d6:	f000 fbe9 	bl	800ceac <__pow5mult>
 800c6da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	4604      	mov	r4, r0
 800c6e0:	f300 808f 	bgt.w	800c802 <_dtoa_r+0x8e2>
 800c6e4:	9b02      	ldr	r3, [sp, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f040 8087 	bne.w	800c7fa <_dtoa_r+0x8da>
 800c6ec:	9b03      	ldr	r3, [sp, #12]
 800c6ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f040 8083 	bne.w	800c7fe <_dtoa_r+0x8de>
 800c6f8:	9b03      	ldr	r3, [sp, #12]
 800c6fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6fe:	0d1b      	lsrs	r3, r3, #20
 800c700:	051b      	lsls	r3, r3, #20
 800c702:	b12b      	cbz	r3, 800c710 <_dtoa_r+0x7f0>
 800c704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c706:	3301      	adds	r3, #1
 800c708:	9309      	str	r3, [sp, #36]	@ 0x24
 800c70a:	f108 0801 	add.w	r8, r8, #1
 800c70e:	2301      	movs	r3, #1
 800c710:	930a      	str	r3, [sp, #40]	@ 0x28
 800c712:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 81aa 	beq.w	800ca6e <_dtoa_r+0xb4e>
 800c71a:	6923      	ldr	r3, [r4, #16]
 800c71c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c720:	6918      	ldr	r0, [r3, #16]
 800c722:	f000 fab7 	bl	800cc94 <__hi0bits>
 800c726:	f1c0 0020 	rsb	r0, r0, #32
 800c72a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c72c:	4418      	add	r0, r3
 800c72e:	f010 001f 	ands.w	r0, r0, #31
 800c732:	d071      	beq.n	800c818 <_dtoa_r+0x8f8>
 800c734:	f1c0 0320 	rsb	r3, r0, #32
 800c738:	2b04      	cmp	r3, #4
 800c73a:	dd65      	ble.n	800c808 <_dtoa_r+0x8e8>
 800c73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c73e:	f1c0 001c 	rsb	r0, r0, #28
 800c742:	4403      	add	r3, r0
 800c744:	4480      	add	r8, r0
 800c746:	4406      	add	r6, r0
 800c748:	9309      	str	r3, [sp, #36]	@ 0x24
 800c74a:	f1b8 0f00 	cmp.w	r8, #0
 800c74e:	dd05      	ble.n	800c75c <_dtoa_r+0x83c>
 800c750:	4649      	mov	r1, r9
 800c752:	4642      	mov	r2, r8
 800c754:	4658      	mov	r0, fp
 800c756:	f000 fc03 	bl	800cf60 <__lshift>
 800c75a:	4681      	mov	r9, r0
 800c75c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c75e:	2b00      	cmp	r3, #0
 800c760:	dd05      	ble.n	800c76e <_dtoa_r+0x84e>
 800c762:	4621      	mov	r1, r4
 800c764:	461a      	mov	r2, r3
 800c766:	4658      	mov	r0, fp
 800c768:	f000 fbfa 	bl	800cf60 <__lshift>
 800c76c:	4604      	mov	r4, r0
 800c76e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c770:	2b00      	cmp	r3, #0
 800c772:	d053      	beq.n	800c81c <_dtoa_r+0x8fc>
 800c774:	4621      	mov	r1, r4
 800c776:	4648      	mov	r0, r9
 800c778:	f000 fc5e 	bl	800d038 <__mcmp>
 800c77c:	2800      	cmp	r0, #0
 800c77e:	da4d      	bge.n	800c81c <_dtoa_r+0x8fc>
 800c780:	1e7b      	subs	r3, r7, #1
 800c782:	9304      	str	r3, [sp, #16]
 800c784:	4649      	mov	r1, r9
 800c786:	2300      	movs	r3, #0
 800c788:	220a      	movs	r2, #10
 800c78a:	4658      	mov	r0, fp
 800c78c:	f000 fa3c 	bl	800cc08 <__multadd>
 800c790:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c792:	4681      	mov	r9, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	f000 816c 	beq.w	800ca72 <_dtoa_r+0xb52>
 800c79a:	2300      	movs	r3, #0
 800c79c:	4629      	mov	r1, r5
 800c79e:	220a      	movs	r2, #10
 800c7a0:	4658      	mov	r0, fp
 800c7a2:	f000 fa31 	bl	800cc08 <__multadd>
 800c7a6:	9b08      	ldr	r3, [sp, #32]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	4605      	mov	r5, r0
 800c7ac:	dc61      	bgt.n	800c872 <_dtoa_r+0x952>
 800c7ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	dc3b      	bgt.n	800c82c <_dtoa_r+0x90c>
 800c7b4:	e05d      	b.n	800c872 <_dtoa_r+0x952>
 800c7b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c7b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c7bc:	e746      	b.n	800c64c <_dtoa_r+0x72c>
 800c7be:	9b07      	ldr	r3, [sp, #28]
 800c7c0:	1e5c      	subs	r4, r3, #1
 800c7c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7c4:	42a3      	cmp	r3, r4
 800c7c6:	bfbf      	itttt	lt
 800c7c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c7ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800c7cc:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c7ce:	1ae3      	sublt	r3, r4, r3
 800c7d0:	bfb4      	ite	lt
 800c7d2:	18d2      	addlt	r2, r2, r3
 800c7d4:	1b1c      	subge	r4, r3, r4
 800c7d6:	9b07      	ldr	r3, [sp, #28]
 800c7d8:	bfbc      	itt	lt
 800c7da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800c7dc:	2400      	movlt	r4, #0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	bfb5      	itete	lt
 800c7e2:	eba8 0603 	sublt.w	r6, r8, r3
 800c7e6:	9b07      	ldrge	r3, [sp, #28]
 800c7e8:	2300      	movlt	r3, #0
 800c7ea:	4646      	movge	r6, r8
 800c7ec:	e730      	b.n	800c650 <_dtoa_r+0x730>
 800c7ee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c7f0:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c7f2:	4646      	mov	r6, r8
 800c7f4:	e735      	b.n	800c662 <_dtoa_r+0x742>
 800c7f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c7f8:	e75c      	b.n	800c6b4 <_dtoa_r+0x794>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	e788      	b.n	800c710 <_dtoa_r+0x7f0>
 800c7fe:	9b02      	ldr	r3, [sp, #8]
 800c800:	e786      	b.n	800c710 <_dtoa_r+0x7f0>
 800c802:	2300      	movs	r3, #0
 800c804:	930a      	str	r3, [sp, #40]	@ 0x28
 800c806:	e788      	b.n	800c71a <_dtoa_r+0x7fa>
 800c808:	d09f      	beq.n	800c74a <_dtoa_r+0x82a>
 800c80a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c80c:	331c      	adds	r3, #28
 800c80e:	441a      	add	r2, r3
 800c810:	4498      	add	r8, r3
 800c812:	441e      	add	r6, r3
 800c814:	9209      	str	r2, [sp, #36]	@ 0x24
 800c816:	e798      	b.n	800c74a <_dtoa_r+0x82a>
 800c818:	4603      	mov	r3, r0
 800c81a:	e7f6      	b.n	800c80a <_dtoa_r+0x8ea>
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	9704      	str	r7, [sp, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	dc20      	bgt.n	800c866 <_dtoa_r+0x946>
 800c824:	9308      	str	r3, [sp, #32]
 800c826:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c828:	2b02      	cmp	r3, #2
 800c82a:	dd1e      	ble.n	800c86a <_dtoa_r+0x94a>
 800c82c:	9b08      	ldr	r3, [sp, #32]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f47f aebc 	bne.w	800c5ac <_dtoa_r+0x68c>
 800c834:	4621      	mov	r1, r4
 800c836:	2205      	movs	r2, #5
 800c838:	4658      	mov	r0, fp
 800c83a:	f000 f9e5 	bl	800cc08 <__multadd>
 800c83e:	4601      	mov	r1, r0
 800c840:	4604      	mov	r4, r0
 800c842:	4648      	mov	r0, r9
 800c844:	f000 fbf8 	bl	800d038 <__mcmp>
 800c848:	2800      	cmp	r0, #0
 800c84a:	f77f aeaf 	ble.w	800c5ac <_dtoa_r+0x68c>
 800c84e:	4656      	mov	r6, sl
 800c850:	2331      	movs	r3, #49	@ 0x31
 800c852:	f806 3b01 	strb.w	r3, [r6], #1
 800c856:	9b04      	ldr	r3, [sp, #16]
 800c858:	3301      	adds	r3, #1
 800c85a:	9304      	str	r3, [sp, #16]
 800c85c:	e6aa      	b.n	800c5b4 <_dtoa_r+0x694>
 800c85e:	9c07      	ldr	r4, [sp, #28]
 800c860:	9704      	str	r7, [sp, #16]
 800c862:	4625      	mov	r5, r4
 800c864:	e7f3      	b.n	800c84e <_dtoa_r+0x92e>
 800c866:	9b07      	ldr	r3, [sp, #28]
 800c868:	9308      	str	r3, [sp, #32]
 800c86a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 8104 	beq.w	800ca7a <_dtoa_r+0xb5a>
 800c872:	2e00      	cmp	r6, #0
 800c874:	dd05      	ble.n	800c882 <_dtoa_r+0x962>
 800c876:	4629      	mov	r1, r5
 800c878:	4632      	mov	r2, r6
 800c87a:	4658      	mov	r0, fp
 800c87c:	f000 fb70 	bl	800cf60 <__lshift>
 800c880:	4605      	mov	r5, r0
 800c882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c884:	2b00      	cmp	r3, #0
 800c886:	d05a      	beq.n	800c93e <_dtoa_r+0xa1e>
 800c888:	6869      	ldr	r1, [r5, #4]
 800c88a:	4658      	mov	r0, fp
 800c88c:	f000 f95a 	bl	800cb44 <_Balloc>
 800c890:	4606      	mov	r6, r0
 800c892:	b928      	cbnz	r0, 800c8a0 <_dtoa_r+0x980>
 800c894:	4b84      	ldr	r3, [pc, #528]	@ (800caa8 <_dtoa_r+0xb88>)
 800c896:	4602      	mov	r2, r0
 800c898:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c89c:	f7ff bb54 	b.w	800bf48 <_dtoa_r+0x28>
 800c8a0:	692a      	ldr	r2, [r5, #16]
 800c8a2:	3202      	adds	r2, #2
 800c8a4:	0092      	lsls	r2, r2, #2
 800c8a6:	f105 010c 	add.w	r1, r5, #12
 800c8aa:	300c      	adds	r0, #12
 800c8ac:	f7ff fa9f 	bl	800bdee <memcpy>
 800c8b0:	2201      	movs	r2, #1
 800c8b2:	4631      	mov	r1, r6
 800c8b4:	4658      	mov	r0, fp
 800c8b6:	f000 fb53 	bl	800cf60 <__lshift>
 800c8ba:	f10a 0301 	add.w	r3, sl, #1
 800c8be:	9307      	str	r3, [sp, #28]
 800c8c0:	9b08      	ldr	r3, [sp, #32]
 800c8c2:	4453      	add	r3, sl
 800c8c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8c6:	9b02      	ldr	r3, [sp, #8]
 800c8c8:	f003 0301 	and.w	r3, r3, #1
 800c8cc:	462f      	mov	r7, r5
 800c8ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8d0:	4605      	mov	r5, r0
 800c8d2:	9b07      	ldr	r3, [sp, #28]
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	4648      	mov	r0, r9
 800c8da:	9302      	str	r3, [sp, #8]
 800c8dc:	f7ff fa95 	bl	800be0a <quorem>
 800c8e0:	4639      	mov	r1, r7
 800c8e2:	9008      	str	r0, [sp, #32]
 800c8e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c8e8:	4648      	mov	r0, r9
 800c8ea:	f000 fba5 	bl	800d038 <__mcmp>
 800c8ee:	462a      	mov	r2, r5
 800c8f0:	9009      	str	r0, [sp, #36]	@ 0x24
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4658      	mov	r0, fp
 800c8f6:	f000 fbbb 	bl	800d070 <__mdiff>
 800c8fa:	68c2      	ldr	r2, [r0, #12]
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	bb02      	cbnz	r2, 800c942 <_dtoa_r+0xa22>
 800c900:	4601      	mov	r1, r0
 800c902:	4648      	mov	r0, r9
 800c904:	f000 fb98 	bl	800d038 <__mcmp>
 800c908:	4602      	mov	r2, r0
 800c90a:	4631      	mov	r1, r6
 800c90c:	4658      	mov	r0, fp
 800c90e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c910:	f000 f958 	bl	800cbc4 <_Bfree>
 800c914:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c916:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c918:	9e07      	ldr	r6, [sp, #28]
 800c91a:	ea43 0102 	orr.w	r1, r3, r2
 800c91e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c920:	4319      	orrs	r1, r3
 800c922:	d110      	bne.n	800c946 <_dtoa_r+0xa26>
 800c924:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c928:	d029      	beq.n	800c97e <_dtoa_r+0xa5e>
 800c92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	dd02      	ble.n	800c936 <_dtoa_r+0xa16>
 800c930:	9b08      	ldr	r3, [sp, #32]
 800c932:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c936:	9b02      	ldr	r3, [sp, #8]
 800c938:	f883 8000 	strb.w	r8, [r3]
 800c93c:	e63b      	b.n	800c5b6 <_dtoa_r+0x696>
 800c93e:	4628      	mov	r0, r5
 800c940:	e7bb      	b.n	800c8ba <_dtoa_r+0x99a>
 800c942:	2201      	movs	r2, #1
 800c944:	e7e1      	b.n	800c90a <_dtoa_r+0x9ea>
 800c946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c948:	2b00      	cmp	r3, #0
 800c94a:	db04      	blt.n	800c956 <_dtoa_r+0xa36>
 800c94c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c94e:	430b      	orrs	r3, r1
 800c950:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c952:	430b      	orrs	r3, r1
 800c954:	d120      	bne.n	800c998 <_dtoa_r+0xa78>
 800c956:	2a00      	cmp	r2, #0
 800c958:	dded      	ble.n	800c936 <_dtoa_r+0xa16>
 800c95a:	4649      	mov	r1, r9
 800c95c:	2201      	movs	r2, #1
 800c95e:	4658      	mov	r0, fp
 800c960:	f000 fafe 	bl	800cf60 <__lshift>
 800c964:	4621      	mov	r1, r4
 800c966:	4681      	mov	r9, r0
 800c968:	f000 fb66 	bl	800d038 <__mcmp>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	dc03      	bgt.n	800c978 <_dtoa_r+0xa58>
 800c970:	d1e1      	bne.n	800c936 <_dtoa_r+0xa16>
 800c972:	f018 0f01 	tst.w	r8, #1
 800c976:	d0de      	beq.n	800c936 <_dtoa_r+0xa16>
 800c978:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c97c:	d1d8      	bne.n	800c930 <_dtoa_r+0xa10>
 800c97e:	9a02      	ldr	r2, [sp, #8]
 800c980:	2339      	movs	r3, #57	@ 0x39
 800c982:	7013      	strb	r3, [r2, #0]
 800c984:	4633      	mov	r3, r6
 800c986:	461e      	mov	r6, r3
 800c988:	3b01      	subs	r3, #1
 800c98a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c98e:	2a39      	cmp	r2, #57	@ 0x39
 800c990:	d052      	beq.n	800ca38 <_dtoa_r+0xb18>
 800c992:	3201      	adds	r2, #1
 800c994:	701a      	strb	r2, [r3, #0]
 800c996:	e60e      	b.n	800c5b6 <_dtoa_r+0x696>
 800c998:	2a00      	cmp	r2, #0
 800c99a:	dd07      	ble.n	800c9ac <_dtoa_r+0xa8c>
 800c99c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c9a0:	d0ed      	beq.n	800c97e <_dtoa_r+0xa5e>
 800c9a2:	9a02      	ldr	r2, [sp, #8]
 800c9a4:	f108 0301 	add.w	r3, r8, #1
 800c9a8:	7013      	strb	r3, [r2, #0]
 800c9aa:	e604      	b.n	800c5b6 <_dtoa_r+0x696>
 800c9ac:	9b07      	ldr	r3, [sp, #28]
 800c9ae:	9a07      	ldr	r2, [sp, #28]
 800c9b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c9b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d028      	beq.n	800ca0c <_dtoa_r+0xaec>
 800c9ba:	4649      	mov	r1, r9
 800c9bc:	2300      	movs	r3, #0
 800c9be:	220a      	movs	r2, #10
 800c9c0:	4658      	mov	r0, fp
 800c9c2:	f000 f921 	bl	800cc08 <__multadd>
 800c9c6:	42af      	cmp	r7, r5
 800c9c8:	4681      	mov	r9, r0
 800c9ca:	f04f 0300 	mov.w	r3, #0
 800c9ce:	f04f 020a 	mov.w	r2, #10
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	4658      	mov	r0, fp
 800c9d6:	d107      	bne.n	800c9e8 <_dtoa_r+0xac8>
 800c9d8:	f000 f916 	bl	800cc08 <__multadd>
 800c9dc:	4607      	mov	r7, r0
 800c9de:	4605      	mov	r5, r0
 800c9e0:	9b07      	ldr	r3, [sp, #28]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	9307      	str	r3, [sp, #28]
 800c9e6:	e774      	b.n	800c8d2 <_dtoa_r+0x9b2>
 800c9e8:	f000 f90e 	bl	800cc08 <__multadd>
 800c9ec:	4629      	mov	r1, r5
 800c9ee:	4607      	mov	r7, r0
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	220a      	movs	r2, #10
 800c9f4:	4658      	mov	r0, fp
 800c9f6:	f000 f907 	bl	800cc08 <__multadd>
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	e7f0      	b.n	800c9e0 <_dtoa_r+0xac0>
 800c9fe:	9b08      	ldr	r3, [sp, #32]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	bfcc      	ite	gt
 800ca04:	461e      	movgt	r6, r3
 800ca06:	2601      	movle	r6, #1
 800ca08:	4456      	add	r6, sl
 800ca0a:	2700      	movs	r7, #0
 800ca0c:	4649      	mov	r1, r9
 800ca0e:	2201      	movs	r2, #1
 800ca10:	4658      	mov	r0, fp
 800ca12:	f000 faa5 	bl	800cf60 <__lshift>
 800ca16:	4621      	mov	r1, r4
 800ca18:	4681      	mov	r9, r0
 800ca1a:	f000 fb0d 	bl	800d038 <__mcmp>
 800ca1e:	2800      	cmp	r0, #0
 800ca20:	dcb0      	bgt.n	800c984 <_dtoa_r+0xa64>
 800ca22:	d102      	bne.n	800ca2a <_dtoa_r+0xb0a>
 800ca24:	f018 0f01 	tst.w	r8, #1
 800ca28:	d1ac      	bne.n	800c984 <_dtoa_r+0xa64>
 800ca2a:	4633      	mov	r3, r6
 800ca2c:	461e      	mov	r6, r3
 800ca2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca32:	2a30      	cmp	r2, #48	@ 0x30
 800ca34:	d0fa      	beq.n	800ca2c <_dtoa_r+0xb0c>
 800ca36:	e5be      	b.n	800c5b6 <_dtoa_r+0x696>
 800ca38:	459a      	cmp	sl, r3
 800ca3a:	d1a4      	bne.n	800c986 <_dtoa_r+0xa66>
 800ca3c:	9b04      	ldr	r3, [sp, #16]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	9304      	str	r3, [sp, #16]
 800ca42:	2331      	movs	r3, #49	@ 0x31
 800ca44:	f88a 3000 	strb.w	r3, [sl]
 800ca48:	e5b5      	b.n	800c5b6 <_dtoa_r+0x696>
 800ca4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ca4c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800caac <_dtoa_r+0xb8c>
 800ca50:	b11b      	cbz	r3, 800ca5a <_dtoa_r+0xb3a>
 800ca52:	f10a 0308 	add.w	r3, sl, #8
 800ca56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ca58:	6013      	str	r3, [r2, #0]
 800ca5a:	4650      	mov	r0, sl
 800ca5c:	b017      	add	sp, #92	@ 0x5c
 800ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	f77f ae3d 	ble.w	800c6e4 <_dtoa_r+0x7c4>
 800ca6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ca6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800ca6e:	2001      	movs	r0, #1
 800ca70:	e65b      	b.n	800c72a <_dtoa_r+0x80a>
 800ca72:	9b08      	ldr	r3, [sp, #32]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	f77f aed6 	ble.w	800c826 <_dtoa_r+0x906>
 800ca7a:	4656      	mov	r6, sl
 800ca7c:	4621      	mov	r1, r4
 800ca7e:	4648      	mov	r0, r9
 800ca80:	f7ff f9c3 	bl	800be0a <quorem>
 800ca84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ca88:	f806 8b01 	strb.w	r8, [r6], #1
 800ca8c:	9b08      	ldr	r3, [sp, #32]
 800ca8e:	eba6 020a 	sub.w	r2, r6, sl
 800ca92:	4293      	cmp	r3, r2
 800ca94:	ddb3      	ble.n	800c9fe <_dtoa_r+0xade>
 800ca96:	4649      	mov	r1, r9
 800ca98:	2300      	movs	r3, #0
 800ca9a:	220a      	movs	r2, #10
 800ca9c:	4658      	mov	r0, fp
 800ca9e:	f000 f8b3 	bl	800cc08 <__multadd>
 800caa2:	4681      	mov	r9, r0
 800caa4:	e7ea      	b.n	800ca7c <_dtoa_r+0xb5c>
 800caa6:	bf00      	nop
 800caa8:	0800e6d7 	.word	0x0800e6d7
 800caac:	0800e65b 	.word	0x0800e65b

0800cab0 <_free_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4605      	mov	r5, r0
 800cab4:	2900      	cmp	r1, #0
 800cab6:	d041      	beq.n	800cb3c <_free_r+0x8c>
 800cab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cabc:	1f0c      	subs	r4, r1, #4
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	bfb8      	it	lt
 800cac2:	18e4      	addlt	r4, r4, r3
 800cac4:	f7fe fb88 	bl	800b1d8 <__malloc_lock>
 800cac8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb40 <_free_r+0x90>)
 800caca:	6813      	ldr	r3, [r2, #0]
 800cacc:	b933      	cbnz	r3, 800cadc <_free_r+0x2c>
 800cace:	6063      	str	r3, [r4, #4]
 800cad0:	6014      	str	r4, [r2, #0]
 800cad2:	4628      	mov	r0, r5
 800cad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cad8:	f7fe bb84 	b.w	800b1e4 <__malloc_unlock>
 800cadc:	42a3      	cmp	r3, r4
 800cade:	d908      	bls.n	800caf2 <_free_r+0x42>
 800cae0:	6820      	ldr	r0, [r4, #0]
 800cae2:	1821      	adds	r1, r4, r0
 800cae4:	428b      	cmp	r3, r1
 800cae6:	bf01      	itttt	eq
 800cae8:	6819      	ldreq	r1, [r3, #0]
 800caea:	685b      	ldreq	r3, [r3, #4]
 800caec:	1809      	addeq	r1, r1, r0
 800caee:	6021      	streq	r1, [r4, #0]
 800caf0:	e7ed      	b.n	800cace <_free_r+0x1e>
 800caf2:	461a      	mov	r2, r3
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	b10b      	cbz	r3, 800cafc <_free_r+0x4c>
 800caf8:	42a3      	cmp	r3, r4
 800cafa:	d9fa      	bls.n	800caf2 <_free_r+0x42>
 800cafc:	6811      	ldr	r1, [r2, #0]
 800cafe:	1850      	adds	r0, r2, r1
 800cb00:	42a0      	cmp	r0, r4
 800cb02:	d10b      	bne.n	800cb1c <_free_r+0x6c>
 800cb04:	6820      	ldr	r0, [r4, #0]
 800cb06:	4401      	add	r1, r0
 800cb08:	1850      	adds	r0, r2, r1
 800cb0a:	4283      	cmp	r3, r0
 800cb0c:	6011      	str	r1, [r2, #0]
 800cb0e:	d1e0      	bne.n	800cad2 <_free_r+0x22>
 800cb10:	6818      	ldr	r0, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	6053      	str	r3, [r2, #4]
 800cb16:	4408      	add	r0, r1
 800cb18:	6010      	str	r0, [r2, #0]
 800cb1a:	e7da      	b.n	800cad2 <_free_r+0x22>
 800cb1c:	d902      	bls.n	800cb24 <_free_r+0x74>
 800cb1e:	230c      	movs	r3, #12
 800cb20:	602b      	str	r3, [r5, #0]
 800cb22:	e7d6      	b.n	800cad2 <_free_r+0x22>
 800cb24:	6820      	ldr	r0, [r4, #0]
 800cb26:	1821      	adds	r1, r4, r0
 800cb28:	428b      	cmp	r3, r1
 800cb2a:	bf04      	itt	eq
 800cb2c:	6819      	ldreq	r1, [r3, #0]
 800cb2e:	685b      	ldreq	r3, [r3, #4]
 800cb30:	6063      	str	r3, [r4, #4]
 800cb32:	bf04      	itt	eq
 800cb34:	1809      	addeq	r1, r1, r0
 800cb36:	6021      	streq	r1, [r4, #0]
 800cb38:	6054      	str	r4, [r2, #4]
 800cb3a:	e7ca      	b.n	800cad2 <_free_r+0x22>
 800cb3c:	bd38      	pop	{r3, r4, r5, pc}
 800cb3e:	bf00      	nop
 800cb40:	20000e50 	.word	0x20000e50

0800cb44 <_Balloc>:
 800cb44:	b570      	push	{r4, r5, r6, lr}
 800cb46:	69c6      	ldr	r6, [r0, #28]
 800cb48:	4604      	mov	r4, r0
 800cb4a:	460d      	mov	r5, r1
 800cb4c:	b976      	cbnz	r6, 800cb6c <_Balloc+0x28>
 800cb4e:	2010      	movs	r0, #16
 800cb50:	f7fe fa90 	bl	800b074 <malloc>
 800cb54:	4602      	mov	r2, r0
 800cb56:	61e0      	str	r0, [r4, #28]
 800cb58:	b920      	cbnz	r0, 800cb64 <_Balloc+0x20>
 800cb5a:	4b18      	ldr	r3, [pc, #96]	@ (800cbbc <_Balloc+0x78>)
 800cb5c:	4818      	ldr	r0, [pc, #96]	@ (800cbc0 <_Balloc+0x7c>)
 800cb5e:	216b      	movs	r1, #107	@ 0x6b
 800cb60:	f000 fdec 	bl	800d73c <__assert_func>
 800cb64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb68:	6006      	str	r6, [r0, #0]
 800cb6a:	60c6      	str	r6, [r0, #12]
 800cb6c:	69e6      	ldr	r6, [r4, #28]
 800cb6e:	68f3      	ldr	r3, [r6, #12]
 800cb70:	b183      	cbz	r3, 800cb94 <_Balloc+0x50>
 800cb72:	69e3      	ldr	r3, [r4, #28]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb7a:	b9b8      	cbnz	r0, 800cbac <_Balloc+0x68>
 800cb7c:	2101      	movs	r1, #1
 800cb7e:	fa01 f605 	lsl.w	r6, r1, r5
 800cb82:	1d72      	adds	r2, r6, #5
 800cb84:	0092      	lsls	r2, r2, #2
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 fdf6 	bl	800d778 <_calloc_r>
 800cb8c:	b160      	cbz	r0, 800cba8 <_Balloc+0x64>
 800cb8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb92:	e00e      	b.n	800cbb2 <_Balloc+0x6e>
 800cb94:	2221      	movs	r2, #33	@ 0x21
 800cb96:	2104      	movs	r1, #4
 800cb98:	4620      	mov	r0, r4
 800cb9a:	f000 fded 	bl	800d778 <_calloc_r>
 800cb9e:	69e3      	ldr	r3, [r4, #28]
 800cba0:	60f0      	str	r0, [r6, #12]
 800cba2:	68db      	ldr	r3, [r3, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d1e4      	bne.n	800cb72 <_Balloc+0x2e>
 800cba8:	2000      	movs	r0, #0
 800cbaa:	bd70      	pop	{r4, r5, r6, pc}
 800cbac:	6802      	ldr	r2, [r0, #0]
 800cbae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbb8:	e7f7      	b.n	800cbaa <_Balloc+0x66>
 800cbba:	bf00      	nop
 800cbbc:	0800e668 	.word	0x0800e668
 800cbc0:	0800e6e8 	.word	0x0800e6e8

0800cbc4 <_Bfree>:
 800cbc4:	b570      	push	{r4, r5, r6, lr}
 800cbc6:	69c6      	ldr	r6, [r0, #28]
 800cbc8:	4605      	mov	r5, r0
 800cbca:	460c      	mov	r4, r1
 800cbcc:	b976      	cbnz	r6, 800cbec <_Bfree+0x28>
 800cbce:	2010      	movs	r0, #16
 800cbd0:	f7fe fa50 	bl	800b074 <malloc>
 800cbd4:	4602      	mov	r2, r0
 800cbd6:	61e8      	str	r0, [r5, #28]
 800cbd8:	b920      	cbnz	r0, 800cbe4 <_Bfree+0x20>
 800cbda:	4b09      	ldr	r3, [pc, #36]	@ (800cc00 <_Bfree+0x3c>)
 800cbdc:	4809      	ldr	r0, [pc, #36]	@ (800cc04 <_Bfree+0x40>)
 800cbde:	218f      	movs	r1, #143	@ 0x8f
 800cbe0:	f000 fdac 	bl	800d73c <__assert_func>
 800cbe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbe8:	6006      	str	r6, [r0, #0]
 800cbea:	60c6      	str	r6, [r0, #12]
 800cbec:	b13c      	cbz	r4, 800cbfe <_Bfree+0x3a>
 800cbee:	69eb      	ldr	r3, [r5, #28]
 800cbf0:	6862      	ldr	r2, [r4, #4]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbf8:	6021      	str	r1, [r4, #0]
 800cbfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbfe:	bd70      	pop	{r4, r5, r6, pc}
 800cc00:	0800e668 	.word	0x0800e668
 800cc04:	0800e6e8 	.word	0x0800e6e8

0800cc08 <__multadd>:
 800cc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0c:	690d      	ldr	r5, [r1, #16]
 800cc0e:	4607      	mov	r7, r0
 800cc10:	460c      	mov	r4, r1
 800cc12:	461e      	mov	r6, r3
 800cc14:	f101 0c14 	add.w	ip, r1, #20
 800cc18:	2000      	movs	r0, #0
 800cc1a:	f8dc 3000 	ldr.w	r3, [ip]
 800cc1e:	b299      	uxth	r1, r3
 800cc20:	fb02 6101 	mla	r1, r2, r1, r6
 800cc24:	0c1e      	lsrs	r6, r3, #16
 800cc26:	0c0b      	lsrs	r3, r1, #16
 800cc28:	fb02 3306 	mla	r3, r2, r6, r3
 800cc2c:	b289      	uxth	r1, r1
 800cc2e:	3001      	adds	r0, #1
 800cc30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc34:	4285      	cmp	r5, r0
 800cc36:	f84c 1b04 	str.w	r1, [ip], #4
 800cc3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc3e:	dcec      	bgt.n	800cc1a <__multadd+0x12>
 800cc40:	b30e      	cbz	r6, 800cc86 <__multadd+0x7e>
 800cc42:	68a3      	ldr	r3, [r4, #8]
 800cc44:	42ab      	cmp	r3, r5
 800cc46:	dc19      	bgt.n	800cc7c <__multadd+0x74>
 800cc48:	6861      	ldr	r1, [r4, #4]
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	3101      	adds	r1, #1
 800cc4e:	f7ff ff79 	bl	800cb44 <_Balloc>
 800cc52:	4680      	mov	r8, r0
 800cc54:	b928      	cbnz	r0, 800cc62 <__multadd+0x5a>
 800cc56:	4602      	mov	r2, r0
 800cc58:	4b0c      	ldr	r3, [pc, #48]	@ (800cc8c <__multadd+0x84>)
 800cc5a:	480d      	ldr	r0, [pc, #52]	@ (800cc90 <__multadd+0x88>)
 800cc5c:	21ba      	movs	r1, #186	@ 0xba
 800cc5e:	f000 fd6d 	bl	800d73c <__assert_func>
 800cc62:	6922      	ldr	r2, [r4, #16]
 800cc64:	3202      	adds	r2, #2
 800cc66:	f104 010c 	add.w	r1, r4, #12
 800cc6a:	0092      	lsls	r2, r2, #2
 800cc6c:	300c      	adds	r0, #12
 800cc6e:	f7ff f8be 	bl	800bdee <memcpy>
 800cc72:	4621      	mov	r1, r4
 800cc74:	4638      	mov	r0, r7
 800cc76:	f7ff ffa5 	bl	800cbc4 <_Bfree>
 800cc7a:	4644      	mov	r4, r8
 800cc7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc80:	3501      	adds	r5, #1
 800cc82:	615e      	str	r6, [r3, #20]
 800cc84:	6125      	str	r5, [r4, #16]
 800cc86:	4620      	mov	r0, r4
 800cc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc8c:	0800e6d7 	.word	0x0800e6d7
 800cc90:	0800e6e8 	.word	0x0800e6e8

0800cc94 <__hi0bits>:
 800cc94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc98:	4603      	mov	r3, r0
 800cc9a:	bf36      	itet	cc
 800cc9c:	0403      	lslcc	r3, r0, #16
 800cc9e:	2000      	movcs	r0, #0
 800cca0:	2010      	movcc	r0, #16
 800cca2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cca6:	bf3c      	itt	cc
 800cca8:	021b      	lslcc	r3, r3, #8
 800ccaa:	3008      	addcc	r0, #8
 800ccac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccb0:	bf3c      	itt	cc
 800ccb2:	011b      	lslcc	r3, r3, #4
 800ccb4:	3004      	addcc	r0, #4
 800ccb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccba:	bf3c      	itt	cc
 800ccbc:	009b      	lslcc	r3, r3, #2
 800ccbe:	3002      	addcc	r0, #2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	db05      	blt.n	800ccd0 <__hi0bits+0x3c>
 800ccc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ccc8:	f100 0001 	add.w	r0, r0, #1
 800cccc:	bf08      	it	eq
 800ccce:	2020      	moveq	r0, #32
 800ccd0:	4770      	bx	lr

0800ccd2 <__lo0bits>:
 800ccd2:	6803      	ldr	r3, [r0, #0]
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	f013 0007 	ands.w	r0, r3, #7
 800ccda:	d00b      	beq.n	800ccf4 <__lo0bits+0x22>
 800ccdc:	07d9      	lsls	r1, r3, #31
 800ccde:	d421      	bmi.n	800cd24 <__lo0bits+0x52>
 800cce0:	0798      	lsls	r0, r3, #30
 800cce2:	bf49      	itett	mi
 800cce4:	085b      	lsrmi	r3, r3, #1
 800cce6:	089b      	lsrpl	r3, r3, #2
 800cce8:	2001      	movmi	r0, #1
 800ccea:	6013      	strmi	r3, [r2, #0]
 800ccec:	bf5c      	itt	pl
 800ccee:	6013      	strpl	r3, [r2, #0]
 800ccf0:	2002      	movpl	r0, #2
 800ccf2:	4770      	bx	lr
 800ccf4:	b299      	uxth	r1, r3
 800ccf6:	b909      	cbnz	r1, 800ccfc <__lo0bits+0x2a>
 800ccf8:	0c1b      	lsrs	r3, r3, #16
 800ccfa:	2010      	movs	r0, #16
 800ccfc:	b2d9      	uxtb	r1, r3
 800ccfe:	b909      	cbnz	r1, 800cd04 <__lo0bits+0x32>
 800cd00:	3008      	adds	r0, #8
 800cd02:	0a1b      	lsrs	r3, r3, #8
 800cd04:	0719      	lsls	r1, r3, #28
 800cd06:	bf04      	itt	eq
 800cd08:	091b      	lsreq	r3, r3, #4
 800cd0a:	3004      	addeq	r0, #4
 800cd0c:	0799      	lsls	r1, r3, #30
 800cd0e:	bf04      	itt	eq
 800cd10:	089b      	lsreq	r3, r3, #2
 800cd12:	3002      	addeq	r0, #2
 800cd14:	07d9      	lsls	r1, r3, #31
 800cd16:	d403      	bmi.n	800cd20 <__lo0bits+0x4e>
 800cd18:	085b      	lsrs	r3, r3, #1
 800cd1a:	f100 0001 	add.w	r0, r0, #1
 800cd1e:	d003      	beq.n	800cd28 <__lo0bits+0x56>
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	4770      	bx	lr
 800cd24:	2000      	movs	r0, #0
 800cd26:	4770      	bx	lr
 800cd28:	2020      	movs	r0, #32
 800cd2a:	4770      	bx	lr

0800cd2c <__i2b>:
 800cd2c:	b510      	push	{r4, lr}
 800cd2e:	460c      	mov	r4, r1
 800cd30:	2101      	movs	r1, #1
 800cd32:	f7ff ff07 	bl	800cb44 <_Balloc>
 800cd36:	4602      	mov	r2, r0
 800cd38:	b928      	cbnz	r0, 800cd46 <__i2b+0x1a>
 800cd3a:	4b05      	ldr	r3, [pc, #20]	@ (800cd50 <__i2b+0x24>)
 800cd3c:	4805      	ldr	r0, [pc, #20]	@ (800cd54 <__i2b+0x28>)
 800cd3e:	f240 1145 	movw	r1, #325	@ 0x145
 800cd42:	f000 fcfb 	bl	800d73c <__assert_func>
 800cd46:	2301      	movs	r3, #1
 800cd48:	6144      	str	r4, [r0, #20]
 800cd4a:	6103      	str	r3, [r0, #16]
 800cd4c:	bd10      	pop	{r4, pc}
 800cd4e:	bf00      	nop
 800cd50:	0800e6d7 	.word	0x0800e6d7
 800cd54:	0800e6e8 	.word	0x0800e6e8

0800cd58 <__multiply>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	4614      	mov	r4, r2
 800cd5e:	690a      	ldr	r2, [r1, #16]
 800cd60:	6923      	ldr	r3, [r4, #16]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	bfa8      	it	ge
 800cd66:	4623      	movge	r3, r4
 800cd68:	460f      	mov	r7, r1
 800cd6a:	bfa4      	itt	ge
 800cd6c:	460c      	movge	r4, r1
 800cd6e:	461f      	movge	r7, r3
 800cd70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd78:	68a3      	ldr	r3, [r4, #8]
 800cd7a:	6861      	ldr	r1, [r4, #4]
 800cd7c:	eb0a 0609 	add.w	r6, sl, r9
 800cd80:	42b3      	cmp	r3, r6
 800cd82:	b085      	sub	sp, #20
 800cd84:	bfb8      	it	lt
 800cd86:	3101      	addlt	r1, #1
 800cd88:	f7ff fedc 	bl	800cb44 <_Balloc>
 800cd8c:	b930      	cbnz	r0, 800cd9c <__multiply+0x44>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	4b44      	ldr	r3, [pc, #272]	@ (800cea4 <__multiply+0x14c>)
 800cd92:	4845      	ldr	r0, [pc, #276]	@ (800cea8 <__multiply+0x150>)
 800cd94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd98:	f000 fcd0 	bl	800d73c <__assert_func>
 800cd9c:	f100 0514 	add.w	r5, r0, #20
 800cda0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cda4:	462b      	mov	r3, r5
 800cda6:	2200      	movs	r2, #0
 800cda8:	4543      	cmp	r3, r8
 800cdaa:	d321      	bcc.n	800cdf0 <__multiply+0x98>
 800cdac:	f107 0114 	add.w	r1, r7, #20
 800cdb0:	f104 0214 	add.w	r2, r4, #20
 800cdb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cdb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cdbc:	9302      	str	r3, [sp, #8]
 800cdbe:	1b13      	subs	r3, r2, r4
 800cdc0:	3b15      	subs	r3, #21
 800cdc2:	f023 0303 	bic.w	r3, r3, #3
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	f104 0715 	add.w	r7, r4, #21
 800cdcc:	42ba      	cmp	r2, r7
 800cdce:	bf38      	it	cc
 800cdd0:	2304      	movcc	r3, #4
 800cdd2:	9301      	str	r3, [sp, #4]
 800cdd4:	9b02      	ldr	r3, [sp, #8]
 800cdd6:	9103      	str	r1, [sp, #12]
 800cdd8:	428b      	cmp	r3, r1
 800cdda:	d80c      	bhi.n	800cdf6 <__multiply+0x9e>
 800cddc:	2e00      	cmp	r6, #0
 800cdde:	dd03      	ble.n	800cde8 <__multiply+0x90>
 800cde0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d05a      	beq.n	800ce9e <__multiply+0x146>
 800cde8:	6106      	str	r6, [r0, #16]
 800cdea:	b005      	add	sp, #20
 800cdec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdf0:	f843 2b04 	str.w	r2, [r3], #4
 800cdf4:	e7d8      	b.n	800cda8 <__multiply+0x50>
 800cdf6:	f8b1 a000 	ldrh.w	sl, [r1]
 800cdfa:	f1ba 0f00 	cmp.w	sl, #0
 800cdfe:	d023      	beq.n	800ce48 <__multiply+0xf0>
 800ce00:	f104 0e14 	add.w	lr, r4, #20
 800ce04:	46a9      	mov	r9, r5
 800ce06:	f04f 0c00 	mov.w	ip, #0
 800ce0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce0e:	f8d9 3000 	ldr.w	r3, [r9]
 800ce12:	fa1f fb87 	uxth.w	fp, r7
 800ce16:	b29b      	uxth	r3, r3
 800ce18:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce1c:	4463      	add	r3, ip
 800ce1e:	f8d9 c000 	ldr.w	ip, [r9]
 800ce22:	0c3f      	lsrs	r7, r7, #16
 800ce24:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ce28:	fb0a c707 	mla	r7, sl, r7, ip
 800ce2c:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce36:	4572      	cmp	r2, lr
 800ce38:	f849 3b04 	str.w	r3, [r9], #4
 800ce3c:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce40:	d8e3      	bhi.n	800ce0a <__multiply+0xb2>
 800ce42:	9b01      	ldr	r3, [sp, #4]
 800ce44:	f845 c003 	str.w	ip, [r5, r3]
 800ce48:	9b03      	ldr	r3, [sp, #12]
 800ce4a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce4e:	3104      	adds	r1, #4
 800ce50:	f1b9 0f00 	cmp.w	r9, #0
 800ce54:	d021      	beq.n	800ce9a <__multiply+0x142>
 800ce56:	682b      	ldr	r3, [r5, #0]
 800ce58:	f104 0c14 	add.w	ip, r4, #20
 800ce5c:	46ae      	mov	lr, r5
 800ce5e:	f04f 0a00 	mov.w	sl, #0
 800ce62:	f8bc b000 	ldrh.w	fp, [ip]
 800ce66:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce6a:	fb09 770b 	mla	r7, r9, fp, r7
 800ce6e:	4457      	add	r7, sl
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce76:	f84e 3b04 	str.w	r3, [lr], #4
 800ce7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce82:	f8be 3000 	ldrh.w	r3, [lr]
 800ce86:	fb09 330a 	mla	r3, r9, sl, r3
 800ce8a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ce8e:	4562      	cmp	r2, ip
 800ce90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce94:	d8e5      	bhi.n	800ce62 <__multiply+0x10a>
 800ce96:	9f01      	ldr	r7, [sp, #4]
 800ce98:	51eb      	str	r3, [r5, r7]
 800ce9a:	3504      	adds	r5, #4
 800ce9c:	e79a      	b.n	800cdd4 <__multiply+0x7c>
 800ce9e:	3e01      	subs	r6, #1
 800cea0:	e79c      	b.n	800cddc <__multiply+0x84>
 800cea2:	bf00      	nop
 800cea4:	0800e6d7 	.word	0x0800e6d7
 800cea8:	0800e6e8 	.word	0x0800e6e8

0800ceac <__pow5mult>:
 800ceac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ceb0:	4615      	mov	r5, r2
 800ceb2:	f012 0203 	ands.w	r2, r2, #3
 800ceb6:	4607      	mov	r7, r0
 800ceb8:	460e      	mov	r6, r1
 800ceba:	d007      	beq.n	800cecc <__pow5mult+0x20>
 800cebc:	4c25      	ldr	r4, [pc, #148]	@ (800cf54 <__pow5mult+0xa8>)
 800cebe:	3a01      	subs	r2, #1
 800cec0:	2300      	movs	r3, #0
 800cec2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cec6:	f7ff fe9f 	bl	800cc08 <__multadd>
 800ceca:	4606      	mov	r6, r0
 800cecc:	10ad      	asrs	r5, r5, #2
 800cece:	d03d      	beq.n	800cf4c <__pow5mult+0xa0>
 800ced0:	69fc      	ldr	r4, [r7, #28]
 800ced2:	b97c      	cbnz	r4, 800cef4 <__pow5mult+0x48>
 800ced4:	2010      	movs	r0, #16
 800ced6:	f7fe f8cd 	bl	800b074 <malloc>
 800ceda:	4602      	mov	r2, r0
 800cedc:	61f8      	str	r0, [r7, #28]
 800cede:	b928      	cbnz	r0, 800ceec <__pow5mult+0x40>
 800cee0:	4b1d      	ldr	r3, [pc, #116]	@ (800cf58 <__pow5mult+0xac>)
 800cee2:	481e      	ldr	r0, [pc, #120]	@ (800cf5c <__pow5mult+0xb0>)
 800cee4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cee8:	f000 fc28 	bl	800d73c <__assert_func>
 800ceec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cef0:	6004      	str	r4, [r0, #0]
 800cef2:	60c4      	str	r4, [r0, #12]
 800cef4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cef8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cefc:	b94c      	cbnz	r4, 800cf12 <__pow5mult+0x66>
 800cefe:	f240 2171 	movw	r1, #625	@ 0x271
 800cf02:	4638      	mov	r0, r7
 800cf04:	f7ff ff12 	bl	800cd2c <__i2b>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf0e:	4604      	mov	r4, r0
 800cf10:	6003      	str	r3, [r0, #0]
 800cf12:	f04f 0900 	mov.w	r9, #0
 800cf16:	07eb      	lsls	r3, r5, #31
 800cf18:	d50a      	bpl.n	800cf30 <__pow5mult+0x84>
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	4622      	mov	r2, r4
 800cf1e:	4638      	mov	r0, r7
 800cf20:	f7ff ff1a 	bl	800cd58 <__multiply>
 800cf24:	4631      	mov	r1, r6
 800cf26:	4680      	mov	r8, r0
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff fe4b 	bl	800cbc4 <_Bfree>
 800cf2e:	4646      	mov	r6, r8
 800cf30:	106d      	asrs	r5, r5, #1
 800cf32:	d00b      	beq.n	800cf4c <__pow5mult+0xa0>
 800cf34:	6820      	ldr	r0, [r4, #0]
 800cf36:	b938      	cbnz	r0, 800cf48 <__pow5mult+0x9c>
 800cf38:	4622      	mov	r2, r4
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	f7ff ff0b 	bl	800cd58 <__multiply>
 800cf42:	6020      	str	r0, [r4, #0]
 800cf44:	f8c0 9000 	str.w	r9, [r0]
 800cf48:	4604      	mov	r4, r0
 800cf4a:	e7e4      	b.n	800cf16 <__pow5mult+0x6a>
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf52:	bf00      	nop
 800cf54:	0800e744 	.word	0x0800e744
 800cf58:	0800e668 	.word	0x0800e668
 800cf5c:	0800e6e8 	.word	0x0800e6e8

0800cf60 <__lshift>:
 800cf60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf64:	460c      	mov	r4, r1
 800cf66:	6849      	ldr	r1, [r1, #4]
 800cf68:	6923      	ldr	r3, [r4, #16]
 800cf6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf6e:	68a3      	ldr	r3, [r4, #8]
 800cf70:	4607      	mov	r7, r0
 800cf72:	4691      	mov	r9, r2
 800cf74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf78:	f108 0601 	add.w	r6, r8, #1
 800cf7c:	42b3      	cmp	r3, r6
 800cf7e:	db0b      	blt.n	800cf98 <__lshift+0x38>
 800cf80:	4638      	mov	r0, r7
 800cf82:	f7ff fddf 	bl	800cb44 <_Balloc>
 800cf86:	4605      	mov	r5, r0
 800cf88:	b948      	cbnz	r0, 800cf9e <__lshift+0x3e>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	4b28      	ldr	r3, [pc, #160]	@ (800d030 <__lshift+0xd0>)
 800cf8e:	4829      	ldr	r0, [pc, #164]	@ (800d034 <__lshift+0xd4>)
 800cf90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf94:	f000 fbd2 	bl	800d73c <__assert_func>
 800cf98:	3101      	adds	r1, #1
 800cf9a:	005b      	lsls	r3, r3, #1
 800cf9c:	e7ee      	b.n	800cf7c <__lshift+0x1c>
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	f100 0114 	add.w	r1, r0, #20
 800cfa4:	f100 0210 	add.w	r2, r0, #16
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	4553      	cmp	r3, sl
 800cfac:	db33      	blt.n	800d016 <__lshift+0xb6>
 800cfae:	6920      	ldr	r0, [r4, #16]
 800cfb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfb4:	f104 0314 	add.w	r3, r4, #20
 800cfb8:	f019 091f 	ands.w	r9, r9, #31
 800cfbc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfc0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfc4:	d02b      	beq.n	800d01e <__lshift+0xbe>
 800cfc6:	f1c9 0e20 	rsb	lr, r9, #32
 800cfca:	468a      	mov	sl, r1
 800cfcc:	2200      	movs	r2, #0
 800cfce:	6818      	ldr	r0, [r3, #0]
 800cfd0:	fa00 f009 	lsl.w	r0, r0, r9
 800cfd4:	4310      	orrs	r0, r2
 800cfd6:	f84a 0b04 	str.w	r0, [sl], #4
 800cfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfde:	459c      	cmp	ip, r3
 800cfe0:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfe4:	d8f3      	bhi.n	800cfce <__lshift+0x6e>
 800cfe6:	ebac 0304 	sub.w	r3, ip, r4
 800cfea:	3b15      	subs	r3, #21
 800cfec:	f023 0303 	bic.w	r3, r3, #3
 800cff0:	3304      	adds	r3, #4
 800cff2:	f104 0015 	add.w	r0, r4, #21
 800cff6:	4584      	cmp	ip, r0
 800cff8:	bf38      	it	cc
 800cffa:	2304      	movcc	r3, #4
 800cffc:	50ca      	str	r2, [r1, r3]
 800cffe:	b10a      	cbz	r2, 800d004 <__lshift+0xa4>
 800d000:	f108 0602 	add.w	r6, r8, #2
 800d004:	3e01      	subs	r6, #1
 800d006:	4638      	mov	r0, r7
 800d008:	612e      	str	r6, [r5, #16]
 800d00a:	4621      	mov	r1, r4
 800d00c:	f7ff fdda 	bl	800cbc4 <_Bfree>
 800d010:	4628      	mov	r0, r5
 800d012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d016:	f842 0f04 	str.w	r0, [r2, #4]!
 800d01a:	3301      	adds	r3, #1
 800d01c:	e7c5      	b.n	800cfaa <__lshift+0x4a>
 800d01e:	3904      	subs	r1, #4
 800d020:	f853 2b04 	ldr.w	r2, [r3], #4
 800d024:	f841 2f04 	str.w	r2, [r1, #4]!
 800d028:	459c      	cmp	ip, r3
 800d02a:	d8f9      	bhi.n	800d020 <__lshift+0xc0>
 800d02c:	e7ea      	b.n	800d004 <__lshift+0xa4>
 800d02e:	bf00      	nop
 800d030:	0800e6d7 	.word	0x0800e6d7
 800d034:	0800e6e8 	.word	0x0800e6e8

0800d038 <__mcmp>:
 800d038:	690a      	ldr	r2, [r1, #16]
 800d03a:	4603      	mov	r3, r0
 800d03c:	6900      	ldr	r0, [r0, #16]
 800d03e:	1a80      	subs	r0, r0, r2
 800d040:	b530      	push	{r4, r5, lr}
 800d042:	d10e      	bne.n	800d062 <__mcmp+0x2a>
 800d044:	3314      	adds	r3, #20
 800d046:	3114      	adds	r1, #20
 800d048:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d04c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d050:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d054:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d058:	4295      	cmp	r5, r2
 800d05a:	d003      	beq.n	800d064 <__mcmp+0x2c>
 800d05c:	d205      	bcs.n	800d06a <__mcmp+0x32>
 800d05e:	f04f 30ff 	mov.w	r0, #4294967295
 800d062:	bd30      	pop	{r4, r5, pc}
 800d064:	42a3      	cmp	r3, r4
 800d066:	d3f3      	bcc.n	800d050 <__mcmp+0x18>
 800d068:	e7fb      	b.n	800d062 <__mcmp+0x2a>
 800d06a:	2001      	movs	r0, #1
 800d06c:	e7f9      	b.n	800d062 <__mcmp+0x2a>
	...

0800d070 <__mdiff>:
 800d070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	4689      	mov	r9, r1
 800d076:	4606      	mov	r6, r0
 800d078:	4611      	mov	r1, r2
 800d07a:	4648      	mov	r0, r9
 800d07c:	4614      	mov	r4, r2
 800d07e:	f7ff ffdb 	bl	800d038 <__mcmp>
 800d082:	1e05      	subs	r5, r0, #0
 800d084:	d112      	bne.n	800d0ac <__mdiff+0x3c>
 800d086:	4629      	mov	r1, r5
 800d088:	4630      	mov	r0, r6
 800d08a:	f7ff fd5b 	bl	800cb44 <_Balloc>
 800d08e:	4602      	mov	r2, r0
 800d090:	b928      	cbnz	r0, 800d09e <__mdiff+0x2e>
 800d092:	4b3e      	ldr	r3, [pc, #248]	@ (800d18c <__mdiff+0x11c>)
 800d094:	f240 2137 	movw	r1, #567	@ 0x237
 800d098:	483d      	ldr	r0, [pc, #244]	@ (800d190 <__mdiff+0x120>)
 800d09a:	f000 fb4f 	bl	800d73c <__assert_func>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	b003      	add	sp, #12
 800d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ac:	bfbc      	itt	lt
 800d0ae:	464b      	movlt	r3, r9
 800d0b0:	46a1      	movlt	r9, r4
 800d0b2:	4630      	mov	r0, r6
 800d0b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0b8:	bfba      	itte	lt
 800d0ba:	461c      	movlt	r4, r3
 800d0bc:	2501      	movlt	r5, #1
 800d0be:	2500      	movge	r5, #0
 800d0c0:	f7ff fd40 	bl	800cb44 <_Balloc>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	b918      	cbnz	r0, 800d0d0 <__mdiff+0x60>
 800d0c8:	4b30      	ldr	r3, [pc, #192]	@ (800d18c <__mdiff+0x11c>)
 800d0ca:	f240 2145 	movw	r1, #581	@ 0x245
 800d0ce:	e7e3      	b.n	800d098 <__mdiff+0x28>
 800d0d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0d4:	6926      	ldr	r6, [r4, #16]
 800d0d6:	60c5      	str	r5, [r0, #12]
 800d0d8:	f109 0310 	add.w	r3, r9, #16
 800d0dc:	f109 0514 	add.w	r5, r9, #20
 800d0e0:	f104 0e14 	add.w	lr, r4, #20
 800d0e4:	f100 0b14 	add.w	fp, r0, #20
 800d0e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d0ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d0f0:	9301      	str	r3, [sp, #4]
 800d0f2:	46d9      	mov	r9, fp
 800d0f4:	f04f 0c00 	mov.w	ip, #0
 800d0f8:	9b01      	ldr	r3, [sp, #4]
 800d0fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d0fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d102:	9301      	str	r3, [sp, #4]
 800d104:	b281      	uxth	r1, r0
 800d106:	fa1f f38a 	uxth.w	r3, sl
 800d10a:	1a5b      	subs	r3, r3, r1
 800d10c:	0c00      	lsrs	r0, r0, #16
 800d10e:	4463      	add	r3, ip
 800d110:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d114:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d118:	b29b      	uxth	r3, r3
 800d11a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d11e:	4576      	cmp	r6, lr
 800d120:	f849 3b04 	str.w	r3, [r9], #4
 800d124:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d128:	d8e6      	bhi.n	800d0f8 <__mdiff+0x88>
 800d12a:	1b33      	subs	r3, r6, r4
 800d12c:	3b15      	subs	r3, #21
 800d12e:	f023 0303 	bic.w	r3, r3, #3
 800d132:	3415      	adds	r4, #21
 800d134:	3304      	adds	r3, #4
 800d136:	42a6      	cmp	r6, r4
 800d138:	bf38      	it	cc
 800d13a:	2304      	movcc	r3, #4
 800d13c:	441d      	add	r5, r3
 800d13e:	445b      	add	r3, fp
 800d140:	461e      	mov	r6, r3
 800d142:	462c      	mov	r4, r5
 800d144:	4544      	cmp	r4, r8
 800d146:	d30e      	bcc.n	800d166 <__mdiff+0xf6>
 800d148:	f108 0103 	add.w	r1, r8, #3
 800d14c:	1b49      	subs	r1, r1, r5
 800d14e:	f021 0103 	bic.w	r1, r1, #3
 800d152:	3d03      	subs	r5, #3
 800d154:	45a8      	cmp	r8, r5
 800d156:	bf38      	it	cc
 800d158:	2100      	movcc	r1, #0
 800d15a:	440b      	add	r3, r1
 800d15c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d160:	b191      	cbz	r1, 800d188 <__mdiff+0x118>
 800d162:	6117      	str	r7, [r2, #16]
 800d164:	e79e      	b.n	800d0a4 <__mdiff+0x34>
 800d166:	f854 1b04 	ldr.w	r1, [r4], #4
 800d16a:	46e6      	mov	lr, ip
 800d16c:	0c08      	lsrs	r0, r1, #16
 800d16e:	fa1c fc81 	uxtah	ip, ip, r1
 800d172:	4471      	add	r1, lr
 800d174:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d178:	b289      	uxth	r1, r1
 800d17a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d17e:	f846 1b04 	str.w	r1, [r6], #4
 800d182:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d186:	e7dd      	b.n	800d144 <__mdiff+0xd4>
 800d188:	3f01      	subs	r7, #1
 800d18a:	e7e7      	b.n	800d15c <__mdiff+0xec>
 800d18c:	0800e6d7 	.word	0x0800e6d7
 800d190:	0800e6e8 	.word	0x0800e6e8

0800d194 <__d2b>:
 800d194:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d198:	2101      	movs	r1, #1
 800d19a:	9e08      	ldr	r6, [sp, #32]
 800d19c:	4690      	mov	r8, r2
 800d19e:	4699      	mov	r9, r3
 800d1a0:	f7ff fcd0 	bl	800cb44 <_Balloc>
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	b930      	cbnz	r0, 800d1b6 <__d2b+0x22>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	4b24      	ldr	r3, [pc, #144]	@ (800d23c <__d2b+0xa8>)
 800d1ac:	4824      	ldr	r0, [pc, #144]	@ (800d240 <__d2b+0xac>)
 800d1ae:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1b2:	f000 fac3 	bl	800d73c <__assert_func>
 800d1b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1be:	b10d      	cbz	r5, 800d1c4 <__d2b+0x30>
 800d1c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1c4:	9301      	str	r3, [sp, #4]
 800d1c6:	f1b8 0300 	subs.w	r3, r8, #0
 800d1ca:	d024      	beq.n	800d216 <__d2b+0x82>
 800d1cc:	4668      	mov	r0, sp
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	f7ff fd7f 	bl	800ccd2 <__lo0bits>
 800d1d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1d8:	b1d8      	cbz	r0, 800d212 <__d2b+0x7e>
 800d1da:	f1c0 0320 	rsb	r3, r0, #32
 800d1de:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e2:	430b      	orrs	r3, r1
 800d1e4:	40c2      	lsrs	r2, r0
 800d1e6:	6163      	str	r3, [r4, #20]
 800d1e8:	9201      	str	r2, [sp, #4]
 800d1ea:	9b01      	ldr	r3, [sp, #4]
 800d1ec:	61a3      	str	r3, [r4, #24]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	bf0c      	ite	eq
 800d1f2:	2201      	moveq	r2, #1
 800d1f4:	2202      	movne	r2, #2
 800d1f6:	6122      	str	r2, [r4, #16]
 800d1f8:	b1ad      	cbz	r5, 800d226 <__d2b+0x92>
 800d1fa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d1fe:	4405      	add	r5, r0
 800d200:	6035      	str	r5, [r6, #0]
 800d202:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d208:	6018      	str	r0, [r3, #0]
 800d20a:	4620      	mov	r0, r4
 800d20c:	b002      	add	sp, #8
 800d20e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800d212:	6161      	str	r1, [r4, #20]
 800d214:	e7e9      	b.n	800d1ea <__d2b+0x56>
 800d216:	a801      	add	r0, sp, #4
 800d218:	f7ff fd5b 	bl	800ccd2 <__lo0bits>
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	6163      	str	r3, [r4, #20]
 800d220:	3020      	adds	r0, #32
 800d222:	2201      	movs	r2, #1
 800d224:	e7e7      	b.n	800d1f6 <__d2b+0x62>
 800d226:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d22a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d22e:	6030      	str	r0, [r6, #0]
 800d230:	6918      	ldr	r0, [r3, #16]
 800d232:	f7ff fd2f 	bl	800cc94 <__hi0bits>
 800d236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d23a:	e7e4      	b.n	800d206 <__d2b+0x72>
 800d23c:	0800e6d7 	.word	0x0800e6d7
 800d240:	0800e6e8 	.word	0x0800e6e8

0800d244 <__sfputc_r>:
 800d244:	6893      	ldr	r3, [r2, #8]
 800d246:	3b01      	subs	r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	b410      	push	{r4}
 800d24c:	6093      	str	r3, [r2, #8]
 800d24e:	da07      	bge.n	800d260 <__sfputc_r+0x1c>
 800d250:	6994      	ldr	r4, [r2, #24]
 800d252:	42a3      	cmp	r3, r4
 800d254:	db01      	blt.n	800d25a <__sfputc_r+0x16>
 800d256:	290a      	cmp	r1, #10
 800d258:	d102      	bne.n	800d260 <__sfputc_r+0x1c>
 800d25a:	bc10      	pop	{r4}
 800d25c:	f000 b9da 	b.w	800d614 <__swbuf_r>
 800d260:	6813      	ldr	r3, [r2, #0]
 800d262:	1c58      	adds	r0, r3, #1
 800d264:	6010      	str	r0, [r2, #0]
 800d266:	7019      	strb	r1, [r3, #0]
 800d268:	4608      	mov	r0, r1
 800d26a:	bc10      	pop	{r4}
 800d26c:	4770      	bx	lr

0800d26e <__sfputs_r>:
 800d26e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d270:	4606      	mov	r6, r0
 800d272:	460f      	mov	r7, r1
 800d274:	4614      	mov	r4, r2
 800d276:	18d5      	adds	r5, r2, r3
 800d278:	42ac      	cmp	r4, r5
 800d27a:	d101      	bne.n	800d280 <__sfputs_r+0x12>
 800d27c:	2000      	movs	r0, #0
 800d27e:	e007      	b.n	800d290 <__sfputs_r+0x22>
 800d280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d284:	463a      	mov	r2, r7
 800d286:	4630      	mov	r0, r6
 800d288:	f7ff ffdc 	bl	800d244 <__sfputc_r>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d1f3      	bne.n	800d278 <__sfputs_r+0xa>
 800d290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d294 <_vfiprintf_r>:
 800d294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d298:	460d      	mov	r5, r1
 800d29a:	b09d      	sub	sp, #116	@ 0x74
 800d29c:	4614      	mov	r4, r2
 800d29e:	4698      	mov	r8, r3
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	b118      	cbz	r0, 800d2ac <_vfiprintf_r+0x18>
 800d2a4:	6a03      	ldr	r3, [r0, #32]
 800d2a6:	b90b      	cbnz	r3, 800d2ac <_vfiprintf_r+0x18>
 800d2a8:	f7fe fc86 	bl	800bbb8 <__sinit>
 800d2ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2ae:	07d9      	lsls	r1, r3, #31
 800d2b0:	d405      	bmi.n	800d2be <_vfiprintf_r+0x2a>
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	059a      	lsls	r2, r3, #22
 800d2b6:	d402      	bmi.n	800d2be <_vfiprintf_r+0x2a>
 800d2b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ba:	f7fe fd96 	bl	800bdea <__retarget_lock_acquire_recursive>
 800d2be:	89ab      	ldrh	r3, [r5, #12]
 800d2c0:	071b      	lsls	r3, r3, #28
 800d2c2:	d501      	bpl.n	800d2c8 <_vfiprintf_r+0x34>
 800d2c4:	692b      	ldr	r3, [r5, #16]
 800d2c6:	b99b      	cbnz	r3, 800d2f0 <_vfiprintf_r+0x5c>
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	f000 f9e0 	bl	800d690 <__swsetup_r>
 800d2d0:	b170      	cbz	r0, 800d2f0 <_vfiprintf_r+0x5c>
 800d2d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d2d4:	07dc      	lsls	r4, r3, #31
 800d2d6:	d504      	bpl.n	800d2e2 <_vfiprintf_r+0x4e>
 800d2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2dc:	b01d      	add	sp, #116	@ 0x74
 800d2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2e2:	89ab      	ldrh	r3, [r5, #12]
 800d2e4:	0598      	lsls	r0, r3, #22
 800d2e6:	d4f7      	bmi.n	800d2d8 <_vfiprintf_r+0x44>
 800d2e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d2ea:	f7fe fd7f 	bl	800bdec <__retarget_lock_release_recursive>
 800d2ee:	e7f3      	b.n	800d2d8 <_vfiprintf_r+0x44>
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2f4:	2320      	movs	r3, #32
 800d2f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2fe:	2330      	movs	r3, #48	@ 0x30
 800d300:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d4b0 <_vfiprintf_r+0x21c>
 800d304:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d308:	f04f 0901 	mov.w	r9, #1
 800d30c:	4623      	mov	r3, r4
 800d30e:	469a      	mov	sl, r3
 800d310:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d314:	b10a      	cbz	r2, 800d31a <_vfiprintf_r+0x86>
 800d316:	2a25      	cmp	r2, #37	@ 0x25
 800d318:	d1f9      	bne.n	800d30e <_vfiprintf_r+0x7a>
 800d31a:	ebba 0b04 	subs.w	fp, sl, r4
 800d31e:	d00b      	beq.n	800d338 <_vfiprintf_r+0xa4>
 800d320:	465b      	mov	r3, fp
 800d322:	4622      	mov	r2, r4
 800d324:	4629      	mov	r1, r5
 800d326:	4630      	mov	r0, r6
 800d328:	f7ff ffa1 	bl	800d26e <__sfputs_r>
 800d32c:	3001      	adds	r0, #1
 800d32e:	f000 80a7 	beq.w	800d480 <_vfiprintf_r+0x1ec>
 800d332:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d334:	445a      	add	r2, fp
 800d336:	9209      	str	r2, [sp, #36]	@ 0x24
 800d338:	f89a 3000 	ldrb.w	r3, [sl]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 809f 	beq.w	800d480 <_vfiprintf_r+0x1ec>
 800d342:	2300      	movs	r3, #0
 800d344:	f04f 32ff 	mov.w	r2, #4294967295
 800d348:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d34c:	f10a 0a01 	add.w	sl, sl, #1
 800d350:	9304      	str	r3, [sp, #16]
 800d352:	9307      	str	r3, [sp, #28]
 800d354:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d358:	931a      	str	r3, [sp, #104]	@ 0x68
 800d35a:	4654      	mov	r4, sl
 800d35c:	2205      	movs	r2, #5
 800d35e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d362:	4853      	ldr	r0, [pc, #332]	@ (800d4b0 <_vfiprintf_r+0x21c>)
 800d364:	f7f2 ff0c 	bl	8000180 <memchr>
 800d368:	9a04      	ldr	r2, [sp, #16]
 800d36a:	b9d8      	cbnz	r0, 800d3a4 <_vfiprintf_r+0x110>
 800d36c:	06d1      	lsls	r1, r2, #27
 800d36e:	bf44      	itt	mi
 800d370:	2320      	movmi	r3, #32
 800d372:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d376:	0713      	lsls	r3, r2, #28
 800d378:	bf44      	itt	mi
 800d37a:	232b      	movmi	r3, #43	@ 0x2b
 800d37c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d380:	f89a 3000 	ldrb.w	r3, [sl]
 800d384:	2b2a      	cmp	r3, #42	@ 0x2a
 800d386:	d015      	beq.n	800d3b4 <_vfiprintf_r+0x120>
 800d388:	9a07      	ldr	r2, [sp, #28]
 800d38a:	4654      	mov	r4, sl
 800d38c:	2000      	movs	r0, #0
 800d38e:	f04f 0c0a 	mov.w	ip, #10
 800d392:	4621      	mov	r1, r4
 800d394:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d398:	3b30      	subs	r3, #48	@ 0x30
 800d39a:	2b09      	cmp	r3, #9
 800d39c:	d94b      	bls.n	800d436 <_vfiprintf_r+0x1a2>
 800d39e:	b1b0      	cbz	r0, 800d3ce <_vfiprintf_r+0x13a>
 800d3a0:	9207      	str	r2, [sp, #28]
 800d3a2:	e014      	b.n	800d3ce <_vfiprintf_r+0x13a>
 800d3a4:	eba0 0308 	sub.w	r3, r0, r8
 800d3a8:	fa09 f303 	lsl.w	r3, r9, r3
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	9304      	str	r3, [sp, #16]
 800d3b0:	46a2      	mov	sl, r4
 800d3b2:	e7d2      	b.n	800d35a <_vfiprintf_r+0xc6>
 800d3b4:	9b03      	ldr	r3, [sp, #12]
 800d3b6:	1d19      	adds	r1, r3, #4
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	9103      	str	r1, [sp, #12]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	bfbb      	ittet	lt
 800d3c0:	425b      	neglt	r3, r3
 800d3c2:	f042 0202 	orrlt.w	r2, r2, #2
 800d3c6:	9307      	strge	r3, [sp, #28]
 800d3c8:	9307      	strlt	r3, [sp, #28]
 800d3ca:	bfb8      	it	lt
 800d3cc:	9204      	strlt	r2, [sp, #16]
 800d3ce:	7823      	ldrb	r3, [r4, #0]
 800d3d0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3d2:	d10a      	bne.n	800d3ea <_vfiprintf_r+0x156>
 800d3d4:	7863      	ldrb	r3, [r4, #1]
 800d3d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3d8:	d132      	bne.n	800d440 <_vfiprintf_r+0x1ac>
 800d3da:	9b03      	ldr	r3, [sp, #12]
 800d3dc:	1d1a      	adds	r2, r3, #4
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	9203      	str	r2, [sp, #12]
 800d3e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3e6:	3402      	adds	r4, #2
 800d3e8:	9305      	str	r3, [sp, #20]
 800d3ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d4b4 <_vfiprintf_r+0x220>
 800d3ee:	7821      	ldrb	r1, [r4, #0]
 800d3f0:	2203      	movs	r2, #3
 800d3f2:	4650      	mov	r0, sl
 800d3f4:	f7f2 fec4 	bl	8000180 <memchr>
 800d3f8:	b138      	cbz	r0, 800d40a <_vfiprintf_r+0x176>
 800d3fa:	9b04      	ldr	r3, [sp, #16]
 800d3fc:	eba0 000a 	sub.w	r0, r0, sl
 800d400:	2240      	movs	r2, #64	@ 0x40
 800d402:	4082      	lsls	r2, r0
 800d404:	4313      	orrs	r3, r2
 800d406:	3401      	adds	r4, #1
 800d408:	9304      	str	r3, [sp, #16]
 800d40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d40e:	482a      	ldr	r0, [pc, #168]	@ (800d4b8 <_vfiprintf_r+0x224>)
 800d410:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d414:	2206      	movs	r2, #6
 800d416:	f7f2 feb3 	bl	8000180 <memchr>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	d03f      	beq.n	800d49e <_vfiprintf_r+0x20a>
 800d41e:	4b27      	ldr	r3, [pc, #156]	@ (800d4bc <_vfiprintf_r+0x228>)
 800d420:	bb1b      	cbnz	r3, 800d46a <_vfiprintf_r+0x1d6>
 800d422:	9b03      	ldr	r3, [sp, #12]
 800d424:	3307      	adds	r3, #7
 800d426:	f023 0307 	bic.w	r3, r3, #7
 800d42a:	3308      	adds	r3, #8
 800d42c:	9303      	str	r3, [sp, #12]
 800d42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d430:	443b      	add	r3, r7
 800d432:	9309      	str	r3, [sp, #36]	@ 0x24
 800d434:	e76a      	b.n	800d30c <_vfiprintf_r+0x78>
 800d436:	fb0c 3202 	mla	r2, ip, r2, r3
 800d43a:	460c      	mov	r4, r1
 800d43c:	2001      	movs	r0, #1
 800d43e:	e7a8      	b.n	800d392 <_vfiprintf_r+0xfe>
 800d440:	2300      	movs	r3, #0
 800d442:	3401      	adds	r4, #1
 800d444:	9305      	str	r3, [sp, #20]
 800d446:	4619      	mov	r1, r3
 800d448:	f04f 0c0a 	mov.w	ip, #10
 800d44c:	4620      	mov	r0, r4
 800d44e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d452:	3a30      	subs	r2, #48	@ 0x30
 800d454:	2a09      	cmp	r2, #9
 800d456:	d903      	bls.n	800d460 <_vfiprintf_r+0x1cc>
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d0c6      	beq.n	800d3ea <_vfiprintf_r+0x156>
 800d45c:	9105      	str	r1, [sp, #20]
 800d45e:	e7c4      	b.n	800d3ea <_vfiprintf_r+0x156>
 800d460:	fb0c 2101 	mla	r1, ip, r1, r2
 800d464:	4604      	mov	r4, r0
 800d466:	2301      	movs	r3, #1
 800d468:	e7f0      	b.n	800d44c <_vfiprintf_r+0x1b8>
 800d46a:	ab03      	add	r3, sp, #12
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	462a      	mov	r2, r5
 800d470:	4b13      	ldr	r3, [pc, #76]	@ (800d4c0 <_vfiprintf_r+0x22c>)
 800d472:	a904      	add	r1, sp, #16
 800d474:	4630      	mov	r0, r6
 800d476:	f7fd ff59 	bl	800b32c <_printf_float>
 800d47a:	4607      	mov	r7, r0
 800d47c:	1c78      	adds	r0, r7, #1
 800d47e:	d1d6      	bne.n	800d42e <_vfiprintf_r+0x19a>
 800d480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d482:	07d9      	lsls	r1, r3, #31
 800d484:	d405      	bmi.n	800d492 <_vfiprintf_r+0x1fe>
 800d486:	89ab      	ldrh	r3, [r5, #12]
 800d488:	059a      	lsls	r2, r3, #22
 800d48a:	d402      	bmi.n	800d492 <_vfiprintf_r+0x1fe>
 800d48c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d48e:	f7fe fcad 	bl	800bdec <__retarget_lock_release_recursive>
 800d492:	89ab      	ldrh	r3, [r5, #12]
 800d494:	065b      	lsls	r3, r3, #25
 800d496:	f53f af1f 	bmi.w	800d2d8 <_vfiprintf_r+0x44>
 800d49a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d49c:	e71e      	b.n	800d2dc <_vfiprintf_r+0x48>
 800d49e:	ab03      	add	r3, sp, #12
 800d4a0:	9300      	str	r3, [sp, #0]
 800d4a2:	462a      	mov	r2, r5
 800d4a4:	4b06      	ldr	r3, [pc, #24]	@ (800d4c0 <_vfiprintf_r+0x22c>)
 800d4a6:	a904      	add	r1, sp, #16
 800d4a8:	4630      	mov	r0, r6
 800d4aa:	f7fe f9d9 	bl	800b860 <_printf_i>
 800d4ae:	e7e4      	b.n	800d47a <_vfiprintf_r+0x1e6>
 800d4b0:	0800e840 	.word	0x0800e840
 800d4b4:	0800e846 	.word	0x0800e846
 800d4b8:	0800e84a 	.word	0x0800e84a
 800d4bc:	0800b32d 	.word	0x0800b32d
 800d4c0:	0800d26f 	.word	0x0800d26f

0800d4c4 <__sflush_r>:
 800d4c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ca:	0716      	lsls	r6, r2, #28
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	460c      	mov	r4, r1
 800d4d0:	d454      	bmi.n	800d57c <__sflush_r+0xb8>
 800d4d2:	684b      	ldr	r3, [r1, #4]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	dc02      	bgt.n	800d4de <__sflush_r+0x1a>
 800d4d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	dd48      	ble.n	800d570 <__sflush_r+0xac>
 800d4de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4e0:	2e00      	cmp	r6, #0
 800d4e2:	d045      	beq.n	800d570 <__sflush_r+0xac>
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d4ea:	682f      	ldr	r7, [r5, #0]
 800d4ec:	6a21      	ldr	r1, [r4, #32]
 800d4ee:	602b      	str	r3, [r5, #0]
 800d4f0:	d030      	beq.n	800d554 <__sflush_r+0x90>
 800d4f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d4f4:	89a3      	ldrh	r3, [r4, #12]
 800d4f6:	0759      	lsls	r1, r3, #29
 800d4f8:	d505      	bpl.n	800d506 <__sflush_r+0x42>
 800d4fa:	6863      	ldr	r3, [r4, #4]
 800d4fc:	1ad2      	subs	r2, r2, r3
 800d4fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d500:	b10b      	cbz	r3, 800d506 <__sflush_r+0x42>
 800d502:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d504:	1ad2      	subs	r2, r2, r3
 800d506:	2300      	movs	r3, #0
 800d508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d50a:	6a21      	ldr	r1, [r4, #32]
 800d50c:	4628      	mov	r0, r5
 800d50e:	47b0      	blx	r6
 800d510:	1c43      	adds	r3, r0, #1
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	d106      	bne.n	800d524 <__sflush_r+0x60>
 800d516:	6829      	ldr	r1, [r5, #0]
 800d518:	291d      	cmp	r1, #29
 800d51a:	d82b      	bhi.n	800d574 <__sflush_r+0xb0>
 800d51c:	4a28      	ldr	r2, [pc, #160]	@ (800d5c0 <__sflush_r+0xfc>)
 800d51e:	410a      	asrs	r2, r1
 800d520:	07d6      	lsls	r6, r2, #31
 800d522:	d427      	bmi.n	800d574 <__sflush_r+0xb0>
 800d524:	2200      	movs	r2, #0
 800d526:	6062      	str	r2, [r4, #4]
 800d528:	04d9      	lsls	r1, r3, #19
 800d52a:	6922      	ldr	r2, [r4, #16]
 800d52c:	6022      	str	r2, [r4, #0]
 800d52e:	d504      	bpl.n	800d53a <__sflush_r+0x76>
 800d530:	1c42      	adds	r2, r0, #1
 800d532:	d101      	bne.n	800d538 <__sflush_r+0x74>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	b903      	cbnz	r3, 800d53a <__sflush_r+0x76>
 800d538:	6560      	str	r0, [r4, #84]	@ 0x54
 800d53a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d53c:	602f      	str	r7, [r5, #0]
 800d53e:	b1b9      	cbz	r1, 800d570 <__sflush_r+0xac>
 800d540:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d544:	4299      	cmp	r1, r3
 800d546:	d002      	beq.n	800d54e <__sflush_r+0x8a>
 800d548:	4628      	mov	r0, r5
 800d54a:	f7ff fab1 	bl	800cab0 <_free_r>
 800d54e:	2300      	movs	r3, #0
 800d550:	6363      	str	r3, [r4, #52]	@ 0x34
 800d552:	e00d      	b.n	800d570 <__sflush_r+0xac>
 800d554:	2301      	movs	r3, #1
 800d556:	4628      	mov	r0, r5
 800d558:	47b0      	blx	r6
 800d55a:	4602      	mov	r2, r0
 800d55c:	1c50      	adds	r0, r2, #1
 800d55e:	d1c9      	bne.n	800d4f4 <__sflush_r+0x30>
 800d560:	682b      	ldr	r3, [r5, #0]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0c6      	beq.n	800d4f4 <__sflush_r+0x30>
 800d566:	2b1d      	cmp	r3, #29
 800d568:	d001      	beq.n	800d56e <__sflush_r+0xaa>
 800d56a:	2b16      	cmp	r3, #22
 800d56c:	d11d      	bne.n	800d5aa <__sflush_r+0xe6>
 800d56e:	602f      	str	r7, [r5, #0]
 800d570:	2000      	movs	r0, #0
 800d572:	e021      	b.n	800d5b8 <__sflush_r+0xf4>
 800d574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d578:	b21b      	sxth	r3, r3
 800d57a:	e01a      	b.n	800d5b2 <__sflush_r+0xee>
 800d57c:	690f      	ldr	r7, [r1, #16]
 800d57e:	2f00      	cmp	r7, #0
 800d580:	d0f6      	beq.n	800d570 <__sflush_r+0xac>
 800d582:	0793      	lsls	r3, r2, #30
 800d584:	680e      	ldr	r6, [r1, #0]
 800d586:	bf08      	it	eq
 800d588:	694b      	ldreq	r3, [r1, #20]
 800d58a:	600f      	str	r7, [r1, #0]
 800d58c:	bf18      	it	ne
 800d58e:	2300      	movne	r3, #0
 800d590:	1bf6      	subs	r6, r6, r7
 800d592:	608b      	str	r3, [r1, #8]
 800d594:	2e00      	cmp	r6, #0
 800d596:	ddeb      	ble.n	800d570 <__sflush_r+0xac>
 800d598:	6a21      	ldr	r1, [r4, #32]
 800d59a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800d59e:	4633      	mov	r3, r6
 800d5a0:	463a      	mov	r2, r7
 800d5a2:	4628      	mov	r0, r5
 800d5a4:	47e0      	blx	ip
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	dc07      	bgt.n	800d5ba <__sflush_r+0xf6>
 800d5aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5b2:	81a3      	strh	r3, [r4, #12]
 800d5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5ba:	4407      	add	r7, r0
 800d5bc:	1a36      	subs	r6, r6, r0
 800d5be:	e7e9      	b.n	800d594 <__sflush_r+0xd0>
 800d5c0:	dfbffffe 	.word	0xdfbffffe

0800d5c4 <_fflush_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	690b      	ldr	r3, [r1, #16]
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	460c      	mov	r4, r1
 800d5cc:	b913      	cbnz	r3, 800d5d4 <_fflush_r+0x10>
 800d5ce:	2500      	movs	r5, #0
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	bd38      	pop	{r3, r4, r5, pc}
 800d5d4:	b118      	cbz	r0, 800d5de <_fflush_r+0x1a>
 800d5d6:	6a03      	ldr	r3, [r0, #32]
 800d5d8:	b90b      	cbnz	r3, 800d5de <_fflush_r+0x1a>
 800d5da:	f7fe faed 	bl	800bbb8 <__sinit>
 800d5de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d0f3      	beq.n	800d5ce <_fflush_r+0xa>
 800d5e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d5e8:	07d0      	lsls	r0, r2, #31
 800d5ea:	d404      	bmi.n	800d5f6 <_fflush_r+0x32>
 800d5ec:	0599      	lsls	r1, r3, #22
 800d5ee:	d402      	bmi.n	800d5f6 <_fflush_r+0x32>
 800d5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5f2:	f7fe fbfa 	bl	800bdea <__retarget_lock_acquire_recursive>
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	f7ff ff63 	bl	800d4c4 <__sflush_r>
 800d5fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d600:	07da      	lsls	r2, r3, #31
 800d602:	4605      	mov	r5, r0
 800d604:	d4e4      	bmi.n	800d5d0 <_fflush_r+0xc>
 800d606:	89a3      	ldrh	r3, [r4, #12]
 800d608:	059b      	lsls	r3, r3, #22
 800d60a:	d4e1      	bmi.n	800d5d0 <_fflush_r+0xc>
 800d60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d60e:	f7fe fbed 	bl	800bdec <__retarget_lock_release_recursive>
 800d612:	e7dd      	b.n	800d5d0 <_fflush_r+0xc>

0800d614 <__swbuf_r>:
 800d614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d616:	460e      	mov	r6, r1
 800d618:	4614      	mov	r4, r2
 800d61a:	4605      	mov	r5, r0
 800d61c:	b118      	cbz	r0, 800d626 <__swbuf_r+0x12>
 800d61e:	6a03      	ldr	r3, [r0, #32]
 800d620:	b90b      	cbnz	r3, 800d626 <__swbuf_r+0x12>
 800d622:	f7fe fac9 	bl	800bbb8 <__sinit>
 800d626:	69a3      	ldr	r3, [r4, #24]
 800d628:	60a3      	str	r3, [r4, #8]
 800d62a:	89a3      	ldrh	r3, [r4, #12]
 800d62c:	071a      	lsls	r2, r3, #28
 800d62e:	d501      	bpl.n	800d634 <__swbuf_r+0x20>
 800d630:	6923      	ldr	r3, [r4, #16]
 800d632:	b943      	cbnz	r3, 800d646 <__swbuf_r+0x32>
 800d634:	4621      	mov	r1, r4
 800d636:	4628      	mov	r0, r5
 800d638:	f000 f82a 	bl	800d690 <__swsetup_r>
 800d63c:	b118      	cbz	r0, 800d646 <__swbuf_r+0x32>
 800d63e:	f04f 37ff 	mov.w	r7, #4294967295
 800d642:	4638      	mov	r0, r7
 800d644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d646:	6823      	ldr	r3, [r4, #0]
 800d648:	6922      	ldr	r2, [r4, #16]
 800d64a:	1a98      	subs	r0, r3, r2
 800d64c:	6963      	ldr	r3, [r4, #20]
 800d64e:	b2f6      	uxtb	r6, r6
 800d650:	4283      	cmp	r3, r0
 800d652:	4637      	mov	r7, r6
 800d654:	dc05      	bgt.n	800d662 <__swbuf_r+0x4e>
 800d656:	4621      	mov	r1, r4
 800d658:	4628      	mov	r0, r5
 800d65a:	f7ff ffb3 	bl	800d5c4 <_fflush_r>
 800d65e:	2800      	cmp	r0, #0
 800d660:	d1ed      	bne.n	800d63e <__swbuf_r+0x2a>
 800d662:	68a3      	ldr	r3, [r4, #8]
 800d664:	3b01      	subs	r3, #1
 800d666:	60a3      	str	r3, [r4, #8]
 800d668:	6823      	ldr	r3, [r4, #0]
 800d66a:	1c5a      	adds	r2, r3, #1
 800d66c:	6022      	str	r2, [r4, #0]
 800d66e:	701e      	strb	r6, [r3, #0]
 800d670:	6962      	ldr	r2, [r4, #20]
 800d672:	1c43      	adds	r3, r0, #1
 800d674:	429a      	cmp	r2, r3
 800d676:	d004      	beq.n	800d682 <__swbuf_r+0x6e>
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	07db      	lsls	r3, r3, #31
 800d67c:	d5e1      	bpl.n	800d642 <__swbuf_r+0x2e>
 800d67e:	2e0a      	cmp	r6, #10
 800d680:	d1df      	bne.n	800d642 <__swbuf_r+0x2e>
 800d682:	4621      	mov	r1, r4
 800d684:	4628      	mov	r0, r5
 800d686:	f7ff ff9d 	bl	800d5c4 <_fflush_r>
 800d68a:	2800      	cmp	r0, #0
 800d68c:	d0d9      	beq.n	800d642 <__swbuf_r+0x2e>
 800d68e:	e7d6      	b.n	800d63e <__swbuf_r+0x2a>

0800d690 <__swsetup_r>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4b29      	ldr	r3, [pc, #164]	@ (800d738 <__swsetup_r+0xa8>)
 800d694:	4605      	mov	r5, r0
 800d696:	6818      	ldr	r0, [r3, #0]
 800d698:	460c      	mov	r4, r1
 800d69a:	b118      	cbz	r0, 800d6a4 <__swsetup_r+0x14>
 800d69c:	6a03      	ldr	r3, [r0, #32]
 800d69e:	b90b      	cbnz	r3, 800d6a4 <__swsetup_r+0x14>
 800d6a0:	f7fe fa8a 	bl	800bbb8 <__sinit>
 800d6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6a8:	0719      	lsls	r1, r3, #28
 800d6aa:	d422      	bmi.n	800d6f2 <__swsetup_r+0x62>
 800d6ac:	06da      	lsls	r2, r3, #27
 800d6ae:	d407      	bmi.n	800d6c0 <__swsetup_r+0x30>
 800d6b0:	2209      	movs	r2, #9
 800d6b2:	602a      	str	r2, [r5, #0]
 800d6b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6b8:	81a3      	strh	r3, [r4, #12]
 800d6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d6be:	e033      	b.n	800d728 <__swsetup_r+0x98>
 800d6c0:	0758      	lsls	r0, r3, #29
 800d6c2:	d512      	bpl.n	800d6ea <__swsetup_r+0x5a>
 800d6c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6c6:	b141      	cbz	r1, 800d6da <__swsetup_r+0x4a>
 800d6c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6cc:	4299      	cmp	r1, r3
 800d6ce:	d002      	beq.n	800d6d6 <__swsetup_r+0x46>
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f7ff f9ed 	bl	800cab0 <_free_r>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6da:	89a3      	ldrh	r3, [r4, #12]
 800d6dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d6e0:	81a3      	strh	r3, [r4, #12]
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	6063      	str	r3, [r4, #4]
 800d6e6:	6923      	ldr	r3, [r4, #16]
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	89a3      	ldrh	r3, [r4, #12]
 800d6ec:	f043 0308 	orr.w	r3, r3, #8
 800d6f0:	81a3      	strh	r3, [r4, #12]
 800d6f2:	6923      	ldr	r3, [r4, #16]
 800d6f4:	b94b      	cbnz	r3, 800d70a <__swsetup_r+0x7a>
 800d6f6:	89a3      	ldrh	r3, [r4, #12]
 800d6f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d700:	d003      	beq.n	800d70a <__swsetup_r+0x7a>
 800d702:	4621      	mov	r1, r4
 800d704:	4628      	mov	r0, r5
 800d706:	f000 f8a3 	bl	800d850 <__smakebuf_r>
 800d70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d70e:	f013 0201 	ands.w	r2, r3, #1
 800d712:	d00a      	beq.n	800d72a <__swsetup_r+0x9a>
 800d714:	2200      	movs	r2, #0
 800d716:	60a2      	str	r2, [r4, #8]
 800d718:	6962      	ldr	r2, [r4, #20]
 800d71a:	4252      	negs	r2, r2
 800d71c:	61a2      	str	r2, [r4, #24]
 800d71e:	6922      	ldr	r2, [r4, #16]
 800d720:	b942      	cbnz	r2, 800d734 <__swsetup_r+0xa4>
 800d722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d726:	d1c5      	bne.n	800d6b4 <__swsetup_r+0x24>
 800d728:	bd38      	pop	{r3, r4, r5, pc}
 800d72a:	0799      	lsls	r1, r3, #30
 800d72c:	bf58      	it	pl
 800d72e:	6962      	ldrpl	r2, [r4, #20]
 800d730:	60a2      	str	r2, [r4, #8]
 800d732:	e7f4      	b.n	800d71e <__swsetup_r+0x8e>
 800d734:	2000      	movs	r0, #0
 800d736:	e7f7      	b.n	800d728 <__swsetup_r+0x98>
 800d738:	2000002c 	.word	0x2000002c

0800d73c <__assert_func>:
 800d73c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d73e:	4614      	mov	r4, r2
 800d740:	461a      	mov	r2, r3
 800d742:	4b09      	ldr	r3, [pc, #36]	@ (800d768 <__assert_func+0x2c>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4605      	mov	r5, r0
 800d748:	68d8      	ldr	r0, [r3, #12]
 800d74a:	b954      	cbnz	r4, 800d762 <__assert_func+0x26>
 800d74c:	4b07      	ldr	r3, [pc, #28]	@ (800d76c <__assert_func+0x30>)
 800d74e:	461c      	mov	r4, r3
 800d750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d754:	9100      	str	r1, [sp, #0]
 800d756:	462b      	mov	r3, r5
 800d758:	4905      	ldr	r1, [pc, #20]	@ (800d770 <__assert_func+0x34>)
 800d75a:	f000 f841 	bl	800d7e0 <fiprintf>
 800d75e:	f000 f8d5 	bl	800d90c <abort>
 800d762:	4b04      	ldr	r3, [pc, #16]	@ (800d774 <__assert_func+0x38>)
 800d764:	e7f4      	b.n	800d750 <__assert_func+0x14>
 800d766:	bf00      	nop
 800d768:	2000002c 	.word	0x2000002c
 800d76c:	0800e896 	.word	0x0800e896
 800d770:	0800e868 	.word	0x0800e868
 800d774:	0800e85b 	.word	0x0800e85b

0800d778 <_calloc_r>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	fba1 5402 	umull	r5, r4, r1, r2
 800d77e:	b93c      	cbnz	r4, 800d790 <_calloc_r+0x18>
 800d780:	4629      	mov	r1, r5
 800d782:	f7fd fca9 	bl	800b0d8 <_malloc_r>
 800d786:	4606      	mov	r6, r0
 800d788:	b928      	cbnz	r0, 800d796 <_calloc_r+0x1e>
 800d78a:	2600      	movs	r6, #0
 800d78c:	4630      	mov	r0, r6
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	220c      	movs	r2, #12
 800d792:	6002      	str	r2, [r0, #0]
 800d794:	e7f9      	b.n	800d78a <_calloc_r+0x12>
 800d796:	462a      	mov	r2, r5
 800d798:	4621      	mov	r1, r4
 800d79a:	f7fe fa98 	bl	800bcce <memset>
 800d79e:	e7f5      	b.n	800d78c <_calloc_r+0x14>

0800d7a0 <__ascii_mbtowc>:
 800d7a0:	b082      	sub	sp, #8
 800d7a2:	b901      	cbnz	r1, 800d7a6 <__ascii_mbtowc+0x6>
 800d7a4:	a901      	add	r1, sp, #4
 800d7a6:	b142      	cbz	r2, 800d7ba <__ascii_mbtowc+0x1a>
 800d7a8:	b14b      	cbz	r3, 800d7be <__ascii_mbtowc+0x1e>
 800d7aa:	7813      	ldrb	r3, [r2, #0]
 800d7ac:	600b      	str	r3, [r1, #0]
 800d7ae:	7812      	ldrb	r2, [r2, #0]
 800d7b0:	1e10      	subs	r0, r2, #0
 800d7b2:	bf18      	it	ne
 800d7b4:	2001      	movne	r0, #1
 800d7b6:	b002      	add	sp, #8
 800d7b8:	4770      	bx	lr
 800d7ba:	4610      	mov	r0, r2
 800d7bc:	e7fb      	b.n	800d7b6 <__ascii_mbtowc+0x16>
 800d7be:	f06f 0001 	mvn.w	r0, #1
 800d7c2:	e7f8      	b.n	800d7b6 <__ascii_mbtowc+0x16>

0800d7c4 <__ascii_wctomb>:
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	4608      	mov	r0, r1
 800d7c8:	b141      	cbz	r1, 800d7dc <__ascii_wctomb+0x18>
 800d7ca:	2aff      	cmp	r2, #255	@ 0xff
 800d7cc:	d904      	bls.n	800d7d8 <__ascii_wctomb+0x14>
 800d7ce:	228a      	movs	r2, #138	@ 0x8a
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d6:	4770      	bx	lr
 800d7d8:	700a      	strb	r2, [r1, #0]
 800d7da:	2001      	movs	r0, #1
 800d7dc:	4770      	bx	lr
	...

0800d7e0 <fiprintf>:
 800d7e0:	b40e      	push	{r1, r2, r3}
 800d7e2:	b503      	push	{r0, r1, lr}
 800d7e4:	4601      	mov	r1, r0
 800d7e6:	ab03      	add	r3, sp, #12
 800d7e8:	4805      	ldr	r0, [pc, #20]	@ (800d800 <fiprintf+0x20>)
 800d7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7ee:	6800      	ldr	r0, [r0, #0]
 800d7f0:	9301      	str	r3, [sp, #4]
 800d7f2:	f7ff fd4f 	bl	800d294 <_vfiprintf_r>
 800d7f6:	b002      	add	sp, #8
 800d7f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7fc:	b003      	add	sp, #12
 800d7fe:	4770      	bx	lr
 800d800:	2000002c 	.word	0x2000002c

0800d804 <__swhatbuf_r>:
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	460c      	mov	r4, r1
 800d808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80c:	2900      	cmp	r1, #0
 800d80e:	b096      	sub	sp, #88	@ 0x58
 800d810:	4615      	mov	r5, r2
 800d812:	461e      	mov	r6, r3
 800d814:	da0d      	bge.n	800d832 <__swhatbuf_r+0x2e>
 800d816:	89a3      	ldrh	r3, [r4, #12]
 800d818:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d81c:	f04f 0100 	mov.w	r1, #0
 800d820:	bf14      	ite	ne
 800d822:	2340      	movne	r3, #64	@ 0x40
 800d824:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d828:	2000      	movs	r0, #0
 800d82a:	6031      	str	r1, [r6, #0]
 800d82c:	602b      	str	r3, [r5, #0]
 800d82e:	b016      	add	sp, #88	@ 0x58
 800d830:	bd70      	pop	{r4, r5, r6, pc}
 800d832:	466a      	mov	r2, sp
 800d834:	f000 f848 	bl	800d8c8 <_fstat_r>
 800d838:	2800      	cmp	r0, #0
 800d83a:	dbec      	blt.n	800d816 <__swhatbuf_r+0x12>
 800d83c:	9901      	ldr	r1, [sp, #4]
 800d83e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d842:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d846:	4259      	negs	r1, r3
 800d848:	4159      	adcs	r1, r3
 800d84a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d84e:	e7eb      	b.n	800d828 <__swhatbuf_r+0x24>

0800d850 <__smakebuf_r>:
 800d850:	898b      	ldrh	r3, [r1, #12]
 800d852:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d854:	079d      	lsls	r5, r3, #30
 800d856:	4606      	mov	r6, r0
 800d858:	460c      	mov	r4, r1
 800d85a:	d507      	bpl.n	800d86c <__smakebuf_r+0x1c>
 800d85c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d860:	6023      	str	r3, [r4, #0]
 800d862:	6123      	str	r3, [r4, #16]
 800d864:	2301      	movs	r3, #1
 800d866:	6163      	str	r3, [r4, #20]
 800d868:	b003      	add	sp, #12
 800d86a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86c:	ab01      	add	r3, sp, #4
 800d86e:	466a      	mov	r2, sp
 800d870:	f7ff ffc8 	bl	800d804 <__swhatbuf_r>
 800d874:	9f00      	ldr	r7, [sp, #0]
 800d876:	4605      	mov	r5, r0
 800d878:	4639      	mov	r1, r7
 800d87a:	4630      	mov	r0, r6
 800d87c:	f7fd fc2c 	bl	800b0d8 <_malloc_r>
 800d880:	b948      	cbnz	r0, 800d896 <__smakebuf_r+0x46>
 800d882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d886:	059a      	lsls	r2, r3, #22
 800d888:	d4ee      	bmi.n	800d868 <__smakebuf_r+0x18>
 800d88a:	f023 0303 	bic.w	r3, r3, #3
 800d88e:	f043 0302 	orr.w	r3, r3, #2
 800d892:	81a3      	strh	r3, [r4, #12]
 800d894:	e7e2      	b.n	800d85c <__smakebuf_r+0xc>
 800d896:	89a3      	ldrh	r3, [r4, #12]
 800d898:	6020      	str	r0, [r4, #0]
 800d89a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d89e:	81a3      	strh	r3, [r4, #12]
 800d8a0:	9b01      	ldr	r3, [sp, #4]
 800d8a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8a6:	b15b      	cbz	r3, 800d8c0 <__smakebuf_r+0x70>
 800d8a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f000 f81d 	bl	800d8ec <_isatty_r>
 800d8b2:	b128      	cbz	r0, 800d8c0 <__smakebuf_r+0x70>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	f023 0303 	bic.w	r3, r3, #3
 800d8ba:	f043 0301 	orr.w	r3, r3, #1
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	89a3      	ldrh	r3, [r4, #12]
 800d8c2:	431d      	orrs	r5, r3
 800d8c4:	81a5      	strh	r5, [r4, #12]
 800d8c6:	e7cf      	b.n	800d868 <__smakebuf_r+0x18>

0800d8c8 <_fstat_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4d07      	ldr	r5, [pc, #28]	@ (800d8e8 <_fstat_r+0x20>)
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	4604      	mov	r4, r0
 800d8d0:	4608      	mov	r0, r1
 800d8d2:	4611      	mov	r1, r2
 800d8d4:	602b      	str	r3, [r5, #0]
 800d8d6:	f7f4 face 	bl	8001e76 <_fstat>
 800d8da:	1c43      	adds	r3, r0, #1
 800d8dc:	d102      	bne.n	800d8e4 <_fstat_r+0x1c>
 800d8de:	682b      	ldr	r3, [r5, #0]
 800d8e0:	b103      	cbz	r3, 800d8e4 <_fstat_r+0x1c>
 800d8e2:	6023      	str	r3, [r4, #0]
 800d8e4:	bd38      	pop	{r3, r4, r5, pc}
 800d8e6:	bf00      	nop
 800d8e8:	20000f90 	.word	0x20000f90

0800d8ec <_isatty_r>:
 800d8ec:	b538      	push	{r3, r4, r5, lr}
 800d8ee:	4d06      	ldr	r5, [pc, #24]	@ (800d908 <_isatty_r+0x1c>)
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	4604      	mov	r4, r0
 800d8f4:	4608      	mov	r0, r1
 800d8f6:	602b      	str	r3, [r5, #0]
 800d8f8:	f7f4 fac2 	bl	8001e80 <_isatty>
 800d8fc:	1c43      	adds	r3, r0, #1
 800d8fe:	d102      	bne.n	800d906 <_isatty_r+0x1a>
 800d900:	682b      	ldr	r3, [r5, #0]
 800d902:	b103      	cbz	r3, 800d906 <_isatty_r+0x1a>
 800d904:	6023      	str	r3, [r4, #0]
 800d906:	bd38      	pop	{r3, r4, r5, pc}
 800d908:	20000f90 	.word	0x20000f90

0800d90c <abort>:
 800d90c:	b508      	push	{r3, lr}
 800d90e:	2006      	movs	r0, #6
 800d910:	f000 f82c 	bl	800d96c <raise>
 800d914:	2001      	movs	r0, #1
 800d916:	f7f4 fa87 	bl	8001e28 <_exit>

0800d91a <_raise_r>:
 800d91a:	291f      	cmp	r1, #31
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	4605      	mov	r5, r0
 800d920:	460c      	mov	r4, r1
 800d922:	d904      	bls.n	800d92e <_raise_r+0x14>
 800d924:	2316      	movs	r3, #22
 800d926:	6003      	str	r3, [r0, #0]
 800d928:	f04f 30ff 	mov.w	r0, #4294967295
 800d92c:	bd38      	pop	{r3, r4, r5, pc}
 800d92e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d930:	b112      	cbz	r2, 800d938 <_raise_r+0x1e>
 800d932:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d936:	b94b      	cbnz	r3, 800d94c <_raise_r+0x32>
 800d938:	4628      	mov	r0, r5
 800d93a:	f000 f831 	bl	800d9a0 <_getpid_r>
 800d93e:	4622      	mov	r2, r4
 800d940:	4601      	mov	r1, r0
 800d942:	4628      	mov	r0, r5
 800d944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d948:	f000 b818 	b.w	800d97c <_kill_r>
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d00a      	beq.n	800d966 <_raise_r+0x4c>
 800d950:	1c59      	adds	r1, r3, #1
 800d952:	d103      	bne.n	800d95c <_raise_r+0x42>
 800d954:	2316      	movs	r3, #22
 800d956:	6003      	str	r3, [r0, #0]
 800d958:	2001      	movs	r0, #1
 800d95a:	e7e7      	b.n	800d92c <_raise_r+0x12>
 800d95c:	2100      	movs	r1, #0
 800d95e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d962:	4620      	mov	r0, r4
 800d964:	4798      	blx	r3
 800d966:	2000      	movs	r0, #0
 800d968:	e7e0      	b.n	800d92c <_raise_r+0x12>
	...

0800d96c <raise>:
 800d96c:	4b02      	ldr	r3, [pc, #8]	@ (800d978 <raise+0xc>)
 800d96e:	4601      	mov	r1, r0
 800d970:	6818      	ldr	r0, [r3, #0]
 800d972:	f7ff bfd2 	b.w	800d91a <_raise_r>
 800d976:	bf00      	nop
 800d978:	2000002c 	.word	0x2000002c

0800d97c <_kill_r>:
 800d97c:	b538      	push	{r3, r4, r5, lr}
 800d97e:	4d07      	ldr	r5, [pc, #28]	@ (800d99c <_kill_r+0x20>)
 800d980:	2300      	movs	r3, #0
 800d982:	4604      	mov	r4, r0
 800d984:	4608      	mov	r0, r1
 800d986:	4611      	mov	r1, r2
 800d988:	602b      	str	r3, [r5, #0]
 800d98a:	f7f4 fa45 	bl	8001e18 <_kill>
 800d98e:	1c43      	adds	r3, r0, #1
 800d990:	d102      	bne.n	800d998 <_kill_r+0x1c>
 800d992:	682b      	ldr	r3, [r5, #0]
 800d994:	b103      	cbz	r3, 800d998 <_kill_r+0x1c>
 800d996:	6023      	str	r3, [r4, #0]
 800d998:	bd38      	pop	{r3, r4, r5, pc}
 800d99a:	bf00      	nop
 800d99c:	20000f90 	.word	0x20000f90

0800d9a0 <_getpid_r>:
 800d9a0:	f7f4 ba38 	b.w	8001e14 <_getpid>

0800d9a4 <_init>:
 800d9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9a6:	bf00      	nop
 800d9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9aa:	bc08      	pop	{r3}
 800d9ac:	469e      	mov	lr, r3
 800d9ae:	4770      	bx	lr

0800d9b0 <_fini>:
 800d9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9b2:	bf00      	nop
 800d9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9b6:	bc08      	pop	{r3}
 800d9b8:	469e      	mov	lr, r3
 800d9ba:	4770      	bx	lr
